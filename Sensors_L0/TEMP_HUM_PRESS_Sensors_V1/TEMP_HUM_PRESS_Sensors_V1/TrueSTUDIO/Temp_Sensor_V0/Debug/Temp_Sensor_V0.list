
Temp_Sensor_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b84  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003c44  08003c44  00013c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003cf0  08003cf0  00013cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003cf8  08003cf8  00013cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003cfc  08003cfc  00013cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000005c  20000000  08003d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000016c  2000005c  08003d5c  0002005c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001c8  08003d5c  000201c8  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 10 .debug_line   000050f2  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0001091b  00000000  00000000  00025176  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000211d  00000000  00000000  00035a91  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000948  00000000  00000000  00037bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000850  00000000  00000000  000384f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000031d5  00000000  00000000  00038d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003bf1d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001fa8  00000000  00000000  0003bf9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c2c 	.word	0x08003c2c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08003c2c 	.word	0x08003c2c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	1c08      	adds	r0, r1, #0
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	b083      	sub	sp, #12
 8000444:	000d      	movs	r5, r1
 8000446:	4692      	mov	sl, r2
 8000448:	4699      	mov	r9, r3
 800044a:	428b      	cmp	r3, r1
 800044c:	d82f      	bhi.n	80004ae <__udivmoddi4+0x7a>
 800044e:	d02c      	beq.n	80004aa <__udivmoddi4+0x76>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ae 	bl	80005b4 <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8a9 	bl	80005b4 <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	469b      	mov	fp, r3
 800046a:	d500      	bpl.n	800046e <__udivmoddi4+0x3a>
 800046c:	e074      	b.n	8000558 <__udivmoddi4+0x124>
 800046e:	4653      	mov	r3, sl
 8000470:	465a      	mov	r2, fp
 8000472:	4093      	lsls	r3, r2
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4642      	mov	r2, r8
 800047a:	4093      	lsls	r3, r2
 800047c:	001e      	movs	r6, r3
 800047e:	42af      	cmp	r7, r5
 8000480:	d829      	bhi.n	80004d6 <__udivmoddi4+0xa2>
 8000482:	d026      	beq.n	80004d2 <__udivmoddi4+0x9e>
 8000484:	465b      	mov	r3, fp
 8000486:	1ba4      	subs	r4, r4, r6
 8000488:	41bd      	sbcs	r5, r7
 800048a:	2b00      	cmp	r3, #0
 800048c:	da00      	bge.n	8000490 <__udivmoddi4+0x5c>
 800048e:	e079      	b.n	8000584 <__udivmoddi4+0x150>
 8000490:	2200      	movs	r2, #0
 8000492:	2300      	movs	r3, #0
 8000494:	9200      	str	r2, [sp, #0]
 8000496:	9301      	str	r3, [sp, #4]
 8000498:	2301      	movs	r3, #1
 800049a:	465a      	mov	r2, fp
 800049c:	4093      	lsls	r3, r2
 800049e:	9301      	str	r3, [sp, #4]
 80004a0:	2301      	movs	r3, #1
 80004a2:	4642      	mov	r2, r8
 80004a4:	4093      	lsls	r3, r2
 80004a6:	9300      	str	r3, [sp, #0]
 80004a8:	e019      	b.n	80004de <__udivmoddi4+0xaa>
 80004aa:	4282      	cmp	r2, r0
 80004ac:	d9d0      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004ae:	2200      	movs	r2, #0
 80004b0:	2300      	movs	r3, #0
 80004b2:	9200      	str	r2, [sp, #0]
 80004b4:	9301      	str	r3, [sp, #4]
 80004b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <__udivmoddi4+0x8c>
 80004bc:	601c      	str	r4, [r3, #0]
 80004be:	605d      	str	r5, [r3, #4]
 80004c0:	9800      	ldr	r0, [sp, #0]
 80004c2:	9901      	ldr	r1, [sp, #4]
 80004c4:	b003      	add	sp, #12
 80004c6:	bc3c      	pop	{r2, r3, r4, r5}
 80004c8:	4690      	mov	r8, r2
 80004ca:	4699      	mov	r9, r3
 80004cc:	46a2      	mov	sl, r4
 80004ce:	46ab      	mov	fp, r5
 80004d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d2:	42a3      	cmp	r3, r4
 80004d4:	d9d6      	bls.n	8000484 <__udivmoddi4+0x50>
 80004d6:	2200      	movs	r2, #0
 80004d8:	2300      	movs	r3, #0
 80004da:	9200      	str	r2, [sp, #0]
 80004dc:	9301      	str	r3, [sp, #4]
 80004de:	4643      	mov	r3, r8
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d0e8      	beq.n	80004b6 <__udivmoddi4+0x82>
 80004e4:	07fb      	lsls	r3, r7, #31
 80004e6:	0872      	lsrs	r2, r6, #1
 80004e8:	431a      	orrs	r2, r3
 80004ea:	4646      	mov	r6, r8
 80004ec:	087b      	lsrs	r3, r7, #1
 80004ee:	e00e      	b.n	800050e <__udivmoddi4+0xda>
 80004f0:	42ab      	cmp	r3, r5
 80004f2:	d101      	bne.n	80004f8 <__udivmoddi4+0xc4>
 80004f4:	42a2      	cmp	r2, r4
 80004f6:	d80c      	bhi.n	8000512 <__udivmoddi4+0xde>
 80004f8:	1aa4      	subs	r4, r4, r2
 80004fa:	419d      	sbcs	r5, r3
 80004fc:	2001      	movs	r0, #1
 80004fe:	1924      	adds	r4, r4, r4
 8000500:	416d      	adcs	r5, r5
 8000502:	2100      	movs	r1, #0
 8000504:	3e01      	subs	r6, #1
 8000506:	1824      	adds	r4, r4, r0
 8000508:	414d      	adcs	r5, r1
 800050a:	2e00      	cmp	r6, #0
 800050c:	d006      	beq.n	800051c <__udivmoddi4+0xe8>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d9ee      	bls.n	80004f0 <__udivmoddi4+0xbc>
 8000512:	3e01      	subs	r6, #1
 8000514:	1924      	adds	r4, r4, r4
 8000516:	416d      	adcs	r5, r5
 8000518:	2e00      	cmp	r6, #0
 800051a:	d1f8      	bne.n	800050e <__udivmoddi4+0xda>
 800051c:	465b      	mov	r3, fp
 800051e:	9800      	ldr	r0, [sp, #0]
 8000520:	9901      	ldr	r1, [sp, #4]
 8000522:	1900      	adds	r0, r0, r4
 8000524:	4169      	adcs	r1, r5
 8000526:	2b00      	cmp	r3, #0
 8000528:	db22      	blt.n	8000570 <__udivmoddi4+0x13c>
 800052a:	002b      	movs	r3, r5
 800052c:	465a      	mov	r2, fp
 800052e:	40d3      	lsrs	r3, r2
 8000530:	002a      	movs	r2, r5
 8000532:	4644      	mov	r4, r8
 8000534:	40e2      	lsrs	r2, r4
 8000536:	001c      	movs	r4, r3
 8000538:	465b      	mov	r3, fp
 800053a:	0015      	movs	r5, r2
 800053c:	2b00      	cmp	r3, #0
 800053e:	db2c      	blt.n	800059a <__udivmoddi4+0x166>
 8000540:	0026      	movs	r6, r4
 8000542:	409e      	lsls	r6, r3
 8000544:	0033      	movs	r3, r6
 8000546:	0026      	movs	r6, r4
 8000548:	4647      	mov	r7, r8
 800054a:	40be      	lsls	r6, r7
 800054c:	0032      	movs	r2, r6
 800054e:	1a80      	subs	r0, r0, r2
 8000550:	4199      	sbcs	r1, r3
 8000552:	9000      	str	r0, [sp, #0]
 8000554:	9101      	str	r1, [sp, #4]
 8000556:	e7ae      	b.n	80004b6 <__udivmoddi4+0x82>
 8000558:	4642      	mov	r2, r8
 800055a:	2320      	movs	r3, #32
 800055c:	1a9b      	subs	r3, r3, r2
 800055e:	4652      	mov	r2, sl
 8000560:	40da      	lsrs	r2, r3
 8000562:	4641      	mov	r1, r8
 8000564:	0013      	movs	r3, r2
 8000566:	464a      	mov	r2, r9
 8000568:	408a      	lsls	r2, r1
 800056a:	0017      	movs	r7, r2
 800056c:	431f      	orrs	r7, r3
 800056e:	e782      	b.n	8000476 <__udivmoddi4+0x42>
 8000570:	4642      	mov	r2, r8
 8000572:	2320      	movs	r3, #32
 8000574:	1a9b      	subs	r3, r3, r2
 8000576:	002a      	movs	r2, r5
 8000578:	4646      	mov	r6, r8
 800057a:	409a      	lsls	r2, r3
 800057c:	0023      	movs	r3, r4
 800057e:	40f3      	lsrs	r3, r6
 8000580:	4313      	orrs	r3, r2
 8000582:	e7d5      	b.n	8000530 <__udivmoddi4+0xfc>
 8000584:	4642      	mov	r2, r8
 8000586:	2320      	movs	r3, #32
 8000588:	2100      	movs	r1, #0
 800058a:	1a9b      	subs	r3, r3, r2
 800058c:	2200      	movs	r2, #0
 800058e:	9100      	str	r1, [sp, #0]
 8000590:	9201      	str	r2, [sp, #4]
 8000592:	2201      	movs	r2, #1
 8000594:	40da      	lsrs	r2, r3
 8000596:	9201      	str	r2, [sp, #4]
 8000598:	e782      	b.n	80004a0 <__udivmoddi4+0x6c>
 800059a:	4642      	mov	r2, r8
 800059c:	2320      	movs	r3, #32
 800059e:	0026      	movs	r6, r4
 80005a0:	1a9b      	subs	r3, r3, r2
 80005a2:	40de      	lsrs	r6, r3
 80005a4:	002f      	movs	r7, r5
 80005a6:	46b4      	mov	ip, r6
 80005a8:	4097      	lsls	r7, r2
 80005aa:	4666      	mov	r6, ip
 80005ac:	003b      	movs	r3, r7
 80005ae:	4333      	orrs	r3, r6
 80005b0:	e7c9      	b.n	8000546 <__udivmoddi4+0x112>
 80005b2:	46c0      	nop			; (mov r8, r8)

080005b4 <__clzdi2>:
 80005b4:	b510      	push	{r4, lr}
 80005b6:	2900      	cmp	r1, #0
 80005b8:	d103      	bne.n	80005c2 <__clzdi2+0xe>
 80005ba:	f000 f807 	bl	80005cc <__clzsi2>
 80005be:	3020      	adds	r0, #32
 80005c0:	e002      	b.n	80005c8 <__clzdi2+0x14>
 80005c2:	1c08      	adds	r0, r1, #0
 80005c4:	f000 f802 	bl	80005cc <__clzsi2>
 80005c8:	bd10      	pop	{r4, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzsi2>:
 80005cc:	211c      	movs	r1, #28
 80005ce:	2301      	movs	r3, #1
 80005d0:	041b      	lsls	r3, r3, #16
 80005d2:	4298      	cmp	r0, r3
 80005d4:	d301      	bcc.n	80005da <__clzsi2+0xe>
 80005d6:	0c00      	lsrs	r0, r0, #16
 80005d8:	3910      	subs	r1, #16
 80005da:	0a1b      	lsrs	r3, r3, #8
 80005dc:	4298      	cmp	r0, r3
 80005de:	d301      	bcc.n	80005e4 <__clzsi2+0x18>
 80005e0:	0a00      	lsrs	r0, r0, #8
 80005e2:	3908      	subs	r1, #8
 80005e4:	091b      	lsrs	r3, r3, #4
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0x22>
 80005ea:	0900      	lsrs	r0, r0, #4
 80005ec:	3904      	subs	r1, #4
 80005ee:	a202      	add	r2, pc, #8	; (adr r2, 80005f8 <__clzsi2+0x2c>)
 80005f0:	5c10      	ldrb	r0, [r2, r0]
 80005f2:	1840      	adds	r0, r0, r1
 80005f4:	4770      	bx	lr
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	02020304 	.word	0x02020304
 80005fc:	01010101 	.word	0x01010101
	...

08000608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800060a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800060c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800060e:	e003      	b.n	8000618 <LoopCopyDataInit>

08000610 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000612:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000614:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000616:	3104      	adds	r1, #4

08000618 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000618:	480b      	ldr	r0, [pc, #44]	; (8000648 <LoopForever+0xa>)
  ldr  r3, =_edata
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <LoopForever+0xe>)
  adds  r2, r0, r1
 800061c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800061e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000620:	d3f6      	bcc.n	8000610 <CopyDataInit>
  ldr  r2, =_sbss
 8000622:	4a0b      	ldr	r2, [pc, #44]	; (8000650 <LoopForever+0x12>)
  b  LoopFillZerobss
 8000624:	e002      	b.n	800062c <LoopFillZerobss>

08000626 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000626:	2300      	movs	r3, #0
  str  r3, [r2]
 8000628:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800062a:	3204      	adds	r2, #4

0800062c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <LoopForever+0x16>)
  cmp  r2, r3
 800062e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000630:	d3f9      	bcc.n	8000626 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000632:	f000 fc8d 	bl	8000f50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000636:	f003 fad5 	bl	8003be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800063a:	f000 f901 	bl	8000840 <main>

0800063e <LoopForever>:

LoopForever:
    b LoopForever
 800063e:	e7fe      	b.n	800063e <LoopForever>
   ldr   r0, =_estack
 8000640:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8000644:	08003d00 	.word	0x08003d00
  ldr  r0, =_sdata
 8000648:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800064c:	2000005c 	.word	0x2000005c
  ldr  r2, =_sbss
 8000650:	2000005c 	.word	0x2000005c
  ldr  r3, = _ebss
 8000654:	200001c8 	.word	0x200001c8

08000658 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000658:	e7fe      	b.n	8000658 <ADC1_COMP_IRQHandler>
	...

0800065c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	; 0x28
 8000660:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000662:	4b33      	ldr	r3, [pc, #204]	; (8000730 <MX_GPIO_Init+0xd4>)
 8000664:	4a32      	ldr	r2, [pc, #200]	; (8000730 <MX_GPIO_Init+0xd4>)
 8000666:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000668:	2104      	movs	r1, #4
 800066a:	430a      	orrs	r2, r1
 800066c:	62da      	str	r2, [r3, #44]	; 0x2c
 800066e:	4b30      	ldr	r3, [pc, #192]	; (8000730 <MX_GPIO_Init+0xd4>)
 8000670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000672:	2204      	movs	r2, #4
 8000674:	4013      	ands	r3, r2
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067a:	4b2d      	ldr	r3, [pc, #180]	; (8000730 <MX_GPIO_Init+0xd4>)
 800067c:	4a2c      	ldr	r2, [pc, #176]	; (8000730 <MX_GPIO_Init+0xd4>)
 800067e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000680:	2180      	movs	r1, #128	; 0x80
 8000682:	430a      	orrs	r2, r1
 8000684:	62da      	str	r2, [r3, #44]	; 0x2c
 8000686:	4b2a      	ldr	r3, [pc, #168]	; (8000730 <MX_GPIO_Init+0xd4>)
 8000688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800068a:	2280      	movs	r2, #128	; 0x80
 800068c:	4013      	ands	r3, r2
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	4b27      	ldr	r3, [pc, #156]	; (8000730 <MX_GPIO_Init+0xd4>)
 8000694:	4a26      	ldr	r2, [pc, #152]	; (8000730 <MX_GPIO_Init+0xd4>)
 8000696:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000698:	2101      	movs	r1, #1
 800069a:	430a      	orrs	r2, r1
 800069c:	62da      	str	r2, [r3, #44]	; 0x2c
 800069e:	4b24      	ldr	r3, [pc, #144]	; (8000730 <MX_GPIO_Init+0xd4>)
 80006a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006a2:	2201      	movs	r2, #1
 80006a4:	4013      	ands	r3, r2
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	4b21      	ldr	r3, [pc, #132]	; (8000730 <MX_GPIO_Init+0xd4>)
 80006ac:	4a20      	ldr	r2, [pc, #128]	; (8000730 <MX_GPIO_Init+0xd4>)
 80006ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80006b0:	2102      	movs	r1, #2
 80006b2:	430a      	orrs	r2, r1
 80006b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80006b6:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <MX_GPIO_Init+0xd4>)
 80006b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ba:	2202      	movs	r2, #2
 80006bc:	4013      	ands	r3, r2
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006c2:	23a0      	movs	r3, #160	; 0xa0
 80006c4:	05db      	lsls	r3, r3, #23
 80006c6:	2200      	movs	r2, #0
 80006c8:	2120      	movs	r1, #32
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 ff38 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006d0:	2314      	movs	r3, #20
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	2280      	movs	r2, #128	; 0x80
 80006d6:	0192      	lsls	r2, r2, #6
 80006d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006da:	2314      	movs	r3, #20
 80006dc:	18fb      	adds	r3, r7, r3
 80006de:	4a15      	ldr	r2, [pc, #84]	; (8000734 <MX_GPIO_Init+0xd8>)
 80006e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2314      	movs	r3, #20
 80006e4:	18fb      	adds	r3, r7, r3
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ea:	2314      	movs	r3, #20
 80006ec:	18fb      	adds	r3, r7, r3
 80006ee:	4a12      	ldr	r2, [pc, #72]	; (8000738 <MX_GPIO_Init+0xdc>)
 80006f0:	0019      	movs	r1, r3
 80006f2:	0010      	movs	r0, r2
 80006f4:	f000 fda6 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006f8:	2314      	movs	r3, #20
 80006fa:	18fb      	adds	r3, r7, r3
 80006fc:	2220      	movs	r2, #32
 80006fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	2314      	movs	r3, #20
 8000702:	18fb      	adds	r3, r7, r3
 8000704:	2201      	movs	r2, #1
 8000706:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2314      	movs	r3, #20
 800070a:	18fb      	adds	r3, r7, r3
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2314      	movs	r3, #20
 8000712:	18fb      	adds	r3, r7, r3
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000718:	2314      	movs	r3, #20
 800071a:	18fa      	adds	r2, r7, r3
 800071c:	23a0      	movs	r3, #160	; 0xa0
 800071e:	05db      	lsls	r3, r3, #23
 8000720:	0011      	movs	r1, r2
 8000722:	0018      	movs	r0, r3
 8000724:	f000 fd8e 	bl	8001244 <HAL_GPIO_Init>

}
 8000728:	46c0      	nop			; (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	b00a      	add	sp, #40	; 0x28
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40021000 	.word	0x40021000
 8000734:	10210000 	.word	0x10210000
 8000738:	50000800 	.word	0x50000800

0800073c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000740:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <MX_I2C1_Init+0x88>)
 8000742:	4a21      	ldr	r2, [pc, #132]	; (80007c8 <MX_I2C1_Init+0x8c>)
 8000744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8000746:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <MX_I2C1_Init+0x88>)
 8000748:	4a20      	ldr	r2, [pc, #128]	; (80007cc <MX_I2C1_Init+0x90>)
 800074a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800074c:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <MX_I2C1_Init+0x88>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <MX_I2C1_Init+0x88>)
 8000754:	2201      	movs	r2, #1
 8000756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000758:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_I2C1_Init+0x88>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800075e:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <MX_I2C1_Init+0x88>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000764:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_I2C1_Init+0x88>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <MX_I2C1_Init+0x88>)
 800076c:	2200      	movs	r2, #0
 800076e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_I2C1_Init+0x88>)
 8000772:	2200      	movs	r2, #0
 8000774:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_I2C1_Init+0x88>)
 8000778:	0018      	movs	r0, r3
 800077a:	f000 feff 	bl	800157c <HAL_I2C_Init>
 800077e:	1e03      	subs	r3, r0, #0
 8000780:	d004      	beq.n	800078c <MX_I2C1_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <MX_I2C1_Init+0x94>)
 8000784:	2142      	movs	r1, #66	; 0x42
 8000786:	0018      	movs	r0, r3
 8000788:	f000 fb2c 	bl	8000de4 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800078c:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <MX_I2C1_Init+0x88>)
 800078e:	2100      	movs	r1, #0
 8000790:	0018      	movs	r0, r3
 8000792:	f001 fb79 	bl	8001e88 <HAL_I2CEx_ConfigAnalogFilter>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d004      	beq.n	80007a4 <MX_I2C1_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 800079a:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <MX_I2C1_Init+0x94>)
 800079c:	2149      	movs	r1, #73	; 0x49
 800079e:	0018      	movs	r0, r3
 80007a0:	f000 fb20 	bl	8000de4 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <MX_I2C1_Init+0x88>)
 80007a6:	2100      	movs	r1, #0
 80007a8:	0018      	movs	r0, r3
 80007aa:	f001 fbb9 	bl	8001f20 <HAL_I2CEx_ConfigDigitalFilter>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d004      	beq.n	80007bc <MX_I2C1_Init+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 80007b2:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <MX_I2C1_Init+0x94>)
 80007b4:	2150      	movs	r1, #80	; 0x50
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 fb14 	bl	8000de4 <_Error_Handler>
  }

}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	200000e4 	.word	0x200000e4
 80007c8:	40005400 	.word	0x40005400
 80007cc:	00300f38 	.word	0x00300f38
 80007d0:	08003c44 	.word	0x08003c44

080007d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a14      	ldr	r2, [pc, #80]	; (8000834 <HAL_I2C_MspInit+0x60>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d122      	bne.n	800082c <HAL_I2C_MspInit+0x58>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007e6:	230c      	movs	r3, #12
 80007e8:	18fb      	adds	r3, r7, r3
 80007ea:	22c0      	movs	r2, #192	; 0xc0
 80007ec:	0092      	lsls	r2, r2, #2
 80007ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007f0:	230c      	movs	r3, #12
 80007f2:	18fb      	adds	r3, r7, r3
 80007f4:	2212      	movs	r2, #18
 80007f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f8:	230c      	movs	r3, #12
 80007fa:	18fb      	adds	r3, r7, r3
 80007fc:	2201      	movs	r2, #1
 80007fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000800:	230c      	movs	r3, #12
 8000802:	18fb      	adds	r3, r7, r3
 8000804:	2203      	movs	r2, #3
 8000806:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000808:	230c      	movs	r3, #12
 800080a:	18fb      	adds	r3, r7, r3
 800080c:	2204      	movs	r2, #4
 800080e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000810:	230c      	movs	r3, #12
 8000812:	18fb      	adds	r3, r7, r3
 8000814:	4a08      	ldr	r2, [pc, #32]	; (8000838 <HAL_I2C_MspInit+0x64>)
 8000816:	0019      	movs	r1, r3
 8000818:	0010      	movs	r0, r2
 800081a:	f000 fd13 	bl	8001244 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800081e:	4b07      	ldr	r3, [pc, #28]	; (800083c <HAL_I2C_MspInit+0x68>)
 8000820:	4a06      	ldr	r2, [pc, #24]	; (800083c <HAL_I2C_MspInit+0x68>)
 8000822:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000824:	2180      	movs	r1, #128	; 0x80
 8000826:	0389      	lsls	r1, r1, #14
 8000828:	430a      	orrs	r2, r1
 800082a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	b008      	add	sp, #32
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40005400 	.word	0x40005400
 8000838:	50000400 	.word	0x50000400
 800083c:	40021000 	.word	0x40021000

08000840 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000844:	f000 fbc2 	bl	8000fcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000848:	f000 f80e 	bl	8000868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084c:	f7ff ff06 	bl	800065c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000850:	f000 fb14 	bl	8000e7c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000854:	f7ff ff72 	bl	800073c <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  get_temp();
 8000858:	f000 f8c2 	bl	80009e0 <get_temp>

	  get_hum();
 800085c:	f000 f9b4 	bl	8000bc8 <get_hum>

	  get_press();
 8000860:	f000 fa78 	bl	8000d54 <get_press>
	  get_temp();
 8000864:	e7f8      	b.n	8000858 <main+0x18>
	...

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b09e      	sub	sp, #120	; 0x78
 800086c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800086e:	4b44      	ldr	r3, [pc, #272]	; (8000980 <SystemClock_Config+0x118>)
 8000870:	4a43      	ldr	r2, [pc, #268]	; (8000980 <SystemClock_Config+0x118>)
 8000872:	6812      	ldr	r2, [r2, #0]
 8000874:	4943      	ldr	r1, [pc, #268]	; (8000984 <SystemClock_Config+0x11c>)
 8000876:	400a      	ands	r2, r1
 8000878:	2180      	movs	r1, #128	; 0x80
 800087a:	0109      	lsls	r1, r1, #4
 800087c:	430a      	orrs	r2, r1
 800087e:	601a      	str	r2, [r3, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000880:	2340      	movs	r3, #64	; 0x40
 8000882:	18fb      	adds	r3, r7, r3
 8000884:	2201      	movs	r2, #1
 8000886:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000888:	2340      	movs	r3, #64	; 0x40
 800088a:	18fb      	adds	r3, r7, r3
 800088c:	22a0      	movs	r2, #160	; 0xa0
 800088e:	02d2      	lsls	r2, r2, #11
 8000890:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000892:	2340      	movs	r3, #64	; 0x40
 8000894:	18fb      	adds	r3, r7, r3
 8000896:	2202      	movs	r2, #2
 8000898:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089a:	2340      	movs	r3, #64	; 0x40
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	2280      	movs	r2, #128	; 0x80
 80008a0:	0252      	lsls	r2, r2, #9
 80008a2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 80008a4:	2340      	movs	r3, #64	; 0x40
 80008a6:	18fb      	adds	r3, r7, r3
 80008a8:	22c0      	movs	r2, #192	; 0xc0
 80008aa:	0312      	lsls	r2, r2, #12
 80008ac:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80008ae:	2340      	movs	r3, #64	; 0x40
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	03d2      	lsls	r2, r2, #15
 80008b6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b8:	2340      	movs	r3, #64	; 0x40
 80008ba:	18fb      	adds	r3, r7, r3
 80008bc:	0018      	movs	r0, r3
 80008be:	f001 fb7d 	bl	8001fbc <HAL_RCC_OscConfig>
 80008c2:	1e03      	subs	r3, r0, #0
 80008c4:	d007      	beq.n	80008d6 <SystemClock_Config+0x6e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80008c6:	2306      	movs	r3, #6
 80008c8:	33ff      	adds	r3, #255	; 0xff
 80008ca:	001a      	movs	r2, r3
 80008cc:	4b2e      	ldr	r3, [pc, #184]	; (8000988 <SystemClock_Config+0x120>)
 80008ce:	0011      	movs	r1, r2
 80008d0:	0018      	movs	r0, r3
 80008d2:	f000 fa87 	bl	8000de4 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d6:	232c      	movs	r3, #44	; 0x2c
 80008d8:	18fb      	adds	r3, r7, r3
 80008da:	220f      	movs	r2, #15
 80008dc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008de:	232c      	movs	r3, #44	; 0x2c
 80008e0:	18fb      	adds	r3, r7, r3
 80008e2:	2203      	movs	r2, #3
 80008e4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e6:	232c      	movs	r3, #44	; 0x2c
 80008e8:	18fb      	adds	r3, r7, r3
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ee:	232c      	movs	r3, #44	; 0x2c
 80008f0:	18fb      	adds	r3, r7, r3
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f6:	232c      	movs	r3, #44	; 0x2c
 80008f8:	18fb      	adds	r3, r7, r3
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008fe:	232c      	movs	r3, #44	; 0x2c
 8000900:	18fb      	adds	r3, r7, r3
 8000902:	2101      	movs	r1, #1
 8000904:	0018      	movs	r0, r3
 8000906:	f001 fefb 	bl	8002700 <HAL_RCC_ClockConfig>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d007      	beq.n	800091e <SystemClock_Config+0xb6>
  {
    _Error_Handler(__FILE__, __LINE__);
 800090e:	2314      	movs	r3, #20
 8000910:	33ff      	adds	r3, #255	; 0xff
 8000912:	001a      	movs	r2, r3
 8000914:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <SystemClock_Config+0x120>)
 8000916:	0011      	movs	r1, r2
 8000918:	0018      	movs	r0, r3
 800091a:	f000 fa63 	bl	8000de4 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	220a      	movs	r2, #10
 8000922:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	0018      	movs	r0, r3
 8000934:	f002 f90a 	bl	8002b4c <HAL_RCCEx_PeriphCLKConfig>
 8000938:	1e03      	subs	r3, r0, #0
 800093a:	d007      	beq.n	800094c <SystemClock_Config+0xe4>
  {
    _Error_Handler(__FILE__, __LINE__);
 800093c:	231c      	movs	r3, #28
 800093e:	33ff      	adds	r3, #255	; 0xff
 8000940:	001a      	movs	r2, r3
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <SystemClock_Config+0x120>)
 8000944:	0011      	movs	r1, r2
 8000946:	0018      	movs	r0, r3
 8000948:	f000 fa4c 	bl	8000de4 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800094c:	f002 f870 	bl	8002a30 <HAL_RCC_GetHCLKFreq>
 8000950:	0002      	movs	r2, r0
 8000952:	23fa      	movs	r3, #250	; 0xfa
 8000954:	0099      	lsls	r1, r3, #2
 8000956:	0010      	movs	r0, r2
 8000958:	f7ff fbd6 	bl	8000108 <__udivsi3>
 800095c:	0003      	movs	r3, r0
 800095e:	0018      	movs	r0, r3
 8000960:	f000 fc3c 	bl	80011dc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000964:	2004      	movs	r0, #4
 8000966:	f000 fc47 	bl	80011f8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800096a:	2301      	movs	r3, #1
 800096c:	425b      	negs	r3, r3
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	0018      	movs	r0, r3
 8000974:	f000 fc1c 	bl	80011b0 <HAL_NVIC_SetPriority>
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b01e      	add	sp, #120	; 0x78
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40007000 	.word	0x40007000
 8000984:	ffffe7ff 	.word	0xffffe7ff
 8000988:	08003c58 	.word	0x08003c58

0800098c <get_register>:

/* USER CODE BEGIN 4 */
void get_register(uint8_t addr_sensor[], uint8_t addr_register[], uint8_t data_register[]){
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af02      	add	r7, sp, #8
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]

	  while(HAL_I2C_Master_Transmit(&hi2c1, addr_sensor[0], addr_register, 1, HAL_TIMEOUT) != HAL_OK);
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	b299      	uxth	r1, r3
 80009a0:	68ba      	ldr	r2, [r7, #8]
 80009a2:	480e      	ldr	r0, [pc, #56]	; (80009dc <get_register+0x50>)
 80009a4:	2303      	movs	r3, #3
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	2301      	movs	r3, #1
 80009aa:	f000 fe7d 	bl	80016a8 <HAL_I2C_Master_Transmit>
 80009ae:	1e03      	subs	r3, r0, #0
 80009b0:	d1f3      	bne.n	800099a <get_register+0xe>
	  while(HAL_I2C_Master_Receive(&hi2c1, addr_sensor[0], data_register, 1, HAL_TIMEOUT) != HAL_OK);
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	b299      	uxth	r1, r3
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	4807      	ldr	r0, [pc, #28]	; (80009dc <get_register+0x50>)
 80009be:	2303      	movs	r3, #3
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	2301      	movs	r3, #1
 80009c4:	f000 ff84 	bl	80018d0 <HAL_I2C_Master_Receive>
 80009c8:	1e03      	subs	r3, r0, #0
 80009ca:	d1f3      	bne.n	80009b4 <get_register+0x28>
	  HAL_Delay(100);
 80009cc:	2064      	movs	r0, #100	; 0x64
 80009ce:	f000 fb45 	bl	800105c <HAL_Delay>
}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b004      	add	sp, #16
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	200000e4 	.word	0x200000e4

080009e0 <get_temp>:

void get_temp(void){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0

	// read register T0_degC_x8
	get_register(addr_sensor, addr_T0_degC_x8, T0_degC_x8);
 80009e4:	4a5c      	ldr	r2, [pc, #368]	; (8000b58 <get_temp+0x178>)
 80009e6:	495d      	ldr	r1, [pc, #372]	; (8000b5c <get_temp+0x17c>)
 80009e8:	4b5d      	ldr	r3, [pc, #372]	; (8000b60 <get_temp+0x180>)
 80009ea:	0018      	movs	r0, r3
 80009ec:	f7ff ffce 	bl	800098c <get_register>
	// read register T1_degC_x8
	get_register(addr_sensor, addr_T1_degC_x8, T1_degC_x8);
 80009f0:	4a5c      	ldr	r2, [pc, #368]	; (8000b64 <get_temp+0x184>)
 80009f2:	495d      	ldr	r1, [pc, #372]	; (8000b68 <get_temp+0x188>)
 80009f4:	4b5a      	ldr	r3, [pc, #360]	; (8000b60 <get_temp+0x180>)
 80009f6:	0018      	movs	r0, r3
 80009f8:	f7ff ffc8 	bl	800098c <get_register>
	// Read register MSB
	get_register(addr_sensor, addr_MSB, MSB);
 80009fc:	4a5b      	ldr	r2, [pc, #364]	; (8000b6c <get_temp+0x18c>)
 80009fe:	495c      	ldr	r1, [pc, #368]	; (8000b70 <get_temp+0x190>)
 8000a00:	4b57      	ldr	r3, [pc, #348]	; (8000b60 <get_temp+0x180>)
 8000a02:	0018      	movs	r0, r3
 8000a04:	f7ff ffc2 	bl	800098c <get_register>

	T0_degC_x8_u16[0] = (((uint16_t)(MSB[0] & 0x03)) << 8) + ((uint16_t)T0_degC_x8[0]);
 8000a08:	4b58      	ldr	r3, [pc, #352]	; (8000b6c <get_temp+0x18c>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	021b      	lsls	r3, r3, #8
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	23c0      	movs	r3, #192	; 0xc0
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	4013      	ands	r3, r2
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	4b4f      	ldr	r3, [pc, #316]	; (8000b58 <get_temp+0x178>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	18d3      	adds	r3, r2, r3
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	b21a      	sxth	r2, r3
 8000a24:	4b53      	ldr	r3, [pc, #332]	; (8000b74 <get_temp+0x194>)
 8000a26:	801a      	strh	r2, [r3, #0]

	T1_degC_x8_u16[0] = (((uint16_t)(MSB[0] & 0x0C)) << 6) + ((uint16_t)T1_degC_x8[0]);
 8000a28:	4b50      	ldr	r3, [pc, #320]	; (8000b6c <get_temp+0x18c>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	019b      	lsls	r3, r3, #6
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	23c0      	movs	r3, #192	; 0xc0
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	4013      	ands	r3, r2
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	4b4a      	ldr	r3, [pc, #296]	; (8000b64 <get_temp+0x184>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	18d3      	adds	r3, r2, r3
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	b21a      	sxth	r2, r3
 8000a44:	4b4c      	ldr	r3, [pc, #304]	; (8000b78 <get_temp+0x198>)
 8000a46:	801a      	strh	r2, [r3, #0]

	T0_DegC[0] = T0_degC_x8_u16[0] >> 3;
 8000a48:	4b4a      	ldr	r3, [pc, #296]	; (8000b74 <get_temp+0x194>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	5e9b      	ldrsh	r3, [r3, r2]
 8000a4e:	10db      	asrs	r3, r3, #3
 8000a50:	b21a      	sxth	r2, r3
 8000a52:	4b4a      	ldr	r3, [pc, #296]	; (8000b7c <get_temp+0x19c>)
 8000a54:	801a      	strh	r2, [r3, #0]

	T1_DegC[0] = T1_degC_x8_u16[0] >> 3;
 8000a56:	4b48      	ldr	r3, [pc, #288]	; (8000b78 <get_temp+0x198>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	5e9b      	ldrsh	r3, [r3, r2]
 8000a5c:	10db      	asrs	r3, r3, #3
 8000a5e:	b21a      	sxth	r2, r3
 8000a60:	4b47      	ldr	r3, [pc, #284]	; (8000b80 <get_temp+0x1a0>)
 8000a62:	801a      	strh	r2, [r3, #0]

	// Read register T0_OUT_L
	get_register(addr_sensor, addr_T0_OUT_L, T0_OUT_L);
 8000a64:	4a47      	ldr	r2, [pc, #284]	; (8000b84 <get_temp+0x1a4>)
 8000a66:	4948      	ldr	r1, [pc, #288]	; (8000b88 <get_temp+0x1a8>)
 8000a68:	4b3d      	ldr	r3, [pc, #244]	; (8000b60 <get_temp+0x180>)
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f7ff ff8e 	bl	800098c <get_register>
	// Read register T0_OUT_H
	get_register(addr_sensor, addr_T0_OUT_H, T0_OUT_H);
 8000a70:	4a46      	ldr	r2, [pc, #280]	; (8000b8c <get_temp+0x1ac>)
 8000a72:	4947      	ldr	r1, [pc, #284]	; (8000b90 <get_temp+0x1b0>)
 8000a74:	4b3a      	ldr	r3, [pc, #232]	; (8000b60 <get_temp+0x180>)
 8000a76:	0018      	movs	r0, r3
 8000a78:	f7ff ff88 	bl	800098c <get_register>

	  T0_OUT[0] = (((uint16_t)T0_OUT_H[0])<<8) + (uint16_t)T0_OUT_L[0];
 8000a7c:	4b43      	ldr	r3, [pc, #268]	; (8000b8c <get_temp+0x1ac>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	021b      	lsls	r3, r3, #8
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	4b3f      	ldr	r3, [pc, #252]	; (8000b84 <get_temp+0x1a4>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	18d3      	adds	r3, r2, r3
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	b21a      	sxth	r2, r3
 8000a92:	4b40      	ldr	r3, [pc, #256]	; (8000b94 <get_temp+0x1b4>)
 8000a94:	801a      	strh	r2, [r3, #0]

	// Read register T1_OUT_L
	get_register(addr_sensor, addr_T1_OUT_L, T1_OUT_L);
 8000a96:	4a40      	ldr	r2, [pc, #256]	; (8000b98 <get_temp+0x1b8>)
 8000a98:	4940      	ldr	r1, [pc, #256]	; (8000b9c <get_temp+0x1bc>)
 8000a9a:	4b31      	ldr	r3, [pc, #196]	; (8000b60 <get_temp+0x180>)
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f7ff ff75 	bl	800098c <get_register>
	// Read register T1_OUT_H
	get_register(addr_sensor, addr_T1_OUT_H, T1_OUT_H);
 8000aa2:	4a3f      	ldr	r2, [pc, #252]	; (8000ba0 <get_temp+0x1c0>)
 8000aa4:	493f      	ldr	r1, [pc, #252]	; (8000ba4 <get_temp+0x1c4>)
 8000aa6:	4b2e      	ldr	r3, [pc, #184]	; (8000b60 <get_temp+0x180>)
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f7ff ff6f 	bl	800098c <get_register>

	T1_OUT[0] = (((uint16_t)T1_OUT_H[0])<<8) + (uint16_t)T1_OUT_L[0];
 8000aae:	4b3c      	ldr	r3, [pc, #240]	; (8000ba0 <get_temp+0x1c0>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	021b      	lsls	r3, r3, #8
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	4b37      	ldr	r3, [pc, #220]	; (8000b98 <get_temp+0x1b8>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	18d3      	adds	r3, r2, r3
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	b21a      	sxth	r2, r3
 8000ac4:	4b38      	ldr	r3, [pc, #224]	; (8000ba8 <get_temp+0x1c8>)
 8000ac6:	801a      	strh	r2, [r3, #0]

	// Read register T_OUT_L
	get_register(addr_sensor, addr_T_OUT_L, T_OUT_L);
 8000ac8:	4a38      	ldr	r2, [pc, #224]	; (8000bac <get_temp+0x1cc>)
 8000aca:	4939      	ldr	r1, [pc, #228]	; (8000bb0 <get_temp+0x1d0>)
 8000acc:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <get_temp+0x180>)
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f7ff ff5c 	bl	800098c <get_register>
	// Read register T_OUT_H
	get_register(addr_sensor, addr_T_OUT_H, T_OUT_H);
 8000ad4:	4a37      	ldr	r2, [pc, #220]	; (8000bb4 <get_temp+0x1d4>)
 8000ad6:	4938      	ldr	r1, [pc, #224]	; (8000bb8 <get_temp+0x1d8>)
 8000ad8:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <get_temp+0x180>)
 8000ada:	0018      	movs	r0, r3
 8000adc:	f7ff ff56 	bl	800098c <get_register>


	  T_OUT[0]=(((uint16_t)T_OUT_H[0])<<8) + (uint16_t)T_OUT_L[0];
 8000ae0:	4b34      	ldr	r3, [pc, #208]	; (8000bb4 <get_temp+0x1d4>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	021b      	lsls	r3, r3, #8
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	4b30      	ldr	r3, [pc, #192]	; (8000bac <get_temp+0x1cc>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	18d3      	adds	r3, r2, r3
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	b21a      	sxth	r2, r3
 8000af6:	4b31      	ldr	r3, [pc, #196]	; (8000bbc <get_temp+0x1dc>)
 8000af8:	801a      	strh	r2, [r3, #0]

	  temp32= (int32_t)(T1_DegC[0]-T0_DegC[0])*(T_OUT[0]-T0_OUT[0]);
 8000afa:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <get_temp+0x1a0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	5e9b      	ldrsh	r3, [r3, r2]
 8000b00:	001a      	movs	r2, r3
 8000b02:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <get_temp+0x19c>)
 8000b04:	2100      	movs	r1, #0
 8000b06:	5e5b      	ldrsh	r3, [r3, r1]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	4a2c      	ldr	r2, [pc, #176]	; (8000bbc <get_temp+0x1dc>)
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	5e52      	ldrsh	r2, [r2, r1]
 8000b10:	0011      	movs	r1, r2
 8000b12:	4a20      	ldr	r2, [pc, #128]	; (8000b94 <get_temp+0x1b4>)
 8000b14:	2000      	movs	r0, #0
 8000b16:	5e12      	ldrsh	r2, [r2, r0]
 8000b18:	1a8a      	subs	r2, r1, r2
 8000b1a:	435a      	muls	r2, r3
 8000b1c:	4b28      	ldr	r3, [pc, #160]	; (8000bc0 <get_temp+0x1e0>)
 8000b1e:	601a      	str	r2, [r3, #0]
	  temp_value = (int16_t)(temp32/(T1_OUT[0] - T0_OUT[0])) + T0_DegC[0];
 8000b20:	4b27      	ldr	r3, [pc, #156]	; (8000bc0 <get_temp+0x1e0>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <get_temp+0x1c8>)
 8000b26:	2100      	movs	r1, #0
 8000b28:	5e5b      	ldrsh	r3, [r3, r1]
 8000b2a:	0019      	movs	r1, r3
 8000b2c:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <get_temp+0x1b4>)
 8000b2e:	2000      	movs	r0, #0
 8000b30:	5e1b      	ldrsh	r3, [r3, r0]
 8000b32:	1acb      	subs	r3, r1, r3
 8000b34:	0019      	movs	r1, r3
 8000b36:	0010      	movs	r0, r2
 8000b38:	f7ff fb70 	bl	800021c <__divsi3>
 8000b3c:	0003      	movs	r3, r0
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <get_temp+0x19c>)
 8000b42:	2100      	movs	r1, #0
 8000b44:	5e5b      	ldrsh	r3, [r3, r1]
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	18d3      	adds	r3, r2, r3
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	b21a      	sxth	r2, r3
 8000b4e:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <get_temp+0x1e4>)
 8000b50:	801a      	strh	r2, [r3, #0]

}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000078 	.word	0x20000078
 8000b5c:	20000004 	.word	0x20000004
 8000b60:	20000000 	.word	0x20000000
 8000b64:	2000007c 	.word	0x2000007c
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	20000080 	.word	0x20000080
 8000b70:	2000000c 	.word	0x2000000c
 8000b74:	20000084 	.word	0x20000084
 8000b78:	20000088 	.word	0x20000088
 8000b7c:	2000008c 	.word	0x2000008c
 8000b80:	20000090 	.word	0x20000090
 8000b84:	20000094 	.word	0x20000094
 8000b88:	20000010 	.word	0x20000010
 8000b8c:	20000098 	.word	0x20000098
 8000b90:	20000014 	.word	0x20000014
 8000b94:	2000009c 	.word	0x2000009c
 8000b98:	200000a0 	.word	0x200000a0
 8000b9c:	20000018 	.word	0x20000018
 8000ba0:	200000a4 	.word	0x200000a4
 8000ba4:	2000001c 	.word	0x2000001c
 8000ba8:	200000a8 	.word	0x200000a8
 8000bac:	200000ac 	.word	0x200000ac
 8000bb0:	20000020 	.word	0x20000020
 8000bb4:	200000b0 	.word	0x200000b0
 8000bb8:	20000024 	.word	0x20000024
 8000bbc:	200000b4 	.word	0x200000b4
 8000bc0:	20000140 	.word	0x20000140
 8000bc4:	2000013c 	.word	0x2000013c

08000bc8 <get_hum>:


void get_hum(void){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0

	get_register(addr_sensor, addr_H0_rH_x2, H0_rH_x2);
 8000bcc:	4a49      	ldr	r2, [pc, #292]	; (8000cf4 <get_hum+0x12c>)
 8000bce:	494a      	ldr	r1, [pc, #296]	; (8000cf8 <get_hum+0x130>)
 8000bd0:	4b4a      	ldr	r3, [pc, #296]	; (8000cfc <get_hum+0x134>)
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f7ff feda 	bl	800098c <get_register>

	get_register(addr_sensor, addr_H1_rH_x2, H1_rH_x2);
 8000bd8:	4a49      	ldr	r2, [pc, #292]	; (8000d00 <get_hum+0x138>)
 8000bda:	494a      	ldr	r1, [pc, #296]	; (8000d04 <get_hum+0x13c>)
 8000bdc:	4b47      	ldr	r3, [pc, #284]	; (8000cfc <get_hum+0x134>)
 8000bde:	0018      	movs	r0, r3
 8000be0:	f7ff fed4 	bl	800098c <get_register>

	H0_rH= H0_rH_x2[0]>>2;
 8000be4:	4b43      	ldr	r3, [pc, #268]	; (8000cf4 <get_hum+0x12c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	089b      	lsrs	r3, r3, #2
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	b21a      	sxth	r2, r3
 8000bee:	4b46      	ldr	r3, [pc, #280]	; (8000d08 <get_hum+0x140>)
 8000bf0:	801a      	strh	r2, [r3, #0]
	H1_rH= H1_rH_x2[0]>>2;
 8000bf2:	4b43      	ldr	r3, [pc, #268]	; (8000d00 <get_hum+0x138>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	089b      	lsrs	r3, r3, #2
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	b21a      	sxth	r2, r3
 8000bfc:	4b43      	ldr	r3, [pc, #268]	; (8000d0c <get_hum+0x144>)
 8000bfe:	801a      	strh	r2, [r3, #0]

	get_register(addr_sensor, addr_H0_T0_OUT_L, H0_T0_OUT_L);
 8000c00:	4a43      	ldr	r2, [pc, #268]	; (8000d10 <get_hum+0x148>)
 8000c02:	4944      	ldr	r1, [pc, #272]	; (8000d14 <get_hum+0x14c>)
 8000c04:	4b3d      	ldr	r3, [pc, #244]	; (8000cfc <get_hum+0x134>)
 8000c06:	0018      	movs	r0, r3
 8000c08:	f7ff fec0 	bl	800098c <get_register>

	get_register(addr_sensor, addr_H0_T0_OUT_H, H0_T0_OUT_H);
 8000c0c:	4a42      	ldr	r2, [pc, #264]	; (8000d18 <get_hum+0x150>)
 8000c0e:	4943      	ldr	r1, [pc, #268]	; (8000d1c <get_hum+0x154>)
 8000c10:	4b3a      	ldr	r3, [pc, #232]	; (8000cfc <get_hum+0x134>)
 8000c12:	0018      	movs	r0, r3
 8000c14:	f7ff feba 	bl	800098c <get_register>

	H0_T0_OUT = (H0_T0_OUT_H[0]<<8) + H0_T0_OUT_L[0];
 8000c18:	4b3f      	ldr	r3, [pc, #252]	; (8000d18 <get_hum+0x150>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	021b      	lsls	r3, r3, #8
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	4b3b      	ldr	r3, [pc, #236]	; (8000d10 <get_hum+0x148>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	18d3      	adds	r3, r2, r3
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	b21a      	sxth	r2, r3
 8000c2e:	4b3c      	ldr	r3, [pc, #240]	; (8000d20 <get_hum+0x158>)
 8000c30:	801a      	strh	r2, [r3, #0]


	get_register(addr_sensor, addr_H1_T0_OUT_L, H1_T0_OUT_L);
 8000c32:	4a3c      	ldr	r2, [pc, #240]	; (8000d24 <get_hum+0x15c>)
 8000c34:	493c      	ldr	r1, [pc, #240]	; (8000d28 <get_hum+0x160>)
 8000c36:	4b31      	ldr	r3, [pc, #196]	; (8000cfc <get_hum+0x134>)
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f7ff fea7 	bl	800098c <get_register>

	get_register(addr_sensor, addr_H1_T0_OUT_H, H1_T0_OUT_H);
 8000c3e:	4a3b      	ldr	r2, [pc, #236]	; (8000d2c <get_hum+0x164>)
 8000c40:	493b      	ldr	r1, [pc, #236]	; (8000d30 <get_hum+0x168>)
 8000c42:	4b2e      	ldr	r3, [pc, #184]	; (8000cfc <get_hum+0x134>)
 8000c44:	0018      	movs	r0, r3
 8000c46:	f7ff fea1 	bl	800098c <get_register>

	H1_T0_OUT = (H1_T0_OUT_H[0]<<8) + H1_T0_OUT_L[0];
 8000c4a:	4b38      	ldr	r3, [pc, #224]	; (8000d2c <get_hum+0x164>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	021b      	lsls	r3, r3, #8
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	4b33      	ldr	r3, [pc, #204]	; (8000d24 <get_hum+0x15c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	18d3      	adds	r3, r2, r3
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	b21a      	sxth	r2, r3
 8000c60:	4b34      	ldr	r3, [pc, #208]	; (8000d34 <get_hum+0x16c>)
 8000c62:	801a      	strh	r2, [r3, #0]


	get_register(addr_sensor, addr_H_T0_OUT_L, H_T0_OUT_L);
 8000c64:	4a34      	ldr	r2, [pc, #208]	; (8000d38 <get_hum+0x170>)
 8000c66:	4935      	ldr	r1, [pc, #212]	; (8000d3c <get_hum+0x174>)
 8000c68:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <get_hum+0x134>)
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f7ff fe8e 	bl	800098c <get_register>

	get_register(addr_sensor, addr_H_T0_OUT_H, H_T0_OUT_H);
 8000c70:	4a33      	ldr	r2, [pc, #204]	; (8000d40 <get_hum+0x178>)
 8000c72:	4934      	ldr	r1, [pc, #208]	; (8000d44 <get_hum+0x17c>)
 8000c74:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <get_hum+0x134>)
 8000c76:	0018      	movs	r0, r3
 8000c78:	f7ff fe88 	bl	800098c <get_register>

	H_T0_OUT = (H_T0_OUT_H[0]<<8) + H_T0_OUT_L[0];
 8000c7c:	4b30      	ldr	r3, [pc, #192]	; (8000d40 <get_hum+0x178>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	021b      	lsls	r3, r3, #8
 8000c84:	b29a      	uxth	r2, r3
 8000c86:	4b2c      	ldr	r3, [pc, #176]	; (8000d38 <get_hum+0x170>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	18d3      	adds	r3, r2, r3
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	b21a      	sxth	r2, r3
 8000c92:	4b2d      	ldr	r3, [pc, #180]	; (8000d48 <get_hum+0x180>)
 8000c94:	801a      	strh	r2, [r3, #0]

	hum = (H1_rH-H0_rH)*(H_T0_OUT-H0_T0_OUT);
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <get_hum+0x144>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	5e9b      	ldrsh	r3, [r3, r2]
 8000c9c:	001a      	movs	r2, r3
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <get_hum+0x140>)
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	5e5b      	ldrsh	r3, [r3, r1]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	4a28      	ldr	r2, [pc, #160]	; (8000d48 <get_hum+0x180>)
 8000ca8:	2100      	movs	r1, #0
 8000caa:	5e52      	ldrsh	r2, [r2, r1]
 8000cac:	0011      	movs	r1, r2
 8000cae:	4a1c      	ldr	r2, [pc, #112]	; (8000d20 <get_hum+0x158>)
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	5e12      	ldrsh	r2, [r2, r0]
 8000cb4:	1a8a      	subs	r2, r1, r2
 8000cb6:	435a      	muls	r2, r3
 8000cb8:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <get_hum+0x184>)
 8000cba:	601a      	str	r2, [r3, #0]
	value_hum = (hum/(H1_T0_OUT-H0_T0_OUT))+H0_rH;
 8000cbc:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <get_hum+0x184>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <get_hum+0x16c>)
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	5e5b      	ldrsh	r3, [r3, r1]
 8000cc6:	0019      	movs	r1, r3
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <get_hum+0x158>)
 8000cca:	2000      	movs	r0, #0
 8000ccc:	5e1b      	ldrsh	r3, [r3, r0]
 8000cce:	1acb      	subs	r3, r1, r3
 8000cd0:	0019      	movs	r1, r3
 8000cd2:	0010      	movs	r0, r2
 8000cd4:	f7ff faa2 	bl	800021c <__divsi3>
 8000cd8:	0003      	movs	r3, r0
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <get_hum+0x140>)
 8000cde:	2100      	movs	r1, #0
 8000ce0:	5e5b      	ldrsh	r3, [r3, r1]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	18d3      	adds	r3, r2, r3
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	b21a      	sxth	r2, r3
 8000cea:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <get_hum+0x188>)
 8000cec:	801a      	strh	r2, [r3, #0]

}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	200000b8 	.word	0x200000b8
 8000cf8:	20000028 	.word	0x20000028
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	200000bc 	.word	0x200000bc
 8000d04:	2000002c 	.word	0x2000002c
 8000d08:	20000138 	.word	0x20000138
 8000d0c:	20000134 	.word	0x20000134
 8000d10:	200000c0 	.word	0x200000c0
 8000d14:	20000030 	.word	0x20000030
 8000d18:	200000c4 	.word	0x200000c4
 8000d1c:	20000034 	.word	0x20000034
 8000d20:	2000014c 	.word	0x2000014c
 8000d24:	200000c8 	.word	0x200000c8
 8000d28:	20000038 	.word	0x20000038
 8000d2c:	200000cc 	.word	0x200000cc
 8000d30:	2000003c 	.word	0x2000003c
 8000d34:	20000146 	.word	0x20000146
 8000d38:	200000d0 	.word	0x200000d0
 8000d3c:	20000040 	.word	0x20000040
 8000d40:	200000d4 	.word	0x200000d4
 8000d44:	20000044 	.word	0x20000044
 8000d48:	20000144 	.word	0x20000144
 8000d4c:	20000130 	.word	0x20000130
 8000d50:	2000013a 	.word	0x2000013a

08000d54 <get_press>:

void get_press(void){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0

	get_register(addr_sensor_press, addr_PRESS_OUT_H, P_OUT_H);
 8000d58:	4a17      	ldr	r2, [pc, #92]	; (8000db8 <get_press+0x64>)
 8000d5a:	4918      	ldr	r1, [pc, #96]	; (8000dbc <get_press+0x68>)
 8000d5c:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <get_press+0x6c>)
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f7ff fe14 	bl	800098c <get_register>
	get_register(addr_sensor_press, addr_PRESS_OUT_L, P_OUT_L);
 8000d64:	4a17      	ldr	r2, [pc, #92]	; (8000dc4 <get_press+0x70>)
 8000d66:	4918      	ldr	r1, [pc, #96]	; (8000dc8 <get_press+0x74>)
 8000d68:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <get_press+0x6c>)
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff fe0e 	bl	800098c <get_register>
	get_register(addr_sensor_press, addr_PRESS_OUT_XL, P_OUT_XL);
 8000d70:	4a16      	ldr	r2, [pc, #88]	; (8000dcc <get_press+0x78>)
 8000d72:	4917      	ldr	r1, [pc, #92]	; (8000dd0 <get_press+0x7c>)
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <get_press+0x6c>)
 8000d76:	0018      	movs	r0, r3
 8000d78:	f7ff fe08 	bl	800098c <get_register>

	P_OUT = ( (P_OUT_H[0]<<16) + (P_OUT_L[0]<<8) + (P_OUT_XL[0]) );
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <get_press+0x64>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	041a      	lsls	r2, r3, #16
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <get_press+0x70>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	021b      	lsls	r3, r3, #8
 8000d88:	18d3      	adds	r3, r2, r3
 8000d8a:	4a10      	ldr	r2, [pc, #64]	; (8000dcc <get_press+0x78>)
 8000d8c:	7812      	ldrb	r2, [r2, #0]
 8000d8e:	189a      	adds	r2, r3, r2
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <get_press+0x80>)
 8000d92:	601a      	str	r2, [r3, #0]
	press32 = P_OUT;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <get_press+0x80>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <get_press+0x84>)
 8000d9a:	601a      	str	r2, [r3, #0]

	value_press = press32/4096;
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <get_press+0x84>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	da02      	bge.n	8000daa <get_press+0x56>
 8000da4:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <get_press+0x88>)
 8000da6:	4694      	mov	ip, r2
 8000da8:	4463      	add	r3, ip
 8000daa:	131b      	asrs	r3, r3, #12
 8000dac:	b21a      	sxth	r2, r3
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <get_press+0x8c>)
 8000db0:	801a      	strh	r2, [r3, #0]

}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200000d8 	.word	0x200000d8
 8000dbc:	2000004c 	.word	0x2000004c
 8000dc0:	20000048 	.word	0x20000048
 8000dc4:	200000dc 	.word	0x200000dc
 8000dc8:	20000050 	.word	0x20000050
 8000dcc:	200000e0 	.word	0x200000e0
 8000dd0:	20000054 	.word	0x20000054
 8000dd4:	20000148 	.word	0x20000148
 8000dd8:	20000150 	.word	0x20000150
 8000ddc:	00000fff 	.word	0x00000fff
 8000de0:	2000013e 	.word	0x2000013e

08000de4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8000dee:	e7fe      	b.n	8000dee <_Error_Handler+0xa>

08000df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_MspInit+0x50>)
 8000df6:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <HAL_MspInit+0x50>)
 8000df8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <HAL_MspInit+0x50>)
 8000e02:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <HAL_MspInit+0x50>)
 8000e04:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000e06:	2180      	movs	r1, #128	; 0x80
 8000e08:	0549      	lsls	r1, r1, #21
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8000e0e:	2305      	movs	r3, #5
 8000e10:	425b      	negs	r3, r3
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	0018      	movs	r0, r3
 8000e18:	f000 f9ca 	bl	80011b0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	425b      	negs	r3, r3
 8000e20:	2200      	movs	r2, #0
 8000e22:	2100      	movs	r1, #0
 8000e24:	0018      	movs	r0, r3
 8000e26:	f000 f9c3 	bl	80011b0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	425b      	negs	r3, r3
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2100      	movs	r1, #0
 8000e32:	0018      	movs	r0, r3
 8000e34:	f000 f9bc 	bl	80011b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e38:	46c0      	nop			; (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	40021000 	.word	0x40021000

08000e44 <NMI_Handler>:

/**
* @brief This function handles Non maskable Interrupt.
*/
void NMI_Handler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <HardFault_Handler+0x4>

08000e54 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6c:	f000 f8e0 	bl	8001030 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000e70:	f000 f9dc 	bl	800122c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000e80:	4b16      	ldr	r3, [pc, #88]	; (8000edc <MX_USART2_UART_Init+0x60>)
 8000e82:	4a17      	ldr	r2, [pc, #92]	; (8000ee0 <MX_USART2_UART_Init+0x64>)
 8000e84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <MX_USART2_UART_Init+0x60>)
 8000e88:	22e1      	movs	r2, #225	; 0xe1
 8000e8a:	0252      	lsls	r2, r2, #9
 8000e8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <MX_USART2_UART_Init+0x60>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <MX_USART2_UART_Init+0x60>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <MX_USART2_UART_Init+0x60>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <MX_USART2_UART_Init+0x60>)
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <MX_USART2_UART_Init+0x60>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <MX_USART2_UART_Init+0x60>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <MX_USART2_UART_Init+0x60>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <MX_USART2_UART_Init+0x60>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ebe:	4b07      	ldr	r3, [pc, #28]	; (8000edc <MX_USART2_UART_Init+0x60>)
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f002 f9a7 	bl	8003214 <HAL_UART_Init>
 8000ec6:	1e03      	subs	r3, r0, #0
 8000ec8:	d004      	beq.n	8000ed4 <MX_USART2_UART_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_USART2_UART_Init+0x68>)
 8000ecc:	2144      	movs	r1, #68	; 0x44
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f7ff ff88 	bl	8000de4 <_Error_Handler>
  }

}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	20000154 	.word	0x20000154
 8000ee0:	40004400 	.word	0x40004400
 8000ee4:	08003c6c 	.word	0x08003c6c

08000ee8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a14      	ldr	r2, [pc, #80]	; (8000f48 <HAL_UART_MspInit+0x60>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d122      	bne.n	8000f40 <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <HAL_UART_MspInit+0x64>)
 8000efc:	4a13      	ldr	r2, [pc, #76]	; (8000f4c <HAL_UART_MspInit+0x64>)
 8000efe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000f00:	2180      	movs	r1, #128	; 0x80
 8000f02:	0289      	lsls	r1, r1, #10
 8000f04:	430a      	orrs	r2, r1
 8000f06:	639a      	str	r2, [r3, #56]	; 0x38
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f08:	230c      	movs	r3, #12
 8000f0a:	18fb      	adds	r3, r7, r3
 8000f0c:	220c      	movs	r2, #12
 8000f0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	230c      	movs	r3, #12
 8000f12:	18fb      	adds	r3, r7, r3
 8000f14:	2202      	movs	r2, #2
 8000f16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	230c      	movs	r3, #12
 8000f1a:	18fb      	adds	r3, r7, r3
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f20:	230c      	movs	r3, #12
 8000f22:	18fb      	adds	r3, r7, r3
 8000f24:	2203      	movs	r2, #3
 8000f26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000f28:	230c      	movs	r3, #12
 8000f2a:	18fb      	adds	r3, r7, r3
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	230c      	movs	r3, #12
 8000f32:	18fa      	adds	r2, r7, r3
 8000f34:	23a0      	movs	r3, #160	; 0xa0
 8000f36:	05db      	lsls	r3, r3, #23
 8000f38:	0011      	movs	r1, r2
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f000 f982 	bl	8001244 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f40:	46c0      	nop			; (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	b008      	add	sp, #32
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40004400 	.word	0x40004400
 8000f4c:	40021000 	.word	0x40021000

08000f50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000f54:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <SystemInit+0x64>)
 8000f56:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <SystemInit+0x64>)
 8000f58:	6812      	ldr	r2, [r2, #0]
 8000f5a:	2180      	movs	r1, #128	; 0x80
 8000f5c:	0049      	lsls	r1, r1, #1
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <SystemInit+0x64>)
 8000f64:	4a13      	ldr	r2, [pc, #76]	; (8000fb4 <SystemInit+0x64>)
 8000f66:	68d2      	ldr	r2, [r2, #12]
 8000f68:	4913      	ldr	r1, [pc, #76]	; (8000fb8 <SystemInit+0x68>)
 8000f6a:	400a      	ands	r2, r1
 8000f6c:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <SystemInit+0x64>)
 8000f70:	4a10      	ldr	r2, [pc, #64]	; (8000fb4 <SystemInit+0x64>)
 8000f72:	6812      	ldr	r2, [r2, #0]
 8000f74:	4911      	ldr	r1, [pc, #68]	; (8000fbc <SystemInit+0x6c>)
 8000f76:	400a      	ands	r2, r1
 8000f78:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <SystemInit+0x64>)
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	; (8000fb4 <SystemInit+0x64>)
 8000f7e:	6892      	ldr	r2, [r2, #8]
 8000f80:	2101      	movs	r1, #1
 8000f82:	438a      	bics	r2, r1
 8000f84:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <SystemInit+0x64>)
 8000f88:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <SystemInit+0x64>)
 8000f8a:	6812      	ldr	r2, [r2, #0]
 8000f8c:	490c      	ldr	r1, [pc, #48]	; (8000fc0 <SystemInit+0x70>)
 8000f8e:	400a      	ands	r2, r1
 8000f90:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <SystemInit+0x64>)
 8000f94:	4a07      	ldr	r2, [pc, #28]	; (8000fb4 <SystemInit+0x64>)
 8000f96:	68d2      	ldr	r2, [r2, #12]
 8000f98:	490a      	ldr	r1, [pc, #40]	; (8000fc4 <SystemInit+0x74>)
 8000f9a:	400a      	ands	r2, r1
 8000f9c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f9e:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <SystemInit+0x64>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <SystemInit+0x78>)
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	0512      	lsls	r2, r2, #20
 8000faa:	609a      	str	r2, [r3, #8]
#endif
}
 8000fac:	46c0      	nop			; (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	88ff400c 	.word	0x88ff400c
 8000fbc:	fef6fff6 	.word	0xfef6fff6
 8000fc0:	fffbffff 	.word	0xfffbffff
 8000fc4:	ff02ffff 	.word	0xff02ffff
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <HAL_Init+0x24>)
 8000fd2:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <HAL_Init+0x24>)
 8000fd4:	6812      	ldr	r2, [r2, #0]
 8000fd6:	2140      	movs	r1, #64	; 0x40
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f000 f809 	bl	8000ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe2:	f7ff ff05 	bl	8000df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	0018      	movs	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	40022000 	.word	0x40022000

08000ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <HAL_InitTick+0x38>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	23fa      	movs	r3, #250	; 0xfa
 8001002:	0099      	lsls	r1, r3, #2
 8001004:	0010      	movs	r0, r2
 8001006:	f7ff f87f 	bl	8000108 <__udivsi3>
 800100a:	0003      	movs	r3, r0
 800100c:	0018      	movs	r0, r3
 800100e:	f000 f8e5 	bl	80011dc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	2301      	movs	r3, #1
 8001016:	425b      	negs	r3, r3
 8001018:	2200      	movs	r2, #0
 800101a:	0018      	movs	r0, r3
 800101c:	f000 f8c8 	bl	80011b0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	0018      	movs	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	b002      	add	sp, #8
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	20000058 	.word	0x20000058

08001030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  uwTick++;
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <HAL_IncTick+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	1c5a      	adds	r2, r3, #1
 800103a:	4b02      	ldr	r3, [pc, #8]	; (8001044 <HAL_IncTick+0x14>)
 800103c:	601a      	str	r2, [r3, #0]
}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200001c4 	.word	0x200001c4

08001048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b02      	ldr	r3, [pc, #8]	; (8001058 <HAL_GetTick+0x10>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	0018      	movs	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	200001c4 	.word	0x200001c4

0800105c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8001068:	f7ff ffee 	bl	8001048 <HAL_GetTick>
 800106c:	0003      	movs	r3, r0
 800106e:	60fb      	str	r3, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8001070:	46c0      	nop			; (mov r8, r8)
 8001072:	f7ff ffe9 	bl	8001048 <HAL_GetTick>
 8001076:	0002      	movs	r2, r0
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	1ad2      	subs	r2, r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	429a      	cmp	r2, r3
 8001080:	d3f7      	bcc.n	8001072 <HAL_Delay+0x16>
  {
  }
}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	46bd      	mov	sp, r7
 8001086:	b004      	add	sp, #16
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800108c:	b5b0      	push	{r4, r5, r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	0002      	movs	r2, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800109a:	1dfb      	adds	r3, r7, #7
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b7f      	cmp	r3, #127	; 0x7f
 80010a0:	d932      	bls.n	8001108 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010a2:	4c2f      	ldr	r4, [pc, #188]	; (8001160 <NVIC_SetPriority+0xd4>)
 80010a4:	1dfb      	adds	r3, r7, #7
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	001a      	movs	r2, r3
 80010aa:	230f      	movs	r3, #15
 80010ac:	4013      	ands	r3, r2
 80010ae:	3b08      	subs	r3, #8
 80010b0:	0899      	lsrs	r1, r3, #2
 80010b2:	4a2b      	ldr	r2, [pc, #172]	; (8001160 <NVIC_SetPriority+0xd4>)
 80010b4:	1dfb      	adds	r3, r7, #7
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	0018      	movs	r0, r3
 80010ba:	230f      	movs	r3, #15
 80010bc:	4003      	ands	r3, r0
 80010be:	3b08      	subs	r3, #8
 80010c0:	089b      	lsrs	r3, r3, #2
 80010c2:	3306      	adds	r3, #6
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	18d3      	adds	r3, r2, r3
 80010c8:	3304      	adds	r3, #4
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	1dfa      	adds	r2, r7, #7
 80010ce:	7812      	ldrb	r2, [r2, #0]
 80010d0:	0010      	movs	r0, r2
 80010d2:	2203      	movs	r2, #3
 80010d4:	4002      	ands	r2, r0
 80010d6:	00d2      	lsls	r2, r2, #3
 80010d8:	20ff      	movs	r0, #255	; 0xff
 80010da:	4090      	lsls	r0, r2
 80010dc:	0002      	movs	r2, r0
 80010de:	43d2      	mvns	r2, r2
 80010e0:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	019b      	lsls	r3, r3, #6
 80010e6:	20ff      	movs	r0, #255	; 0xff
 80010e8:	4018      	ands	r0, r3
 80010ea:	1dfb      	adds	r3, r7, #7
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	001d      	movs	r5, r3
 80010f0:	2303      	movs	r3, #3
 80010f2:	402b      	ands	r3, r5
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	4098      	lsls	r0, r3
 80010f8:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010fa:	431a      	orrs	r2, r3
 80010fc:	1d8b      	adds	r3, r1, #6
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	18e3      	adds	r3, r4, r3
 8001102:	3304      	adds	r3, #4
 8001104:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001106:	e027      	b.n	8001158 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001108:	4c16      	ldr	r4, [pc, #88]	; (8001164 <NVIC_SetPriority+0xd8>)
 800110a:	1dfb      	adds	r3, r7, #7
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	b25b      	sxtb	r3, r3
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	4914      	ldr	r1, [pc, #80]	; (8001164 <NVIC_SetPriority+0xd8>)
 8001114:	1dfa      	adds	r2, r7, #7
 8001116:	7812      	ldrb	r2, [r2, #0]
 8001118:	b252      	sxtb	r2, r2
 800111a:	0892      	lsrs	r2, r2, #2
 800111c:	32c0      	adds	r2, #192	; 0xc0
 800111e:	0092      	lsls	r2, r2, #2
 8001120:	5852      	ldr	r2, [r2, r1]
 8001122:	1df9      	adds	r1, r7, #7
 8001124:	7809      	ldrb	r1, [r1, #0]
 8001126:	0008      	movs	r0, r1
 8001128:	2103      	movs	r1, #3
 800112a:	4001      	ands	r1, r0
 800112c:	00c9      	lsls	r1, r1, #3
 800112e:	20ff      	movs	r0, #255	; 0xff
 8001130:	4088      	lsls	r0, r1
 8001132:	0001      	movs	r1, r0
 8001134:	43c9      	mvns	r1, r1
 8001136:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	0192      	lsls	r2, r2, #6
 800113c:	20ff      	movs	r0, #255	; 0xff
 800113e:	4010      	ands	r0, r2
 8001140:	1dfa      	adds	r2, r7, #7
 8001142:	7812      	ldrb	r2, [r2, #0]
 8001144:	0015      	movs	r5, r2
 8001146:	2203      	movs	r2, #3
 8001148:	402a      	ands	r2, r5
 800114a:	00d2      	lsls	r2, r2, #3
 800114c:	4090      	lsls	r0, r2
 800114e:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001150:	430a      	orrs	r2, r1
 8001152:	33c0      	adds	r3, #192	; 0xc0
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	511a      	str	r2, [r3, r4]
}
 8001158:	46c0      	nop			; (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	b002      	add	sp, #8
 800115e:	bdb0      	pop	{r4, r5, r7, pc}
 8001160:	e000ed00 	.word	0xe000ed00
 8001164:	e000e100 	.word	0xe000e100

08001168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	4a0c      	ldr	r2, [pc, #48]	; (80011a8 <SysTick_Config+0x40>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d901      	bls.n	800117e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117a:	2301      	movs	r3, #1
 800117c:	e010      	b.n	80011a0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <SysTick_Config+0x44>)
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	3a01      	subs	r2, #1
 8001184:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001186:	2301      	movs	r3, #1
 8001188:	425b      	negs	r3, r3
 800118a:	2103      	movs	r1, #3
 800118c:	0018      	movs	r0, r3
 800118e:	f7ff ff7d 	bl	800108c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <SysTick_Config+0x44>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <SysTick_Config+0x44>)
 800119a:	2207      	movs	r2, #7
 800119c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800119e:	2300      	movs	r3, #0
}
 80011a0:	0018      	movs	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b002      	add	sp, #8
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	00ffffff 	.word	0x00ffffff
 80011ac:	e000e010 	.word	0xe000e010

080011b0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	230f      	movs	r3, #15
 80011bc:	18fb      	adds	r3, r7, r3
 80011be:	1c02      	adds	r2, r0, #0
 80011c0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	230f      	movs	r3, #15
 80011c6:	18fb      	adds	r3, r7, r3
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b25b      	sxtb	r3, r3
 80011cc:	0011      	movs	r1, r2
 80011ce:	0018      	movs	r0, r3
 80011d0:	f7ff ff5c 	bl	800108c <NVIC_SetPriority>
}
 80011d4:	46c0      	nop			; (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b004      	add	sp, #16
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	0018      	movs	r0, r3
 80011e8:	f7ff ffbe 	bl	8001168 <SysTick_Config>
 80011ec:	0003      	movs	r3, r0
}
 80011ee:	0018      	movs	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	b002      	add	sp, #8
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b04      	cmp	r3, #4
 8001204:	d106      	bne.n	8001214 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8001208:	4a07      	ldr	r2, [pc, #28]	; (8001228 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 800120a:	6812      	ldr	r2, [r2, #0]
 800120c:	2104      	movs	r1, #4
 800120e:	430a      	orrs	r2, r1
 8001210:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001212:	e005      	b.n	8001220 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8001216:	4a04      	ldr	r2, [pc, #16]	; (8001228 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8001218:	6812      	ldr	r2, [r2, #0]
 800121a:	2104      	movs	r1, #4
 800121c:	438a      	bics	r2, r1
 800121e:	601a      	str	r2, [r3, #0]
}
 8001220:	46c0      	nop			; (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	b002      	add	sp, #8
 8001226:	bd80      	pop	{r7, pc}
 8001228:	e000e010 	.word	0xe000e010

0800122c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001230:	f000 f803 	bl	800123a <HAL_SYSTICK_Callback>
}
 8001234:	46c0      	nop			; (mov r8, r8)
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800125a:	e155      	b.n	8001508 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2101      	movs	r1, #1
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	4091      	lsls	r1, r2
 8001266:	000a      	movs	r2, r1
 8001268:	4013      	ands	r3, r2
 800126a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d100      	bne.n	8001274 <HAL_GPIO_Init+0x30>
 8001272:	e146      	b.n	8001502 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b02      	cmp	r3, #2
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x40>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b12      	cmp	r3, #18
 8001282:	d123      	bne.n	80012cc <HAL_GPIO_Init+0x88>
      {
        /* Check if the Alternate function is compliant with the GPIO in use */
        assert_param(IS_GPIO_AF_AVAILABLE(GPIOx,(GPIO_Init->Alternate)));
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	08da      	lsrs	r2, r3, #3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3208      	adds	r2, #8
 800128c:	0092      	lsls	r2, r2, #2
 800128e:	58d3      	ldr	r3, [r2, r3]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	2207      	movs	r2, #7
 8001296:	4013      	ands	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	220f      	movs	r2, #15
 800129c:	409a      	lsls	r2, r3
 800129e:	0013      	movs	r3, r2
 80012a0:	43da      	mvns	r2, r3
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	691a      	ldr	r2, [r3, #16]
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	2107      	movs	r1, #7
 80012b0:	400b      	ands	r3, r1
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	409a      	lsls	r2, r3
 80012b6:	0013      	movs	r3, r2
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	08da      	lsrs	r2, r3, #3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3208      	adds	r2, #8
 80012c6:	0092      	lsls	r2, r2, #2
 80012c8:	6939      	ldr	r1, [r7, #16]
 80012ca:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d00b      	beq.n	80012ec <HAL_GPIO_Init+0xa8>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d007      	beq.n	80012ec <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012e0:	2b11      	cmp	r3, #17
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b12      	cmp	r3, #18
 80012ea:	d130      	bne.n	800134e <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	2203      	movs	r2, #3
 80012f8:	409a      	lsls	r2, r3
 80012fa:	0013      	movs	r3, r2
 80012fc:	43da      	mvns	r2, r3
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	409a      	lsls	r2, r3
 800130e:	0013      	movs	r3, r2
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001322:	2201      	movs	r2, #1
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	409a      	lsls	r2, r3
 8001328:	0013      	movs	r3, r2
 800132a:	43da      	mvns	r2, r3
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	091b      	lsrs	r3, r3, #4
 8001338:	2201      	movs	r2, #1
 800133a:	401a      	ands	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	409a      	lsls	r2, r3
 8001340:	0013      	movs	r3, r2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	2203      	movs	r2, #3
 800135a:	409a      	lsls	r2, r3
 800135c:	0013      	movs	r3, r2
 800135e:	43da      	mvns	r2, r3
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2203      	movs	r2, #3
 800136c:	401a      	ands	r2, r3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	409a      	lsls	r2, r3
 8001374:	0013      	movs	r3, r2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	2203      	movs	r2, #3
 800138e:	409a      	lsls	r2, r3
 8001390:	0013      	movs	r3, r2
 8001392:	43da      	mvns	r2, r3
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	409a      	lsls	r2, r3
 80013a4:	0013      	movs	r3, r2
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	2380      	movs	r3, #128	; 0x80
 80013b8:	055b      	lsls	r3, r3, #21
 80013ba:	4013      	ands	r3, r2
 80013bc:	d100      	bne.n	80013c0 <HAL_GPIO_Init+0x17c>
 80013be:	e0a0      	b.n	8001502 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c0:	4b57      	ldr	r3, [pc, #348]	; (8001520 <HAL_GPIO_Init+0x2dc>)
 80013c2:	4a57      	ldr	r2, [pc, #348]	; (8001520 <HAL_GPIO_Init+0x2dc>)
 80013c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013c6:	2101      	movs	r1, #1
 80013c8:	430a      	orrs	r2, r1
 80013ca:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80013cc:	4a55      	ldr	r2, [pc, #340]	; (8001524 <HAL_GPIO_Init+0x2e0>)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	3302      	adds	r3, #2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	589b      	ldr	r3, [r3, r2]
 80013d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	2203      	movs	r2, #3
 80013de:	4013      	ands	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	220f      	movs	r2, #15
 80013e4:	409a      	lsls	r2, r3
 80013e6:	0013      	movs	r3, r2
 80013e8:	43da      	mvns	r2, r3
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	23a0      	movs	r3, #160	; 0xa0
 80013f4:	05db      	lsls	r3, r3, #23
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d01f      	beq.n	800143a <HAL_GPIO_Init+0x1f6>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4a      	ldr	r2, [pc, #296]	; (8001528 <HAL_GPIO_Init+0x2e4>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d019      	beq.n	8001436 <HAL_GPIO_Init+0x1f2>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a49      	ldr	r2, [pc, #292]	; (800152c <HAL_GPIO_Init+0x2e8>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d013      	beq.n	8001432 <HAL_GPIO_Init+0x1ee>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a48      	ldr	r2, [pc, #288]	; (8001530 <HAL_GPIO_Init+0x2ec>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d00d      	beq.n	800142e <HAL_GPIO_Init+0x1ea>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a47      	ldr	r2, [pc, #284]	; (8001534 <HAL_GPIO_Init+0x2f0>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d007      	beq.n	800142a <HAL_GPIO_Init+0x1e6>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a46      	ldr	r2, [pc, #280]	; (8001538 <HAL_GPIO_Init+0x2f4>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d101      	bne.n	8001426 <HAL_GPIO_Init+0x1e2>
 8001422:	2305      	movs	r3, #5
 8001424:	e00a      	b.n	800143c <HAL_GPIO_Init+0x1f8>
 8001426:	2306      	movs	r3, #6
 8001428:	e008      	b.n	800143c <HAL_GPIO_Init+0x1f8>
 800142a:	2304      	movs	r3, #4
 800142c:	e006      	b.n	800143c <HAL_GPIO_Init+0x1f8>
 800142e:	2303      	movs	r3, #3
 8001430:	e004      	b.n	800143c <HAL_GPIO_Init+0x1f8>
 8001432:	2302      	movs	r3, #2
 8001434:	e002      	b.n	800143c <HAL_GPIO_Init+0x1f8>
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <HAL_GPIO_Init+0x1f8>
 800143a:	2300      	movs	r3, #0
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	2103      	movs	r1, #3
 8001440:	400a      	ands	r2, r1
 8001442:	0092      	lsls	r2, r2, #2
 8001444:	4093      	lsls	r3, r2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800144c:	4935      	ldr	r1, [pc, #212]	; (8001524 <HAL_GPIO_Init+0x2e0>)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	089b      	lsrs	r3, r3, #2
 8001452:	3302      	adds	r3, #2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800145a:	4b38      	ldr	r3, [pc, #224]	; (800153c <HAL_GPIO_Init+0x2f8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	43da      	mvns	r2, r3
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4013      	ands	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	2380      	movs	r3, #128	; 0x80
 8001470:	025b      	lsls	r3, r3, #9
 8001472:	4013      	ands	r3, r2
 8001474:	d003      	beq.n	800147e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800147e:	4b2f      	ldr	r3, [pc, #188]	; (800153c <HAL_GPIO_Init+0x2f8>)
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001484:	4b2d      	ldr	r3, [pc, #180]	; (800153c <HAL_GPIO_Init+0x2f8>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	43da      	mvns	r2, r3
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	2380      	movs	r3, #128	; 0x80
 800149a:	029b      	lsls	r3, r3, #10
 800149c:	4013      	ands	r3, r2
 800149e:	d003      	beq.n	80014a8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014a8:	4b24      	ldr	r3, [pc, #144]	; (800153c <HAL_GPIO_Init+0x2f8>)
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ae:	4b23      	ldr	r3, [pc, #140]	; (800153c <HAL_GPIO_Init+0x2f8>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	43da      	mvns	r2, r3
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	2380      	movs	r3, #128	; 0x80
 80014c4:	035b      	lsls	r3, r3, #13
 80014c6:	4013      	ands	r3, r2
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014d2:	4b1a      	ldr	r3, [pc, #104]	; (800153c <HAL_GPIO_Init+0x2f8>)
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014d8:	4b18      	ldr	r3, [pc, #96]	; (800153c <HAL_GPIO_Init+0x2f8>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	43da      	mvns	r2, r3
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	039b      	lsls	r3, r3, #14
 80014f0:	4013      	ands	r3, r2
 80014f2:	d003      	beq.n	80014fc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <HAL_GPIO_Init+0x2f8>)
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3301      	adds	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	40da      	lsrs	r2, r3
 8001510:	1e13      	subs	r3, r2, #0
 8001512:	d000      	beq.n	8001516 <HAL_GPIO_Init+0x2d2>
 8001514:	e6a2      	b.n	800125c <HAL_GPIO_Init+0x18>
  }
}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	46bd      	mov	sp, r7
 800151a:	b006      	add	sp, #24
 800151c:	bd80      	pop	{r7, pc}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	40021000 	.word	0x40021000
 8001524:	40010000 	.word	0x40010000
 8001528:	50000400 	.word	0x50000400
 800152c:	50000800 	.word	0x50000800
 8001530:	50000c00 	.word	0x50000c00
 8001534:	50001000 	.word	0x50001000
 8001538:	50001c00 	.word	0x50001c00
 800153c:	40010400 	.word	0x40010400

08001540 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	0008      	movs	r0, r1
 800154a:	0011      	movs	r1, r2
 800154c:	1cbb      	adds	r3, r7, #2
 800154e:	1c02      	adds	r2, r0, #0
 8001550:	801a      	strh	r2, [r3, #0]
 8001552:	1c7b      	adds	r3, r7, #1
 8001554:	1c0a      	adds	r2, r1, #0
 8001556:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001558:	1c7b      	adds	r3, r7, #1
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d004      	beq.n	800156a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001560:	1cbb      	adds	r3, r7, #2
 8001562:	881a      	ldrh	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001568:	e003      	b.n	8001572 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800156a:	1cbb      	adds	r3, r7, #2
 800156c:	881a      	ldrh	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	46bd      	mov	sp, r7
 8001576:	b002      	add	sp, #8
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e081      	b.n	8001692 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2241      	movs	r2, #65	; 0x41
 8001592:	5c9b      	ldrb	r3, [r3, r2]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d107      	bne.n	80015aa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2240      	movs	r2, #64	; 0x40
 800159e:	2100      	movs	r1, #0
 80015a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	0018      	movs	r0, r3
 80015a6:	f7ff f915 	bl	80007d4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2241      	movs	r2, #65	; 0x41
 80015ae:	2124      	movs	r1, #36	; 0x24
 80015b0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6812      	ldr	r2, [r2, #0]
 80015ba:	6812      	ldr	r2, [r2, #0]
 80015bc:	2101      	movs	r1, #1
 80015be:	438a      	bics	r2, r1
 80015c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6852      	ldr	r2, [r2, #4]
 80015ca:	4934      	ldr	r1, [pc, #208]	; (800169c <HAL_I2C_Init+0x120>)
 80015cc:	400a      	ands	r2, r1
 80015ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	6812      	ldr	r2, [r2, #0]
 80015d8:	6892      	ldr	r2, [r2, #8]
 80015da:	4931      	ldr	r1, [pc, #196]	; (80016a0 <HAL_I2C_Init+0x124>)
 80015dc:	400a      	ands	r2, r1
 80015de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d108      	bne.n	80015fa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	6892      	ldr	r2, [r2, #8]
 80015f0:	2180      	movs	r1, #128	; 0x80
 80015f2:	0209      	lsls	r1, r1, #8
 80015f4:	430a      	orrs	r2, r1
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	e007      	b.n	800160a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6892      	ldr	r2, [r2, #8]
 8001602:	2184      	movs	r1, #132	; 0x84
 8001604:	0209      	lsls	r1, r1, #8
 8001606:	430a      	orrs	r2, r1
 8001608:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d104      	bne.n	800161c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2280      	movs	r2, #128	; 0x80
 8001618:	0112      	lsls	r2, r2, #4
 800161a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	6852      	ldr	r2, [r2, #4]
 8001626:	491f      	ldr	r1, [pc, #124]	; (80016a4 <HAL_I2C_Init+0x128>)
 8001628:	430a      	orrs	r2, r1
 800162a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	68d2      	ldr	r2, [r2, #12]
 8001636:	491a      	ldr	r1, [pc, #104]	; (80016a0 <HAL_I2C_Init+0x124>)
 8001638:	400a      	ands	r2, r1
 800163a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6911      	ldr	r1, [r2, #16]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6952      	ldr	r2, [r2, #20]
 8001648:	4311      	orrs	r1, r2
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	6992      	ldr	r2, [r2, #24]
 800164e:	0212      	lsls	r2, r2, #8
 8001650:	430a      	orrs	r2, r1
 8001652:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	69d1      	ldr	r1, [r2, #28]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6a12      	ldr	r2, [r2, #32]
 8001660:	430a      	orrs	r2, r1
 8001662:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6812      	ldr	r2, [r2, #0]
 800166c:	6812      	ldr	r2, [r2, #0]
 800166e:	2101      	movs	r1, #1
 8001670:	430a      	orrs	r2, r1
 8001672:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2241      	movs	r2, #65	; 0x41
 800167e:	2120      	movs	r1, #32
 8001680:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2242      	movs	r2, #66	; 0x42
 800168c:	2100      	movs	r1, #0
 800168e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	0018      	movs	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	b002      	add	sp, #8
 8001698:	bd80      	pop	{r7, pc}
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	f0ffffff 	.word	0xf0ffffff
 80016a0:	ffff7fff 	.word	0xffff7fff
 80016a4:	02008000 	.word	0x02008000

080016a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b089      	sub	sp, #36	; 0x24
 80016ac:	af02      	add	r7, sp, #8
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	0008      	movs	r0, r1
 80016b2:	607a      	str	r2, [r7, #4]
 80016b4:	0019      	movs	r1, r3
 80016b6:	230a      	movs	r3, #10
 80016b8:	18fb      	adds	r3, r7, r3
 80016ba:	1c02      	adds	r2, r0, #0
 80016bc:	801a      	strh	r2, [r3, #0]
 80016be:	2308      	movs	r3, #8
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	1c0a      	adds	r2, r1, #0
 80016c4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2241      	movs	r2, #65	; 0x41
 80016ce:	5c9b      	ldrb	r3, [r3, r2]
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b20      	cmp	r3, #32
 80016d4:	d000      	beq.n	80016d8 <HAL_I2C_Master_Transmit+0x30>
 80016d6:	e0f1      	b.n	80018bc <HAL_I2C_Master_Transmit+0x214>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2240      	movs	r2, #64	; 0x40
 80016dc:	5c9b      	ldrb	r3, [r3, r2]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d101      	bne.n	80016e6 <HAL_I2C_Master_Transmit+0x3e>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e0eb      	b.n	80018be <HAL_I2C_Master_Transmit+0x216>
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2240      	movs	r2, #64	; 0x40
 80016ea:	2101      	movs	r1, #1
 80016ec:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016ee:	f7ff fcab 	bl	8001048 <HAL_GetTick>
 80016f2:	0003      	movs	r3, r0
 80016f4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	0219      	lsls	r1, r3, #8
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	2319      	movs	r3, #25
 8001702:	2201      	movs	r2, #1
 8001704:	f000 fa1a 	bl	8001b3c <I2C_WaitOnFlagUntilTimeout>
 8001708:	1e03      	subs	r3, r0, #0
 800170a:	d001      	beq.n	8001710 <HAL_I2C_Master_Transmit+0x68>
    {
      return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e0d6      	b.n	80018be <HAL_I2C_Master_Transmit+0x216>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2241      	movs	r2, #65	; 0x41
 8001714:	2121      	movs	r1, #33	; 0x21
 8001716:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2242      	movs	r2, #66	; 0x42
 800171c:	2110      	movs	r1, #16
 800171e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2200      	movs	r2, #0
 8001724:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2208      	movs	r2, #8
 8001730:	18ba      	adds	r2, r7, r2
 8001732:	8812      	ldrh	r2, [r2, #0]
 8001734:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2200      	movs	r2, #0
 800173a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001740:	b29b      	uxth	r3, r3
 8001742:	2bff      	cmp	r3, #255	; 0xff
 8001744:	d911      	bls.n	800176a <HAL_I2C_Master_Transmit+0xc2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	22ff      	movs	r2, #255	; 0xff
 800174a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001750:	b2da      	uxtb	r2, r3
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	045c      	lsls	r4, r3, #17
 8001756:	230a      	movs	r3, #10
 8001758:	18fb      	adds	r3, r7, r3
 800175a:	8819      	ldrh	r1, [r3, #0]
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	4b5a      	ldr	r3, [pc, #360]	; (80018c8 <HAL_I2C_Master_Transmit+0x220>)
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	0023      	movs	r3, r4
 8001764:	f000 fb5a 	bl	8001e1c <I2C_TransferConfig>
 8001768:	e079      	b.n	800185e <HAL_I2C_Master_Transmit+0x1b6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176e:	b29a      	uxth	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001778:	b2da      	uxtb	r2, r3
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	049c      	lsls	r4, r3, #18
 800177e:	230a      	movs	r3, #10
 8001780:	18fb      	adds	r3, r7, r3
 8001782:	8819      	ldrh	r1, [r3, #0]
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	4b50      	ldr	r3, [pc, #320]	; (80018c8 <HAL_I2C_Master_Transmit+0x220>)
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	0023      	movs	r3, r4
 800178c:	f000 fb46 	bl	8001e1c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001790:	e065      	b.n	800185e <HAL_I2C_Master_Transmit+0x1b6>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	0018      	movs	r0, r3
 800179a:	f000 fa08 	bl	8001bae <I2C_WaitOnTXISFlagUntilTimeout>
 800179e:	1e03      	subs	r3, r0, #0
 80017a0:	d007      	beq.n	80017b2 <HAL_I2C_Master_Transmit+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d101      	bne.n	80017ae <HAL_I2C_Master_Transmit+0x106>
        {
          return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e087      	b.n	80018be <HAL_I2C_Master_Transmit+0x216>
        }
        else
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e085      	b.n	80018be <HAL_I2C_Master_Transmit+0x216>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017ba:	1c50      	adds	r0, r2, #1
 80017bc:	68f9      	ldr	r1, [r7, #12]
 80017be:	6248      	str	r0, [r1, #36]	; 0x24
 80017c0:	7812      	ldrb	r2, [r2, #0]
 80017c2:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	3b01      	subs	r3, #1
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d6:	3b01      	subs	r3, #1
 80017d8:	b29a      	uxth	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d13b      	bne.n	800185e <HAL_I2C_Master_Transmit+0x1b6>
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d036      	beq.n	800185e <HAL_I2C_Master_Transmit+0x1b6>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	0013      	movs	r3, r2
 80017fa:	2200      	movs	r2, #0
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	f000 f99d 	bl	8001b3c <I2C_WaitOnFlagUntilTimeout>
 8001802:	1e03      	subs	r3, r0, #0
 8001804:	d001      	beq.n	800180a <HAL_I2C_Master_Transmit+0x162>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e059      	b.n	80018be <HAL_I2C_Master_Transmit+0x216>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800180e:	b29b      	uxth	r3, r3
 8001810:	2bff      	cmp	r3, #255	; 0xff
 8001812:	d911      	bls.n	8001838 <HAL_I2C_Master_Transmit+0x190>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	22ff      	movs	r2, #255	; 0xff
 8001818:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800181e:	b2da      	uxtb	r2, r3
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	045c      	lsls	r4, r3, #17
 8001824:	230a      	movs	r3, #10
 8001826:	18fb      	adds	r3, r7, r3
 8001828:	8819      	ldrh	r1, [r3, #0]
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	2300      	movs	r3, #0
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	0023      	movs	r3, r4
 8001832:	f000 faf3 	bl	8001e1c <I2C_TransferConfig>
 8001836:	e012      	b.n	800185e <HAL_I2C_Master_Transmit+0x1b6>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800183c:	b29a      	uxth	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001846:	b2da      	uxtb	r2, r3
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	049c      	lsls	r4, r3, #18
 800184c:	230a      	movs	r3, #10
 800184e:	18fb      	adds	r3, r7, r3
 8001850:	8819      	ldrh	r1, [r3, #0]
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	2300      	movs	r3, #0
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	0023      	movs	r3, r4
 800185a:	f000 fadf 	bl	8001e1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001862:	b29b      	uxth	r3, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	d194      	bne.n	8001792 <HAL_I2C_Master_Transmit+0xea>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	0018      	movs	r0, r3
 8001870:	f000 f9dc 	bl	8001c2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001874:	1e03      	subs	r3, r0, #0
 8001876:	d007      	beq.n	8001888 <HAL_I2C_Master_Transmit+0x1e0>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187c:	2b04      	cmp	r3, #4
 800187e:	d101      	bne.n	8001884 <HAL_I2C_Master_Transmit+0x1dc>
      {
        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e01c      	b.n	80018be <HAL_I2C_Master_Transmit+0x216>
      }
      else
      {
        return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e01a      	b.n	80018be <HAL_I2C_Master_Transmit+0x216>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2220      	movs	r2, #32
 800188e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	6852      	ldr	r2, [r2, #4]
 800189a:	490c      	ldr	r1, [pc, #48]	; (80018cc <HAL_I2C_Master_Transmit+0x224>)
 800189c:	400a      	ands	r2, r1
 800189e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2241      	movs	r2, #65	; 0x41
 80018a4:	2120      	movs	r1, #32
 80018a6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2242      	movs	r2, #66	; 0x42
 80018ac:	2100      	movs	r1, #0
 80018ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2240      	movs	r2, #64	; 0x40
 80018b4:	2100      	movs	r1, #0
 80018b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018b8:	2300      	movs	r3, #0
 80018ba:	e000      	b.n	80018be <HAL_I2C_Master_Transmit+0x216>
  }
  else
  {
    return HAL_BUSY;
 80018bc:	2302      	movs	r3, #2
  }
}
 80018be:	0018      	movs	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	b007      	add	sp, #28
 80018c4:	bd90      	pop	{r4, r7, pc}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	80002000 	.word	0x80002000
 80018cc:	fe00e800 	.word	0xfe00e800

080018d0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af02      	add	r7, sp, #8
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	0008      	movs	r0, r1
 80018da:	607a      	str	r2, [r7, #4]
 80018dc:	0019      	movs	r1, r3
 80018de:	230a      	movs	r3, #10
 80018e0:	18fb      	adds	r3, r7, r3
 80018e2:	1c02      	adds	r2, r0, #0
 80018e4:	801a      	strh	r2, [r3, #0]
 80018e6:	2308      	movs	r3, #8
 80018e8:	18fb      	adds	r3, r7, r3
 80018ea:	1c0a      	adds	r2, r1, #0
 80018ec:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2241      	movs	r2, #65	; 0x41
 80018f6:	5c9b      	ldrb	r3, [r3, r2]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b20      	cmp	r3, #32
 80018fc:	d000      	beq.n	8001900 <HAL_I2C_Master_Receive+0x30>
 80018fe:	e0f2      	b.n	8001ae6 <HAL_I2C_Master_Receive+0x216>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2240      	movs	r2, #64	; 0x40
 8001904:	5c9b      	ldrb	r3, [r3, r2]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d101      	bne.n	800190e <HAL_I2C_Master_Receive+0x3e>
 800190a:	2302      	movs	r3, #2
 800190c:	e0ec      	b.n	8001ae8 <HAL_I2C_Master_Receive+0x218>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2240      	movs	r2, #64	; 0x40
 8001912:	2101      	movs	r1, #1
 8001914:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001916:	f7ff fb97 	bl	8001048 <HAL_GetTick>
 800191a:	0003      	movs	r3, r0
 800191c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	0219      	lsls	r1, r3, #8
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	2319      	movs	r3, #25
 800192a:	2201      	movs	r2, #1
 800192c:	f000 f906 	bl	8001b3c <I2C_WaitOnFlagUntilTimeout>
 8001930:	1e03      	subs	r3, r0, #0
 8001932:	d001      	beq.n	8001938 <HAL_I2C_Master_Receive+0x68>
    {
      return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e0d7      	b.n	8001ae8 <HAL_I2C_Master_Receive+0x218>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2241      	movs	r2, #65	; 0x41
 800193c:	2122      	movs	r1, #34	; 0x22
 800193e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2242      	movs	r2, #66	; 0x42
 8001944:	2110      	movs	r1, #16
 8001946:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2208      	movs	r2, #8
 8001958:	18ba      	adds	r2, r7, r2
 800195a:	8812      	ldrh	r2, [r2, #0]
 800195c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001968:	b29b      	uxth	r3, r3
 800196a:	2bff      	cmp	r3, #255	; 0xff
 800196c:	d911      	bls.n	8001992 <HAL_I2C_Master_Receive+0xc2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	22ff      	movs	r2, #255	; 0xff
 8001972:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001978:	b2da      	uxtb	r2, r3
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	045c      	lsls	r4, r3, #17
 800197e:	230a      	movs	r3, #10
 8001980:	18fb      	adds	r3, r7, r3
 8001982:	8819      	ldrh	r1, [r3, #0]
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	4b5a      	ldr	r3, [pc, #360]	; (8001af0 <HAL_I2C_Master_Receive+0x220>)
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	0023      	movs	r3, r4
 800198c:	f000 fa46 	bl	8001e1c <I2C_TransferConfig>
 8001990:	e07a      	b.n	8001a88 <HAL_I2C_Master_Receive+0x1b8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001996:	b29a      	uxth	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	2380      	movs	r3, #128	; 0x80
 80019a4:	049c      	lsls	r4, r3, #18
 80019a6:	230a      	movs	r3, #10
 80019a8:	18fb      	adds	r3, r7, r3
 80019aa:	8819      	ldrh	r1, [r3, #0]
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	4b50      	ldr	r3, [pc, #320]	; (8001af0 <HAL_I2C_Master_Receive+0x220>)
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	0023      	movs	r3, r4
 80019b4:	f000 fa32 	bl	8001e1c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80019b8:	e066      	b.n	8001a88 <HAL_I2C_Master_Receive+0x1b8>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	0018      	movs	r0, r3
 80019c2:	f000 f96f 	bl	8001ca4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019c6:	1e03      	subs	r3, r0, #0
 80019c8:	d007      	beq.n	80019da <HAL_I2C_Master_Receive+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d101      	bne.n	80019d6 <HAL_I2C_Master_Receive+0x106>
        {
          return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e088      	b.n	8001ae8 <HAL_I2C_Master_Receive+0x218>
        }
        else
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e086      	b.n	8001ae8 <HAL_I2C_Master_Receive+0x218>
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	1c59      	adds	r1, r3, #1
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	6251      	str	r1, [r2, #36]	; 0x24
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f2:	3b01      	subs	r3, #1
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	3b01      	subs	r3, #1
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d13b      	bne.n	8001a88 <HAL_I2C_Master_Receive+0x1b8>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d036      	beq.n	8001a88 <HAL_I2C_Master_Receive+0x1b8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	0013      	movs	r3, r2
 8001a24:	2200      	movs	r2, #0
 8001a26:	2180      	movs	r1, #128	; 0x80
 8001a28:	f000 f888 	bl	8001b3c <I2C_WaitOnFlagUntilTimeout>
 8001a2c:	1e03      	subs	r3, r0, #0
 8001a2e:	d001      	beq.n	8001a34 <HAL_I2C_Master_Receive+0x164>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e059      	b.n	8001ae8 <HAL_I2C_Master_Receive+0x218>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	2bff      	cmp	r3, #255	; 0xff
 8001a3c:	d911      	bls.n	8001a62 <HAL_I2C_Master_Receive+0x192>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	22ff      	movs	r2, #255	; 0xff
 8001a42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	045c      	lsls	r4, r3, #17
 8001a4e:	230a      	movs	r3, #10
 8001a50:	18fb      	adds	r3, r7, r3
 8001a52:	8819      	ldrh	r1, [r3, #0]
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	2300      	movs	r3, #0
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	0023      	movs	r3, r4
 8001a5c:	f000 f9de 	bl	8001e1c <I2C_TransferConfig>
 8001a60:	e012      	b.n	8001a88 <HAL_I2C_Master_Receive+0x1b8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	049c      	lsls	r4, r3, #18
 8001a76:	230a      	movs	r3, #10
 8001a78:	18fb      	adds	r3, r7, r3
 8001a7a:	8819      	ldrh	r1, [r3, #0]
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	0023      	movs	r3, r4
 8001a84:	f000 f9ca 	bl	8001e1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d193      	bne.n	80019ba <HAL_I2C_Master_Receive+0xea>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f000 f8c7 	bl	8001c2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a9e:	1e03      	subs	r3, r0, #0
 8001aa0:	d007      	beq.n	8001ab2 <HAL_I2C_Master_Receive+0x1e2>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d101      	bne.n	8001aae <HAL_I2C_Master_Receive+0x1de>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e01c      	b.n	8001ae8 <HAL_I2C_Master_Receive+0x218>
      }
      else
      {
        return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e01a      	b.n	8001ae8 <HAL_I2C_Master_Receive+0x218>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	6812      	ldr	r2, [r2, #0]
 8001ac2:	6852      	ldr	r2, [r2, #4]
 8001ac4:	490b      	ldr	r1, [pc, #44]	; (8001af4 <HAL_I2C_Master_Receive+0x224>)
 8001ac6:	400a      	ands	r2, r1
 8001ac8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2241      	movs	r2, #65	; 0x41
 8001ace:	2120      	movs	r1, #32
 8001ad0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2242      	movs	r2, #66	; 0x42
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2240      	movs	r2, #64	; 0x40
 8001ade:	2100      	movs	r1, #0
 8001ae0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e000      	b.n	8001ae8 <HAL_I2C_Master_Receive+0x218>
  }
  else
  {
    return HAL_BUSY;
 8001ae6:	2302      	movs	r3, #2
  }
}
 8001ae8:	0018      	movs	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	b007      	add	sp, #28
 8001aee:	bd90      	pop	{r4, r7, pc}
 8001af0:	80002400 	.word	0x80002400
 8001af4:	fe00e800 	.word	0xfe00e800

08001af8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	2202      	movs	r2, #2
 8001b08:	4013      	ands	r3, r2
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d103      	bne.n	8001b16 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2200      	movs	r2, #0
 8001b14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d007      	beq.n	8001b34 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	6992      	ldr	r2, [r2, #24]
 8001b2e:	2101      	movs	r1, #1
 8001b30:	430a      	orrs	r2, r1
 8001b32:	619a      	str	r2, [r3, #24]
  }
}
 8001b34:	46c0      	nop			; (mov r8, r8)
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b002      	add	sp, #8
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	603b      	str	r3, [r7, #0]
 8001b48:	1dfb      	adds	r3, r7, #7
 8001b4a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b4c:	e01b      	b.n	8001b86 <I2C_WaitOnFlagUntilTimeout+0x4a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	3301      	adds	r3, #1
 8001b52:	d018      	beq.n	8001b86 <I2C_WaitOnFlagUntilTimeout+0x4a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d007      	beq.n	8001b6a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001b5a:	f7ff fa75 	bl	8001048 <HAL_GetTick>
 8001b5e:	0002      	movs	r2, r0
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	1ad2      	subs	r2, r2, r3
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d90d      	bls.n	8001b86 <I2C_WaitOnFlagUntilTimeout+0x4a>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2241      	movs	r2, #65	; 0x41
 8001b6e:	2120      	movs	r1, #32
 8001b70:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2242      	movs	r2, #66	; 0x42
 8001b76:	2100      	movs	r1, #0
 8001b78:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2240      	movs	r2, #64	; 0x40
 8001b7e:	2100      	movs	r1, #0
 8001b80:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e00f      	b.n	8001ba6 <I2C_WaitOnFlagUntilTimeout+0x6a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	401a      	ands	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	425a      	negs	r2, r3
 8001b96:	4153      	adcs	r3, r2
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	001a      	movs	r2, r3
 8001b9c:	1dfb      	adds	r3, r7, #7
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d0d4      	beq.n	8001b4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b004      	add	sp, #16
 8001bac:	bd80      	pop	{r7, pc}

08001bae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b084      	sub	sp, #16
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bba:	e02b      	b.n	8001c14 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	68b9      	ldr	r1, [r7, #8]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f000 f8cc 	bl	8001d60 <I2C_IsAcknowledgeFailed>
 8001bc8:	1e03      	subs	r3, r0, #0
 8001bca:	d001      	beq.n	8001bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e029      	b.n	8001c24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	d01e      	beq.n	8001c14 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d007      	beq.n	8001bec <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001bdc:	f7ff fa34 	bl	8001048 <HAL_GetTick>
 8001be0:	0002      	movs	r2, r0
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	1ad2      	subs	r2, r2, r3
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d913      	bls.n	8001c14 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2241      	movs	r2, #65	; 0x41
 8001bfc:	2120      	movs	r1, #32
 8001bfe:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2242      	movs	r2, #66	; 0x42
 8001c04:	2100      	movs	r1, #0
 8001c06:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2240      	movs	r2, #64	; 0x40
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e007      	b.n	8001c24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d1cc      	bne.n	8001bbc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	0018      	movs	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b004      	add	sp, #16
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c38:	e028      	b.n	8001c8c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	0018      	movs	r0, r3
 8001c42:	f000 f88d 	bl	8001d60 <I2C_IsAcknowledgeFailed>
 8001c46:	1e03      	subs	r3, r0, #0
 8001c48:	d001      	beq.n	8001c4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e026      	b.n	8001c9c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d007      	beq.n	8001c64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c54:	f7ff f9f8 	bl	8001048 <HAL_GetTick>
 8001c58:	0002      	movs	r2, r0
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	1ad2      	subs	r2, r2, r3
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d913      	bls.n	8001c8c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c68:	2220      	movs	r2, #32
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2241      	movs	r2, #65	; 0x41
 8001c74:	2120      	movs	r1, #32
 8001c76:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2242      	movs	r2, #66	; 0x42
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2240      	movs	r2, #64	; 0x40
 8001c84:	2100      	movs	r1, #0
 8001c86:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e007      	b.n	8001c9c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	2220      	movs	r2, #32
 8001c94:	4013      	ands	r3, r2
 8001c96:	2b20      	cmp	r3, #32
 8001c98:	d1cf      	bne.n	8001c3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	b004      	add	sp, #16
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001cb0:	e048      	b.n	8001d44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f000 f851 	bl	8001d60 <I2C_IsAcknowledgeFailed>
 8001cbe:	1e03      	subs	r3, r0, #0
 8001cc0:	d001      	beq.n	8001cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e046      	b.n	8001d54 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b20      	cmp	r3, #32
 8001cd2:	d11c      	bne.n	8001d0e <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      I2C_RESET_CR2(hi2c);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	6852      	ldr	r2, [r2, #4]
 8001ce6:	491d      	ldr	r1, [pc, #116]	; (8001d5c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>)
 8001ce8:	400a      	ands	r2, r1
 8001cea:	605a      	str	r2, [r3, #4]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2241      	movs	r2, #65	; 0x41
 8001cf6:	2120      	movs	r1, #32
 8001cf8:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2242      	movs	r2, #66	; 0x42
 8001cfe:	2100      	movs	r1, #0
 8001d00:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2240      	movs	r2, #64	; 0x40
 8001d06:	2100      	movs	r1, #0
 8001d08:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e022      	b.n	8001d54 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d007      	beq.n	8001d24 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
 8001d14:	f7ff f998 	bl	8001048 <HAL_GetTick>
 8001d18:	0002      	movs	r2, r0
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	1ad2      	subs	r2, r2, r3
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d90f      	bls.n	8001d44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d28:	2220      	movs	r2, #32
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2241      	movs	r2, #65	; 0x41
 8001d34:	2120      	movs	r1, #32
 8001d36:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2240      	movs	r2, #64	; 0x40
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e007      	b.n	8001d54 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d1af      	bne.n	8001cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	0018      	movs	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	b004      	add	sp, #16
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	fe00e800 	.word	0xfe00e800

08001d60 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	2210      	movs	r2, #16
 8001d74:	4013      	ands	r3, r2
 8001d76:	2b10      	cmp	r3, #16
 8001d78:	d148      	bne.n	8001e0c <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d7a:	e01b      	b.n	8001db4 <I2C_IsAcknowledgeFailed+0x54>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	d018      	beq.n	8001db4 <I2C_IsAcknowledgeFailed+0x54>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d007      	beq.n	8001d98 <I2C_IsAcknowledgeFailed+0x38>
 8001d88:	f7ff f95e 	bl	8001048 <HAL_GetTick>
 8001d8c:	0002      	movs	r2, r0
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	1ad2      	subs	r2, r2, r3
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d90d      	bls.n	8001db4 <I2C_IsAcknowledgeFailed+0x54>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2241      	movs	r2, #65	; 0x41
 8001d9c:	2120      	movs	r1, #32
 8001d9e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2242      	movs	r2, #66	; 0x42
 8001da4:	2100      	movs	r1, #0
 8001da6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2240      	movs	r2, #64	; 0x40
 8001dac:	2100      	movs	r1, #0
 8001dae:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e02c      	b.n	8001e0e <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b20      	cmp	r3, #32
 8001dc0:	d1dc      	bne.n	8001d7c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2210      	movs	r2, #16
 8001dc8:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f7ff fe8f 	bl	8001af8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	6852      	ldr	r2, [r2, #4]
 8001de4:	490c      	ldr	r1, [pc, #48]	; (8001e18 <I2C_IsAcknowledgeFailed+0xb8>)
 8001de6:	400a      	ands	r2, r1
 8001de8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2204      	movs	r2, #4
 8001dee:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2241      	movs	r2, #65	; 0x41
 8001df4:	2120      	movs	r1, #32
 8001df6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2242      	movs	r2, #66	; 0x42
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2240      	movs	r2, #64	; 0x40
 8001e04:	2100      	movs	r1, #0
 8001e06:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	0018      	movs	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b004      	add	sp, #16
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	fe00e800 	.word	0xfe00e800

08001e1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001e1c:	b590      	push	{r4, r7, lr}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	0008      	movs	r0, r1
 8001e26:	0011      	movs	r1, r2
 8001e28:	607b      	str	r3, [r7, #4]
 8001e2a:	230a      	movs	r3, #10
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	1c02      	adds	r2, r0, #0
 8001e30:	801a      	strh	r2, [r3, #0]
 8001e32:	2309      	movs	r3, #9
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	1c0a      	adds	r2, r1, #0
 8001e38:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	6812      	ldr	r2, [r2, #0]
 8001e42:	6852      	ldr	r2, [r2, #4]
 8001e44:	6a39      	ldr	r1, [r7, #32]
 8001e46:	0d48      	lsrs	r0, r1, #21
 8001e48:	2180      	movs	r1, #128	; 0x80
 8001e4a:	00c9      	lsls	r1, r1, #3
 8001e4c:	4001      	ands	r1, r0
 8001e4e:	480d      	ldr	r0, [pc, #52]	; (8001e84 <I2C_TransferConfig+0x68>)
 8001e50:	4301      	orrs	r1, r0
 8001e52:	43c9      	mvns	r1, r1
 8001e54:	4011      	ands	r1, r2
 8001e56:	220a      	movs	r2, #10
 8001e58:	18ba      	adds	r2, r7, r2
 8001e5a:	8812      	ldrh	r2, [r2, #0]
 8001e5c:	0592      	lsls	r2, r2, #22
 8001e5e:	0d90      	lsrs	r0, r2, #22
 8001e60:	2209      	movs	r2, #9
 8001e62:	18ba      	adds	r2, r7, r2
 8001e64:	7812      	ldrb	r2, [r2, #0]
 8001e66:	0414      	lsls	r4, r2, #16
 8001e68:	22ff      	movs	r2, #255	; 0xff
 8001e6a:	0412      	lsls	r2, r2, #16
 8001e6c:	4022      	ands	r2, r4
 8001e6e:	4310      	orrs	r0, r2
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	4310      	orrs	r0, r2
 8001e74:	6a3a      	ldr	r2, [r7, #32]
 8001e76:	4302      	orrs	r2, r0
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001e7c:	46c0      	nop			; (mov r8, r8)
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b005      	add	sp, #20
 8001e82:	bd90      	pop	{r4, r7, pc}
 8001e84:	03ff63ff 	.word	0x03ff63ff

08001e88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2241      	movs	r2, #65	; 0x41
 8001e96:	5c9b      	ldrb	r3, [r3, r2]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b20      	cmp	r3, #32
 8001e9c:	d138      	bne.n	8001f10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2240      	movs	r2, #64	; 0x40
 8001ea2:	5c9b      	ldrb	r3, [r3, r2]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e032      	b.n	8001f12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2240      	movs	r2, #64	; 0x40
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2241      	movs	r2, #65	; 0x41
 8001eb8:	2124      	movs	r1, #36	; 0x24
 8001eba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	438a      	bics	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	6812      	ldr	r2, [r2, #0]
 8001ed6:	4911      	ldr	r1, [pc, #68]	; (8001f1c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001ed8:	400a      	ands	r2, r1
 8001eda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	6811      	ldr	r1, [r2, #0]
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	6812      	ldr	r2, [r2, #0]
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2241      	movs	r2, #65	; 0x41
 8001f00:	2120      	movs	r1, #32
 8001f02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2240      	movs	r2, #64	; 0x40
 8001f08:	2100      	movs	r1, #0
 8001f0a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	e000      	b.n	8001f12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f10:	2302      	movs	r3, #2
  }
}
 8001f12:	0018      	movs	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b002      	add	sp, #8
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	ffffefff 	.word	0xffffefff

08001f20 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2241      	movs	r2, #65	; 0x41
 8001f32:	5c9b      	ldrb	r3, [r3, r2]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b20      	cmp	r3, #32
 8001f38:	d139      	bne.n	8001fae <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2240      	movs	r2, #64	; 0x40
 8001f3e:	5c9b      	ldrb	r3, [r3, r2]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d101      	bne.n	8001f48 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8001f44:	2302      	movs	r3, #2
 8001f46:	e033      	b.n	8001fb0 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2240      	movs	r2, #64	; 0x40
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2241      	movs	r2, #65	; 0x41
 8001f54:	2124      	movs	r1, #36	; 0x24
 8001f56:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	6812      	ldr	r2, [r2, #0]
 8001f62:	2101      	movs	r1, #1
 8001f64:	438a      	bics	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4a11      	ldr	r2, [pc, #68]	; (8001fb8 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	021b      	lsls	r3, r3, #8
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6812      	ldr	r2, [r2, #0]
 8001f92:	6812      	ldr	r2, [r2, #0]
 8001f94:	2101      	movs	r1, #1
 8001f96:	430a      	orrs	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2241      	movs	r2, #65	; 0x41
 8001f9e:	2120      	movs	r1, #32
 8001fa0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2240      	movs	r2, #64	; 0x40
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	e000      	b.n	8001fb0 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8001fae:	2302      	movs	r3, #2
  }
}
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b004      	add	sp, #16
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	fffff0ff 	.word	0xfffff0ff

08001fbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d100      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x18>
 8001fd2:	e087      	b.n	80020e4 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001fd4:	4bc0      	ldr	r3, [pc, #768]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	220c      	movs	r2, #12
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d00e      	beq.n	8001ffe <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fe0:	4bbd      	ldr	r3, [pc, #756]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	220c      	movs	r2, #12
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b0c      	cmp	r3, #12
 8001fea:	d116      	bne.n	800201a <HAL_RCC_OscConfig+0x5e>
 8001fec:	4bba      	ldr	r3, [pc, #744]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 8001fee:	68da      	ldr	r2, [r3, #12]
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	025b      	lsls	r3, r3, #9
 8001ff4:	401a      	ands	r2, r3
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	025b      	lsls	r3, r3, #9
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d10d      	bne.n	800201a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ffe:	4bb6      	ldr	r3, [pc, #728]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	029b      	lsls	r3, r3, #10
 8002006:	4013      	ands	r3, r2
 8002008:	d100      	bne.n	800200c <HAL_RCC_OscConfig+0x50>
 800200a:	e06a      	b.n	80020e2 <HAL_RCC_OscConfig+0x126>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d166      	bne.n	80020e2 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	f000 fb69 	bl	80026ec <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	2380      	movs	r3, #128	; 0x80
 8002020:	025b      	lsls	r3, r3, #9
 8002022:	429a      	cmp	r2, r3
 8002024:	d107      	bne.n	8002036 <HAL_RCC_OscConfig+0x7a>
 8002026:	4bac      	ldr	r3, [pc, #688]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 8002028:	4aab      	ldr	r2, [pc, #684]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	2180      	movs	r1, #128	; 0x80
 800202e:	0249      	lsls	r1, r1, #9
 8002030:	430a      	orrs	r2, r1
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	e027      	b.n	8002086 <HAL_RCC_OscConfig+0xca>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	23a0      	movs	r3, #160	; 0xa0
 800203c:	02db      	lsls	r3, r3, #11
 800203e:	429a      	cmp	r2, r3
 8002040:	d10e      	bne.n	8002060 <HAL_RCC_OscConfig+0xa4>
 8002042:	4ba5      	ldr	r3, [pc, #660]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 8002044:	4aa4      	ldr	r2, [pc, #656]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	2180      	movs	r1, #128	; 0x80
 800204a:	02c9      	lsls	r1, r1, #11
 800204c:	430a      	orrs	r2, r1
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	4ba1      	ldr	r3, [pc, #644]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 8002052:	4aa1      	ldr	r2, [pc, #644]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	2180      	movs	r1, #128	; 0x80
 8002058:	0249      	lsls	r1, r1, #9
 800205a:	430a      	orrs	r2, r1
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	e012      	b.n	8002086 <HAL_RCC_OscConfig+0xca>
 8002060:	4b9d      	ldr	r3, [pc, #628]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 8002062:	4a9d      	ldr	r2, [pc, #628]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	499d      	ldr	r1, [pc, #628]	; (80022dc <HAL_RCC_OscConfig+0x320>)
 8002068:	400a      	ands	r2, r1
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	4b9a      	ldr	r3, [pc, #616]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	025b      	lsls	r3, r3, #9
 8002074:	4013      	ands	r3, r2
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4b97      	ldr	r3, [pc, #604]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 800207c:	4a96      	ldr	r2, [pc, #600]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	4997      	ldr	r1, [pc, #604]	; (80022e0 <HAL_RCC_OscConfig+0x324>)
 8002082:	400a      	ands	r2, r1
 8002084:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d014      	beq.n	80020b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7fe ffdb 	bl	8001048 <HAL_GetTick>
 8002092:	0003      	movs	r3, r0
 8002094:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002098:	f7fe ffd6 	bl	8001048 <HAL_GetTick>
 800209c:	0002      	movs	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b64      	cmp	r3, #100	; 0x64
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e320      	b.n	80026ec <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	4b8b      	ldr	r3, [pc, #556]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	2380      	movs	r3, #128	; 0x80
 80020b0:	029b      	lsls	r3, r3, #10
 80020b2:	4013      	ands	r3, r2
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0xdc>
 80020b6:	e015      	b.n	80020e4 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7fe ffc6 	bl	8001048 <HAL_GetTick>
 80020bc:	0003      	movs	r3, r0
 80020be:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020c2:	f7fe ffc1 	bl	8001048 <HAL_GetTick>
 80020c6:	0002      	movs	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b64      	cmp	r3, #100	; 0x64
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e30b      	b.n	80026ec <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d4:	4b80      	ldr	r3, [pc, #512]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	029b      	lsls	r3, r3, #10
 80020dc:	4013      	ands	r3, r2
 80020de:	d1f0      	bne.n	80020c2 <HAL_RCC_OscConfig+0x106>
 80020e0:	e000      	b.n	80020e4 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2202      	movs	r2, #2
 80020ea:	4013      	ands	r3, r2
 80020ec:	d100      	bne.n	80020f0 <HAL_RCC_OscConfig+0x134>
 80020ee:	e06c      	b.n	80021ca <HAL_RCC_OscConfig+0x20e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020f0:	4b79      	ldr	r3, [pc, #484]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	220c      	movs	r2, #12
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d00b      	beq.n	8002114 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020fc:	4b76      	ldr	r3, [pc, #472]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	220c      	movs	r2, #12
 8002102:	4013      	ands	r3, r2
 8002104:	2b0c      	cmp	r3, #12
 8002106:	d11b      	bne.n	8002140 <HAL_RCC_OscConfig+0x184>
 8002108:	4b73      	ldr	r3, [pc, #460]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	025b      	lsls	r3, r3, #9
 8002110:	4013      	ands	r3, r2
 8002112:	d115      	bne.n	8002140 <HAL_RCC_OscConfig+0x184>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002114:	4b70      	ldr	r3, [pc, #448]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2204      	movs	r2, #4
 800211a:	4013      	ands	r3, r2
 800211c:	d005      	beq.n	800212a <HAL_RCC_OscConfig+0x16e>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d001      	beq.n	800212a <HAL_RCC_OscConfig+0x16e>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e2e0      	b.n	80026ec <HAL_RCC_OscConfig+0x730>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212a:	4a6b      	ldr	r2, [pc, #428]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 800212c:	4b6a      	ldr	r3, [pc, #424]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	496c      	ldr	r1, [pc, #432]	; (80022e4 <HAL_RCC_OscConfig+0x328>)
 8002132:	4019      	ands	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	430b      	orrs	r3, r1
 800213c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213e:	e044      	b.n	80021ca <HAL_RCC_OscConfig+0x20e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d027      	beq.n	8002198 <HAL_RCC_OscConfig+0x1dc>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002148:	4a63      	ldr	r2, [pc, #396]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 800214a:	4b63      	ldr	r3, [pc, #396]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2109      	movs	r1, #9
 8002150:	438b      	bics	r3, r1
 8002152:	0019      	movs	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	430b      	orrs	r3, r1
 800215a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7fe ff74 	bl	8001048 <HAL_GetTick>
 8002160:	0003      	movs	r3, r0
 8002162:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x1bc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002166:	f7fe ff6f 	bl	8001048 <HAL_GetTick>
 800216a:	0002      	movs	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x1bc>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e2b9      	b.n	80026ec <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002178:	4b57      	ldr	r3, [pc, #348]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2204      	movs	r2, #4
 800217e:	4013      	ands	r3, r2
 8002180:	d0f1      	beq.n	8002166 <HAL_RCC_OscConfig+0x1aa>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002182:	4a55      	ldr	r2, [pc, #340]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 8002184:	4b54      	ldr	r3, [pc, #336]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	4956      	ldr	r1, [pc, #344]	; (80022e4 <HAL_RCC_OscConfig+0x328>)
 800218a:	4019      	ands	r1, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	021b      	lsls	r3, r3, #8
 8002192:	430b      	orrs	r3, r1
 8002194:	6053      	str	r3, [r2, #4]
 8002196:	e018      	b.n	80021ca <HAL_RCC_OscConfig+0x20e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002198:	4b4f      	ldr	r3, [pc, #316]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 800219a:	4a4f      	ldr	r2, [pc, #316]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	2101      	movs	r1, #1
 80021a0:	438a      	bics	r2, r1
 80021a2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7fe ff50 	bl	8001048 <HAL_GetTick>
 80021a8:	0003      	movs	r3, r0
 80021aa:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ae:	f7fe ff4b 	bl	8001048 <HAL_GetTick>
 80021b2:	0002      	movs	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e295      	b.n	80026ec <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c0:	4b45      	ldr	r3, [pc, #276]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2204      	movs	r2, #4
 80021c6:	4013      	ands	r3, r2
 80021c8:	d1f1      	bne.n	80021ae <HAL_RCC_OscConfig+0x1f2>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2210      	movs	r2, #16
 80021d0:	4013      	ands	r3, r2
 80021d2:	d100      	bne.n	80021d6 <HAL_RCC_OscConfig+0x21a>
 80021d4:	e0c2      	b.n	800235c <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80021d6:	4b40      	ldr	r3, [pc, #256]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	220c      	movs	r2, #12
 80021dc:	4013      	ands	r3, r2
 80021de:	d162      	bne.n	80022a6 <HAL_RCC_OscConfig+0x2ea>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021e0:	4b3d      	ldr	r3, [pc, #244]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4013      	ands	r3, r2
 80021ea:	d005      	beq.n	80021f8 <HAL_RCC_OscConfig+0x23c>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_OscConfig+0x23c>
      {
        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e279      	b.n	80026ec <HAL_RCC_OscConfig+0x730>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021fc:	4b36      	ldr	r3, [pc, #216]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 80021fe:	6859      	ldr	r1, [r3, #4]
 8002200:	23e0      	movs	r3, #224	; 0xe0
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	400b      	ands	r3, r1
 8002206:	429a      	cmp	r2, r3
 8002208:	d91c      	bls.n	8002244 <HAL_RCC_OscConfig+0x288>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	0018      	movs	r0, r3
 8002210:	f000 fc44 	bl	8002a9c <RCC_SetFlashLatencyFromMSIRange>
 8002214:	1e03      	subs	r3, r0, #0
 8002216:	d001      	beq.n	800221c <HAL_RCC_OscConfig+0x260>
          {
            return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e267      	b.n	80026ec <HAL_RCC_OscConfig+0x730>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800221c:	4a2e      	ldr	r2, [pc, #184]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 800221e:	4b2e      	ldr	r3, [pc, #184]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	4931      	ldr	r1, [pc, #196]	; (80022e8 <HAL_RCC_OscConfig+0x32c>)
 8002224:	4019      	ands	r1, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	430b      	orrs	r3, r1
 800222c:	6053      	str	r3, [r2, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800222e:	4a2a      	ldr	r2, [pc, #168]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 8002230:	4b29      	ldr	r3, [pc, #164]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	021b      	lsls	r3, r3, #8
 8002236:	0a19      	lsrs	r1, r3, #8
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	061b      	lsls	r3, r3, #24
 800223e:	430b      	orrs	r3, r1
 8002240:	6053      	str	r3, [r2, #4]
 8002242:	e01b      	b.n	800227c <HAL_RCC_OscConfig+0x2c0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002244:	4a24      	ldr	r2, [pc, #144]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 8002246:	4b24      	ldr	r3, [pc, #144]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	4927      	ldr	r1, [pc, #156]	; (80022e8 <HAL_RCC_OscConfig+0x32c>)
 800224c:	4019      	ands	r1, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	430b      	orrs	r3, r1
 8002254:	6053      	str	r3, [r2, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002256:	4a20      	ldr	r2, [pc, #128]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 8002258:	4b1f      	ldr	r3, [pc, #124]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	021b      	lsls	r3, r3, #8
 800225e:	0a19      	lsrs	r1, r3, #8
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	061b      	lsls	r3, r3, #24
 8002266:	430b      	orrs	r3, r1
 8002268:	6053      	str	r3, [r2, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	0018      	movs	r0, r3
 8002270:	f000 fc14 	bl	8002a9c <RCC_SetFlashLatencyFromMSIRange>
 8002274:	1e03      	subs	r3, r0, #0
 8002276:	d001      	beq.n	800227c <HAL_RCC_OscConfig+0x2c0>
          {
            return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e237      	b.n	80026ec <HAL_RCC_OscConfig+0x730>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	0b5b      	lsrs	r3, r3, #13
 8002282:	3301      	adds	r3, #1
 8002284:	2280      	movs	r2, #128	; 0x80
 8002286:	0212      	lsls	r2, r2, #8
 8002288:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800228a:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	091b      	lsrs	r3, r3, #4
 8002290:	210f      	movs	r1, #15
 8002292:	400b      	ands	r3, r1
 8002294:	4915      	ldr	r1, [pc, #84]	; (80022ec <HAL_RCC_OscConfig+0x330>)
 8002296:	5ccb      	ldrb	r3, [r1, r3]
 8002298:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800229a:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <HAL_RCC_OscConfig+0x334>)
 800229c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 800229e:	2000      	movs	r0, #0
 80022a0:	f7fe fea8 	bl	8000ff4 <HAL_InitTick>
 80022a4:	e05a      	b.n	800235c <HAL_RCC_OscConfig+0x3a0>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d03c      	beq.n	8002328 <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022ae:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 80022b0:	4a09      	ldr	r2, [pc, #36]	; (80022d8 <HAL_RCC_OscConfig+0x31c>)
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	2180      	movs	r1, #128	; 0x80
 80022b6:	0049      	lsls	r1, r1, #1
 80022b8:	430a      	orrs	r2, r1
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7fe fec4 	bl	8001048 <HAL_GetTick>
 80022c0:	0003      	movs	r3, r0
 80022c2:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80022c4:	e016      	b.n	80022f4 <HAL_RCC_OscConfig+0x338>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022c6:	f7fe febf 	bl	8001048 <HAL_GetTick>
 80022ca:	0002      	movs	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d90f      	bls.n	80022f4 <HAL_RCC_OscConfig+0x338>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e209      	b.n	80026ec <HAL_RCC_OscConfig+0x730>
 80022d8:	40021000 	.word	0x40021000
 80022dc:	fffeffff 	.word	0xfffeffff
 80022e0:	fffbffff 	.word	0xfffbffff
 80022e4:	ffffe0ff 	.word	0xffffe0ff
 80022e8:	ffff1fff 	.word	0xffff1fff
 80022ec:	08003c84 	.word	0x08003c84
 80022f0:	20000058 	.word	0x20000058
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80022f4:	4bc7      	ldr	r3, [pc, #796]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4013      	ands	r3, r2
 80022fe:	d0e2      	beq.n	80022c6 <HAL_RCC_OscConfig+0x30a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002300:	4ac4      	ldr	r2, [pc, #784]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 8002302:	4bc4      	ldr	r3, [pc, #784]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	49c4      	ldr	r1, [pc, #784]	; (8002618 <HAL_RCC_OscConfig+0x65c>)
 8002308:	4019      	ands	r1, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	430b      	orrs	r3, r1
 8002310:	6053      	str	r3, [r2, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002312:	4ac0      	ldr	r2, [pc, #768]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 8002314:	4bbf      	ldr	r3, [pc, #764]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	021b      	lsls	r3, r3, #8
 800231a:	0a19      	lsrs	r1, r3, #8
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	061b      	lsls	r3, r3, #24
 8002322:	430b      	orrs	r3, r1
 8002324:	6053      	str	r3, [r2, #4]
 8002326:	e019      	b.n	800235c <HAL_RCC_OscConfig+0x3a0>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002328:	4bba      	ldr	r3, [pc, #744]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 800232a:	4aba      	ldr	r2, [pc, #744]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 800232c:	6812      	ldr	r2, [r2, #0]
 800232e:	49bb      	ldr	r1, [pc, #748]	; (800261c <HAL_RCC_OscConfig+0x660>)
 8002330:	400a      	ands	r2, r1
 8002332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7fe fe88 	bl	8001048 <HAL_GetTick>
 8002338:	0003      	movs	r3, r0
 800233a:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800233e:	f7fe fe83 	bl	8001048 <HAL_GetTick>
 8002342:	0002      	movs	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e1cd      	b.n	80026ec <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8002350:	4bb0      	ldr	r3, [pc, #704]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4013      	ands	r3, r2
 800235a:	d1f0      	bne.n	800233e <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }  
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2208      	movs	r2, #8
 8002362:	4013      	ands	r3, r2
 8002364:	d036      	beq.n	80023d4 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d019      	beq.n	80023a2 <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800236e:	4ba9      	ldr	r3, [pc, #676]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 8002370:	4aa8      	ldr	r2, [pc, #672]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 8002372:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002374:	2101      	movs	r1, #1
 8002376:	430a      	orrs	r2, r1
 8002378:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237a:	f7fe fe65 	bl	8001048 <HAL_GetTick>
 800237e:	0003      	movs	r3, r0
 8002380:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002384:	f7fe fe60 	bl	8001048 <HAL_GetTick>
 8002388:	0002      	movs	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e1aa      	b.n	80026ec <HAL_RCC_OscConfig+0x730>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002396:	4b9f      	ldr	r3, [pc, #636]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 8002398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239a:	2202      	movs	r2, #2
 800239c:	4013      	ands	r3, r2
 800239e:	d0f1      	beq.n	8002384 <HAL_RCC_OscConfig+0x3c8>
 80023a0:	e018      	b.n	80023d4 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a2:	4b9c      	ldr	r3, [pc, #624]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 80023a4:	4a9b      	ldr	r2, [pc, #620]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 80023a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023a8:	2101      	movs	r1, #1
 80023aa:	438a      	bics	r2, r1
 80023ac:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ae:	f7fe fe4b 	bl	8001048 <HAL_GetTick>
 80023b2:	0003      	movs	r3, r0
 80023b4:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023b8:	f7fe fe46 	bl	8001048 <HAL_GetTick>
 80023bc:	0002      	movs	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e190      	b.n	80026ec <HAL_RCC_OscConfig+0x730>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ca:	4b92      	ldr	r3, [pc, #584]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 80023cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ce:	2202      	movs	r2, #2
 80023d0:	4013      	ands	r3, r2
 80023d2:	d1f1      	bne.n	80023b8 <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2204      	movs	r2, #4
 80023da:	4013      	ands	r3, r2
 80023dc:	d100      	bne.n	80023e0 <HAL_RCC_OscConfig+0x424>
 80023de:	e0af      	b.n	8002540 <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e0:	2317      	movs	r3, #23
 80023e2:	18fb      	adds	r3, r7, r3
 80023e4:	2200      	movs	r2, #0
 80023e6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e8:	4b8a      	ldr	r3, [pc, #552]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 80023ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	055b      	lsls	r3, r3, #21
 80023f0:	4013      	ands	r3, r2
 80023f2:	d10a      	bne.n	800240a <HAL_RCC_OscConfig+0x44e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f4:	4b87      	ldr	r3, [pc, #540]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 80023f6:	4a87      	ldr	r2, [pc, #540]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 80023f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023fa:	2180      	movs	r1, #128	; 0x80
 80023fc:	0549      	lsls	r1, r1, #21
 80023fe:	430a      	orrs	r2, r1
 8002400:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002402:	2317      	movs	r3, #23
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240a:	4b85      	ldr	r3, [pc, #532]	; (8002620 <HAL_RCC_OscConfig+0x664>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4013      	ands	r3, r2
 8002414:	d11a      	bne.n	800244c <HAL_RCC_OscConfig+0x490>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002416:	4b82      	ldr	r3, [pc, #520]	; (8002620 <HAL_RCC_OscConfig+0x664>)
 8002418:	4a81      	ldr	r2, [pc, #516]	; (8002620 <HAL_RCC_OscConfig+0x664>)
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	2180      	movs	r1, #128	; 0x80
 800241e:	0049      	lsls	r1, r1, #1
 8002420:	430a      	orrs	r2, r1
 8002422:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002424:	f7fe fe10 	bl	8001048 <HAL_GetTick>
 8002428:	0003      	movs	r3, r0
 800242a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800242e:	f7fe fe0b 	bl	8001048 <HAL_GetTick>
 8002432:	0002      	movs	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b64      	cmp	r3, #100	; 0x64
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e155      	b.n	80026ec <HAL_RCC_OscConfig+0x730>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002440:	4b77      	ldr	r3, [pc, #476]	; (8002620 <HAL_RCC_OscConfig+0x664>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	4013      	ands	r3, r2
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0x472>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	2380      	movs	r3, #128	; 0x80
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	429a      	cmp	r2, r3
 8002456:	d107      	bne.n	8002468 <HAL_RCC_OscConfig+0x4ac>
 8002458:	4b6e      	ldr	r3, [pc, #440]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 800245a:	4a6e      	ldr	r2, [pc, #440]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 800245c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800245e:	2180      	movs	r1, #128	; 0x80
 8002460:	0049      	lsls	r1, r1, #1
 8002462:	430a      	orrs	r2, r1
 8002464:	651a      	str	r2, [r3, #80]	; 0x50
 8002466:	e031      	b.n	80024cc <HAL_RCC_OscConfig+0x510>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10c      	bne.n	800248a <HAL_RCC_OscConfig+0x4ce>
 8002470:	4b68      	ldr	r3, [pc, #416]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 8002472:	4a68      	ldr	r2, [pc, #416]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 8002474:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002476:	4969      	ldr	r1, [pc, #420]	; (800261c <HAL_RCC_OscConfig+0x660>)
 8002478:	400a      	ands	r2, r1
 800247a:	651a      	str	r2, [r3, #80]	; 0x50
 800247c:	4b65      	ldr	r3, [pc, #404]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 800247e:	4a65      	ldr	r2, [pc, #404]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 8002480:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002482:	4968      	ldr	r1, [pc, #416]	; (8002624 <HAL_RCC_OscConfig+0x668>)
 8002484:	400a      	ands	r2, r1
 8002486:	651a      	str	r2, [r3, #80]	; 0x50
 8002488:	e020      	b.n	80024cc <HAL_RCC_OscConfig+0x510>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	23a0      	movs	r3, #160	; 0xa0
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	429a      	cmp	r2, r3
 8002494:	d10e      	bne.n	80024b4 <HAL_RCC_OscConfig+0x4f8>
 8002496:	4b5f      	ldr	r3, [pc, #380]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 8002498:	4a5e      	ldr	r2, [pc, #376]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 800249a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800249c:	2180      	movs	r1, #128	; 0x80
 800249e:	00c9      	lsls	r1, r1, #3
 80024a0:	430a      	orrs	r2, r1
 80024a2:	651a      	str	r2, [r3, #80]	; 0x50
 80024a4:	4b5b      	ldr	r3, [pc, #364]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 80024a6:	4a5b      	ldr	r2, [pc, #364]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 80024a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024aa:	2180      	movs	r1, #128	; 0x80
 80024ac:	0049      	lsls	r1, r1, #1
 80024ae:	430a      	orrs	r2, r1
 80024b0:	651a      	str	r2, [r3, #80]	; 0x50
 80024b2:	e00b      	b.n	80024cc <HAL_RCC_OscConfig+0x510>
 80024b4:	4b57      	ldr	r3, [pc, #348]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 80024b6:	4a57      	ldr	r2, [pc, #348]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 80024b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024ba:	4958      	ldr	r1, [pc, #352]	; (800261c <HAL_RCC_OscConfig+0x660>)
 80024bc:	400a      	ands	r2, r1
 80024be:	651a      	str	r2, [r3, #80]	; 0x50
 80024c0:	4b54      	ldr	r3, [pc, #336]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 80024c2:	4a54      	ldr	r2, [pc, #336]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 80024c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024c6:	4957      	ldr	r1, [pc, #348]	; (8002624 <HAL_RCC_OscConfig+0x668>)
 80024c8:	400a      	ands	r2, r1
 80024ca:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d015      	beq.n	8002500 <HAL_RCC_OscConfig+0x544>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d4:	f7fe fdb8 	bl	8001048 <HAL_GetTick>
 80024d8:	0003      	movs	r3, r0
 80024da:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024dc:	e009      	b.n	80024f2 <HAL_RCC_OscConfig+0x536>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024de:	f7fe fdb3 	bl	8001048 <HAL_GetTick>
 80024e2:	0002      	movs	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	4a4f      	ldr	r2, [pc, #316]	; (8002628 <HAL_RCC_OscConfig+0x66c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e0fc      	b.n	80026ec <HAL_RCC_OscConfig+0x730>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f2:	4b48      	ldr	r3, [pc, #288]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 80024f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024f6:	2380      	movs	r3, #128	; 0x80
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4013      	ands	r3, r2
 80024fc:	d0ef      	beq.n	80024de <HAL_RCC_OscConfig+0x522>
 80024fe:	e014      	b.n	800252a <HAL_RCC_OscConfig+0x56e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002500:	f7fe fda2 	bl	8001048 <HAL_GetTick>
 8002504:	0003      	movs	r3, r0
 8002506:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002508:	e009      	b.n	800251e <HAL_RCC_OscConfig+0x562>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800250a:	f7fe fd9d 	bl	8001048 <HAL_GetTick>
 800250e:	0002      	movs	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	4a44      	ldr	r2, [pc, #272]	; (8002628 <HAL_RCC_OscConfig+0x66c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e0e6      	b.n	80026ec <HAL_RCC_OscConfig+0x730>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800251e:	4b3d      	ldr	r3, [pc, #244]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 8002520:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4013      	ands	r3, r2
 8002528:	d1ef      	bne.n	800250a <HAL_RCC_OscConfig+0x54e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800252a:	2317      	movs	r3, #23
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d105      	bne.n	8002540 <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002534:	4b37      	ldr	r3, [pc, #220]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 8002536:	4a37      	ldr	r2, [pc, #220]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 8002538:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800253a:	493c      	ldr	r1, [pc, #240]	; (800262c <HAL_RCC_OscConfig+0x670>)
 800253c:	400a      	ands	r2, r1
 800253e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2220      	movs	r2, #32
 8002546:	4013      	ands	r3, r2
 8002548:	d049      	beq.n	80025de <HAL_RCC_OscConfig+0x622>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d026      	beq.n	80025a0 <HAL_RCC_OscConfig+0x5e4>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002552:	4b30      	ldr	r3, [pc, #192]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 8002554:	4a2f      	ldr	r2, [pc, #188]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 8002556:	6892      	ldr	r2, [r2, #8]
 8002558:	2101      	movs	r1, #1
 800255a:	430a      	orrs	r2, r1
 800255c:	609a      	str	r2, [r3, #8]
 800255e:	4b2d      	ldr	r3, [pc, #180]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 8002560:	4a2c      	ldr	r2, [pc, #176]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 8002562:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002564:	2101      	movs	r1, #1
 8002566:	430a      	orrs	r2, r1
 8002568:	635a      	str	r2, [r3, #52]	; 0x34
 800256a:	4b31      	ldr	r3, [pc, #196]	; (8002630 <HAL_RCC_OscConfig+0x674>)
 800256c:	4a30      	ldr	r2, [pc, #192]	; (8002630 <HAL_RCC_OscConfig+0x674>)
 800256e:	6a12      	ldr	r2, [r2, #32]
 8002570:	2180      	movs	r1, #128	; 0x80
 8002572:	0189      	lsls	r1, r1, #6
 8002574:	430a      	orrs	r2, r1
 8002576:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7fe fd66 	bl	8001048 <HAL_GetTick>
 800257c:	0003      	movs	r3, r0
 800257e:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002582:	f7fe fd61 	bl	8001048 <HAL_GetTick>
 8002586:	0002      	movs	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e0ab      	b.n	80026ec <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002594:	4b1f      	ldr	r3, [pc, #124]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2202      	movs	r2, #2
 800259a:	4013      	ands	r3, r2
 800259c:	d0f1      	beq.n	8002582 <HAL_RCC_OscConfig+0x5c6>
 800259e:	e01e      	b.n	80025de <HAL_RCC_OscConfig+0x622>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80025a0:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 80025a2:	4a1c      	ldr	r2, [pc, #112]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 80025a4:	6892      	ldr	r2, [r2, #8]
 80025a6:	2101      	movs	r1, #1
 80025a8:	438a      	bics	r2, r1
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	4b20      	ldr	r3, [pc, #128]	; (8002630 <HAL_RCC_OscConfig+0x674>)
 80025ae:	4a20      	ldr	r2, [pc, #128]	; (8002630 <HAL_RCC_OscConfig+0x674>)
 80025b0:	6a12      	ldr	r2, [r2, #32]
 80025b2:	4920      	ldr	r1, [pc, #128]	; (8002634 <HAL_RCC_OscConfig+0x678>)
 80025b4:	400a      	ands	r2, r1
 80025b6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7fe fd46 	bl	8001048 <HAL_GetTick>
 80025bc:	0003      	movs	r3, r0
 80025be:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025c2:	f7fe fd41 	bl	8001048 <HAL_GetTick>
 80025c6:	0002      	movs	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e08b      	b.n	80026ec <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2202      	movs	r2, #2
 80025da:	4013      	ands	r3, r2
 80025dc:	d1f1      	bne.n	80025c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d100      	bne.n	80025e8 <HAL_RCC_OscConfig+0x62c>
 80025e6:	e080      	b.n	80026ea <HAL_RCC_OscConfig+0x72e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e8:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	220c      	movs	r2, #12
 80025ee:	4013      	ands	r3, r2
 80025f0:	2b0c      	cmp	r3, #12
 80025f2:	d100      	bne.n	80025f6 <HAL_RCC_OscConfig+0x63a>
 80025f4:	e077      	b.n	80026e6 <HAL_RCC_OscConfig+0x72a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d158      	bne.n	80026b0 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fe:	4b05      	ldr	r3, [pc, #20]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 8002600:	4a04      	ldr	r2, [pc, #16]	; (8002614 <HAL_RCC_OscConfig+0x658>)
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	490c      	ldr	r1, [pc, #48]	; (8002638 <HAL_RCC_OscConfig+0x67c>)
 8002606:	400a      	ands	r2, r1
 8002608:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260a:	f7fe fd1d 	bl	8001048 <HAL_GetTick>
 800260e:	0003      	movs	r3, r0
 8002610:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002612:	e01c      	b.n	800264e <HAL_RCC_OscConfig+0x692>
 8002614:	40021000 	.word	0x40021000
 8002618:	ffff1fff 	.word	0xffff1fff
 800261c:	fffffeff 	.word	0xfffffeff
 8002620:	40007000 	.word	0x40007000
 8002624:	fffffbff 	.word	0xfffffbff
 8002628:	00001388 	.word	0x00001388
 800262c:	efffffff 	.word	0xefffffff
 8002630:	40010000 	.word	0x40010000
 8002634:	ffffdfff 	.word	0xffffdfff
 8002638:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800263c:	f7fe fd04 	bl	8001048 <HAL_GetTick>
 8002640:	0002      	movs	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x692>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e04e      	b.n	80026ec <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264e:	4b29      	ldr	r3, [pc, #164]	; (80026f4 <HAL_RCC_OscConfig+0x738>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	2380      	movs	r3, #128	; 0x80
 8002654:	049b      	lsls	r3, r3, #18
 8002656:	4013      	ands	r3, r2
 8002658:	d1f0      	bne.n	800263c <HAL_RCC_OscConfig+0x680>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800265a:	4a26      	ldr	r2, [pc, #152]	; (80026f4 <HAL_RCC_OscConfig+0x738>)
 800265c:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <HAL_RCC_OscConfig+0x738>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	4925      	ldr	r1, [pc, #148]	; (80026f8 <HAL_RCC_OscConfig+0x73c>)
 8002662:	4019      	ands	r1, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	4318      	orrs	r0, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002672:	4303      	orrs	r3, r0
 8002674:	430b      	orrs	r3, r1
 8002676:	60d3      	str	r3, [r2, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002678:	4b1e      	ldr	r3, [pc, #120]	; (80026f4 <HAL_RCC_OscConfig+0x738>)
 800267a:	4a1e      	ldr	r2, [pc, #120]	; (80026f4 <HAL_RCC_OscConfig+0x738>)
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	2180      	movs	r1, #128	; 0x80
 8002680:	0449      	lsls	r1, r1, #17
 8002682:	430a      	orrs	r2, r1
 8002684:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002686:	f7fe fcdf 	bl	8001048 <HAL_GetTick>
 800268a:	0003      	movs	r3, r0
 800268c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002690:	f7fe fcda 	bl	8001048 <HAL_GetTick>
 8002694:	0002      	movs	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e024      	b.n	80026ec <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026a2:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <HAL_RCC_OscConfig+0x738>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	2380      	movs	r3, #128	; 0x80
 80026a8:	049b      	lsls	r3, r3, #18
 80026aa:	4013      	ands	r3, r2
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0x6d4>
 80026ae:	e01c      	b.n	80026ea <HAL_RCC_OscConfig+0x72e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b0:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <HAL_RCC_OscConfig+0x738>)
 80026b2:	4a10      	ldr	r2, [pc, #64]	; (80026f4 <HAL_RCC_OscConfig+0x738>)
 80026b4:	6812      	ldr	r2, [r2, #0]
 80026b6:	4911      	ldr	r1, [pc, #68]	; (80026fc <HAL_RCC_OscConfig+0x740>)
 80026b8:	400a      	ands	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026bc:	f7fe fcc4 	bl	8001048 <HAL_GetTick>
 80026c0:	0003      	movs	r3, r0
 80026c2:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c6:	f7fe fcbf 	bl	8001048 <HAL_GetTick>
 80026ca:	0002      	movs	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e009      	b.n	80026ec <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_RCC_OscConfig+0x738>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	2380      	movs	r3, #128	; 0x80
 80026de:	049b      	lsls	r3, r3, #18
 80026e0:	4013      	ands	r3, r2
 80026e2:	d1f0      	bne.n	80026c6 <HAL_RCC_OscConfig+0x70a>
 80026e4:	e001      	b.n	80026ea <HAL_RCC_OscConfig+0x72e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <HAL_RCC_OscConfig+0x730>
    }
  }
  
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	0018      	movs	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	b006      	add	sp, #24
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40021000 	.word	0x40021000
 80026f8:	ff02ffff 	.word	0xff02ffff
 80026fc:	feffffff 	.word	0xfeffffff

08002700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800270e:	4b82      	ldr	r3, [pc, #520]	; (8002918 <HAL_RCC_ClockConfig+0x218>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2201      	movs	r2, #1
 8002714:	401a      	ands	r2, r3
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d211      	bcs.n	8002740 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271c:	4b7e      	ldr	r3, [pc, #504]	; (8002918 <HAL_RCC_ClockConfig+0x218>)
 800271e:	4a7e      	ldr	r2, [pc, #504]	; (8002918 <HAL_RCC_ClockConfig+0x218>)
 8002720:	6812      	ldr	r2, [r2, #0]
 8002722:	2101      	movs	r1, #1
 8002724:	438a      	bics	r2, r1
 8002726:	0011      	movs	r1, r2
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800272e:	4b7a      	ldr	r3, [pc, #488]	; (8002918 <HAL_RCC_ClockConfig+0x218>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2201      	movs	r2, #1
 8002734:	401a      	ands	r2, r3
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0e6      	b.n	800290e <HAL_RCC_ClockConfig+0x20e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2202      	movs	r2, #2
 8002746:	4013      	ands	r3, r2
 8002748:	d009      	beq.n	800275e <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800274a:	4a74      	ldr	r2, [pc, #464]	; (800291c <HAL_RCC_ClockConfig+0x21c>)
 800274c:	4b73      	ldr	r3, [pc, #460]	; (800291c <HAL_RCC_ClockConfig+0x21c>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	21f0      	movs	r1, #240	; 0xf0
 8002752:	438b      	bics	r3, r1
 8002754:	0019      	movs	r1, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	430b      	orrs	r3, r1
 800275c:	60d3      	str	r3, [r2, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2201      	movs	r2, #1
 8002764:	4013      	ands	r3, r2
 8002766:	d100      	bne.n	800276a <HAL_RCC_ClockConfig+0x6a>
 8002768:	e089      	b.n	800287e <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d107      	bne.n	8002782 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002772:	4b6a      	ldr	r3, [pc, #424]	; (800291c <HAL_RCC_ClockConfig+0x21c>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	029b      	lsls	r3, r3, #10
 800277a:	4013      	ands	r3, r2
 800277c:	d120      	bne.n	80027c0 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e0c5      	b.n	800290e <HAL_RCC_ClockConfig+0x20e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b03      	cmp	r3, #3
 8002788:	d107      	bne.n	800279a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278a:	4b64      	ldr	r3, [pc, #400]	; (800291c <HAL_RCC_ClockConfig+0x21c>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	2380      	movs	r3, #128	; 0x80
 8002790:	049b      	lsls	r3, r3, #18
 8002792:	4013      	ands	r3, r2
 8002794:	d114      	bne.n	80027c0 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e0b9      	b.n	800290e <HAL_RCC_ClockConfig+0x20e>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d106      	bne.n	80027b0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a2:	4b5e      	ldr	r3, [pc, #376]	; (800291c <HAL_RCC_ClockConfig+0x21c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2204      	movs	r2, #4
 80027a8:	4013      	ands	r3, r2
 80027aa:	d109      	bne.n	80027c0 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0ae      	b.n	800290e <HAL_RCC_ClockConfig+0x20e>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80027b0:	4b5a      	ldr	r3, [pc, #360]	; (800291c <HAL_RCC_ClockConfig+0x21c>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	2380      	movs	r3, #128	; 0x80
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4013      	ands	r3, r2
 80027ba:	d101      	bne.n	80027c0 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0a6      	b.n	800290e <HAL_RCC_ClockConfig+0x20e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027c0:	4a56      	ldr	r2, [pc, #344]	; (800291c <HAL_RCC_ClockConfig+0x21c>)
 80027c2:	4b56      	ldr	r3, [pc, #344]	; (800291c <HAL_RCC_ClockConfig+0x21c>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	2103      	movs	r1, #3
 80027c8:	438b      	bics	r3, r1
 80027ca:	0019      	movs	r1, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	430b      	orrs	r3, r1
 80027d2:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027d4:	f7fe fc38 	bl	8001048 <HAL_GetTick>
 80027d8:	0003      	movs	r3, r0
 80027da:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d111      	bne.n	8002808 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027e4:	e009      	b.n	80027fa <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e6:	f7fe fc2f 	bl	8001048 <HAL_GetTick>
 80027ea:	0002      	movs	r2, r0
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	4a4b      	ldr	r2, [pc, #300]	; (8002920 <HAL_RCC_ClockConfig+0x220>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e089      	b.n	800290e <HAL_RCC_ClockConfig+0x20e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027fa:	4b48      	ldr	r3, [pc, #288]	; (800291c <HAL_RCC_ClockConfig+0x21c>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	220c      	movs	r2, #12
 8002800:	4013      	ands	r3, r2
 8002802:	2b08      	cmp	r3, #8
 8002804:	d1ef      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xe6>
 8002806:	e03a      	b.n	800287e <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b03      	cmp	r3, #3
 800280e:	d111      	bne.n	8002834 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002810:	e009      	b.n	8002826 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002812:	f7fe fc19 	bl	8001048 <HAL_GetTick>
 8002816:	0002      	movs	r2, r0
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	4a40      	ldr	r2, [pc, #256]	; (8002920 <HAL_RCC_ClockConfig+0x220>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e073      	b.n	800290e <HAL_RCC_ClockConfig+0x20e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002826:	4b3d      	ldr	r3, [pc, #244]	; (800291c <HAL_RCC_ClockConfig+0x21c>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	220c      	movs	r2, #12
 800282c:	4013      	ands	r3, r2
 800282e:	2b0c      	cmp	r3, #12
 8002830:	d1ef      	bne.n	8002812 <HAL_RCC_ClockConfig+0x112>
 8002832:	e024      	b.n	800287e <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d11b      	bne.n	8002874 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800283c:	e009      	b.n	8002852 <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800283e:	f7fe fc03 	bl	8001048 <HAL_GetTick>
 8002842:	0002      	movs	r2, r0
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	4a35      	ldr	r2, [pc, #212]	; (8002920 <HAL_RCC_ClockConfig+0x220>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e05d      	b.n	800290e <HAL_RCC_ClockConfig+0x20e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002852:	4b32      	ldr	r3, [pc, #200]	; (800291c <HAL_RCC_ClockConfig+0x21c>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	220c      	movs	r2, #12
 8002858:	4013      	ands	r3, r2
 800285a:	2b04      	cmp	r3, #4
 800285c:	d1ef      	bne.n	800283e <HAL_RCC_ClockConfig+0x13e>
 800285e:	e00e      	b.n	800287e <HAL_RCC_ClockConfig+0x17e>
    }      
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002860:	f7fe fbf2 	bl	8001048 <HAL_GetTick>
 8002864:	0002      	movs	r2, r0
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	4a2d      	ldr	r2, [pc, #180]	; (8002920 <HAL_RCC_ClockConfig+0x220>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e04c      	b.n	800290e <HAL_RCC_ClockConfig+0x20e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002874:	4b29      	ldr	r3, [pc, #164]	; (800291c <HAL_RCC_ClockConfig+0x21c>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	220c      	movs	r2, #12
 800287a:	4013      	ands	r3, r2
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800287e:	4b26      	ldr	r3, [pc, #152]	; (8002918 <HAL_RCC_ClockConfig+0x218>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2201      	movs	r2, #1
 8002884:	401a      	ands	r2, r3
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d911      	bls.n	80028b0 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288c:	4b22      	ldr	r3, [pc, #136]	; (8002918 <HAL_RCC_ClockConfig+0x218>)
 800288e:	4a22      	ldr	r2, [pc, #136]	; (8002918 <HAL_RCC_ClockConfig+0x218>)
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	2101      	movs	r1, #1
 8002894:	438a      	bics	r2, r1
 8002896:	0011      	movs	r1, r2
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800289e:	4b1e      	ldr	r3, [pc, #120]	; (8002918 <HAL_RCC_ClockConfig+0x218>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2201      	movs	r2, #1
 80028a4:	401a      	ands	r2, r3
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d001      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e02e      	b.n	800290e <HAL_RCC_ClockConfig+0x20e>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2204      	movs	r2, #4
 80028b6:	4013      	ands	r3, r2
 80028b8:	d008      	beq.n	80028cc <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028ba:	4a18      	ldr	r2, [pc, #96]	; (800291c <HAL_RCC_ClockConfig+0x21c>)
 80028bc:	4b17      	ldr	r3, [pc, #92]	; (800291c <HAL_RCC_ClockConfig+0x21c>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	4918      	ldr	r1, [pc, #96]	; (8002924 <HAL_RCC_ClockConfig+0x224>)
 80028c2:	4019      	ands	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	430b      	orrs	r3, r1
 80028ca:	60d3      	str	r3, [r2, #12]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2208      	movs	r2, #8
 80028d2:	4013      	ands	r3, r2
 80028d4:	d009      	beq.n	80028ea <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028d6:	4a11      	ldr	r2, [pc, #68]	; (800291c <HAL_RCC_ClockConfig+0x21c>)
 80028d8:	4b10      	ldr	r3, [pc, #64]	; (800291c <HAL_RCC_ClockConfig+0x21c>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	4912      	ldr	r1, [pc, #72]	; (8002928 <HAL_RCC_ClockConfig+0x228>)
 80028de:	4019      	ands	r1, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	430b      	orrs	r3, r1
 80028e8:	60d3      	str	r3, [r2, #12]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028ea:	f000 f823 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 80028ee:	0001      	movs	r1, r0
 80028f0:	4b0a      	ldr	r3, [pc, #40]	; (800291c <HAL_RCC_ClockConfig+0x21c>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	091b      	lsrs	r3, r3, #4
 80028f6:	220f      	movs	r2, #15
 80028f8:	4013      	ands	r3, r2
 80028fa:	4a0c      	ldr	r2, [pc, #48]	; (800292c <HAL_RCC_ClockConfig+0x22c>)
 80028fc:	5cd3      	ldrb	r3, [r2, r3]
 80028fe:	000a      	movs	r2, r1
 8002900:	40da      	lsrs	r2, r3
 8002902:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <HAL_RCC_ClockConfig+0x230>)
 8002904:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002906:	2000      	movs	r0, #0
 8002908:	f7fe fb74 	bl	8000ff4 <HAL_InitTick>
  
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	0018      	movs	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	b004      	add	sp, #16
 8002914:	bd80      	pop	{r7, pc}
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	40022000 	.word	0x40022000
 800291c:	40021000 	.word	0x40021000
 8002920:	00001388 	.word	0x00001388
 8002924:	fffff8ff 	.word	0xfffff8ff
 8002928:	ffffc7ff 	.word	0xffffc7ff
 800292c:	08003c84 	.word	0x08003c84
 8002930:	20000058 	.word	0x20000058

08002934 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0, pllm = 0, plld = 0, pllvco = 0, msiclkrange = 0;
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	2300      	movs	r3, #0
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	2300      	movs	r3, #0
 8002944:	607b      	str	r3, [r7, #4]
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	2300      	movs	r3, #0
 800294c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002952:	4b32      	ldr	r3, [pc, #200]	; (8002a1c <HAL_RCC_GetSysClockFreq+0xe8>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	220c      	movs	r2, #12
 800295c:	4013      	ands	r3, r2
 800295e:	2b08      	cmp	r3, #8
 8002960:	d00e      	beq.n	8002980 <HAL_RCC_GetSysClockFreq+0x4c>
 8002962:	2b0c      	cmp	r3, #12
 8002964:	d00f      	beq.n	8002986 <HAL_RCC_GetSysClockFreq+0x52>
 8002966:	2b04      	cmp	r3, #4
 8002968:	d145      	bne.n	80029f6 <HAL_RCC_GetSysClockFreq+0xc2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 800296a:	4b2c      	ldr	r3, [pc, #176]	; (8002a1c <HAL_RCC_GetSysClockFreq+0xe8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2210      	movs	r2, #16
 8002970:	4013      	ands	r3, r2
 8002972:	d002      	beq.n	800297a <HAL_RCC_GetSysClockFreq+0x46>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002974:	4b2a      	ldr	r3, [pc, #168]	; (8002a20 <HAL_RCC_GetSysClockFreq+0xec>)
 8002976:	613b      	str	r3, [r7, #16]
      }
      else 
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002978:	e04b      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0xde>
        sysclockfreq =  HSI_VALUE;
 800297a:	4b2a      	ldr	r3, [pc, #168]	; (8002a24 <HAL_RCC_GetSysClockFreq+0xf0>)
 800297c:	613b      	str	r3, [r7, #16]
      break;
 800297e:	e048      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002980:	4b29      	ldr	r3, [pc, #164]	; (8002a28 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002982:	613b      	str	r3, [r7, #16]
      break;
 8002984:	e045      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	0c9b      	lsrs	r3, r3, #18
 800298a:	220f      	movs	r2, #15
 800298c:	4013      	ands	r3, r2
 800298e:	4a27      	ldr	r2, [pc, #156]	; (8002a2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002990:	5cd3      	ldrb	r3, [r2, r3]
 8002992:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	0d9b      	lsrs	r3, r3, #22
 8002998:	2203      	movs	r2, #3
 800299a:	4013      	ands	r3, r2
 800299c:	3301      	adds	r3, #1
 800299e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029a0:	4b1e      	ldr	r3, [pc, #120]	; (8002a1c <HAL_RCC_GetSysClockFreq+0xe8>)
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	025b      	lsls	r3, r3, #9
 80029a8:	4013      	ands	r3, r2
 80029aa:	d009      	beq.n	80029c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	4a1e      	ldr	r2, [pc, #120]	; (8002a28 <HAL_RCC_GetSysClockFreq+0xf4>)
 80029b0:	4353      	muls	r3, r2
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	0018      	movs	r0, r3
 80029b6:	f7fd fba7 	bl	8000108 <__udivsi3>
 80029ba:	0003      	movs	r3, r0
 80029bc:	617b      	str	r3, [r7, #20]
 80029be:	e017      	b.n	80029f0 <HAL_RCC_GetSysClockFreq+0xbc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 80029c0:	4b16      	ldr	r3, [pc, #88]	; (8002a1c <HAL_RCC_GetSysClockFreq+0xe8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2210      	movs	r2, #16
 80029c6:	4013      	ands	r3, r2
 80029c8:	d009      	beq.n	80029de <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	4a14      	ldr	r2, [pc, #80]	; (8002a20 <HAL_RCC_GetSysClockFreq+0xec>)
 80029ce:	4353      	muls	r3, r2
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	0018      	movs	r0, r3
 80029d4:	f7fd fb98 	bl	8000108 <__udivsi3>
 80029d8:	0003      	movs	r3, r0
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_GetSysClockFreq+0xbc>
        }
        else 
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	4a10      	ldr	r2, [pc, #64]	; (8002a24 <HAL_RCC_GetSysClockFreq+0xf0>)
 80029e2:	4353      	muls	r3, r2
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	0018      	movs	r0, r3
 80029e8:	f7fd fb8e 	bl	8000108 <__udivsi3>
 80029ec:	0003      	movs	r3, r0
 80029ee:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	613b      	str	r3, [r7, #16]
      break;
 80029f4:	e00d      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <HAL_RCC_GetSysClockFreq+0xe8>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	0b5b      	lsrs	r3, r3, #13
 80029fc:	2207      	movs	r2, #7
 80029fe:	4013      	ands	r3, r2
 8002a00:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	3301      	adds	r3, #1
 8002a06:	2280      	movs	r2, #128	; 0x80
 8002a08:	0212      	lsls	r2, r2, #8
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	0013      	movs	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
      break;
 8002a10:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a12:	693b      	ldr	r3, [r7, #16]
}
 8002a14:	0018      	movs	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	b006      	add	sp, #24
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	003d0900 	.word	0x003d0900
 8002a24:	00f42400 	.word	0x00f42400
 8002a28:	007a1200 	.word	0x007a1200
 8002a2c:	08003c9c 	.word	0x08003c9c

08002a30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a34:	4b02      	ldr	r3, [pc, #8]	; (8002a40 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a36:	681b      	ldr	r3, [r3, #0]
}
 8002a38:	0018      	movs	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	20000058 	.word	0x20000058

08002a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a48:	f7ff fff2 	bl	8002a30 <HAL_RCC_GetHCLKFreq>
 8002a4c:	0001      	movs	r1, r0
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	0a1b      	lsrs	r3, r3, #8
 8002a54:	2207      	movs	r2, #7
 8002a56:	4013      	ands	r3, r2
 8002a58:	4a04      	ldr	r2, [pc, #16]	; (8002a6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a5a:	5cd3      	ldrb	r3, [r2, r3]
 8002a5c:	40d9      	lsrs	r1, r3
 8002a5e:	000b      	movs	r3, r1
}    
 8002a60:	0018      	movs	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	08003c94 	.word	0x08003c94

08002a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a74:	f7ff ffdc 	bl	8002a30 <HAL_RCC_GetHCLKFreq>
 8002a78:	0001      	movs	r1, r0
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	0adb      	lsrs	r3, r3, #11
 8002a80:	2207      	movs	r2, #7
 8002a82:	4013      	ands	r3, r2
 8002a84:	4a04      	ldr	r2, [pc, #16]	; (8002a98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a86:	5cd3      	ldrb	r3, [r2, r3]
 8002a88:	40d9      	lsrs	r1, r3
 8002a8a:	000b      	movs	r3, r1
} 
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	40021000 	.word	0x40021000
 8002a98:	08003c94 	.word	0x08003c94

08002a9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60bb      	str	r3, [r7, #8]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002aac:	4b23      	ldr	r3, [pc, #140]	; (8002b3c <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	22f0      	movs	r2, #240	; 0xf0
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d12b      	bne.n	8002b0e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ab6:	4b21      	ldr	r3, [pc, #132]	; (8002b3c <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8002ab8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	055b      	lsls	r3, r3, #21
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d006      	beq.n	8002ad0 <RCC_SetFlashLatencyFromMSIRange+0x34>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002ac2:	4b1f      	ldr	r3, [pc, #124]	; (8002b40 <RCC_SetFlashLatencyFromMSIRange+0xa4>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	23c0      	movs	r3, #192	; 0xc0
 8002ac8:	015b      	lsls	r3, r3, #5
 8002aca:	4013      	ands	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	e012      	b.n	8002af6 <RCC_SetFlashLatencyFromMSIRange+0x5a>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad0:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8002ad2:	4a1a      	ldr	r2, [pc, #104]	; (8002b3c <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8002ad4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ad6:	2180      	movs	r1, #128	; 0x80
 8002ad8:	0549      	lsls	r1, r1, #21
 8002ada:	430a      	orrs	r2, r1
 8002adc:	639a      	str	r2, [r3, #56]	; 0x38
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002ade:	4b18      	ldr	r3, [pc, #96]	; (8002b40 <RCC_SetFlashLatencyFromMSIRange+0xa4>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	23c0      	movs	r3, #192	; 0xc0
 8002ae4:	015b      	lsls	r3, r3, #5
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aea:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8002aec:	4a13      	ldr	r2, [pc, #76]	; (8002b3c <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8002aee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002af0:	4914      	ldr	r1, [pc, #80]	; (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xa8>)
 8002af2:	400a      	ands	r2, r1
 8002af4:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	23c0      	movs	r3, #192	; 0xc0
 8002afa:	015b      	lsls	r3, r3, #5
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d106      	bne.n	8002b0e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	23c0      	movs	r3, #192	; 0xc0
 8002b04:	021b      	lsls	r3, r3, #8
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d101      	bne.n	8002b0e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	60bb      	str	r3, [r7, #8]
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8002b0e:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002b10:	4a0d      	ldr	r2, [pc, #52]	; (8002b48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002b12:	6812      	ldr	r2, [r2, #0]
 8002b14:	2101      	movs	r1, #1
 8002b16:	438a      	bics	r2, r1
 8002b18:	0011      	movs	r1, r2
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	601a      	str	r2, [r3, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002b20:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2201      	movs	r2, #1
 8002b26:	401a      	ands	r2, r3
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d001      	beq.n	8002b32 <RCC_SetFlashLatencyFromMSIRange+0x96>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <RCC_SetFlashLatencyFromMSIRange+0x98>
  }
  
  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	0018      	movs	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b004      	add	sp, #16
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40007000 	.word	0x40007000
 8002b44:	efffffff 	.word	0xefffffff
 8002b48:	40022000 	.word	0x40022000

08002b4c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2220      	movs	r2, #32
 8002b62:	4013      	ands	r3, r2
 8002b64:	d106      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	2380      	movs	r3, #128	; 0x80
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d100      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002b72:	e0d9      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8002b74:	2317      	movs	r3, #23
 8002b76:	18fb      	adds	r3, r7, r3
 8002b78:	2200      	movs	r2, #0
 8002b7a:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b7c:	4b9f      	ldr	r3, [pc, #636]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	055b      	lsls	r3, r3, #21
 8002b84:	4013      	ands	r3, r2
 8002b86:	d10a      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x52>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b88:	4b9c      	ldr	r3, [pc, #624]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002b8a:	4a9c      	ldr	r2, [pc, #624]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002b8c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b8e:	2180      	movs	r1, #128	; 0x80
 8002b90:	0549      	lsls	r1, r1, #21
 8002b92:	430a      	orrs	r2, r1
 8002b94:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002b96:	2317      	movs	r3, #23
 8002b98:	18fb      	adds	r3, r7, r3
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9e:	4b98      	ldr	r3, [pc, #608]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d11a      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002baa:	4b95      	ldr	r3, [pc, #596]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002bac:	4a94      	ldr	r2, [pc, #592]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002bae:	6812      	ldr	r2, [r2, #0]
 8002bb0:	2180      	movs	r1, #128	; 0x80
 8002bb2:	0049      	lsls	r1, r1, #1
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb8:	f7fe fa46 	bl	8001048 <HAL_GetTick>
 8002bbc:	0003      	movs	r3, r0
 8002bbe:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc2:	f7fe fa41 	bl	8001048 <HAL_GetTick>
 8002bc6:	0002      	movs	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b64      	cmp	r3, #100	; 0x64
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x88>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e10f      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd4:	4b8a      	ldr	r3, [pc, #552]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	2380      	movs	r3, #128	; 0x80
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d0f0      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */ 
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002be0:	4b86      	ldr	r3, [pc, #536]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	23c0      	movs	r3, #192	; 0xc0
 8002be6:	039b      	lsls	r3, r3, #14
 8002be8:	4013      	ands	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	23c0      	movs	r3, #192	; 0xc0
 8002bf2:	039b      	lsls	r3, r3, #14
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d107      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	23c0      	movs	r3, #192	; 0xc0
 8002c02:	039b      	lsls	r3, r3, #14
 8002c04:	401a      	ands	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d010      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0xe2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	23c0      	movs	r3, #192	; 0xc0
 8002c12:	029b      	lsls	r3, r3, #10
 8002c14:	401a      	ands	r2, r3
 8002c16:	23c0      	movs	r3, #192	; 0xc0
 8002c18:	029b      	lsls	r3, r3, #10
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d107      	bne.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002c1e:	4b77      	ldr	r3, [pc, #476]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	2380      	movs	r3, #128	; 0x80
 8002c24:	029b      	lsls	r3, r3, #10
 8002c26:	4013      	ands	r3, r2
 8002c28:	d001      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0xe2>
      {
        /* To update HSE divider, first switch-OFF HSE clock oscillator*/
        return HAL_ERROR; 
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e0e2      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002c2e:	4b73      	ldr	r3, [pc, #460]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002c30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c32:	23c0      	movs	r3, #192	; 0xc0
 8002c34:	029b      	lsls	r3, r3, #10
 8002c36:	4013      	ands	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]
    
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d049      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	23c0      	movs	r3, #192	; 0xc0
 8002c46:	029b      	lsls	r3, r3, #10
 8002c48:	401a      	ands	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d004      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2220      	movs	r2, #32
 8002c56:	4013      	ands	r3, r2
 8002c58:	d10d      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	23c0      	movs	r3, #192	; 0xc0
 8002c60:	029b      	lsls	r3, r3, #10
 8002c62:	401a      	ands	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d034      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	4013      	ands	r3, r2
 8002c74:	d02e      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002c76:	4b61      	ldr	r3, [pc, #388]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c7a:	4a62      	ldr	r2, [pc, #392]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
      
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c80:	4b5e      	ldr	r3, [pc, #376]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002c82:	4a5e      	ldr	r2, [pc, #376]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002c84:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c86:	2180      	movs	r1, #128	; 0x80
 8002c88:	0309      	lsls	r1, r1, #12
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c8e:	4b5b      	ldr	r3, [pc, #364]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002c90:	4a5a      	ldr	r2, [pc, #360]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002c92:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c94:	495c      	ldr	r1, [pc, #368]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002c96:	400a      	ands	r2, r1
 8002c98:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002c9a:	4b58      	ldr	r3, [pc, #352]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	651a      	str	r2, [r3, #80]	; 0x50
      
       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	2380      	movs	r3, #128	; 0x80
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d014      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002caa:	f7fe f9cd 	bl	8001048 <HAL_GetTick>
 8002cae:	0003      	movs	r3, r0
 8002cb0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb2:	e009      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cb4:	f7fe f9c8 	bl	8001048 <HAL_GetTick>
 8002cb8:	0002      	movs	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	4a53      	ldr	r2, [pc, #332]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e095      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc8:	4b4c      	ldr	r3, [pc, #304]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002cca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d0ef      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	23c0      	movs	r3, #192	; 0xc0
 8002cda:	029b      	lsls	r3, r3, #10
 8002cdc:	401a      	ands	r2, r3
 8002cde:	23c0      	movs	r3, #192	; 0xc0
 8002ce0:	029b      	lsls	r3, r3, #10
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d10b      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002ce6:	4a45      	ldr	r2, [pc, #276]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002ce8:	4b44      	ldr	r3, [pc, #272]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4948      	ldr	r1, [pc, #288]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cee:	4019      	ands	r1, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6858      	ldr	r0, [r3, #4]
 8002cf4:	23c0      	movs	r3, #192	; 0xc0
 8002cf6:	039b      	lsls	r3, r3, #14
 8002cf8:	4003      	ands	r3, r0
 8002cfa:	430b      	orrs	r3, r1
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	4a3f      	ldr	r2, [pc, #252]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002d00:	4b3e      	ldr	r3, [pc, #248]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002d02:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6858      	ldr	r0, [r3, #4]
 8002d08:	23c0      	movs	r3, #192	; 0xc0
 8002d0a:	029b      	lsls	r3, r3, #10
 8002d0c:	4003      	ands	r3, r0
 8002d0e:	430b      	orrs	r3, r1
 8002d10:	6513      	str	r3, [r2, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d12:	2317      	movs	r3, #23
 8002d14:	18fb      	adds	r3, r7, r3
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d105      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d1c:	4b37      	ldr	r3, [pc, #220]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002d1e:	4a37      	ldr	r2, [pc, #220]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002d20:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d22:	493c      	ldr	r1, [pc, #240]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002d24:	400a      	ands	r2, r1
 8002d26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  
#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d009      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d32:	4a32      	ldr	r2, [pc, #200]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002d34:	4b31      	ldr	r3, [pc, #196]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d38:	2103      	movs	r1, #3
 8002d3a:	438b      	bics	r3, r1
 8002d3c:	0019      	movs	r1, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	430b      	orrs	r3, r1
 8002d44:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */
  
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d009      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d50:	4a2a      	ldr	r2, [pc, #168]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002d52:	4b2a      	ldr	r3, [pc, #168]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d56:	210c      	movs	r1, #12
 8002d58:	438b      	bics	r3, r1
 8002d5a:	0019      	movs	r1, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	430b      	orrs	r3, r1
 8002d62:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
  
  /*------------------------------ LPUART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2204      	movs	r2, #4
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d008      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
    
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d6e:	4a23      	ldr	r2, [pc, #140]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002d70:	4b22      	ldr	r3, [pc, #136]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d74:	4928      	ldr	r1, [pc, #160]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d76:	4019      	ands	r1, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2208      	movs	r2, #8
 8002d86:	4013      	ands	r3, r2
 8002d88:	d008      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d8a:	4a1c      	ldr	r2, [pc, #112]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002d8c:	4b1b      	ldr	r3, [pc, #108]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d90:	4922      	ldr	r1, [pc, #136]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002d92:	4019      	ands	r1, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	2380      	movs	r3, #128	; 0x80
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4013      	ands	r3, r2
 8002da6:	d008      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002da8:	4a14      	ldr	r2, [pc, #80]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002daa:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dae:	4915      	ldr	r1, [pc, #84]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002db0:	4019      	ands	r1, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	430b      	orrs	r3, r1
 8002db8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }  
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2240      	movs	r2, #64	; 0x40
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d008      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dc4:	4a0d      	ldr	r2, [pc, #52]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002dc6:	4b0d      	ldr	r3, [pc, #52]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dca:	4915      	ldr	r1, [pc, #84]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002dcc:	4019      	ands	r1, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	430b      	orrs	r3, r1
 8002dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* USB */
  
  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2280      	movs	r2, #128	; 0x80
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d008      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002de0:	4a06      	ldr	r2, [pc, #24]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002de2:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de6:	490f      	ldr	r1, [pc, #60]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002de8:	4019      	ands	r1, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	430b      	orrs	r3, r1
 8002df0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	0018      	movs	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b006      	add	sp, #24
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40007000 	.word	0x40007000
 8002e04:	fffcffff 	.word	0xfffcffff
 8002e08:	fff7ffff 	.word	0xfff7ffff
 8002e0c:	00001388 	.word	0x00001388
 8002e10:	ffcfffff 	.word	0xffcfffff
 8002e14:	efffffff 	.word	0xefffffff
 8002e18:	fffff3ff 	.word	0xfffff3ff
 8002e1c:	ffffcfff 	.word	0xffffcfff
 8002e20:	fbffffff 	.word	0xfbffffff
 8002e24:	fff3ffff 	.word	0xfff3ffff

08002e28 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_I2C3     I2C3 peripheral clock (*)
  * @note   (*) means that this peripheral is not present on all the devices
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08a      	sub	sp, #40	; 0x28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t temp_reg = 0U, clkprediv = 0U, frequency = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
 8002e34:	2300      	movs	r3, #0
 8002e36:	61bb      	str	r3, [r7, #24]
 8002e38:	2300      	movs	r3, #0
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t srcclk = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
#if defined(USB)
    uint32_t pllmul = 0U, plldiv = 0U, pllvco = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	2300      	movs	r3, #0
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	2300      	movs	r3, #0
 8002e4a:	623b      	str	r3, [r7, #32]
#endif /* USB */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b10      	cmp	r3, #16
 8002e50:	d100      	bne.n	8002e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
 8002e52:	e188      	b.n	8003166 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
 8002e54:	d80e      	bhi.n	8002e74 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d100      	bne.n	8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x34>
 8002e5a:	e0f3      	b.n	8003044 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
 8002e5c:	d803      	bhi.n	8002e66 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d100      	bne.n	8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8002e62:	e0be      	b.n	8002fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
      break;
    } 
#endif /* RCC_CCIPR_I2C3SEL */
  default: 
    {
      break;
 8002e64:	e1cc      	b.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
  switch (PeriphClk)
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d100      	bne.n	8002e6c <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 8002e6a:	e11c      	b.n	80030a6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d100      	bne.n	8002e72 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002e70:	e151      	b.n	8003116 <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
      break;
 8002e72:	e1c5      	b.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
  switch (PeriphClk)
 8002e74:	2b40      	cmp	r3, #64	; 0x40
 8002e76:	d100      	bne.n	8002e7a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8002e78:	e060      	b.n	8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8002e7a:	d802      	bhi.n	8002e82 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8002e7c:	2b20      	cmp	r3, #32
 8002e7e:	d00a      	beq.n	8002e96 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
      break;
 8002e80:	e1be      	b.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
  switch (PeriphClk)
 8002e82:	2280      	movs	r2, #128	; 0x80
 8002e84:	0052      	lsls	r2, r2, #1
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d100      	bne.n	8002e8c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8002e8a:	e191      	b.n	80031b0 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8002e8c:	2280      	movs	r2, #128	; 0x80
 8002e8e:	0112      	lsls	r2, r2, #4
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d000      	beq.n	8002e96 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
      break;
 8002e94:	e1b4      	b.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      temp_reg = RCC->CSR;
 8002e96:	4bbc      	ldr	r3, [pc, #752]	; (8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8002e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e9a:	61fb      	str	r3, [r7, #28]
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002e9c:	4bba      	ldr	r3, [pc, #744]	; (8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8002e9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ea0:	23c0      	movs	r3, #192	; 0xc0
 8002ea2:	029b      	lsls	r3, r3, #10
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	2380      	movs	r3, #128	; 0x80
 8002eac:	025b      	lsls	r3, r3, #9
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d108      	bne.n	8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8002eb2:	69fa      	ldr	r2, [r7, #28]
 8002eb4:	2380      	movs	r3, #128	; 0x80
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d003      	beq.n	8002ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        frequency = LSE_VALUE;
 8002ebc:	2380      	movs	r3, #128	; 0x80
 8002ebe:	021b      	lsls	r3, r3, #8
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec2:	e03a      	b.n	8002f3a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	2380      	movs	r3, #128	; 0x80
 8002ec8:	029b      	lsls	r3, r3, #10
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d106      	bne.n	8002edc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d002      	beq.n	8002edc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        frequency = LSI_VALUE;
 8002ed6:	4bad      	ldr	r3, [pc, #692]	; (800318c <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eda:	e02e      	b.n	8002f3a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIVX) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	23c0      	movs	r3, #192	; 0xc0
 8002ee0:	029b      	lsls	r3, r3, #10
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d126      	bne.n	8002f34 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8002ee6:	4ba8      	ldr	r3, [pc, #672]	; (8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	2380      	movs	r3, #128	; 0x80
 8002eec:	029b      	lsls	r3, r3, #10
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d020      	beq.n	8002f34 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 8002ef2:	4ba5      	ldr	r3, [pc, #660]	; (8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	23c0      	movs	r3, #192	; 0xc0
 8002ef8:	039b      	lsls	r3, r3, #14
 8002efa:	4013      	ands	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        switch (clkprediv)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	2280      	movs	r2, #128	; 0x80
 8002f02:	0392      	lsls	r2, r2, #14
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d00b      	beq.n	8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 8002f08:	22c0      	movs	r2, #192	; 0xc0
 8002f0a:	0392      	lsls	r2, r2, #14
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d004      	beq.n	8002f1a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002f10:	2280      	movs	r2, #128	; 0x80
 8002f12:	0352      	lsls	r2, r2, #13
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d006      	beq.n	8002f26 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8002f18:	e008      	b.n	8002f2c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            frequency = HSE_VALUE / 16U;
 8002f1a:	4b9d      	ldr	r3, [pc, #628]	; (8003190 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f1e:	e008      	b.n	8002f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
            frequency = HSE_VALUE / 8U;
 8002f20:	4b9c      	ldr	r3, [pc, #624]	; (8003194 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f24:	e005      	b.n	8002f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
            frequency = HSE_VALUE / 4U;
 8002f26:	4b9c      	ldr	r3, [pc, #624]	; (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f2a:	e002      	b.n	8002f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
            frequency = HSE_VALUE / 2U;
 8002f2c:	4b9b      	ldr	r3, [pc, #620]	; (800319c <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f30:	46c0      	nop			; (mov r8, r8)
      }
 8002f32:	e002      	b.n	8002f3a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8002f38:	e162      	b.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
 8002f3a:	e161      	b.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8002f3c:	4b92      	ldr	r3, [pc, #584]	; (8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8002f3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	04db      	lsls	r3, r3, #19
 8002f44:	4013      	ands	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]
        if((srcclk == RCC_USBCLKSOURCE_PLL) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d138      	bne.n	8002fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8002f4e:	4b8e      	ldr	r3, [pc, #568]	; (8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	2380      	movs	r3, #128	; 0x80
 8002f54:	049b      	lsls	r3, r3, #18
 8002f56:	4013      	ands	r3, r2
 8002f58:	d032      	beq.n	8002fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
            pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8002f5a:	4b8b      	ldr	r3, [pc, #556]	; (8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	23f0      	movs	r3, #240	; 0xf0
 8002f60:	039b      	lsls	r3, r3, #14
 8002f62:	4013      	ands	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
            plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8002f66:	4b88      	ldr	r3, [pc, #544]	; (8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	23c0      	movs	r3, #192	; 0xc0
 8002f6c:	041b      	lsls	r3, r3, #16
 8002f6e:	4013      	ands	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	0c9b      	lsrs	r3, r3, #18
 8002f76:	4a8a      	ldr	r2, [pc, #552]	; (80031a0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8002f78:	5cd3      	ldrb	r3, [r2, r3]
 8002f7a:	613b      	str	r3, [r7, #16]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	0d9b      	lsrs	r3, r3, #22
 8002f80:	3301      	adds	r3, #1
 8002f82:	60fb      	str	r3, [r7, #12]
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 8002f84:	4b80      	ldr	r3, [pc, #512]	; (8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	025b      	lsls	r3, r3, #9
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d10a      	bne.n	8002fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
                if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8002f90:	4b7d      	ldr	r3, [pc, #500]	; (8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2210      	movs	r2, #16
 8002f96:	4013      	ands	r3, r2
 8002f98:	d002      	beq.n	8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
                    pllvco =  (HSI_VALUE >> 2U);
 8002f9a:	4b80      	ldr	r3, [pc, #512]	; (800319c <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 8002f9c:	623b      	str	r3, [r7, #32]
 8002f9e:	e004      	b.n	8002faa <HAL_RCCEx_GetPeriphCLKFreq+0x182>
                    pllvco =  HSI_VALUE;
 8002fa0:	4b80      	ldr	r3, [pc, #512]	; (80031a4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 8002fa2:	623b      	str	r3, [r7, #32]
 8002fa4:	e001      	b.n	8002faa <HAL_RCCEx_GetPeriphCLKFreq+0x182>
                pllvco = HSE_VALUE;
 8002fa6:	4b80      	ldr	r3, [pc, #512]	; (80031a8 <HAL_RCCEx_GetPeriphCLKFreq+0x380>)
 8002fa8:	623b      	str	r3, [r7, #32]
            pllvco = (pllvco * pllmul);
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4353      	muls	r3, r2
 8002fb0:	623b      	str	r3, [r7, #32]
            frequency = (pllvco/ plldiv);
 8002fb2:	68f9      	ldr	r1, [r7, #12]
 8002fb4:	6a38      	ldr	r0, [r7, #32]
 8002fb6:	f7fd f8a7 	bl	8000108 <__udivsi3>
 8002fba:	0003      	movs	r3, r0
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fbe:	e00f      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	04db      	lsls	r3, r3, #19
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d107      	bne.n	8002fda <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 8002fca:	4b6f      	ldr	r3, [pc, #444]	; (8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d002      	beq.n	8002fda <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
            frequency = HSI48_VALUE;
 8002fd4:	4b75      	ldr	r3, [pc, #468]	; (80031ac <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd8:	e002      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
            frequency = 0U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002fde:	e10f      	b.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
 8002fe0:	e10e      	b.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8002fe2:	4b69      	ldr	r3, [pc, #420]	; (8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8002fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	4013      	ands	r3, r2
 8002fea:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d104      	bne.n	8002ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
        frequency = HAL_RCC_GetPCLK2Freq();
 8002ff2:	f7ff fd3d 	bl	8002a70 <HAL_RCC_GetPCLK2Freq>
 8002ff6:	0003      	movs	r3, r0
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8002ffa:	e101      	b.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d107      	bne.n	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8003002:	4b61      	ldr	r3, [pc, #388]	; (8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2204      	movs	r2, #4
 8003008:	4013      	ands	r3, r2
 800300a:	d002      	beq.n	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
        frequency = HSI_VALUE;
 800300c:	4b65      	ldr	r3, [pc, #404]	; (80031a4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 800300e:	627b      	str	r3, [r7, #36]	; 0x24
 8003010:	e017      	b.n	8003042 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d104      	bne.n	8003022 <HAL_RCCEx_GetPeriphCLKFreq+0x1fa>
        frequency = HAL_RCC_GetSysClockFreq();
 8003018:	f7ff fc8c 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 800301c:	0003      	movs	r3, r0
 800301e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8003020:	e0ee      	b.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      else if ((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b03      	cmp	r3, #3
 8003026:	d109      	bne.n	800303c <HAL_RCCEx_GetPeriphCLKFreq+0x214>
 8003028:	4b57      	ldr	r3, [pc, #348]	; (8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 800302a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800302c:	2380      	movs	r3, #128	; 0x80
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4013      	ands	r3, r2
 8003032:	d003      	beq.n	800303c <HAL_RCCEx_GetPeriphCLKFreq+0x214>
        frequency = LSE_VALUE;
 8003034:	2380      	movs	r3, #128	; 0x80
 8003036:	021b      	lsls	r3, r3, #8
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
 800303a:	e002      	b.n	8003042 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
        frequency = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8003040:	e0de      	b.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
 8003042:	e0dd      	b.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003044:	4b50      	ldr	r3, [pc, #320]	; (8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8003046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003048:	220c      	movs	r2, #12
 800304a:	4013      	ands	r3, r2
 800304c:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d104      	bne.n	800305e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003054:	f7ff fcf6 	bl	8002a44 <HAL_RCC_GetPCLK1Freq>
 8003058:	0003      	movs	r3, r0
 800305a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800305c:	e0d0      	b.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2b08      	cmp	r3, #8
 8003062:	d107      	bne.n	8003074 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8003064:	4b48      	ldr	r3, [pc, #288]	; (8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2204      	movs	r2, #4
 800306a:	4013      	ands	r3, r2
 800306c:	d002      	beq.n	8003074 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
        frequency = HSI_VALUE;
 800306e:	4b4d      	ldr	r3, [pc, #308]	; (80031a4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
 8003072:	e017      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2b04      	cmp	r3, #4
 8003078:	d104      	bne.n	8003084 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
        frequency = HAL_RCC_GetSysClockFreq();
 800307a:	f7ff fc5b 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 800307e:	0003      	movs	r3, r0
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8003082:	e0bd      	b.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	2b0c      	cmp	r3, #12
 8003088:	d109      	bne.n	800309e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800308a:	4b3f      	ldr	r3, [pc, #252]	; (8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 800308c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800308e:	2380      	movs	r3, #128	; 0x80
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4013      	ands	r3, r2
 8003094:	d003      	beq.n	800309e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        frequency = LSE_VALUE;
 8003096:	2380      	movs	r3, #128	; 0x80
 8003098:	021b      	lsls	r3, r3, #8
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
 800309c:	e002      	b.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
        frequency = 0U;
 800309e:	2300      	movs	r3, #0
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80030a2:	e0ad      	b.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
 80030a4:	e0ac      	b.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80030a6:	4b38      	ldr	r3, [pc, #224]	; (8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 80030a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030aa:	23c0      	movs	r3, #192	; 0xc0
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	4013      	ands	r3, r2
 80030b0:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d104      	bne.n	80030c2 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
        frequency = HAL_RCC_GetPCLK1Freq();
 80030b8:	f7ff fcc4 	bl	8002a44 <HAL_RCC_GetPCLK1Freq>
 80030bc:	0003      	movs	r3, r0
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80030c0:	e09e      	b.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	2380      	movs	r3, #128	; 0x80
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d107      	bne.n	80030dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
 80030cc:	4b2e      	ldr	r3, [pc, #184]	; (8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2204      	movs	r2, #4
 80030d2:	4013      	ands	r3, r2
 80030d4:	d002      	beq.n	80030dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
        frequency = HSI_VALUE;
 80030d6:	4b33      	ldr	r3, [pc, #204]	; (80031a4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
 80030da:	e01b      	b.n	8003114 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
      else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	2380      	movs	r3, #128	; 0x80
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d104      	bne.n	80030f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        frequency = HAL_RCC_GetSysClockFreq();
 80030e6:	f7ff fc25 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 80030ea:	0003      	movs	r3, r0
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80030ee:	e087      	b.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	23c0      	movs	r3, #192	; 0xc0
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d109      	bne.n	800310e <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 80030fa:	4b23      	ldr	r3, [pc, #140]	; (8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 80030fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030fe:	2380      	movs	r3, #128	; 0x80
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4013      	ands	r3, r2
 8003104:	d003      	beq.n	800310e <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
        frequency = LSE_VALUE;
 8003106:	2380      	movs	r3, #128	; 0x80
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
 800310c:	e002      	b.n	8003114 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
        frequency = 0U;
 800310e:	2300      	movs	r3, #0
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8003112:	e075      	b.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
 8003114:	e074      	b.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003116:	4b1c      	ldr	r3, [pc, #112]	; (8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8003118:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800311a:	23c0      	movs	r3, #192	; 0xc0
 800311c:	019b      	lsls	r3, r3, #6
 800311e:	4013      	ands	r3, r2
 8003120:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d104      	bne.n	8003132 <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003128:	f7ff fc8c 	bl	8002a44 <HAL_RCC_GetPCLK1Freq>
 800312c:	0003      	movs	r3, r0
 800312e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8003130:	e066      	b.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      else if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	019b      	lsls	r3, r3, #6
 8003138:	429a      	cmp	r2, r3
 800313a:	d107      	bne.n	800314c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800313c:	4b12      	ldr	r3, [pc, #72]	; (8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2204      	movs	r2, #4
 8003142:	4013      	ands	r3, r2
 8003144:	d002      	beq.n	800314c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        frequency = HSI_VALUE;
 8003146:	4b17      	ldr	r3, [pc, #92]	; (80031a4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800314a:	e059      	b.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	2380      	movs	r3, #128	; 0x80
 8003150:	015b      	lsls	r3, r3, #5
 8003152:	429a      	cmp	r2, r3
 8003154:	d104      	bne.n	8003160 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
        frequency = HAL_RCC_GetSysClockFreq();
 8003156:	f7ff fbed 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 800315a:	0003      	movs	r3, r0
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800315e:	e04f      	b.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        frequency = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8003164:	e04c      	b.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      if (READ_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C2EN))==RCC_APB1ENR_I2C2EN)
 8003166:	4b08      	ldr	r3, [pc, #32]	; (8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8003168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800316a:	2380      	movs	r3, #128	; 0x80
 800316c:	03db      	lsls	r3, r3, #15
 800316e:	401a      	ands	r2, r3
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	03db      	lsls	r3, r3, #15
 8003174:	429a      	cmp	r2, r3
 8003176:	d104      	bne.n	8003182 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003178:	f7ff fc64 	bl	8002a44 <HAL_RCC_GetPCLK1Freq>
 800317c:	0003      	movs	r3, r0
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8003180:	e03e      	b.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        frequency = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8003186:	e03b      	b.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
 8003188:	40021000 	.word	0x40021000
 800318c:	00009088 	.word	0x00009088
 8003190:	0007a120 	.word	0x0007a120
 8003194:	000f4240 	.word	0x000f4240
 8003198:	001e8480 	.word	0x001e8480
 800319c:	003d0900 	.word	0x003d0900
 80031a0:	08003c9c 	.word	0x08003c9c
 80031a4:	00f42400 	.word	0x00f42400
 80031a8:	007a1200 	.word	0x007a1200
 80031ac:	02dc6c00 	.word	0x02dc6c00
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80031b0:	4b16      	ldr	r3, [pc, #88]	; (800320c <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>)
 80031b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031b4:	23c0      	movs	r3, #192	; 0xc0
 80031b6:	029b      	lsls	r3, r3, #10
 80031b8:	4013      	ands	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d104      	bne.n	80031cc <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
        frequency = HAL_RCC_GetPCLK1Freq();
 80031c2:	f7ff fc3f 	bl	8002a44 <HAL_RCC_GetPCLK1Freq>
 80031c6:	0003      	movs	r3, r0
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80031ca:	e018      	b.n	80031fe <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	2380      	movs	r3, #128	; 0x80
 80031d0:	029b      	lsls	r3, r3, #10
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d107      	bne.n	80031e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80031d6:	4b0d      	ldr	r3, [pc, #52]	; (800320c <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2204      	movs	r2, #4
 80031dc:	4013      	ands	r3, r2
 80031de:	d002      	beq.n	80031e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        frequency = HSI_VALUE;
 80031e0:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>)
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80031e4:	e00b      	b.n	80031fe <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
      else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	2380      	movs	r3, #128	; 0x80
 80031ea:	025b      	lsls	r3, r3, #9
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d104      	bne.n	80031fa <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
        frequency = HAL_RCC_GetSysClockFreq();
 80031f0:	f7ff fba0 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 80031f4:	0003      	movs	r3, r0
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80031f8:	e001      	b.n	80031fe <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
        frequency = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80031fe:	46c0      	nop			; (mov r8, r8)
    }
  }
  return(frequency);
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003202:	0018      	movs	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	b00a      	add	sp, #40	; 0x28
 8003208:	bd80      	pop	{r7, pc}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	40021000 	.word	0x40021000
 8003210:	00f42400 	.word	0x00f42400

08003214 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e047      	b.n	80032b6 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2269      	movs	r2, #105	; 0x69
 800322a:	5c9b      	ldrb	r3, [r3, r2]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d107      	bne.n	8003242 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2268      	movs	r2, #104	; 0x68
 8003236:	2100      	movs	r1, #0
 8003238:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	0018      	movs	r0, r3
 800323e:	f7fd fe53 	bl	8000ee8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2269      	movs	r2, #105	; 0x69
 8003246:	2124      	movs	r1, #36	; 0x24
 8003248:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6812      	ldr	r2, [r2, #0]
 8003252:	6812      	ldr	r2, [r2, #0]
 8003254:	2101      	movs	r1, #1
 8003256:	438a      	bics	r2, r1
 8003258:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_UART_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	0018      	movs	r0, r3
 8003266:	f000 fb7b 	bl	8003960 <UART_AdvFeatureConfig>
  }

  if (UART_SetConfig(huart) == HAL_ERROR)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	0018      	movs	r0, r3
 800326e:	f000 f829 	bl	80032c4 <UART_SetConfig>
 8003272:	0003      	movs	r3, r0
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_UART_Init+0x68>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e01c      	b.n	80032b6 <HAL_UART_Init+0xa2>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	6852      	ldr	r2, [r2, #4]
 8003286:	490e      	ldr	r1, [pc, #56]	; (80032c0 <HAL_UART_Init+0xac>)
 8003288:	400a      	ands	r2, r1
 800328a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6812      	ldr	r2, [r2, #0]
 8003294:	6892      	ldr	r2, [r2, #8]
 8003296:	212a      	movs	r1, #42	; 0x2a
 8003298:	438a      	bics	r2, r1
 800329a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	6812      	ldr	r2, [r2, #0]
 80032a6:	2101      	movs	r1, #1
 80032a8:	430a      	orrs	r2, r1
 80032aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	0018      	movs	r0, r3
 80032b0:	f000 fc02 	bl	8003ab8 <UART_CheckIdleState>
 80032b4:	0003      	movs	r3, r0
}
 80032b6:	0018      	movs	r0, r3
 80032b8:	46bd      	mov	sp, r7
 80032ba:	b002      	add	sp, #8
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	ffffb7ff 	.word	0xffffb7ff

080032c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032c4:	b5b0      	push	{r4, r5, r7, lr}
 80032c6:	b08c      	sub	sp, #48	; 0x30
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg                     = 0x00000000U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80032d0:	2313      	movs	r3, #19
 80032d2:	2218      	movs	r2, #24
 80032d4:	4694      	mov	ip, r2
 80032d6:	44bc      	add	ip, r7
 80032d8:	4463      	add	r3, ip
 80032da:	2210      	movs	r2, #16
 80032dc:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 80032de:	230c      	movs	r3, #12
 80032e0:	2218      	movs	r2, #24
 80032e2:	4694      	mov	ip, r2
 80032e4:	44bc      	add	ip, r7
 80032e6:	4463      	add	r3, ip
 80032e8:	2200      	movs	r2, #0
 80032ea:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 80032ec:	2310      	movs	r3, #16
 80032ee:	2218      	movs	r2, #24
 80032f0:	4694      	mov	ip, r2
 80032f2:	44bc      	add	ip, r7
 80032f4:	4463      	add	r3, ip
 80032f6:	2200      	movs	r2, #0
 80032f8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 80032fa:	230f      	movs	r3, #15
 80032fc:	2218      	movs	r2, #24
 80032fe:	4694      	mov	ip, r2
 8003300:	44bc      	add	ip, r7
 8003302:	4463      	add	r3, ip
 8003304:	2200      	movs	r2, #0
 8003306:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	431a      	orrs	r2, r3
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	431a      	orrs	r2, r3
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	4313      	orrs	r3, r2
 800331e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	69fa      	ldr	r2, [r7, #28]
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	6812      	ldr	r2, [r2, #0]
 800332a:	49c7      	ldr	r1, [pc, #796]	; (8003648 <UART_SetConfig+0x384>)
 800332c:	4011      	ands	r1, r2
 800332e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003330:	430a      	orrs	r2, r1
 8003332:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	69fa      	ldr	r2, [r7, #28]
 800333a:	6812      	ldr	r2, [r2, #0]
 800333c:	6852      	ldr	r2, [r2, #4]
 800333e:	49c3      	ldr	r1, [pc, #780]	; (800364c <UART_SetConfig+0x388>)
 8003340:	4011      	ands	r1, r2
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	68d2      	ldr	r2, [r2, #12]
 8003346:	430a      	orrs	r2, r1
 8003348:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4abe      	ldr	r2, [pc, #760]	; (8003650 <UART_SetConfig+0x38c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d004      	beq.n	8003364 <UART_SetConfig+0xa0>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003360:	4313      	orrs	r3, r2
 8003362:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	69fa      	ldr	r2, [r7, #28]
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	6892      	ldr	r2, [r2, #8]
 800336e:	49b9      	ldr	r1, [pc, #740]	; (8003654 <UART_SetConfig+0x390>)
 8003370:	4011      	ands	r1, r2
 8003372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003374:	430a      	orrs	r2, r1
 8003376:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4ab6      	ldr	r2, [pc, #728]	; (8003658 <UART_SetConfig+0x394>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d134      	bne.n	80033ec <UART_SetConfig+0x128>
 8003382:	4bb6      	ldr	r3, [pc, #728]	; (800365c <UART_SetConfig+0x398>)
 8003384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003386:	2203      	movs	r2, #3
 8003388:	4013      	ands	r3, r2
 800338a:	2b01      	cmp	r3, #1
 800338c:	d015      	beq.n	80033ba <UART_SetConfig+0xf6>
 800338e:	d304      	bcc.n	800339a <UART_SetConfig+0xd6>
 8003390:	2b02      	cmp	r3, #2
 8003392:	d00a      	beq.n	80033aa <UART_SetConfig+0xe6>
 8003394:	2b03      	cmp	r3, #3
 8003396:	d018      	beq.n	80033ca <UART_SetConfig+0x106>
 8003398:	e01f      	b.n	80033da <UART_SetConfig+0x116>
 800339a:	2313      	movs	r3, #19
 800339c:	2218      	movs	r2, #24
 800339e:	4694      	mov	ip, r2
 80033a0:	44bc      	add	ip, r7
 80033a2:	4463      	add	r3, ip
 80033a4:	2201      	movs	r2, #1
 80033a6:	701a      	strb	r2, [r3, #0]
 80033a8:	e0bc      	b.n	8003524 <UART_SetConfig+0x260>
 80033aa:	2313      	movs	r3, #19
 80033ac:	2218      	movs	r2, #24
 80033ae:	4694      	mov	ip, r2
 80033b0:	44bc      	add	ip, r7
 80033b2:	4463      	add	r3, ip
 80033b4:	2202      	movs	r2, #2
 80033b6:	701a      	strb	r2, [r3, #0]
 80033b8:	e0b4      	b.n	8003524 <UART_SetConfig+0x260>
 80033ba:	2313      	movs	r3, #19
 80033bc:	2218      	movs	r2, #24
 80033be:	4694      	mov	ip, r2
 80033c0:	44bc      	add	ip, r7
 80033c2:	4463      	add	r3, ip
 80033c4:	2204      	movs	r2, #4
 80033c6:	701a      	strb	r2, [r3, #0]
 80033c8:	e0ac      	b.n	8003524 <UART_SetConfig+0x260>
 80033ca:	2313      	movs	r3, #19
 80033cc:	2218      	movs	r2, #24
 80033ce:	4694      	mov	ip, r2
 80033d0:	44bc      	add	ip, r7
 80033d2:	4463      	add	r3, ip
 80033d4:	2208      	movs	r2, #8
 80033d6:	701a      	strb	r2, [r3, #0]
 80033d8:	e0a4      	b.n	8003524 <UART_SetConfig+0x260>
 80033da:	2313      	movs	r3, #19
 80033dc:	2218      	movs	r2, #24
 80033de:	4694      	mov	ip, r2
 80033e0:	44bc      	add	ip, r7
 80033e2:	4463      	add	r3, ip
 80033e4:	2210      	movs	r2, #16
 80033e6:	701a      	strb	r2, [r3, #0]
 80033e8:	46c0      	nop			; (mov r8, r8)
 80033ea:	e09b      	b.n	8003524 <UART_SetConfig+0x260>
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a9b      	ldr	r2, [pc, #620]	; (8003660 <UART_SetConfig+0x39c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d137      	bne.n	8003466 <UART_SetConfig+0x1a2>
 80033f6:	4b99      	ldr	r3, [pc, #612]	; (800365c <UART_SetConfig+0x398>)
 80033f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fa:	220c      	movs	r2, #12
 80033fc:	4013      	ands	r3, r2
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d018      	beq.n	8003434 <UART_SetConfig+0x170>
 8003402:	d802      	bhi.n	800340a <UART_SetConfig+0x146>
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <UART_SetConfig+0x150>
 8003408:	e024      	b.n	8003454 <UART_SetConfig+0x190>
 800340a:	2b08      	cmp	r3, #8
 800340c:	d00a      	beq.n	8003424 <UART_SetConfig+0x160>
 800340e:	2b0c      	cmp	r3, #12
 8003410:	d018      	beq.n	8003444 <UART_SetConfig+0x180>
 8003412:	e01f      	b.n	8003454 <UART_SetConfig+0x190>
 8003414:	2313      	movs	r3, #19
 8003416:	2218      	movs	r2, #24
 8003418:	4694      	mov	ip, r2
 800341a:	44bc      	add	ip, r7
 800341c:	4463      	add	r3, ip
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
 8003422:	e07f      	b.n	8003524 <UART_SetConfig+0x260>
 8003424:	2313      	movs	r3, #19
 8003426:	2218      	movs	r2, #24
 8003428:	4694      	mov	ip, r2
 800342a:	44bc      	add	ip, r7
 800342c:	4463      	add	r3, ip
 800342e:	2202      	movs	r2, #2
 8003430:	701a      	strb	r2, [r3, #0]
 8003432:	e077      	b.n	8003524 <UART_SetConfig+0x260>
 8003434:	2313      	movs	r3, #19
 8003436:	2218      	movs	r2, #24
 8003438:	4694      	mov	ip, r2
 800343a:	44bc      	add	ip, r7
 800343c:	4463      	add	r3, ip
 800343e:	2204      	movs	r2, #4
 8003440:	701a      	strb	r2, [r3, #0]
 8003442:	e06f      	b.n	8003524 <UART_SetConfig+0x260>
 8003444:	2313      	movs	r3, #19
 8003446:	2218      	movs	r2, #24
 8003448:	4694      	mov	ip, r2
 800344a:	44bc      	add	ip, r7
 800344c:	4463      	add	r3, ip
 800344e:	2208      	movs	r2, #8
 8003450:	701a      	strb	r2, [r3, #0]
 8003452:	e067      	b.n	8003524 <UART_SetConfig+0x260>
 8003454:	2313      	movs	r3, #19
 8003456:	2218      	movs	r2, #24
 8003458:	4694      	mov	ip, r2
 800345a:	44bc      	add	ip, r7
 800345c:	4463      	add	r3, ip
 800345e:	2210      	movs	r2, #16
 8003460:	701a      	strb	r2, [r3, #0]
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	e05e      	b.n	8003524 <UART_SetConfig+0x260>
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a7e      	ldr	r2, [pc, #504]	; (8003664 <UART_SetConfig+0x3a0>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d107      	bne.n	8003480 <UART_SetConfig+0x1bc>
 8003470:	2313      	movs	r3, #19
 8003472:	2218      	movs	r2, #24
 8003474:	4694      	mov	ip, r2
 8003476:	44bc      	add	ip, r7
 8003478:	4463      	add	r3, ip
 800347a:	2200      	movs	r2, #0
 800347c:	701a      	strb	r2, [r3, #0]
 800347e:	e052      	b.n	8003526 <UART_SetConfig+0x262>
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a78      	ldr	r2, [pc, #480]	; (8003668 <UART_SetConfig+0x3a4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d107      	bne.n	800349a <UART_SetConfig+0x1d6>
 800348a:	2313      	movs	r3, #19
 800348c:	2218      	movs	r2, #24
 800348e:	4694      	mov	ip, r2
 8003490:	44bc      	add	ip, r7
 8003492:	4463      	add	r3, ip
 8003494:	2200      	movs	r2, #0
 8003496:	701a      	strb	r2, [r3, #0]
 8003498:	e045      	b.n	8003526 <UART_SetConfig+0x262>
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a6c      	ldr	r2, [pc, #432]	; (8003650 <UART_SetConfig+0x38c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d140      	bne.n	8003526 <UART_SetConfig+0x262>
 80034a4:	4b6d      	ldr	r3, [pc, #436]	; (800365c <UART_SetConfig+0x398>)
 80034a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034a8:	23c0      	movs	r3, #192	; 0xc0
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	4013      	ands	r3, r2
 80034ae:	2280      	movs	r2, #128	; 0x80
 80034b0:	00d2      	lsls	r2, r2, #3
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d01f      	beq.n	80034f6 <UART_SetConfig+0x232>
 80034b6:	2280      	movs	r2, #128	; 0x80
 80034b8:	00d2      	lsls	r2, r2, #3
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d802      	bhi.n	80034c4 <UART_SetConfig+0x200>
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d009      	beq.n	80034d6 <UART_SetConfig+0x212>
 80034c2:	e028      	b.n	8003516 <UART_SetConfig+0x252>
 80034c4:	2280      	movs	r2, #128	; 0x80
 80034c6:	0112      	lsls	r2, r2, #4
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d00c      	beq.n	80034e6 <UART_SetConfig+0x222>
 80034cc:	22c0      	movs	r2, #192	; 0xc0
 80034ce:	0112      	lsls	r2, r2, #4
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d018      	beq.n	8003506 <UART_SetConfig+0x242>
 80034d4:	e01f      	b.n	8003516 <UART_SetConfig+0x252>
 80034d6:	2313      	movs	r3, #19
 80034d8:	2218      	movs	r2, #24
 80034da:	4694      	mov	ip, r2
 80034dc:	44bc      	add	ip, r7
 80034de:	4463      	add	r3, ip
 80034e0:	2200      	movs	r2, #0
 80034e2:	701a      	strb	r2, [r3, #0]
 80034e4:	e01e      	b.n	8003524 <UART_SetConfig+0x260>
 80034e6:	2313      	movs	r3, #19
 80034e8:	2218      	movs	r2, #24
 80034ea:	4694      	mov	ip, r2
 80034ec:	44bc      	add	ip, r7
 80034ee:	4463      	add	r3, ip
 80034f0:	2202      	movs	r2, #2
 80034f2:	701a      	strb	r2, [r3, #0]
 80034f4:	e016      	b.n	8003524 <UART_SetConfig+0x260>
 80034f6:	2313      	movs	r3, #19
 80034f8:	2218      	movs	r2, #24
 80034fa:	4694      	mov	ip, r2
 80034fc:	44bc      	add	ip, r7
 80034fe:	4463      	add	r3, ip
 8003500:	2204      	movs	r2, #4
 8003502:	701a      	strb	r2, [r3, #0]
 8003504:	e00e      	b.n	8003524 <UART_SetConfig+0x260>
 8003506:	2313      	movs	r3, #19
 8003508:	2218      	movs	r2, #24
 800350a:	4694      	mov	ip, r2
 800350c:	44bc      	add	ip, r7
 800350e:	4463      	add	r3, ip
 8003510:	2208      	movs	r2, #8
 8003512:	701a      	strb	r2, [r3, #0]
 8003514:	e006      	b.n	8003524 <UART_SetConfig+0x260>
 8003516:	2313      	movs	r3, #19
 8003518:	2218      	movs	r2, #24
 800351a:	4694      	mov	ip, r2
 800351c:	44bc      	add	ip, r7
 800351e:	4463      	add	r3, ip
 8003520:	2210      	movs	r2, #16
 8003522:	701a      	strb	r2, [r3, #0]
 8003524:	46c0      	nop			; (mov r8, r8)
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 8003526:	2002      	movs	r0, #2
 8003528:	f7ff fc7e 	bl	8002e28 <HAL_RCCEx_GetPeriphCLKFreq>
 800352c:	0003      	movs	r3, r0
 800352e:	623b      	str	r3, [r7, #32]

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a46      	ldr	r2, [pc, #280]	; (8003650 <UART_SetConfig+0x38c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d000      	beq.n	800353c <UART_SetConfig+0x278>
 800353a:	e09f      	b.n	800367c <UART_SetConfig+0x3b8>
  {
    /* Retrieve frequency clock */
    tmpreg = 0;
 800353c:	2300      	movs	r3, #0
 800353e:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (clocksource)
 8003540:	2313      	movs	r3, #19
 8003542:	2218      	movs	r2, #24
 8003544:	4694      	mov	ip, r2
 8003546:	44bc      	add	ip, r7
 8003548:	4463      	add	r3, ip
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b02      	cmp	r3, #2
 800354e:	d00d      	beq.n	800356c <UART_SetConfig+0x2a8>
 8003550:	dc02      	bgt.n	8003558 <UART_SetConfig+0x294>
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <UART_SetConfig+0x29e>
 8003556:	e01d      	b.n	8003594 <UART_SetConfig+0x2d0>
 8003558:	2b04      	cmp	r3, #4
 800355a:	d012      	beq.n	8003582 <UART_SetConfig+0x2be>
 800355c:	2b08      	cmp	r3, #8
 800355e:	d015      	beq.n	800358c <UART_SetConfig+0x2c8>
 8003560:	e018      	b.n	8003594 <UART_SetConfig+0x2d0>
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8003562:	f7ff fa6f 	bl	8002a44 <HAL_RCC_GetPCLK1Freq>
 8003566:	0003      	movs	r3, r0
 8003568:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800356a:	e01b      	b.n	80035a4 <UART_SetConfig+0x2e0>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800356c:	4b3b      	ldr	r3, [pc, #236]	; (800365c <UART_SetConfig+0x398>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2210      	movs	r2, #16
 8003572:	4013      	ands	r3, r2
 8003574:	d002      	beq.n	800357c <UART_SetConfig+0x2b8>
      {
        tmpreg = (uint32_t) (HSI_VALUE >> 2U);
 8003576:	4b3d      	ldr	r3, [pc, #244]	; (800366c <UART_SetConfig+0x3a8>)
 8003578:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      else
      {
        tmpreg = (uint32_t) HSI_VALUE;
      }
      break;
 800357a:	e013      	b.n	80035a4 <UART_SetConfig+0x2e0>
        tmpreg = (uint32_t) HSI_VALUE;
 800357c:	4b3c      	ldr	r3, [pc, #240]	; (8003670 <UART_SetConfig+0x3ac>)
 800357e:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8003580:	e010      	b.n	80035a4 <UART_SetConfig+0x2e0>
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 8003582:	f7ff f9d7 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 8003586:	0003      	movs	r3, r0
 8003588:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800358a:	e00b      	b.n	80035a4 <UART_SetConfig+0x2e0>
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 800358c:	2380      	movs	r3, #128	; 0x80
 800358e:	021b      	lsls	r3, r3, #8
 8003590:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8003592:	e007      	b.n	80035a4 <UART_SetConfig+0x2e0>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8003594:	230f      	movs	r3, #15
 8003596:	2218      	movs	r2, #24
 8003598:	4694      	mov	ip, r2
 800359a:	44bc      	add	ip, r7
 800359c:	4463      	add	r3, ip
 800359e:	2201      	movs	r2, #1
 80035a0:	701a      	strb	r2, [r3, #0]
      break;
 80035a2:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 80035a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d100      	bne.n	80035ac <UART_SetConfig+0x2e8>
 80035aa:	e1c0      	b.n	800392e <UART_SetConfig+0x66a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	0013      	movs	r3, r2
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	189a      	adds	r2, r3, r2
 80035b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d805      	bhi.n	80035c8 <UART_SetConfig+0x304>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	031a      	lsls	r2, r3, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 80035c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d207      	bcs.n	80035d8 <UART_SetConfig+0x314>
      {
        ret = HAL_ERROR;
 80035c8:	230f      	movs	r3, #15
 80035ca:	2218      	movs	r2, #24
 80035cc:	4694      	mov	ip, r2
 80035ce:	44bc      	add	ip, r7
 80035d0:	4463      	add	r3, ip
 80035d2:	2201      	movs	r2, #1
 80035d4:	701a      	strb	r2, [r3, #0]
 80035d6:	e1aa      	b.n	800392e <UART_SetConfig+0x66a>
      }
      else
      {
        tmpreg = (uint32_t)(UART_DIV_LPUART(tmpreg, huart->Init.BaudRate));
 80035d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	6939      	ldr	r1, [r7, #16]
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	000b      	movs	r3, r1
 80035e6:	0e1b      	lsrs	r3, r3, #24
 80035e8:	0010      	movs	r0, r2
 80035ea:	0205      	lsls	r5, r0, #8
 80035ec:	431d      	orrs	r5, r3
 80035ee:	000b      	movs	r3, r1
 80035f0:	021c      	lsls	r4, r3, #8
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	085b      	lsrs	r3, r3, #1
 80035f8:	60bb      	str	r3, [r7, #8]
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	68b8      	ldr	r0, [r7, #8]
 8003600:	68f9      	ldr	r1, [r7, #12]
 8003602:	1900      	adds	r0, r0, r4
 8003604:	4169      	adcs	r1, r5
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	2300      	movs	r3, #0
 800360e:	607b      	str	r3, [r7, #4]
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f7fc feee 	bl	80003f4 <__aeabi_uldivmod>
 8003618:	0003      	movs	r3, r0
 800361a:	000c      	movs	r4, r1
 800361c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 800361e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003620:	4a14      	ldr	r2, [pc, #80]	; (8003674 <UART_SetConfig+0x3b0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d908      	bls.n	8003638 <UART_SetConfig+0x374>
 8003626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003628:	4a13      	ldr	r2, [pc, #76]	; (8003678 <UART_SetConfig+0x3b4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d804      	bhi.n	8003638 <UART_SetConfig+0x374>
        {
           huart->Instance->BRR = tmpreg;
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003634:	60da      	str	r2, [r3, #12]
 8003636:	e17a      	b.n	800392e <UART_SetConfig+0x66a>
        }
        else
        {
          ret = HAL_ERROR;
 8003638:	230f      	movs	r3, #15
 800363a:	2218      	movs	r2, #24
 800363c:	4694      	mov	ip, r2
 800363e:	44bc      	add	ip, r7
 8003640:	4463      	add	r3, ip
 8003642:	2201      	movs	r2, #1
 8003644:	701a      	strb	r2, [r3, #0]
 8003646:	e172      	b.n	800392e <UART_SetConfig+0x66a>
 8003648:	efff69f3 	.word	0xefff69f3
 800364c:	ffffcfff 	.word	0xffffcfff
 8003650:	40004800 	.word	0x40004800
 8003654:	fffff4ff 	.word	0xfffff4ff
 8003658:	40013800 	.word	0x40013800
 800365c:	40021000 	.word	0x40021000
 8003660:	40004400 	.word	0x40004400
 8003664:	40004c00 	.word	0x40004c00
 8003668:	40005000 	.word	0x40005000
 800366c:	003d0900 	.word	0x003d0900
 8003670:	00f42400 	.word	0x00f42400
 8003674:	000002ff 	.word	0x000002ff
 8003678:	000fffff 	.word	0x000fffff
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	69da      	ldr	r2, [r3, #28]
 8003680:	2380      	movs	r3, #128	; 0x80
 8003682:	021b      	lsls	r3, r3, #8
 8003684:	429a      	cmp	r2, r3
 8003686:	d000      	beq.n	800368a <UART_SetConfig+0x3c6>
 8003688:	e0ca      	b.n	8003820 <UART_SetConfig+0x55c>
  {
    switch (clocksource)
 800368a:	2313      	movs	r3, #19
 800368c:	2218      	movs	r2, #24
 800368e:	4694      	mov	ip, r2
 8003690:	44bc      	add	ip, r7
 8003692:	4463      	add	r3, ip
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b08      	cmp	r3, #8
 8003698:	d900      	bls.n	800369c <UART_SetConfig+0x3d8>
 800369a:	e089      	b.n	80037b0 <UART_SetConfig+0x4ec>
 800369c:	009a      	lsls	r2, r3, #2
 800369e:	4ba9      	ldr	r3, [pc, #676]	; (8003944 <UART_SetConfig+0x680>)
 80036a0:	18d3      	adds	r3, r2, r3
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	469f      	mov	pc, r3
    {
    case UART_CLOCKSOURCE_PCLK1:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(frequency, huart->Init.BaudRate));
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	005a      	lsls	r2, r3, #1
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	085b      	lsrs	r3, r3, #1
 80036b0:	18d2      	adds	r2, r2, r3
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	0019      	movs	r1, r3
 80036b8:	0010      	movs	r0, r2
 80036ba:	f7fc fd25 	bl	8000108 <__udivsi3>
 80036be:	0003      	movs	r3, r0
 80036c0:	001a      	movs	r2, r3
 80036c2:	2310      	movs	r3, #16
 80036c4:	2118      	movs	r1, #24
 80036c6:	468c      	mov	ip, r1
 80036c8:	44bc      	add	ip, r7
 80036ca:	4463      	add	r3, ip
 80036cc:	801a      	strh	r2, [r3, #0]
      break;
 80036ce:	e077      	b.n	80037c0 <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_PCLK2:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80036d0:	f7ff f9ce 	bl	8002a70 <HAL_RCC_GetPCLK2Freq>
 80036d4:	0003      	movs	r3, r0
 80036d6:	005a      	lsls	r2, r3, #1
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	085b      	lsrs	r3, r3, #1
 80036de:	18d2      	adds	r2, r2, r3
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	0019      	movs	r1, r3
 80036e6:	0010      	movs	r0, r2
 80036e8:	f7fc fd0e 	bl	8000108 <__udivsi3>
 80036ec:	0003      	movs	r3, r0
 80036ee:	001a      	movs	r2, r3
 80036f0:	2310      	movs	r3, #16
 80036f2:	2118      	movs	r1, #24
 80036f4:	468c      	mov	ip, r1
 80036f6:	44bc      	add	ip, r7
 80036f8:	4463      	add	r3, ip
 80036fa:	801a      	strh	r2, [r3, #0]
      break;
 80036fc:	e060      	b.n	80037c0 <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036fe:	4b92      	ldr	r3, [pc, #584]	; (8003948 <UART_SetConfig+0x684>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2210      	movs	r2, #16
 8003704:	4013      	ands	r3, r2
 8003706:	d013      	beq.n	8003730 <UART_SetConfig+0x46c>
      {
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	085b      	lsrs	r3, r3, #1
 800370e:	4a8f      	ldr	r2, [pc, #572]	; (800394c <UART_SetConfig+0x688>)
 8003710:	189a      	adds	r2, r3, r2
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	0019      	movs	r1, r3
 8003718:	0010      	movs	r0, r2
 800371a:	f7fc fcf5 	bl	8000108 <__udivsi3>
 800371e:	0003      	movs	r3, r0
 8003720:	001a      	movs	r2, r3
 8003722:	2310      	movs	r3, #16
 8003724:	2118      	movs	r1, #24
 8003726:	468c      	mov	ip, r1
 8003728:	44bc      	add	ip, r7
 800372a:	4463      	add	r3, ip
 800372c:	801a      	strh	r2, [r3, #0]
      }
      else
      {
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
      }
      break;
 800372e:	e047      	b.n	80037c0 <UART_SetConfig+0x4fc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	085b      	lsrs	r3, r3, #1
 8003736:	4a86      	ldr	r2, [pc, #536]	; (8003950 <UART_SetConfig+0x68c>)
 8003738:	189a      	adds	r2, r3, r2
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	0019      	movs	r1, r3
 8003740:	0010      	movs	r0, r2
 8003742:	f7fc fce1 	bl	8000108 <__udivsi3>
 8003746:	0003      	movs	r3, r0
 8003748:	001a      	movs	r2, r3
 800374a:	2310      	movs	r3, #16
 800374c:	2118      	movs	r1, #24
 800374e:	468c      	mov	ip, r1
 8003750:	44bc      	add	ip, r7
 8003752:	4463      	add	r3, ip
 8003754:	801a      	strh	r2, [r3, #0]
      break;
 8003756:	e033      	b.n	80037c0 <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_SYSCLK:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003758:	f7ff f8ec 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 800375c:	0003      	movs	r3, r0
 800375e:	005a      	lsls	r2, r3, #1
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	085b      	lsrs	r3, r3, #1
 8003766:	18d2      	adds	r2, r2, r3
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	0019      	movs	r1, r3
 800376e:	0010      	movs	r0, r2
 8003770:	f7fc fcca 	bl	8000108 <__udivsi3>
 8003774:	0003      	movs	r3, r0
 8003776:	001a      	movs	r2, r3
 8003778:	2310      	movs	r3, #16
 800377a:	2118      	movs	r1, #24
 800377c:	468c      	mov	ip, r1
 800377e:	44bc      	add	ip, r7
 8003780:	4463      	add	r3, ip
 8003782:	801a      	strh	r2, [r3, #0]
      break;
 8003784:	e01c      	b.n	80037c0 <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_LSE:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	085b      	lsrs	r3, r3, #1
 800378c:	2280      	movs	r2, #128	; 0x80
 800378e:	0252      	lsls	r2, r2, #9
 8003790:	189a      	adds	r2, r3, r2
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	0019      	movs	r1, r3
 8003798:	0010      	movs	r0, r2
 800379a:	f7fc fcb5 	bl	8000108 <__udivsi3>
 800379e:	0003      	movs	r3, r0
 80037a0:	001a      	movs	r2, r3
 80037a2:	2310      	movs	r3, #16
 80037a4:	2118      	movs	r1, #24
 80037a6:	468c      	mov	ip, r1
 80037a8:	44bc      	add	ip, r7
 80037aa:	4463      	add	r3, ip
 80037ac:	801a      	strh	r2, [r3, #0]
      break;
 80037ae:	e007      	b.n	80037c0 <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80037b0:	230f      	movs	r3, #15
 80037b2:	2218      	movs	r2, #24
 80037b4:	4694      	mov	ip, r2
 80037b6:	44bc      	add	ip, r7
 80037b8:	4463      	add	r3, ip
 80037ba:	2201      	movs	r2, #1
 80037bc:	701a      	strb	r2, [r3, #0]
      break;
 80037be:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 80037c0:	230c      	movs	r3, #12
 80037c2:	2218      	movs	r2, #24
 80037c4:	4694      	mov	ip, r2
 80037c6:	44bc      	add	ip, r7
 80037c8:	4463      	add	r3, ip
 80037ca:	2210      	movs	r2, #16
 80037cc:	2118      	movs	r1, #24
 80037ce:	468c      	mov	ip, r1
 80037d0:	44bc      	add	ip, r7
 80037d2:	4462      	add	r2, ip
 80037d4:	8812      	ldrh	r2, [r2, #0]
 80037d6:	210f      	movs	r1, #15
 80037d8:	438a      	bics	r2, r1
 80037da:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 80037dc:	2310      	movs	r3, #16
 80037de:	2218      	movs	r2, #24
 80037e0:	4694      	mov	ip, r2
 80037e2:	44bc      	add	ip, r7
 80037e4:	4463      	add	r3, ip
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	105b      	asrs	r3, r3, #1
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	2207      	movs	r2, #7
 80037ee:	4013      	ands	r3, r2
 80037f0:	b299      	uxth	r1, r3
 80037f2:	230c      	movs	r3, #12
 80037f4:	2218      	movs	r2, #24
 80037f6:	4694      	mov	ip, r2
 80037f8:	44bc      	add	ip, r7
 80037fa:	4463      	add	r3, ip
 80037fc:	220c      	movs	r2, #12
 80037fe:	2018      	movs	r0, #24
 8003800:	4684      	mov	ip, r0
 8003802:	44bc      	add	ip, r7
 8003804:	4462      	add	r2, ip
 8003806:	8812      	ldrh	r2, [r2, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	220c      	movs	r2, #12
 8003812:	2118      	movs	r1, #24
 8003814:	468c      	mov	ip, r1
 8003816:	44bc      	add	ip, r7
 8003818:	4462      	add	r2, ip
 800381a:	8812      	ldrh	r2, [r2, #0]
 800381c:	60da      	str	r2, [r3, #12]
 800381e:	e086      	b.n	800392e <UART_SetConfig+0x66a>
  }
  else
  {
    switch (clocksource)
 8003820:	2313      	movs	r3, #19
 8003822:	2218      	movs	r2, #24
 8003824:	4694      	mov	ip, r2
 8003826:	44bc      	add	ip, r7
 8003828:	4463      	add	r3, ip
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b08      	cmp	r3, #8
 800382e:	d876      	bhi.n	800391e <UART_SetConfig+0x65a>
 8003830:	009a      	lsls	r2, r3, #2
 8003832:	4b48      	ldr	r3, [pc, #288]	; (8003954 <UART_SetConfig+0x690>)
 8003834:	18d3      	adds	r3, r2, r3
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	469f      	mov	pc, r3
    {
    case UART_CLOCKSOURCE_PCLK1:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	681c      	ldr	r4, [r3, #0]
 800383e:	f7ff f901 	bl	8002a44 <HAL_RCC_GetPCLK1Freq>
 8003842:	0002      	movs	r2, r0
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	085b      	lsrs	r3, r3, #1
 800384a:	18d2      	adds	r2, r2, r3
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	0019      	movs	r1, r3
 8003852:	0010      	movs	r0, r2
 8003854:	f7fc fc58 	bl	8000108 <__udivsi3>
 8003858:	0003      	movs	r3, r0
 800385a:	b29b      	uxth	r3, r3
 800385c:	60e3      	str	r3, [r4, #12]
      break;
 800385e:	e066      	b.n	800392e <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_PCLK2:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	681c      	ldr	r4, [r3, #0]
 8003864:	f7ff f904 	bl	8002a70 <HAL_RCC_GetPCLK2Freq>
 8003868:	0002      	movs	r2, r0
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	085b      	lsrs	r3, r3, #1
 8003870:	18d2      	adds	r2, r2, r3
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	0019      	movs	r1, r3
 8003878:	0010      	movs	r0, r2
 800387a:	f7fc fc45 	bl	8000108 <__udivsi3>
 800387e:	0003      	movs	r3, r0
 8003880:	b29b      	uxth	r3, r3
 8003882:	60e3      	str	r3, [r4, #12]
      break;
 8003884:	e053      	b.n	800392e <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003886:	4b30      	ldr	r3, [pc, #192]	; (8003948 <UART_SetConfig+0x684>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2210      	movs	r2, #16
 800388c:	4013      	ands	r3, r2
 800388e:	d010      	beq.n	80038b2 <UART_SetConfig+0x5ee>
      {
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	681c      	ldr	r4, [r3, #0]
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	085b      	lsrs	r3, r3, #1
 800389a:	4a2f      	ldr	r2, [pc, #188]	; (8003958 <UART_SetConfig+0x694>)
 800389c:	189a      	adds	r2, r3, r2
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	0019      	movs	r1, r3
 80038a4:	0010      	movs	r0, r2
 80038a6:	f7fc fc2f 	bl	8000108 <__udivsi3>
 80038aa:	0003      	movs	r3, r0
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	60e3      	str	r3, [r4, #12]
      }
      else
      {
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
      }
      break;
 80038b0:	e03d      	b.n	800392e <UART_SetConfig+0x66a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	681c      	ldr	r4, [r3, #0]
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	085b      	lsrs	r3, r3, #1
 80038bc:	4a27      	ldr	r2, [pc, #156]	; (800395c <UART_SetConfig+0x698>)
 80038be:	189a      	adds	r2, r3, r2
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	0019      	movs	r1, r3
 80038c6:	0010      	movs	r0, r2
 80038c8:	f7fc fc1e 	bl	8000108 <__udivsi3>
 80038cc:	0003      	movs	r3, r0
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	60e3      	str	r3, [r4, #12]
      break;
 80038d2:	e02c      	b.n	800392e <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_SYSCLK:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	681c      	ldr	r4, [r3, #0]
 80038d8:	f7ff f82c 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 80038dc:	0002      	movs	r2, r0
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	085b      	lsrs	r3, r3, #1
 80038e4:	18d2      	adds	r2, r2, r3
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	0019      	movs	r1, r3
 80038ec:	0010      	movs	r0, r2
 80038ee:	f7fc fc0b 	bl	8000108 <__udivsi3>
 80038f2:	0003      	movs	r3, r0
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	60e3      	str	r3, [r4, #12]
      break;
 80038f8:	e019      	b.n	800392e <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_LSE:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	681c      	ldr	r4, [r3, #0]
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	085b      	lsrs	r3, r3, #1
 8003904:	2280      	movs	r2, #128	; 0x80
 8003906:	0212      	lsls	r2, r2, #8
 8003908:	189a      	adds	r2, r3, r2
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	0019      	movs	r1, r3
 8003910:	0010      	movs	r0, r2
 8003912:	f7fc fbf9 	bl	8000108 <__udivsi3>
 8003916:	0003      	movs	r3, r0
 8003918:	b29b      	uxth	r3, r3
 800391a:	60e3      	str	r3, [r4, #12]
      break;
 800391c:	e007      	b.n	800392e <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800391e:	230f      	movs	r3, #15
 8003920:	2218      	movs	r2, #24
 8003922:	4694      	mov	ip, r2
 8003924:	44bc      	add	ip, r7
 8003926:	4463      	add	r3, ip
 8003928:	2201      	movs	r2, #1
 800392a:	701a      	strb	r2, [r3, #0]
      break;
 800392c:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 800392e:	230f      	movs	r3, #15
 8003930:	2218      	movs	r2, #24
 8003932:	4694      	mov	ip, r2
 8003934:	44bc      	add	ip, r7
 8003936:	4463      	add	r3, ip
 8003938:	781b      	ldrb	r3, [r3, #0]

}
 800393a:	0018      	movs	r0, r3
 800393c:	46bd      	mov	sp, r7
 800393e:	b00c      	add	sp, #48	; 0x30
 8003940:	bdb0      	pop	{r4, r5, r7, pc}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	08003ca8 	.word	0x08003ca8
 8003948:	40021000 	.word	0x40021000
 800394c:	007a1200 	.word	0x007a1200
 8003950:	01e84800 	.word	0x01e84800
 8003954:	08003ccc 	.word	0x08003ccc
 8003958:	003d0900 	.word	0x003d0900
 800395c:	00f42400 	.word	0x00f42400

08003960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	2201      	movs	r2, #1
 800396e:	4013      	ands	r3, r2
 8003970:	d00a      	beq.n	8003988 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6812      	ldr	r2, [r2, #0]
 800397a:	6852      	ldr	r2, [r2, #4]
 800397c:	4945      	ldr	r1, [pc, #276]	; (8003a94 <UART_AdvFeatureConfig+0x134>)
 800397e:	4011      	ands	r1, r2
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003984:	430a      	orrs	r2, r1
 8003986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	2202      	movs	r2, #2
 800398e:	4013      	ands	r3, r2
 8003990:	d00a      	beq.n	80039a8 <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6812      	ldr	r2, [r2, #0]
 800399a:	6852      	ldr	r2, [r2, #4]
 800399c:	493e      	ldr	r1, [pc, #248]	; (8003a98 <UART_AdvFeatureConfig+0x138>)
 800399e:	4011      	ands	r1, r2
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039a4:	430a      	orrs	r2, r1
 80039a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	2204      	movs	r2, #4
 80039ae:	4013      	ands	r3, r2
 80039b0:	d00a      	beq.n	80039c8 <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6812      	ldr	r2, [r2, #0]
 80039ba:	6852      	ldr	r2, [r2, #4]
 80039bc:	4937      	ldr	r1, [pc, #220]	; (8003a9c <UART_AdvFeatureConfig+0x13c>)
 80039be:	4011      	ands	r1, r2
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039c4:	430a      	orrs	r2, r1
 80039c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	2208      	movs	r2, #8
 80039ce:	4013      	ands	r3, r2
 80039d0:	d00a      	beq.n	80039e8 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6812      	ldr	r2, [r2, #0]
 80039da:	6852      	ldr	r2, [r2, #4]
 80039dc:	4930      	ldr	r1, [pc, #192]	; (8003aa0 <UART_AdvFeatureConfig+0x140>)
 80039de:	4011      	ands	r1, r2
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039e4:	430a      	orrs	r2, r1
 80039e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	2210      	movs	r2, #16
 80039ee:	4013      	ands	r3, r2
 80039f0:	d00a      	beq.n	8003a08 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	6892      	ldr	r2, [r2, #8]
 80039fc:	4929      	ldr	r1, [pc, #164]	; (8003aa4 <UART_AdvFeatureConfig+0x144>)
 80039fe:	4011      	ands	r1, r2
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a04:	430a      	orrs	r2, r1
 8003a06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d00a      	beq.n	8003a28 <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6812      	ldr	r2, [r2, #0]
 8003a1a:	6892      	ldr	r2, [r2, #8]
 8003a1c:	4922      	ldr	r1, [pc, #136]	; (8003aa8 <UART_AdvFeatureConfig+0x148>)
 8003a1e:	4011      	ands	r1, r2
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a24:	430a      	orrs	r2, r1
 8003a26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	2240      	movs	r2, #64	; 0x40
 8003a2e:	4013      	ands	r3, r2
 8003a30:	d01b      	beq.n	8003a6a <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6812      	ldr	r2, [r2, #0]
 8003a3a:	6852      	ldr	r2, [r2, #4]
 8003a3c:	491b      	ldr	r1, [pc, #108]	; (8003aac <UART_AdvFeatureConfig+0x14c>)
 8003a3e:	4011      	ands	r1, r2
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a44:	430a      	orrs	r2, r1
 8003a46:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a4c:	2380      	movs	r3, #128	; 0x80
 8003a4e:	035b      	lsls	r3, r3, #13
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d10a      	bne.n	8003a6a <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6812      	ldr	r2, [r2, #0]
 8003a5c:	6852      	ldr	r2, [r2, #4]
 8003a5e:	4914      	ldr	r1, [pc, #80]	; (8003ab0 <UART_AdvFeatureConfig+0x150>)
 8003a60:	4011      	ands	r1, r2
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003a66:	430a      	orrs	r2, r1
 8003a68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	2280      	movs	r2, #128	; 0x80
 8003a70:	4013      	ands	r3, r2
 8003a72:	d00a      	beq.n	8003a8a <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6812      	ldr	r2, [r2, #0]
 8003a7c:	6852      	ldr	r2, [r2, #4]
 8003a7e:	490d      	ldr	r1, [pc, #52]	; (8003ab4 <UART_AdvFeatureConfig+0x154>)
 8003a80:	4011      	ands	r1, r2
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]
  }
}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b002      	add	sp, #8
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	fffdffff 	.word	0xfffdffff
 8003a98:	fffeffff 	.word	0xfffeffff
 8003a9c:	fffbffff 	.word	0xfffbffff
 8003aa0:	ffff7fff 	.word	0xffff7fff
 8003aa4:	ffffefff 	.word	0xffffefff
 8003aa8:	ffffdfff 	.word	0xffffdfff
 8003aac:	ffefffff 	.word	0xffefffff
 8003ab0:	ff9fffff 	.word	0xff9fffff
 8003ab4:	fff7ffff 	.word	0xfff7ffff

08003ab8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003aca:	f7fd fabd 	bl	8001048 <HAL_GetTick>
 8003ace:	0003      	movs	r3, r0
 8003ad0:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2208      	movs	r2, #8
 8003ada:	4013      	ands	r3, r2
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d10d      	bne.n	8003afc <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	2380      	movs	r3, #128	; 0x80
 8003ae4:	0399      	lsls	r1, r3, #14
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	4b17      	ldr	r3, [pc, #92]	; (8003b48 <UART_CheckIdleState+0x90>)
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	0013      	movs	r3, r2
 8003aee:	2200      	movs	r2, #0
 8003af0:	f000 f82c 	bl	8003b4c <UART_WaitOnFlagUntilTimeout>
 8003af4:	1e03      	subs	r3, r0, #0
 8003af6:	d001      	beq.n	8003afc <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e021      	b.n	8003b40 <UART_CheckIdleState+0x88>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2204      	movs	r2, #4
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d10d      	bne.n	8003b26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	2380      	movs	r3, #128	; 0x80
 8003b0e:	03d9      	lsls	r1, r3, #15
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	4b0d      	ldr	r3, [pc, #52]	; (8003b48 <UART_CheckIdleState+0x90>)
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	0013      	movs	r3, r2
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f000 f817 	bl	8003b4c <UART_WaitOnFlagUntilTimeout>
 8003b1e:	1e03      	subs	r3, r0, #0
 8003b20:	d001      	beq.n	8003b26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e00c      	b.n	8003b40 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2269      	movs	r2, #105	; 0x69
 8003b2a:	2120      	movs	r1, #32
 8003b2c:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	226a      	movs	r2, #106	; 0x6a
 8003b32:	2120      	movs	r1, #32
 8003b34:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2268      	movs	r2, #104	; 0x68
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	0018      	movs	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b004      	add	sp, #16
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	01ffffff 	.word	0x01ffffff

08003b4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	1dfb      	adds	r3, r7, #7
 8003b5a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b5c:	e02b      	b.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	3301      	adds	r3, #1
 8003b62:	d028      	beq.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d007      	beq.n	8003b7a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003b6a:	f7fd fa6d 	bl	8001048 <HAL_GetTick>
 8003b6e:	0002      	movs	r2, r0
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	1ad2      	subs	r2, r2, r3
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d91d      	bls.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	6812      	ldr	r2, [r2, #0]
 8003b82:	6812      	ldr	r2, [r2, #0]
 8003b84:	4916      	ldr	r1, [pc, #88]	; (8003be0 <UART_WaitOnFlagUntilTimeout+0x94>)
 8003b86:	400a      	ands	r2, r1
 8003b88:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	6812      	ldr	r2, [r2, #0]
 8003b92:	6892      	ldr	r2, [r2, #8]
 8003b94:	2101      	movs	r1, #1
 8003b96:	438a      	bics	r2, r1
 8003b98:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2269      	movs	r2, #105	; 0x69
 8003b9e:	2120      	movs	r1, #32
 8003ba0:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	226a      	movs	r2, #106	; 0x6a
 8003ba6:	2120      	movs	r1, #32
 8003ba8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2268      	movs	r2, #104	; 0x68
 8003bae:	2100      	movs	r1, #0
 8003bb0:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e00f      	b.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	401a      	ands	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	425a      	negs	r2, r3
 8003bc6:	4153      	adcs	r3, r2
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	001a      	movs	r2, r3
 8003bcc:	1dfb      	adds	r3, r7, #7
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d0c4      	beq.n	8003b5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	b004      	add	sp, #16
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	fffffe5f 	.word	0xfffffe5f

08003be4 <__libc_init_array>:
 8003be4:	b570      	push	{r4, r5, r6, lr}
 8003be6:	2600      	movs	r6, #0
 8003be8:	4d0c      	ldr	r5, [pc, #48]	; (8003c1c <__libc_init_array+0x38>)
 8003bea:	4c0d      	ldr	r4, [pc, #52]	; (8003c20 <__libc_init_array+0x3c>)
 8003bec:	1b64      	subs	r4, r4, r5
 8003bee:	10a4      	asrs	r4, r4, #2
 8003bf0:	42a6      	cmp	r6, r4
 8003bf2:	d109      	bne.n	8003c08 <__libc_init_array+0x24>
 8003bf4:	2600      	movs	r6, #0
 8003bf6:	f000 f819 	bl	8003c2c <_init>
 8003bfa:	4d0a      	ldr	r5, [pc, #40]	; (8003c24 <__libc_init_array+0x40>)
 8003bfc:	4c0a      	ldr	r4, [pc, #40]	; (8003c28 <__libc_init_array+0x44>)
 8003bfe:	1b64      	subs	r4, r4, r5
 8003c00:	10a4      	asrs	r4, r4, #2
 8003c02:	42a6      	cmp	r6, r4
 8003c04:	d105      	bne.n	8003c12 <__libc_init_array+0x2e>
 8003c06:	bd70      	pop	{r4, r5, r6, pc}
 8003c08:	00b3      	lsls	r3, r6, #2
 8003c0a:	58eb      	ldr	r3, [r5, r3]
 8003c0c:	4798      	blx	r3
 8003c0e:	3601      	adds	r6, #1
 8003c10:	e7ee      	b.n	8003bf0 <__libc_init_array+0xc>
 8003c12:	00b3      	lsls	r3, r6, #2
 8003c14:	58eb      	ldr	r3, [r5, r3]
 8003c16:	4798      	blx	r3
 8003c18:	3601      	adds	r6, #1
 8003c1a:	e7f2      	b.n	8003c02 <__libc_init_array+0x1e>
 8003c1c:	08003cf8 	.word	0x08003cf8
 8003c20:	08003cf8 	.word	0x08003cf8
 8003c24:	08003cf8 	.word	0x08003cf8
 8003c28:	08003cfc 	.word	0x08003cfc

08003c2c <_init>:
 8003c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c32:	bc08      	pop	{r3}
 8003c34:	469e      	mov	lr, r3
 8003c36:	4770      	bx	lr

08003c38 <_fini>:
 8003c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c3e:	bc08      	pop	{r3}
 8003c40:	469e      	mov	lr, r3
 8003c42:	4770      	bx	lr
