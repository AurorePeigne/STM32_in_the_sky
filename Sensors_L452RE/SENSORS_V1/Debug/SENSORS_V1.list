
SENSORS_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024f8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800268c  0800268c  0001268c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002704  08002704  00012704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800270c  0800270c  0001270c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002710  08002710  00012710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000020  20000000  08002714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000134  20000020  08002734  00020020  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000154  08002734  00020154  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ef59  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000021c1  00000000  00000000  0002efa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000076e2  00000000  00000000  0003116a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000a18  00000000  00000000  00038850  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b50  00000000  00000000  00039268  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005b28  00000000  00000000  00039db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003b4f  00000000  00000000  0003f8e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004342f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001c48  00000000  00000000  000434ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000020 	.word	0x20000020
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002674 	.word	0x08002674

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000024 	.word	0x20000024
 80001d0:	08002674 	.word	0x08002674

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b97a 	b.w	80004e0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	9e08      	ldr	r6, [sp, #32]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d151      	bne.n	80002b8 <__udivmoddi4+0xb4>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d96d      	bls.n	80002f6 <__udivmoddi4+0xf2>
 800021a:	fab2 fe82 	clz	lr, r2
 800021e:	f1be 0f00 	cmp.w	lr, #0
 8000222:	d00b      	beq.n	800023c <__udivmoddi4+0x38>
 8000224:	f1ce 0c20 	rsb	ip, lr, #32
 8000228:	fa01 f50e 	lsl.w	r5, r1, lr
 800022c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000230:	fa02 f70e 	lsl.w	r7, r2, lr
 8000234:	ea4c 0c05 	orr.w	ip, ip, r5
 8000238:	fa00 f40e 	lsl.w	r4, r0, lr
 800023c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000240:	0c25      	lsrs	r5, r4, #16
 8000242:	fbbc f8fa 	udiv	r8, ip, sl
 8000246:	fa1f f987 	uxth.w	r9, r7
 800024a:	fb0a cc18 	mls	ip, sl, r8, ip
 800024e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000252:	fb08 f309 	mul.w	r3, r8, r9
 8000256:	42ab      	cmp	r3, r5
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x6c>
 800025a:	19ed      	adds	r5, r5, r7
 800025c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000260:	f080 8123 	bcs.w	80004aa <__udivmoddi4+0x2a6>
 8000264:	42ab      	cmp	r3, r5
 8000266:	f240 8120 	bls.w	80004aa <__udivmoddi4+0x2a6>
 800026a:	f1a8 0802 	sub.w	r8, r8, #2
 800026e:	443d      	add	r5, r7
 8000270:	1aed      	subs	r5, r5, r3
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb5 f0fa 	udiv	r0, r5, sl
 8000278:	fb0a 5510 	mls	r5, sl, r0, r5
 800027c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000280:	fb00 f909 	mul.w	r9, r0, r9
 8000284:	45a1      	cmp	r9, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x98>
 8000288:	19e4      	adds	r4, r4, r7
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 810a 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 8000292:	45a1      	cmp	r9, r4
 8000294:	f240 8107 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	eba4 0409 	sub.w	r4, r4, r9
 80002a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	d061      	beq.n	800036e <__udivmoddi4+0x16a>
 80002aa:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ae:	2300      	movs	r3, #0
 80002b0:	6034      	str	r4, [r6, #0]
 80002b2:	6073      	str	r3, [r6, #4]
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d907      	bls.n	80002cc <__udivmoddi4+0xc8>
 80002bc:	2e00      	cmp	r6, #0
 80002be:	d054      	beq.n	800036a <__udivmoddi4+0x166>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	f040 808e 	bne.w	80003f2 <__udivmoddi4+0x1ee>
 80002d6:	42ab      	cmp	r3, r5
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xdc>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2d0>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb65 0503 	sbc.w	r5, r5, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	46ac      	mov	ip, r5
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d03f      	beq.n	800036e <__udivmoddi4+0x16a>
 80002ee:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b912      	cbnz	r2, 80002fe <__udivmoddi4+0xfa>
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fe:	fab7 fe87 	clz	lr, r7
 8000302:	f1be 0f00 	cmp.w	lr, #0
 8000306:	d134      	bne.n	8000372 <__udivmoddi4+0x16e>
 8000308:	1beb      	subs	r3, r5, r7
 800030a:	0c3a      	lsrs	r2, r7, #16
 800030c:	fa1f fc87 	uxth.w	ip, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb3 f8f2 	udiv	r8, r3, r2
 8000316:	0c25      	lsrs	r5, r4, #16
 8000318:	fb02 3318 	mls	r3, r2, r8, r3
 800031c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000320:	fb0c f308 	mul.w	r3, ip, r8
 8000324:	42ab      	cmp	r3, r5
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x134>
 8000328:	19ed      	adds	r5, r5, r7
 800032a:	f108 30ff 	add.w	r0, r8, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x132>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f200 80d1 	bhi.w	80004d8 <__udivmoddi4+0x2d4>
 8000336:	4680      	mov	r8, r0
 8000338:	1aed      	subs	r5, r5, r3
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000340:	fb02 5510 	mls	r5, r2, r0, r5
 8000344:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000348:	fb0c fc00 	mul.w	ip, ip, r0
 800034c:	45a4      	cmp	ip, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x15c>
 8000350:	19e4      	adds	r4, r4, r7
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x15a>
 8000358:	45a4      	cmp	ip, r4
 800035a:	f200 80b8 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000368:	e79d      	b.n	80002a6 <__udivmoddi4+0xa2>
 800036a:	4631      	mov	r1, r6
 800036c:	4630      	mov	r0, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	f1ce 0420 	rsb	r4, lr, #32
 8000376:	fa05 f30e 	lsl.w	r3, r5, lr
 800037a:	fa07 f70e 	lsl.w	r7, r7, lr
 800037e:	fa20 f804 	lsr.w	r8, r0, r4
 8000382:	0c3a      	lsrs	r2, r7, #16
 8000384:	fa25 f404 	lsr.w	r4, r5, r4
 8000388:	ea48 0803 	orr.w	r8, r8, r3
 800038c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000390:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000394:	fb02 4411 	mls	r4, r2, r1, r4
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a0:	fb01 f30c 	mul.w	r3, r1, ip
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1bc>
 80003ac:	19ed      	adds	r5, r5, r7
 80003ae:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b2:	f080 808a 	bcs.w	80004ca <__udivmoddi4+0x2c6>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	f240 8087 	bls.w	80004ca <__udivmoddi4+0x2c6>
 80003bc:	3902      	subs	r1, #2
 80003be:	443d      	add	r5, r7
 80003c0:	1aeb      	subs	r3, r5, r3
 80003c2:	fa1f f588 	uxth.w	r5, r8
 80003c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ca:	fb02 3310 	mls	r3, r2, r0, r3
 80003ce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d2:	fb00 f30c 	mul.w	r3, r0, ip
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1e6>
 80003da:	19ed      	adds	r5, r5, r7
 80003dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e0:	d26f      	bcs.n	80004c2 <__udivmoddi4+0x2be>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d96d      	bls.n	80004c2 <__udivmoddi4+0x2be>
 80003e6:	3802      	subs	r0, #2
 80003e8:	443d      	add	r5, r7
 80003ea:	1aeb      	subs	r3, r5, r3
 80003ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f0:	e78f      	b.n	8000312 <__udivmoddi4+0x10e>
 80003f2:	f1c1 0720 	rsb	r7, r1, #32
 80003f6:	fa22 f807 	lsr.w	r8, r2, r7
 80003fa:	408b      	lsls	r3, r1
 80003fc:	fa05 f401 	lsl.w	r4, r5, r1
 8000400:	ea48 0303 	orr.w	r3, r8, r3
 8000404:	fa20 fe07 	lsr.w	lr, r0, r7
 8000408:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800040c:	40fd      	lsrs	r5, r7
 800040e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000412:	fbb5 f9fc 	udiv	r9, r5, ip
 8000416:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041a:	fb0c 5519 	mls	r5, ip, r9, r5
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000426:	fb09 f408 	mul.w	r4, r9, r8
 800042a:	42ac      	cmp	r4, r5
 800042c:	fa02 f201 	lsl.w	r2, r2, r1
 8000430:	fa00 fa01 	lsl.w	sl, r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x244>
 8000436:	18ed      	adds	r5, r5, r3
 8000438:	f109 30ff 	add.w	r0, r9, #4294967295
 800043c:	d243      	bcs.n	80004c6 <__udivmoddi4+0x2c2>
 800043e:	42ac      	cmp	r4, r5
 8000440:	d941      	bls.n	80004c6 <__udivmoddi4+0x2c2>
 8000442:	f1a9 0902 	sub.w	r9, r9, #2
 8000446:	441d      	add	r5, r3
 8000448:	1b2d      	subs	r5, r5, r4
 800044a:	fa1f fe8e 	uxth.w	lr, lr
 800044e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000452:	fb0c 5510 	mls	r5, ip, r0, r5
 8000456:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045a:	fb00 f808 	mul.w	r8, r0, r8
 800045e:	45a0      	cmp	r8, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x26e>
 8000462:	18e4      	adds	r4, r4, r3
 8000464:	f100 35ff 	add.w	r5, r0, #4294967295
 8000468:	d229      	bcs.n	80004be <__udivmoddi4+0x2ba>
 800046a:	45a0      	cmp	r8, r4
 800046c:	d927      	bls.n	80004be <__udivmoddi4+0x2ba>
 800046e:	3802      	subs	r0, #2
 8000470:	441c      	add	r4, r3
 8000472:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000476:	eba4 0408 	sub.w	r4, r4, r8
 800047a:	fba0 8902 	umull	r8, r9, r0, r2
 800047e:	454c      	cmp	r4, r9
 8000480:	46c6      	mov	lr, r8
 8000482:	464d      	mov	r5, r9
 8000484:	d315      	bcc.n	80004b2 <__udivmoddi4+0x2ae>
 8000486:	d012      	beq.n	80004ae <__udivmoddi4+0x2aa>
 8000488:	b156      	cbz	r6, 80004a0 <__udivmoddi4+0x29c>
 800048a:	ebba 030e 	subs.w	r3, sl, lr
 800048e:	eb64 0405 	sbc.w	r4, r4, r5
 8000492:	fa04 f707 	lsl.w	r7, r4, r7
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431f      	orrs	r7, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	6037      	str	r7, [r6, #0]
 800049e:	6074      	str	r4, [r6, #4]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	4618      	mov	r0, r3
 80004a8:	e6f8      	b.n	800029c <__udivmoddi4+0x98>
 80004aa:	4690      	mov	r8, r2
 80004ac:	e6e0      	b.n	8000270 <__udivmoddi4+0x6c>
 80004ae:	45c2      	cmp	sl, r8
 80004b0:	d2ea      	bcs.n	8000488 <__udivmoddi4+0x284>
 80004b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7e4      	b.n	8000488 <__udivmoddi4+0x284>
 80004be:	4628      	mov	r0, r5
 80004c0:	e7d7      	b.n	8000472 <__udivmoddi4+0x26e>
 80004c2:	4640      	mov	r0, r8
 80004c4:	e791      	b.n	80003ea <__udivmoddi4+0x1e6>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e7be      	b.n	8000448 <__udivmoddi4+0x244>
 80004ca:	4601      	mov	r1, r0
 80004cc:	e778      	b.n	80003c0 <__udivmoddi4+0x1bc>
 80004ce:	3802      	subs	r0, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	e745      	b.n	8000360 <__udivmoddi4+0x15c>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xe6>
 80004d8:	f1a8 0802 	sub.w	r8, r8, #2
 80004dc:	443d      	add	r5, r7
 80004de:	e72b      	b.n	8000338 <__udivmoddi4+0x134>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80004e6:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <HAL_InitTick+0x2c>)
{
 80004e8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80004ea:	6818      	ldr	r0, [r3, #0]
 80004ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f4:	f000 f886 	bl	8000604 <HAL_SYSTICK_Config>
 80004f8:	4604      	mov	r4, r0
 80004fa:	b938      	cbnz	r0, 800050c <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80004fc:	4602      	mov	r2, r0
 80004fe:	4629      	mov	r1, r5
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	f000 f84a 	bl	800059c <HAL_NVIC_SetPriority>
 8000508:	4620      	mov	r0, r4
 800050a:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 800050c:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800050e:	bd38      	pop	{r3, r4, r5, pc}
 8000510:	2000001c 	.word	0x2000001c

08000514 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000514:	4a09      	ldr	r2, [pc, #36]	; (800053c <HAL_Init+0x28>)
 8000516:	6813      	ldr	r3, [r2, #0]
 8000518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 800051c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000522:	f000 f829 	bl	8000578 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000526:	2000      	movs	r0, #0
 8000528:	f7ff ffdc 	bl	80004e4 <HAL_InitTick>
 800052c:	4604      	mov	r4, r0
 800052e:	b918      	cbnz	r0, 8000538 <HAL_Init+0x24>
    HAL_MspInit();
 8000530:	f001 ff92 	bl	8002458 <HAL_MspInit>
}
 8000534:	4620      	mov	r0, r4
 8000536:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000538:	2401      	movs	r4, #1
 800053a:	e7fb      	b.n	8000534 <HAL_Init+0x20>
 800053c:	40022000 	.word	0x40022000

08000540 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000540:	4a02      	ldr	r2, [pc, #8]	; (800054c <HAL_IncTick+0xc>)
 8000542:	6813      	ldr	r3, [r2, #0]
 8000544:	3301      	adds	r3, #1
 8000546:	6013      	str	r3, [r2, #0]
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000064 	.word	0x20000064

08000550 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000550:	4b01      	ldr	r3, [pc, #4]	; (8000558 <HAL_GetTick+0x8>)
 8000552:	6818      	ldr	r0, [r3, #0]
}
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	20000064 	.word	0x20000064

0800055c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800055c:	b538      	push	{r3, r4, r5, lr}
 800055e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000560:	f7ff fff6 	bl	8000550 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000564:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000566:	4605      	mov	r5, r0
  {
    wait++;
 8000568:	bf18      	it	ne
 800056a:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 800056c:	f7ff fff0 	bl	8000550 <HAL_GetTick>
 8000570:	1b40      	subs	r0, r0, r5
 8000572:	4284      	cmp	r4, r0
 8000574:	d8fa      	bhi.n	800056c <HAL_Delay+0x10>
  {
  }
}
 8000576:	bd38      	pop	{r3, r4, r5, pc}

08000578 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000578:	4a07      	ldr	r2, [pc, #28]	; (8000598 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800057a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800057c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000580:	041b      	lsls	r3, r3, #16
 8000582:	0c1b      	lsrs	r3, r3, #16
 8000584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000588:	0200      	lsls	r0, r0, #8
 800058a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800058e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000592:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000594:	60d3      	str	r3, [r2, #12]
 8000596:	4770      	bx	lr
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	68dc      	ldr	r4, [r3, #12]
 80005a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005a6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005aa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ac:	2b04      	cmp	r3, #4
 80005ae:	bf28      	it	cs
 80005b0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b4:	f04f 0501 	mov.w	r5, #1
 80005b8:	fa05 f303 	lsl.w	r3, r5, r3
 80005bc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c0:	bf8c      	ite	hi
 80005c2:	3c03      	subhi	r4, #3
 80005c4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c6:	4019      	ands	r1, r3
 80005c8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005ca:	fa05 f404 	lsl.w	r4, r5, r4
 80005ce:	3c01      	subs	r4, #1
 80005d0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005d2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d4:	ea42 0201 	orr.w	r2, r2, r1
 80005d8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005dc:	bfaf      	iteee	ge
 80005de:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e2:	f000 000f 	andlt.w	r0, r0, #15
 80005e6:	4b06      	ldrlt	r3, [pc, #24]	; (8000600 <HAL_NVIC_SetPriority+0x64>)
 80005e8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ea:	bfa5      	ittet	ge
 80005ec:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005f0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	bf00      	nop
 80005fc:	e000ed00 	.word	0xe000ed00
 8000600:	e000ed14 	.word	0xe000ed14

08000604 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000604:	3801      	subs	r0, #1
 8000606:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800060a:	d20a      	bcs.n	8000622 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060e:	4a07      	ldr	r2, [pc, #28]	; (800062c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000610:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000612:	21f0      	movs	r1, #240	; 0xf0
 8000614:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000618:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800061a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800061c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000622:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	e000e010 	.word	0xe000e010
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000632:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000634:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000636:	bf0c      	ite	eq
 8000638:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800063c:	f022 0204 	bicne.w	r2, r2, #4
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	4770      	bx	lr
 8000644:	e000e010 	.word	0xe000e010

08000648 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000648:	4770      	bx	lr

0800064a <HAL_SYSTICK_IRQHandler>:
{
 800064a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800064c:	f7ff fffc 	bl	8000648 <HAL_SYSTICK_Callback>
 8000650:	bd08      	pop	{r3, pc}
	...

08000654 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000654:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000658:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065c:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80007d4 <HAL_GPIO_Init+0x180>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000660:	4a5a      	ldr	r2, [pc, #360]	; (80007cc <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00u;
 8000662:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000664:	fa38 f403 	lsrs.w	r4, r8, r3
 8000668:	d102      	bne.n	8000670 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800066a:	b003      	add	sp, #12
 800066c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000670:	2401      	movs	r4, #1
 8000672:	fa04 fa03 	lsl.w	sl, r4, r3
    if (iocurrent != 0x00u)
 8000676:	ea18 050a 	ands.w	r5, r8, sl
 800067a:	f000 809c 	beq.w	80007b6 <HAL_GPIO_Init+0x162>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800067e:	684c      	ldr	r4, [r1, #4]
 8000680:	f024 0b10 	bic.w	fp, r4, #16
 8000684:	f1bb 0f02 	cmp.w	fp, #2
 8000688:	d114      	bne.n	80006b4 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3u];
 800068a:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800068e:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000692:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000696:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800069a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800069e:	270f      	movs	r7, #15
 80006a0:	fa07 f70c 	lsl.w	r7, r7, ip
 80006a4:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80006a8:	690e      	ldr	r6, [r1, #16]
 80006aa:	fa06 f60c 	lsl.w	r6, r6, ip
 80006ae:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3u] = temp;
 80006b0:	f8ce 6020 	str.w	r6, [lr, #32]
 80006b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006b8:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80006ba:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006bc:	fa07 f70c 	lsl.w	r7, r7, ip
 80006c0:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006c2:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006c6:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006c8:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006cc:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006d0:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006d4:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80006d8:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006da:	d811      	bhi.n	8000700 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 80006dc:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80006de:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80006e2:	68ce      	ldr	r6, [r1, #12]
 80006e4:	fa06 fe0c 	lsl.w	lr, r6, ip
 80006e8:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80006ec:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80006ee:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80006f0:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80006f4:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80006f8:	409e      	lsls	r6, r3
 80006fa:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80006fe:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000700:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000702:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000704:	688e      	ldr	r6, [r1, #8]
 8000706:	fa06 f60c 	lsl.w	r6, r6, ip
 800070a:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800070c:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 800070e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000710:	d551      	bpl.n	80007b6 <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000712:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8000716:	f046 0601 	orr.w	r6, r6, #1
 800071a:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 800071e:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8000722:	f023 0703 	bic.w	r7, r3, #3
 8000726:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800072a:	f006 0601 	and.w	r6, r6, #1
 800072e:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000732:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000734:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000738:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800073a:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800073c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000740:	f04f 0e0f 	mov.w	lr, #15
 8000744:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000748:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800074c:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000750:	d033      	beq.n	80007ba <HAL_GPIO_Init+0x166>
 8000752:	4e1f      	ldr	r6, [pc, #124]	; (80007d0 <HAL_GPIO_Init+0x17c>)
 8000754:	42b0      	cmp	r0, r6
 8000756:	d032      	beq.n	80007be <HAL_GPIO_Init+0x16a>
 8000758:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800075c:	42b0      	cmp	r0, r6
 800075e:	d030      	beq.n	80007c2 <HAL_GPIO_Init+0x16e>
 8000760:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000764:	42b0      	cmp	r0, r6
 8000766:	d02e      	beq.n	80007c6 <HAL_GPIO_Init+0x172>
 8000768:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800076c:	42b0      	cmp	r0, r6
 800076e:	bf14      	ite	ne
 8000770:	2607      	movne	r6, #7
 8000772:	2604      	moveq	r6, #4
 8000774:	fa06 f60c 	lsl.w	r6, r6, ip
 8000778:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 800077c:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 800077e:	6816      	ldr	r6, [r2, #0]
        temp &= ~(iocurrent);
 8000780:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000782:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000786:	bf0c      	ite	eq
 8000788:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800078a:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 800078c:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 800078e:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000790:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000794:	bf0c      	ite	eq
 8000796:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000798:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 800079a:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 800079c:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800079e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80007a2:	bf0c      	ite	eq
 80007a4:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80007a6:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 80007a8:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 80007aa:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007ac:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 80007ae:	bf54      	ite	pl
 80007b0:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80007b2:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 80007b4:	60d6      	str	r6, [r2, #12]
    position++;
 80007b6:	3301      	adds	r3, #1
 80007b8:	e754      	b.n	8000664 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80007ba:	2600      	movs	r6, #0
 80007bc:	e7da      	b.n	8000774 <HAL_GPIO_Init+0x120>
 80007be:	2601      	movs	r6, #1
 80007c0:	e7d8      	b.n	8000774 <HAL_GPIO_Init+0x120>
 80007c2:	2602      	movs	r6, #2
 80007c4:	e7d6      	b.n	8000774 <HAL_GPIO_Init+0x120>
 80007c6:	2603      	movs	r6, #3
 80007c8:	e7d4      	b.n	8000774 <HAL_GPIO_Init+0x120>
 80007ca:	bf00      	nop
 80007cc:	40010400 	.word	0x40010400
 80007d0:	48000400 	.word	0x48000400
 80007d4:	40021000 	.word	0x40021000

080007d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007d8:	b10a      	cbz	r2, 80007de <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007da:	6181      	str	r1, [r0, #24]
 80007dc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007de:	6281      	str	r1, [r0, #40]	; 0x28
 80007e0:	4770      	bx	lr

080007e2 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80007e2:	6803      	ldr	r3, [r0, #0]
 80007e4:	699a      	ldr	r2, [r3, #24]
 80007e6:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 80007e8:	bf44      	itt	mi
 80007ea:	2200      	movmi	r2, #0
 80007ec:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80007ee:	699a      	ldr	r2, [r3, #24]
 80007f0:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80007f2:	bf5e      	ittt	pl
 80007f4:	699a      	ldrpl	r2, [r3, #24]
 80007f6:	f042 0201 	orrpl.w	r2, r2, #1
 80007fa:	619a      	strpl	r2, [r3, #24]
 80007fc:	4770      	bx	lr

080007fe <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000802:	6805      	ldr	r5, [r0, #0]
 8000804:	4323      	orrs	r3, r4
 8000806:	0d64      	lsrs	r4, r4, #21
 8000808:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 800080c:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8000810:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8000814:	6868      	ldr	r0, [r5, #4]
 8000816:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800081a:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 800081e:	4319      	orrs	r1, r3
 8000820:	f044 0403 	orr.w	r4, r4, #3
 8000824:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000828:	ea20 0404 	bic.w	r4, r0, r4
 800082c:	4321      	orrs	r1, r4
 800082e:	6069      	str	r1, [r5, #4]
 8000830:	bd30      	pop	{r4, r5, pc}

08000832 <I2C_WaitOnFlagUntilTimeout>:
{
 8000832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000836:	9f06      	ldr	r7, [sp, #24]
 8000838:	4604      	mov	r4, r0
 800083a:	4688      	mov	r8, r1
 800083c:	4616      	mov	r6, r2
 800083e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000840:	6822      	ldr	r2, [r4, #0]
 8000842:	6993      	ldr	r3, [r2, #24]
 8000844:	ea38 0303 	bics.w	r3, r8, r3
 8000848:	bf0c      	ite	eq
 800084a:	2301      	moveq	r3, #1
 800084c:	2300      	movne	r3, #0
 800084e:	42b3      	cmp	r3, r6
 8000850:	d002      	beq.n	8000858 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8000852:	2000      	movs	r0, #0
}
 8000854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000858:	1c6b      	adds	r3, r5, #1
 800085a:	d0f2      	beq.n	8000842 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800085c:	f7ff fe78 	bl	8000550 <HAL_GetTick>
 8000860:	1bc0      	subs	r0, r0, r7
 8000862:	4285      	cmp	r5, r0
 8000864:	d301      	bcc.n	800086a <I2C_WaitOnFlagUntilTimeout+0x38>
 8000866:	2d00      	cmp	r5, #0
 8000868:	d1ea      	bne.n	8000840 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800086a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800086c:	f043 0320 	orr.w	r3, r3, #32
 8000870:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000872:	2320      	movs	r3, #32
 8000874:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000878:	2300      	movs	r3, #0
 800087a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800087e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000882:	2001      	movs	r0, #1
 8000884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000888 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000888:	6803      	ldr	r3, [r0, #0]
{
 800088a:	b570      	push	{r4, r5, r6, lr}
 800088c:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800088e:	6998      	ldr	r0, [r3, #24]
 8000890:	f010 0010 	ands.w	r0, r0, #16
{
 8000894:	460d      	mov	r5, r1
 8000896:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000898:	d116      	bne.n	80008c8 <I2C_IsAcknowledgeFailed+0x40>
 800089a:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 800089c:	1c69      	adds	r1, r5, #1
 800089e:	d014      	beq.n	80008ca <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80008a0:	f7ff fe56 	bl	8000550 <HAL_GetTick>
 80008a4:	1b80      	subs	r0, r0, r6
 80008a6:	4285      	cmp	r5, r0
 80008a8:	d300      	bcc.n	80008ac <I2C_IsAcknowledgeFailed+0x24>
 80008aa:	b96d      	cbnz	r5, 80008c8 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80008ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80008ae:	f043 0320 	orr.w	r3, r3, #32
 80008b2:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80008b4:	2320      	movs	r3, #32
 80008b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80008c0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80008c4:	2001      	movs	r0, #1
}
 80008c6:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80008c8:	6823      	ldr	r3, [r4, #0]
 80008ca:	6999      	ldr	r1, [r3, #24]
 80008cc:	068a      	lsls	r2, r1, #26
 80008ce:	d5e5      	bpl.n	800089c <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80008d0:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80008d2:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80008d4:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80008d6:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80008d8:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80008da:	f7ff ff82 	bl	80007e2 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80008de:	6822      	ldr	r2, [r4, #0]
 80008e0:	6853      	ldr	r3, [r2, #4]
 80008e2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80008e6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80008ea:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80008ee:	f023 0301 	bic.w	r3, r3, #1
 80008f2:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80008f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80008f6:	f043 0304 	orr.w	r3, r3, #4
 80008fa:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80008fc:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8000900:	e7db      	b.n	80008ba <I2C_IsAcknowledgeFailed+0x32>

08000902 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000902:	b570      	push	{r4, r5, r6, lr}
 8000904:	4604      	mov	r4, r0
 8000906:	460d      	mov	r5, r1
 8000908:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800090a:	6823      	ldr	r3, [r4, #0]
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	079b      	lsls	r3, r3, #30
 8000910:	d501      	bpl.n	8000916 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8000912:	2000      	movs	r0, #0
 8000914:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000916:	4632      	mov	r2, r6
 8000918:	4629      	mov	r1, r5
 800091a:	4620      	mov	r0, r4
 800091c:	f7ff ffb4 	bl	8000888 <I2C_IsAcknowledgeFailed>
 8000920:	b9a0      	cbnz	r0, 800094c <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8000922:	1c6a      	adds	r2, r5, #1
 8000924:	d0f1      	beq.n	800090a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000926:	f7ff fe13 	bl	8000550 <HAL_GetTick>
 800092a:	1b80      	subs	r0, r0, r6
 800092c:	4285      	cmp	r5, r0
 800092e:	d301      	bcc.n	8000934 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8000930:	2d00      	cmp	r5, #0
 8000932:	d1ea      	bne.n	800090a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000934:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000936:	f043 0320 	orr.w	r3, r3, #32
 800093a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800093c:	2320      	movs	r3, #32
 800093e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000942:	2300      	movs	r3, #0
 8000944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000948:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800094c:	2001      	movs	r0, #1
}
 800094e:	bd70      	pop	{r4, r5, r6, pc}

08000950 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000950:	b570      	push	{r4, r5, r6, lr}
 8000952:	4604      	mov	r4, r0
 8000954:	460d      	mov	r5, r1
 8000956:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000958:	6823      	ldr	r3, [r4, #0]
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	069b      	lsls	r3, r3, #26
 800095e:	d501      	bpl.n	8000964 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8000960:	2000      	movs	r0, #0
 8000962:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000964:	4632      	mov	r2, r6
 8000966:	4629      	mov	r1, r5
 8000968:	4620      	mov	r0, r4
 800096a:	f7ff ff8d 	bl	8000888 <I2C_IsAcknowledgeFailed>
 800096e:	b990      	cbnz	r0, 8000996 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000970:	f7ff fdee 	bl	8000550 <HAL_GetTick>
 8000974:	1b80      	subs	r0, r0, r6
 8000976:	4285      	cmp	r5, r0
 8000978:	d301      	bcc.n	800097e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800097a:	2d00      	cmp	r5, #0
 800097c:	d1ec      	bne.n	8000958 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800097e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000986:	2320      	movs	r3, #32
 8000988:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800098c:	2300      	movs	r3, #0
 800098e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000992:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000996:	2001      	movs	r0, #1
}
 8000998:	bd70      	pop	{r4, r5, r6, pc}

0800099a <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800099a:	b570      	push	{r4, r5, r6, lr}
 800099c:	4604      	mov	r4, r0
 800099e:	460d      	mov	r5, r1
 80009a0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80009a2:	6823      	ldr	r3, [r4, #0]
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	075b      	lsls	r3, r3, #29
 80009a8:	d40e      	bmi.n	80009c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80009aa:	4632      	mov	r2, r6
 80009ac:	4629      	mov	r1, r5
 80009ae:	4620      	mov	r0, r4
 80009b0:	f7ff ff6a 	bl	8000888 <I2C_IsAcknowledgeFailed>
 80009b4:	b9f0      	cbnz	r0, 80009f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80009b6:	6823      	ldr	r3, [r4, #0]
 80009b8:	699a      	ldr	r2, [r3, #24]
 80009ba:	0691      	lsls	r1, r2, #26
 80009bc:	d51c      	bpl.n	80009f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80009be:	699a      	ldr	r2, [r3, #24]
 80009c0:	0752      	lsls	r2, r2, #29
 80009c2:	d503      	bpl.n	80009cc <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 80009c4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80009c6:	b10a      	cbz	r2, 80009cc <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 80009c8:	2000      	movs	r0, #0
 80009ca:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80009cc:	2120      	movs	r1, #32
 80009ce:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80009d0:	685a      	ldr	r2, [r3, #4]
 80009d2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80009d6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80009da:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80009de:	f022 0201 	bic.w	r2, r2, #1
 80009e2:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80009e8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80009ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80009f0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80009f4:	2001      	movs	r0, #1
}
 80009f6:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80009f8:	f7ff fdaa 	bl	8000550 <HAL_GetTick>
 80009fc:	1b80      	subs	r0, r0, r6
 80009fe:	4285      	cmp	r5, r0
 8000a00:	d301      	bcc.n	8000a06 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 8000a02:	2d00      	cmp	r5, #0
 8000a04:	d1cd      	bne.n	80009a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000a06:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a08:	f043 0320 	orr.w	r3, r3, #32
 8000a0c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000a0e:	2320      	movs	r3, #32
 8000a10:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8000a14:	2300      	movs	r3, #0
 8000a16:	e7eb      	b.n	80009f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>

08000a18 <HAL_I2C_Init>:
{
 8000a18:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8000a1a:	4604      	mov	r4, r0
 8000a1c:	2800      	cmp	r0, #0
 8000a1e:	d04a      	beq.n	8000ab6 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000a20:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000a24:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000a28:	b91b      	cbnz	r3, 8000a32 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000a2a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000a2e:	f001 faa1 	bl	8001f74 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000a32:	2324      	movs	r3, #36	; 0x24
 8000a34:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000a38:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a3a:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	f022 0201 	bic.w	r2, r2, #1
 8000a42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000a44:	6862      	ldr	r2, [r4, #4]
 8000a46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000a4a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000a4c:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a4e:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000a50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a58:	d124      	bne.n	8000aa4 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000a5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a5e:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000a60:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000a62:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000a64:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000a68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a6c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000a6e:	68da      	ldr	r2, [r3, #12]
 8000a70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000a74:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000a76:	6922      	ldr	r2, [r4, #16]
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	69a1      	ldr	r1, [r4, #24]
 8000a7c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000a80:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000a82:	6a21      	ldr	r1, [r4, #32]
 8000a84:	69e2      	ldr	r2, [r4, #28]
 8000a86:	430a      	orrs	r2, r1
 8000a88:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	f042 0201 	orr.w	r2, r2, #1
 8000a90:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a92:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000a94:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a96:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000a98:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000a9c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a9e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8000aa2:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000aa4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000aa8:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000aaa:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000aac:	bf04      	itt	eq
 8000aae:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000ab2:	605a      	streq	r2, [r3, #4]
 8000ab4:	e7d4      	b.n	8000a60 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000ab6:	2001      	movs	r0, #1
}
 8000ab8:	bd10      	pop	{r4, pc}
	...

08000abc <HAL_I2C_Master_Transmit>:
{
 8000abc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000ac0:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ac2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000ac6:	2b20      	cmp	r3, #32
{
 8000ac8:	4604      	mov	r4, r0
 8000aca:	460e      	mov	r6, r1
 8000acc:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ace:	f040 8084 	bne.w	8000bda <HAL_I2C_Master_Transmit+0x11e>
    __HAL_LOCK(hi2c);
 8000ad2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d07f      	beq.n	8000bda <HAL_I2C_Master_Transmit+0x11e>
 8000ada:	2701      	movs	r7, #1
 8000adc:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000ae0:	f7ff fd36 	bl	8000550 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000ae4:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8000ae6:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000ae8:	9000      	str	r0, [sp, #0]
 8000aea:	463a      	mov	r2, r7
 8000aec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af0:	4620      	mov	r0, r4
 8000af2:	f7ff fe9e 	bl	8000832 <I2C_WaitOnFlagUntilTimeout>
 8000af6:	b118      	cbz	r0, 8000b00 <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 8000af8:	2001      	movs	r0, #1
}
 8000afa:	b003      	add	sp, #12
 8000afc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000b00:	2321      	movs	r3, #33	; 0x21
 8000b02:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000b06:	2310      	movs	r3, #16
 8000b08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b0c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8000b0e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000b12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8000b14:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8000b1c:	6360      	str	r0, [r4, #52]	; 0x34
 8000b1e:	4b30      	ldr	r3, [pc, #192]	; (8000be0 <HAL_I2C_Master_Transmit+0x124>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000b20:	d926      	bls.n	8000b70 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000b22:	22ff      	movs	r2, #255	; 0xff
 8000b24:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000b26:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000b28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	4620      	mov	r0, r4
 8000b30:	f7ff fe65 	bl	80007fe <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000b34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b36:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8000b38:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b3a:	462a      	mov	r2, r5
 8000b3c:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8000b3e:	b9fb      	cbnz	r3, 8000b80 <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b40:	f7ff ff06 	bl	8000950 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000b44:	2800      	cmp	r0, #0
 8000b46:	d1d7      	bne.n	8000af8 <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b48:	6823      	ldr	r3, [r4, #0]
 8000b4a:	2120      	movs	r1, #32
 8000b4c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000b4e:	685a      	ldr	r2, [r3, #4]
 8000b50:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000b54:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000b58:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000b5c:	f022 0201 	bic.w	r2, r2, #1
 8000b60:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000b62:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000b66:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000b6a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000b6e:	e7c4      	b.n	8000afa <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 8000b70:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000b72:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000b74:	b292      	uxth	r2, r2
 8000b76:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000b78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b7c:	b2d2      	uxtb	r2, r2
 8000b7e:	e7d5      	b.n	8000b2c <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b80:	f7ff febf 	bl	8000902 <I2C_WaitOnTXISFlagUntilTimeout>
 8000b84:	2800      	cmp	r0, #0
 8000b86:	d1b7      	bne.n	8000af8 <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000b88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b8a:	6822      	ldr	r2, [r4, #0]
 8000b8c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000b90:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000b92:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000b94:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000b96:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000b9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000ba0:	3a01      	subs	r2, #1
 8000ba2:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000ba4:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000ba6:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d0c3      	beq.n	8000b34 <HAL_I2C_Master_Transmit+0x78>
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	d1c1      	bne.n	8000b34 <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000bb0:	9500      	str	r5, [sp, #0]
 8000bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000bb4:	2180      	movs	r1, #128	; 0x80
 8000bb6:	4620      	mov	r0, r4
 8000bb8:	f7ff fe3b 	bl	8000832 <I2C_WaitOnFlagUntilTimeout>
 8000bbc:	2800      	cmp	r0, #0
 8000bbe:	d19b      	bne.n	8000af8 <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000bc0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	2bff      	cmp	r3, #255	; 0xff
 8000bc6:	d903      	bls.n	8000bd0 <HAL_I2C_Master_Transmit+0x114>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000bc8:	22ff      	movs	r2, #255	; 0xff
 8000bca:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000bcc:	9000      	str	r0, [sp, #0]
 8000bce:	e7ab      	b.n	8000b28 <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 8000bd0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000bd2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000bd4:	b292      	uxth	r2, r2
 8000bd6:	8522      	strh	r2, [r4, #40]	; 0x28
 8000bd8:	e7ce      	b.n	8000b78 <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 8000bda:	2002      	movs	r0, #2
 8000bdc:	e78d      	b.n	8000afa <HAL_I2C_Master_Transmit+0x3e>
 8000bde:	bf00      	nop
 8000be0:	80002000 	.word	0x80002000

08000be4 <HAL_I2C_Master_Receive>:
{
 8000be4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000be8:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bea:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000bee:	2b20      	cmp	r3, #32
{
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460e      	mov	r6, r1
 8000bf4:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bf6:	f040 8086 	bne.w	8000d06 <HAL_I2C_Master_Receive+0x122>
    __HAL_LOCK(hi2c);
 8000bfa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	f000 8081 	beq.w	8000d06 <HAL_I2C_Master_Receive+0x122>
 8000c04:	2701      	movs	r7, #1
 8000c06:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000c0a:	f7ff fca1 	bl	8000550 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000c0e:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8000c10:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000c12:	9000      	str	r0, [sp, #0]
 8000c14:	463a      	mov	r2, r7
 8000c16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	f7ff fe09 	bl	8000832 <I2C_WaitOnFlagUntilTimeout>
 8000c20:	b118      	cbz	r0, 8000c2a <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 8000c22:	2001      	movs	r0, #1
}
 8000c24:	b003      	add	sp, #12
 8000c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000c2a:	2322      	movs	r3, #34	; 0x22
 8000c2c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000c30:	2310      	movs	r3, #16
 8000c32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c36:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8000c38:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000c3c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8000c3e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8000c46:	6360      	str	r0, [r4, #52]	; 0x34
 8000c48:	4b30      	ldr	r3, [pc, #192]	; (8000d0c <HAL_I2C_Master_Receive+0x128>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000c4a:	d926      	bls.n	8000c9a <HAL_I2C_Master_Receive+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000c4c:	22ff      	movs	r2, #255	; 0xff
 8000c4e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000c50:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000c52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000c56:	4631      	mov	r1, r6
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f7ff fdd0 	bl	80007fe <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000c5e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c60:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8000c62:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c64:	462a      	mov	r2, r5
 8000c66:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8000c68:	b9fb      	cbnz	r3, 8000caa <HAL_I2C_Master_Receive+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c6a:	f7ff fe71 	bl	8000950 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000c6e:	2800      	cmp	r0, #0
 8000c70:	d1d7      	bne.n	8000c22 <HAL_I2C_Master_Receive+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c72:	6823      	ldr	r3, [r4, #0]
 8000c74:	2120      	movs	r1, #32
 8000c76:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000c78:	685a      	ldr	r2, [r3, #4]
 8000c7a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000c7e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000c82:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000c86:	f022 0201 	bic.w	r2, r2, #1
 8000c8a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000c8c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000c90:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000c94:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000c98:	e7c4      	b.n	8000c24 <HAL_I2C_Master_Receive+0x40>
      hi2c->XferSize = hi2c->XferCount;
 8000c9a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000c9c:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000c9e:	b292      	uxth	r2, r2
 8000ca0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ca2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	e7d5      	b.n	8000c56 <HAL_I2C_Master_Receive+0x72>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000caa:	f7ff fe76 	bl	800099a <I2C_WaitOnRXNEFlagUntilTimeout>
 8000cae:	2800      	cmp	r0, #0
 8000cb0:	d1b7      	bne.n	8000c22 <HAL_I2C_Master_Receive+0x3e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000cb2:	6822      	ldr	r2, [r4, #0]
 8000cb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000cb6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000cb8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8000cba:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8000cbc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000cc2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000cca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000ccc:	3a01      	subs	r2, #1
 8000cce:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000cd0:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000cd2:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d0c2      	beq.n	8000c5e <HAL_I2C_Master_Receive+0x7a>
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	d1c0      	bne.n	8000c5e <HAL_I2C_Master_Receive+0x7a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000cdc:	9500      	str	r5, [sp, #0]
 8000cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000ce0:	2180      	movs	r1, #128	; 0x80
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	f7ff fda5 	bl	8000832 <I2C_WaitOnFlagUntilTimeout>
 8000ce8:	2800      	cmp	r0, #0
 8000cea:	d19a      	bne.n	8000c22 <HAL_I2C_Master_Receive+0x3e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000cec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	2bff      	cmp	r3, #255	; 0xff
 8000cf2:	d903      	bls.n	8000cfc <HAL_I2C_Master_Receive+0x118>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000cf4:	22ff      	movs	r2, #255	; 0xff
 8000cf6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000cf8:	9000      	str	r0, [sp, #0]
 8000cfa:	e7aa      	b.n	8000c52 <HAL_I2C_Master_Receive+0x6e>
          hi2c->XferSize = hi2c->XferCount;
 8000cfc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000cfe:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000d00:	b292      	uxth	r2, r2
 8000d02:	8522      	strh	r2, [r4, #40]	; 0x28
 8000d04:	e7cd      	b.n	8000ca2 <HAL_I2C_Master_Receive+0xbe>
    return HAL_BUSY;
 8000d06:	2002      	movs	r0, #2
 8000d08:	e78c      	b.n	8000c24 <HAL_I2C_Master_Receive+0x40>
 8000d0a:	bf00      	nop
 8000d0c:	80002400 	.word	0x80002400

08000d10 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d10:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	2a20      	cmp	r2, #32
{
 8000d18:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d1a:	d11d      	bne.n	8000d58 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d1c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d019      	beq.n	8000d58 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d24:	2324      	movs	r3, #36	; 0x24
 8000d26:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d2a:	6803      	ldr	r3, [r0, #0]
 8000d2c:	681c      	ldr	r4, [r3, #0]
 8000d2e:	f024 0401 	bic.w	r4, r4, #1
 8000d32:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000d34:	681c      	ldr	r4, [r3, #0]
 8000d36:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8000d3a:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000d3c:	681c      	ldr	r4, [r3, #0]
 8000d3e:	4321      	orrs	r1, r4
 8000d40:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d42:	6819      	ldr	r1, [r3, #0]
 8000d44:	f041 0101 	orr.w	r1, r1, #1
 8000d48:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d4a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000d4c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000d50:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000d54:	4618      	mov	r0, r3
 8000d56:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000d58:	2002      	movs	r0, #2
  }
}
 8000d5a:	bd10      	pop	{r4, pc}

08000d5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000d5c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d5e:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8000d62:	b2e4      	uxtb	r4, r4
 8000d64:	2c20      	cmp	r4, #32
 8000d66:	d11c      	bne.n	8000da2 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d68:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d018      	beq.n	8000da2 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d70:	2324      	movs	r3, #36	; 0x24
 8000d72:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d76:	6803      	ldr	r3, [r0, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	f022 0201 	bic.w	r2, r2, #1
 8000d7e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000d80:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000d82:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000d86:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000d8a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	f042 0201 	orr.w	r2, r2, #1
 8000d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d94:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000d96:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000d9a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000d9e:	4618      	mov	r0, r3
 8000da0:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000da2:	2002      	movs	r0, #2
  }
}
 8000da4:	bd10      	pop	{r4, pc}
	...

08000da8 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000da8:	4b02      	ldr	r3, [pc, #8]	; (8000db4 <HAL_PWREx_GetVoltageRange+0xc>)
 8000daa:	6818      	ldr	r0, [r3, #0]
#endif
}
 8000dac:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40007000 	.word	0x40007000

08000db8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000db8:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dba:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dbc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dc0:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dc4:	d11c      	bne.n	8000e00 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dc6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000dca:	d015      	beq.n	8000df8 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000dd6:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000dd8:	4a10      	ldr	r2, [pc, #64]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0x64>)
 8000dda:	6811      	ldr	r1, [r2, #0]
 8000ddc:	2232      	movs	r2, #50	; 0x32
 8000dde:	434a      	muls	r2, r1
 8000de0:	490f      	ldr	r1, [pc, #60]	; (8000e20 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8000de2:	fbb2 f2f1 	udiv	r2, r2, r1
 8000de6:	4619      	mov	r1, r3
 8000de8:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dea:	6958      	ldr	r0, [r3, #20]
 8000dec:	0540      	lsls	r0, r0, #21
 8000dee:	d500      	bpl.n	8000df2 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8000df0:	b922      	cbnz	r2, 8000dfc <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000df2:	694b      	ldr	r3, [r1, #20]
 8000df4:	055b      	lsls	r3, r3, #21
 8000df6:	d40d      	bmi.n	8000e14 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000df8:	2000      	movs	r0, #0
 8000dfa:	4770      	bx	lr
        wait_loop_index--;
 8000dfc:	3a01      	subs	r2, #1
 8000dfe:	e7f4      	b.n	8000dea <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e00:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e04:	bf1f      	itttt	ne
 8000e06:	681a      	ldrne	r2, [r3, #0]
 8000e08:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8000e0c:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8000e10:	601a      	strne	r2, [r3, #0]
 8000e12:	e7f1      	b.n	8000df8 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8000e14:	2003      	movs	r0, #3
}
 8000e16:	4770      	bx	lr
 8000e18:	40007000 	.word	0x40007000
 8000e1c:	2000001c 	.word	0x2000001c
 8000e20:	000f4240 	.word	0x000f4240

08000e24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000e26:	4d1e      	ldr	r5, [pc, #120]	; (8000ea0 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000e28:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000e2a:	00da      	lsls	r2, r3, #3
{
 8000e2c:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000e2e:	d518      	bpl.n	8000e62 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000e30:	f7ff ffba 	bl	8000da8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e34:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000e38:	d123      	bne.n	8000e82 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000e3a:	2c80      	cmp	r4, #128	; 0x80
 8000e3c:	d929      	bls.n	8000e92 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000e3e:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000e40:	bf8c      	ite	hi
 8000e42:	2002      	movhi	r0, #2
 8000e44:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000e46:	4a17      	ldr	r2, [pc, #92]	; (8000ea4 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8000e48:	6813      	ldr	r3, [r2, #0]
 8000e4a:	f023 0307 	bic.w	r3, r3, #7
 8000e4e:	4303      	orrs	r3, r0
 8000e50:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000e52:	6813      	ldr	r3, [r2, #0]
 8000e54:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000e58:	1a18      	subs	r0, r3, r0
 8000e5a:	bf18      	it	ne
 8000e5c:	2001      	movne	r0, #1
 8000e5e:	b003      	add	sp, #12
 8000e60:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8000e62:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e68:	65ab      	str	r3, [r5, #88]	; 0x58
 8000e6a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e70:	9301      	str	r3, [sp, #4]
 8000e72:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000e74:	f7ff ff98 	bl	8000da8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000e78:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	65ab      	str	r3, [r5, #88]	; 0x58
 8000e80:	e7d8      	b.n	8000e34 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8000e82:	2c80      	cmp	r4, #128	; 0x80
 8000e84:	d807      	bhi.n	8000e96 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8000e86:	d008      	beq.n	8000e9a <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8000e88:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8000e8c:	4258      	negs	r0, r3
 8000e8e:	4158      	adcs	r0, r3
 8000e90:	e7d9      	b.n	8000e46 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000e92:	2000      	movs	r0, #0
 8000e94:	e7d7      	b.n	8000e46 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8000e96:	2003      	movs	r0, #3
 8000e98:	e7d5      	b.n	8000e46 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8000e9a:	2002      	movs	r0, #2
 8000e9c:	e7d3      	b.n	8000e46 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8000e9e:	bf00      	nop
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	40022000 	.word	0x40022000

08000ea8 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ea8:	4b25      	ldr	r3, [pc, #148]	; (8000f40 <HAL_RCC_GetSysClockFreq+0x98>)
 8000eaa:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000eac:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000eae:	f012 020c 	ands.w	r2, r2, #12
 8000eb2:	d005      	beq.n	8000ec0 <HAL_RCC_GetSysClockFreq+0x18>
 8000eb4:	2a0c      	cmp	r2, #12
 8000eb6:	d115      	bne.n	8000ee4 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000eb8:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000ebc:	2901      	cmp	r1, #1
 8000ebe:	d118      	bne.n	8000ef2 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000ec0:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8000ec2:	4820      	ldr	r0, [pc, #128]	; (8000f44 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000ec4:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000ec6:	bf55      	itete	pl
 8000ec8:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000ecc:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000ece:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000ed2:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8000ed6:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000eda:	b382      	cbz	r2, 8000f3e <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000edc:	2a0c      	cmp	r2, #12
 8000ede:	d009      	beq.n	8000ef4 <HAL_RCC_GetSysClockFreq+0x4c>
 8000ee0:	2000      	movs	r0, #0
  return sysclockfreq;
 8000ee2:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000ee4:	2a04      	cmp	r2, #4
 8000ee6:	d029      	beq.n	8000f3c <HAL_RCC_GetSysClockFreq+0x94>
 8000ee8:	2a08      	cmp	r2, #8
 8000eea:	4817      	ldr	r0, [pc, #92]	; (8000f48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000eec:	bf18      	it	ne
 8000eee:	2000      	movne	r0, #0
 8000ef0:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000ef2:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000ef4:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000ef6:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000ef8:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000efc:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8000f00:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000f02:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8000f06:	d005      	beq.n	8000f14 <HAL_RCC_GetSysClockFreq+0x6c>
 8000f08:	2903      	cmp	r1, #3
 8000f0a:	d012      	beq.n	8000f32 <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000f0c:	68d9      	ldr	r1, [r3, #12]
 8000f0e:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000f12:	e003      	b.n	8000f1c <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000f14:	68d9      	ldr	r1, [r3, #12]
 8000f16:	480d      	ldr	r0, [pc, #52]	; (8000f4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8000f18:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000f1c:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000f1e:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000f22:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8000f26:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000f28:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000f2a:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8000f2c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f30:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000f32:	68d9      	ldr	r1, [r3, #12]
 8000f34:	4804      	ldr	r0, [pc, #16]	; (8000f48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000f36:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000f3a:	e7ef      	b.n	8000f1c <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8000f3c:	4803      	ldr	r0, [pc, #12]	; (8000f4c <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8000f3e:	4770      	bx	lr
 8000f40:	40021000 	.word	0x40021000
 8000f44:	080026c4 	.word	0x080026c4
 8000f48:	007a1200 	.word	0x007a1200
 8000f4c:	00f42400 	.word	0x00f42400

08000f50 <HAL_RCC_OscConfig>:
{
 8000f50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8000f54:	4605      	mov	r5, r0
 8000f56:	b908      	cbnz	r0, 8000f5c <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 8000f58:	2001      	movs	r0, #1
 8000f5a:	e046      	b.n	8000fea <HAL_RCC_OscConfig+0x9a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f5c:	4ca8      	ldr	r4, [pc, #672]	; (8001200 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f5e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f60:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f62:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f64:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f66:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f6a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f6e:	d572      	bpl.n	8001056 <HAL_RCC_OscConfig+0x106>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f70:	b11e      	cbz	r6, 8000f7a <HAL_RCC_OscConfig+0x2a>
 8000f72:	2e0c      	cmp	r6, #12
 8000f74:	d151      	bne.n	800101a <HAL_RCC_OscConfig+0xca>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000f76:	2f01      	cmp	r7, #1
 8000f78:	d14f      	bne.n	800101a <HAL_RCC_OscConfig+0xca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f7a:	6823      	ldr	r3, [r4, #0]
 8000f7c:	0798      	lsls	r0, r3, #30
 8000f7e:	d502      	bpl.n	8000f86 <HAL_RCC_OscConfig+0x36>
 8000f80:	69ab      	ldr	r3, [r5, #24]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d0e8      	beq.n	8000f58 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f86:	6823      	ldr	r3, [r4, #0]
 8000f88:	6a28      	ldr	r0, [r5, #32]
 8000f8a:	0719      	lsls	r1, r3, #28
 8000f8c:	bf56      	itet	pl
 8000f8e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8000f92:	6823      	ldrmi	r3, [r4, #0]
 8000f94:	091b      	lsrpl	r3, r3, #4
 8000f96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f9a:	4283      	cmp	r3, r0
 8000f9c:	d228      	bcs.n	8000ff0 <HAL_RCC_OscConfig+0xa0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f9e:	f7ff ff41 	bl	8000e24 <RCC_SetFlashLatencyFromMSIRange>
 8000fa2:	2800      	cmp	r0, #0
 8000fa4:	d1d8      	bne.n	8000f58 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fa6:	6823      	ldr	r3, [r4, #0]
 8000fa8:	f043 0308 	orr.w	r3, r3, #8
 8000fac:	6023      	str	r3, [r4, #0]
 8000fae:	6823      	ldr	r3, [r4, #0]
 8000fb0:	6a2a      	ldr	r2, [r5, #32]
 8000fb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fba:	6863      	ldr	r3, [r4, #4]
 8000fbc:	69ea      	ldr	r2, [r5, #28]
 8000fbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000fc2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000fc6:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000fc8:	f7ff ff6e 	bl	8000ea8 <HAL_RCC_GetSysClockFreq>
 8000fcc:	68a3      	ldr	r3, [r4, #8]
 8000fce:	4a8d      	ldr	r2, [pc, #564]	; (8001204 <HAL_RCC_OscConfig+0x2b4>)
 8000fd0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000fd4:	5cd3      	ldrb	r3, [r2, r3]
 8000fd6:	f003 031f 	and.w	r3, r3, #31
 8000fda:	40d8      	lsrs	r0, r3
 8000fdc:	4b8a      	ldr	r3, [pc, #552]	; (8001208 <HAL_RCC_OscConfig+0x2b8>)
 8000fde:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f7ff fa7f 	bl	80004e4 <HAL_InitTick>
        if(status != HAL_OK)
 8000fe6:	2800      	cmp	r0, #0
 8000fe8:	d035      	beq.n	8001056 <HAL_RCC_OscConfig+0x106>
}
 8000fea:	b003      	add	sp, #12
 8000fec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ff0:	6823      	ldr	r3, [r4, #0]
 8000ff2:	f043 0308 	orr.w	r3, r3, #8
 8000ff6:	6023      	str	r3, [r4, #0]
 8000ff8:	6823      	ldr	r3, [r4, #0]
 8000ffa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ffe:	4303      	orrs	r3, r0
 8001000:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001002:	6863      	ldr	r3, [r4, #4]
 8001004:	69ea      	ldr	r2, [r5, #28]
 8001006:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800100a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800100e:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001010:	f7ff ff08 	bl	8000e24 <RCC_SetFlashLatencyFromMSIRange>
 8001014:	2800      	cmp	r0, #0
 8001016:	d0d7      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x78>
 8001018:	e79e      	b.n	8000f58 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800101a:	69ab      	ldr	r3, [r5, #24]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d03a      	beq.n	8001096 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_MSI_ENABLE();
 8001020:	6823      	ldr	r3, [r4, #0]
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001028:	f7ff fa92 	bl	8000550 <HAL_GetTick>
 800102c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800102e:	6823      	ldr	r3, [r4, #0]
 8001030:	079a      	lsls	r2, r3, #30
 8001032:	d528      	bpl.n	8001086 <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001034:	6823      	ldr	r3, [r4, #0]
 8001036:	f043 0308 	orr.w	r3, r3, #8
 800103a:	6023      	str	r3, [r4, #0]
 800103c:	6823      	ldr	r3, [r4, #0]
 800103e:	6a2a      	ldr	r2, [r5, #32]
 8001040:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001044:	4313      	orrs	r3, r2
 8001046:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001048:	6863      	ldr	r3, [r4, #4]
 800104a:	69ea      	ldr	r2, [r5, #28]
 800104c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001050:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001054:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001056:	682b      	ldr	r3, [r5, #0]
 8001058:	07d8      	lsls	r0, r3, #31
 800105a:	d42d      	bmi.n	80010b8 <HAL_RCC_OscConfig+0x168>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800105c:	682b      	ldr	r3, [r5, #0]
 800105e:	0799      	lsls	r1, r3, #30
 8001060:	d46b      	bmi.n	800113a <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001062:	682b      	ldr	r3, [r5, #0]
 8001064:	0718      	lsls	r0, r3, #28
 8001066:	f100 80a0 	bmi.w	80011aa <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800106a:	682b      	ldr	r3, [r5, #0]
 800106c:	0759      	lsls	r1, r3, #29
 800106e:	f100 80cd 	bmi.w	800120c <HAL_RCC_OscConfig+0x2bc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001072:	682b      	ldr	r3, [r5, #0]
 8001074:	0699      	lsls	r1, r3, #26
 8001076:	f100 8136 	bmi.w	80012e6 <HAL_RCC_OscConfig+0x396>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800107a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800107c:	2b00      	cmp	r3, #0
 800107e:	f040 815c 	bne.w	800133a <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8001082:	2000      	movs	r0, #0
 8001084:	e7b1      	b.n	8000fea <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001086:	f7ff fa63 	bl	8000550 <HAL_GetTick>
 800108a:	eba0 0008 	sub.w	r0, r0, r8
 800108e:	2802      	cmp	r0, #2
 8001090:	d9cd      	bls.n	800102e <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
 8001092:	2003      	movs	r0, #3
 8001094:	e7a9      	b.n	8000fea <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_MSI_DISABLE();
 8001096:	6823      	ldr	r3, [r4, #0]
 8001098:	f023 0301 	bic.w	r3, r3, #1
 800109c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800109e:	f7ff fa57 	bl	8000550 <HAL_GetTick>
 80010a2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010a4:	6823      	ldr	r3, [r4, #0]
 80010a6:	079b      	lsls	r3, r3, #30
 80010a8:	d5d5      	bpl.n	8001056 <HAL_RCC_OscConfig+0x106>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010aa:	f7ff fa51 	bl	8000550 <HAL_GetTick>
 80010ae:	eba0 0008 	sub.w	r0, r0, r8
 80010b2:	2802      	cmp	r0, #2
 80010b4:	d9f6      	bls.n	80010a4 <HAL_RCC_OscConfig+0x154>
 80010b6:	e7ec      	b.n	8001092 <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80010b8:	2e08      	cmp	r6, #8
 80010ba:	d003      	beq.n	80010c4 <HAL_RCC_OscConfig+0x174>
 80010bc:	2e0c      	cmp	r6, #12
 80010be:	d108      	bne.n	80010d2 <HAL_RCC_OscConfig+0x182>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 80010c0:	2f03      	cmp	r7, #3
 80010c2:	d106      	bne.n	80010d2 <HAL_RCC_OscConfig+0x182>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c4:	6823      	ldr	r3, [r4, #0]
 80010c6:	039a      	lsls	r2, r3, #14
 80010c8:	d5c8      	bpl.n	800105c <HAL_RCC_OscConfig+0x10c>
 80010ca:	686b      	ldr	r3, [r5, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1c5      	bne.n	800105c <HAL_RCC_OscConfig+0x10c>
 80010d0:	e742      	b.n	8000f58 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d2:	686b      	ldr	r3, [r5, #4]
 80010d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d8:	d110      	bne.n	80010fc <HAL_RCC_OscConfig+0x1ac>
 80010da:	6823      	ldr	r3, [r4, #0]
 80010dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010e2:	f7ff fa35 	bl	8000550 <HAL_GetTick>
 80010e6:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010e8:	6823      	ldr	r3, [r4, #0]
 80010ea:	039b      	lsls	r3, r3, #14
 80010ec:	d4b6      	bmi.n	800105c <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010ee:	f7ff fa2f 	bl	8000550 <HAL_GetTick>
 80010f2:	eba0 0008 	sub.w	r0, r0, r8
 80010f6:	2864      	cmp	r0, #100	; 0x64
 80010f8:	d9f6      	bls.n	80010e8 <HAL_RCC_OscConfig+0x198>
 80010fa:	e7ca      	b.n	8001092 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001100:	d104      	bne.n	800110c <HAL_RCC_OscConfig+0x1bc>
 8001102:	6823      	ldr	r3, [r4, #0]
 8001104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001108:	6023      	str	r3, [r4, #0]
 800110a:	e7e6      	b.n	80010da <HAL_RCC_OscConfig+0x18a>
 800110c:	6822      	ldr	r2, [r4, #0]
 800110e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001112:	6022      	str	r2, [r4, #0]
 8001114:	6822      	ldr	r2, [r4, #0]
 8001116:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800111a:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1e0      	bne.n	80010e2 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8001120:	f7ff fa16 	bl	8000550 <HAL_GetTick>
 8001124:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001126:	6823      	ldr	r3, [r4, #0]
 8001128:	0398      	lsls	r0, r3, #14
 800112a:	d597      	bpl.n	800105c <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800112c:	f7ff fa10 	bl	8000550 <HAL_GetTick>
 8001130:	eba0 0008 	sub.w	r0, r0, r8
 8001134:	2864      	cmp	r0, #100	; 0x64
 8001136:	d9f6      	bls.n	8001126 <HAL_RCC_OscConfig+0x1d6>
 8001138:	e7ab      	b.n	8001092 <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800113a:	2e04      	cmp	r6, #4
 800113c:	d003      	beq.n	8001146 <HAL_RCC_OscConfig+0x1f6>
 800113e:	2e0c      	cmp	r6, #12
 8001140:	d110      	bne.n	8001164 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8001142:	2f02      	cmp	r7, #2
 8001144:	d10e      	bne.n	8001164 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001146:	6823      	ldr	r3, [r4, #0]
 8001148:	0559      	lsls	r1, r3, #21
 800114a:	d503      	bpl.n	8001154 <HAL_RCC_OscConfig+0x204>
 800114c:	68eb      	ldr	r3, [r5, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	f43f af02 	beq.w	8000f58 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001154:	6863      	ldr	r3, [r4, #4]
 8001156:	692a      	ldr	r2, [r5, #16]
 8001158:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800115c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001160:	6063      	str	r3, [r4, #4]
 8001162:	e77e      	b.n	8001062 <HAL_RCC_OscConfig+0x112>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001164:	68eb      	ldr	r3, [r5, #12]
 8001166:	b17b      	cbz	r3, 8001188 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8001168:	6823      	ldr	r3, [r4, #0]
 800116a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001170:	f7ff f9ee 	bl	8000550 <HAL_GetTick>
 8001174:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001176:	6823      	ldr	r3, [r4, #0]
 8001178:	055a      	lsls	r2, r3, #21
 800117a:	d4eb      	bmi.n	8001154 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800117c:	f7ff f9e8 	bl	8000550 <HAL_GetTick>
 8001180:	1bc0      	subs	r0, r0, r7
 8001182:	2802      	cmp	r0, #2
 8001184:	d9f7      	bls.n	8001176 <HAL_RCC_OscConfig+0x226>
 8001186:	e784      	b.n	8001092 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 8001188:	6823      	ldr	r3, [r4, #0]
 800118a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800118e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001190:	f7ff f9de 	bl	8000550 <HAL_GetTick>
 8001194:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001196:	6823      	ldr	r3, [r4, #0]
 8001198:	055b      	lsls	r3, r3, #21
 800119a:	f57f af62 	bpl.w	8001062 <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800119e:	f7ff f9d7 	bl	8000550 <HAL_GetTick>
 80011a2:	1bc0      	subs	r0, r0, r7
 80011a4:	2802      	cmp	r0, #2
 80011a6:	d9f6      	bls.n	8001196 <HAL_RCC_OscConfig+0x246>
 80011a8:	e773      	b.n	8001092 <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011aa:	696b      	ldr	r3, [r5, #20]
 80011ac:	b19b      	cbz	r3, 80011d6 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 80011ae:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80011ba:	f7ff f9c9 	bl	8000550 <HAL_GetTick>
 80011be:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011c0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80011c4:	079a      	lsls	r2, r3, #30
 80011c6:	f53f af50 	bmi.w	800106a <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ca:	f7ff f9c1 	bl	8000550 <HAL_GetTick>
 80011ce:	1bc0      	subs	r0, r0, r7
 80011d0:	2802      	cmp	r0, #2
 80011d2:	d9f5      	bls.n	80011c0 <HAL_RCC_OscConfig+0x270>
 80011d4:	e75d      	b.n	8001092 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_LSI_DISABLE();
 80011d6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80011da:	f023 0301 	bic.w	r3, r3, #1
 80011de:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80011e2:	f7ff f9b5 	bl	8000550 <HAL_GetTick>
 80011e6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011e8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80011ec:	079b      	lsls	r3, r3, #30
 80011ee:	f57f af3c 	bpl.w	800106a <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011f2:	f7ff f9ad 	bl	8000550 <HAL_GetTick>
 80011f6:	1bc0      	subs	r0, r0, r7
 80011f8:	2802      	cmp	r0, #2
 80011fa:	d9f5      	bls.n	80011e8 <HAL_RCC_OscConfig+0x298>
 80011fc:	e749      	b.n	8001092 <HAL_RCC_OscConfig+0x142>
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000
 8001204:	080026aa 	.word	0x080026aa
 8001208:	2000001c 	.word	0x2000001c
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800120c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800120e:	00d8      	lsls	r0, r3, #3
 8001210:	d429      	bmi.n	8001266 <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001218:	65a3      	str	r3, [r4, #88]	; 0x58
 800121a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800121c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001224:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001228:	4f71      	ldr	r7, [pc, #452]	; (80013f0 <HAL_RCC_OscConfig+0x4a0>)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	05d9      	lsls	r1, r3, #23
 800122e:	d51d      	bpl.n	800126c <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001230:	68ab      	ldr	r3, [r5, #8]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d12b      	bne.n	800128e <HAL_RCC_OscConfig+0x33e>
 8001236:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001242:	f7ff f985 	bl	8000550 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001246:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800124a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800124c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001250:	079b      	lsls	r3, r3, #30
 8001252:	d542      	bpl.n	80012da <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 8001254:	f1b8 0f00 	cmp.w	r8, #0
 8001258:	f43f af0b 	beq.w	8001072 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_PWR_CLK_DISABLE();
 800125c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800125e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001262:	65a3      	str	r3, [r4, #88]	; 0x58
 8001264:	e705      	b.n	8001072 <HAL_RCC_OscConfig+0x122>
    FlagStatus       pwrclkchanged = RESET;
 8001266:	f04f 0800 	mov.w	r8, #0
 800126a:	e7dd      	b.n	8001228 <HAL_RCC_OscConfig+0x2d8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001272:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001274:	f7ff f96c 	bl	8000550 <HAL_GetTick>
 8001278:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	05da      	lsls	r2, r3, #23
 800127e:	d4d7      	bmi.n	8001230 <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001280:	f7ff f966 	bl	8000550 <HAL_GetTick>
 8001284:	eba0 0009 	sub.w	r0, r0, r9
 8001288:	2802      	cmp	r0, #2
 800128a:	d9f6      	bls.n	800127a <HAL_RCC_OscConfig+0x32a>
 800128c:	e701      	b.n	8001092 <HAL_RCC_OscConfig+0x142>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800128e:	2b05      	cmp	r3, #5
 8001290:	d106      	bne.n	80012a0 <HAL_RCC_OscConfig+0x350>
 8001292:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800129e:	e7ca      	b.n	8001236 <HAL_RCC_OscConfig+0x2e6>
 80012a0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80012a4:	f022 0201 	bic.w	r2, r2, #1
 80012a8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80012ac:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80012b0:	f022 0204 	bic.w	r2, r2, #4
 80012b4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1c2      	bne.n	8001242 <HAL_RCC_OscConfig+0x2f2>
      tickstart = HAL_GetTick();
 80012bc:	f7ff f948 	bl	8000550 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c0:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80012c4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012c6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80012ca:	0798      	lsls	r0, r3, #30
 80012cc:	d5c2      	bpl.n	8001254 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ce:	f7ff f93f 	bl	8000550 <HAL_GetTick>
 80012d2:	1bc0      	subs	r0, r0, r7
 80012d4:	4548      	cmp	r0, r9
 80012d6:	d9f6      	bls.n	80012c6 <HAL_RCC_OscConfig+0x376>
 80012d8:	e6db      	b.n	8001092 <HAL_RCC_OscConfig+0x142>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012da:	f7ff f939 	bl	8000550 <HAL_GetTick>
 80012de:	1bc0      	subs	r0, r0, r7
 80012e0:	4548      	cmp	r0, r9
 80012e2:	d9b3      	bls.n	800124c <HAL_RCC_OscConfig+0x2fc>
 80012e4:	e6d5      	b.n	8001092 <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80012e8:	b19b      	cbz	r3, 8001312 <HAL_RCC_OscConfig+0x3c2>
      __HAL_RCC_HSI48_ENABLE();
 80012ea:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 80012f6:	f7ff f92b 	bl	8000550 <HAL_GetTick>
 80012fa:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012fc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001300:	079a      	lsls	r2, r3, #30
 8001302:	f53f aeba 	bmi.w	800107a <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001306:	f7ff f923 	bl	8000550 <HAL_GetTick>
 800130a:	1bc0      	subs	r0, r0, r7
 800130c:	2802      	cmp	r0, #2
 800130e:	d9f5      	bls.n	80012fc <HAL_RCC_OscConfig+0x3ac>
 8001310:	e6bf      	b.n	8001092 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSI48_DISABLE();
 8001312:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001316:	f023 0301 	bic.w	r3, r3, #1
 800131a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 800131e:	f7ff f917 	bl	8000550 <HAL_GetTick>
 8001322:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001324:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001328:	079b      	lsls	r3, r3, #30
 800132a:	f57f aea6 	bpl.w	800107a <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800132e:	f7ff f90f 	bl	8000550 <HAL_GetTick>
 8001332:	1bc0      	subs	r0, r0, r7
 8001334:	2802      	cmp	r0, #2
 8001336:	d9f5      	bls.n	8001324 <HAL_RCC_OscConfig+0x3d4>
 8001338:	e6ab      	b.n	8001092 <HAL_RCC_OscConfig+0x142>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800133a:	2e0c      	cmp	r6, #12
 800133c:	f43f ae0c 	beq.w	8000f58 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001340:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8001342:	6823      	ldr	r3, [r4, #0]
 8001344:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001348:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800134a:	d136      	bne.n	80013ba <HAL_RCC_OscConfig+0x46a>
        tickstart = HAL_GetTick();
 800134c:	f7ff f900 	bl	8000550 <HAL_GetTick>
 8001350:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001352:	6823      	ldr	r3, [r4, #0]
 8001354:	0198      	lsls	r0, r3, #6
 8001356:	d42a      	bmi.n	80013ae <HAL_RCC_OscConfig+0x45e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001358:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800135a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800135c:	06db      	lsls	r3, r3, #27
 800135e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001362:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001364:	4313      	orrs	r3, r2
 8001366:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001368:	3a01      	subs	r2, #1
 800136a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800136e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001370:	0852      	lsrs	r2, r2, #1
 8001372:	3a01      	subs	r2, #1
 8001374:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001378:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800137a:	0852      	lsrs	r2, r2, #1
 800137c:	3a01      	subs	r2, #1
 800137e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001382:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001384:	6823      	ldr	r3, [r4, #0]
 8001386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800138a:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800138c:	68e3      	ldr	r3, [r4, #12]
 800138e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001392:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001394:	f7ff f8dc 	bl	8000550 <HAL_GetTick>
 8001398:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800139a:	6823      	ldr	r3, [r4, #0]
 800139c:	0199      	lsls	r1, r3, #6
 800139e:	f53f ae70 	bmi.w	8001082 <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a2:	f7ff f8d5 	bl	8000550 <HAL_GetTick>
 80013a6:	1b40      	subs	r0, r0, r5
 80013a8:	2802      	cmp	r0, #2
 80013aa:	d9f6      	bls.n	800139a <HAL_RCC_OscConfig+0x44a>
 80013ac:	e671      	b.n	8001092 <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ae:	f7ff f8cf 	bl	8000550 <HAL_GetTick>
 80013b2:	1b80      	subs	r0, r0, r6
 80013b4:	2802      	cmp	r0, #2
 80013b6:	d9cc      	bls.n	8001352 <HAL_RCC_OscConfig+0x402>
 80013b8:	e66b      	b.n	8001092 <HAL_RCC_OscConfig+0x142>
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80013be:	bf5e      	ittt	pl
 80013c0:	68e3      	ldrpl	r3, [r4, #12]
 80013c2:	f023 0303 	bicpl.w	r3, r3, #3
 80013c6:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80013c8:	68e3      	ldr	r3, [r4, #12]
 80013ca:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80013ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d2:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80013d4:	f7ff f8bc 	bl	8000550 <HAL_GetTick>
 80013d8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013da:	6823      	ldr	r3, [r4, #0]
 80013dc:	019b      	lsls	r3, r3, #6
 80013de:	f57f ae50 	bpl.w	8001082 <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e2:	f7ff f8b5 	bl	8000550 <HAL_GetTick>
 80013e6:	1b40      	subs	r0, r0, r5
 80013e8:	2802      	cmp	r0, #2
 80013ea:	d9f6      	bls.n	80013da <HAL_RCC_OscConfig+0x48a>
 80013ec:	e651      	b.n	8001092 <HAL_RCC_OscConfig+0x142>
 80013ee:	bf00      	nop
 80013f0:	40007000 	.word	0x40007000

080013f4 <HAL_RCC_ClockConfig>:
{
 80013f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013f8:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80013fa:	4604      	mov	r4, r0
 80013fc:	b910      	cbnz	r0, 8001404 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80013fe:	2001      	movs	r0, #1
 8001400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001404:	4a40      	ldr	r2, [pc, #256]	; (8001508 <HAL_RCC_ClockConfig+0x114>)
 8001406:	6813      	ldr	r3, [r2, #0]
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	428b      	cmp	r3, r1
 800140e:	d329      	bcc.n	8001464 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001410:	6823      	ldr	r3, [r4, #0]
 8001412:	07d9      	lsls	r1, r3, #31
 8001414:	d431      	bmi.n	800147a <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001416:	6821      	ldr	r1, [r4, #0]
 8001418:	078a      	lsls	r2, r1, #30
 800141a:	d45b      	bmi.n	80014d4 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800141c:	4a3a      	ldr	r2, [pc, #232]	; (8001508 <HAL_RCC_ClockConfig+0x114>)
 800141e:	6813      	ldr	r3, [r2, #0]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	429e      	cmp	r6, r3
 8001426:	d35d      	bcc.n	80014e4 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001428:	f011 0f04 	tst.w	r1, #4
 800142c:	4d37      	ldr	r5, [pc, #220]	; (800150c <HAL_RCC_ClockConfig+0x118>)
 800142e:	d164      	bne.n	80014fa <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001430:	070b      	lsls	r3, r1, #28
 8001432:	d506      	bpl.n	8001442 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001434:	68ab      	ldr	r3, [r5, #8]
 8001436:	6922      	ldr	r2, [r4, #16]
 8001438:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800143c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001440:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001442:	f7ff fd31 	bl	8000ea8 <HAL_RCC_GetSysClockFreq>
 8001446:	68ab      	ldr	r3, [r5, #8]
 8001448:	4a31      	ldr	r2, [pc, #196]	; (8001510 <HAL_RCC_ClockConfig+0x11c>)
 800144a:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800144e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001452:	5cd3      	ldrb	r3, [r2, r3]
 8001454:	f003 031f 	and.w	r3, r3, #31
 8001458:	40d8      	lsrs	r0, r3
 800145a:	4b2e      	ldr	r3, [pc, #184]	; (8001514 <HAL_RCC_ClockConfig+0x120>)
 800145c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 800145e:	2000      	movs	r0, #0
 8001460:	f7ff b840 	b.w	80004e4 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001464:	6813      	ldr	r3, [r2, #0]
 8001466:	f023 0307 	bic.w	r3, r3, #7
 800146a:	430b      	orrs	r3, r1
 800146c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800146e:	6813      	ldr	r3, [r2, #0]
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	4299      	cmp	r1, r3
 8001476:	d1c2      	bne.n	80013fe <HAL_RCC_ClockConfig+0xa>
 8001478:	e7ca      	b.n	8001410 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800147a:	6862      	ldr	r2, [r4, #4]
 800147c:	4d23      	ldr	r5, [pc, #140]	; (800150c <HAL_RCC_ClockConfig+0x118>)
 800147e:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001480:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001482:	d11b      	bne.n	80014bc <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001484:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001488:	d0b9      	beq.n	80013fe <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800148a:	68ab      	ldr	r3, [r5, #8]
 800148c:	f023 0303 	bic.w	r3, r3, #3
 8001490:	4313      	orrs	r3, r2
 8001492:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8001494:	f7ff f85c 	bl	8000550 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001498:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800149c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149e:	68ab      	ldr	r3, [r5, #8]
 80014a0:	6862      	ldr	r2, [r4, #4]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80014aa:	d0b4      	beq.n	8001416 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ac:	f7ff f850 	bl	8000550 <HAL_GetTick>
 80014b0:	1bc0      	subs	r0, r0, r7
 80014b2:	4540      	cmp	r0, r8
 80014b4:	d9f3      	bls.n	800149e <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 80014b6:	2003      	movs	r0, #3
}
 80014b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014bc:	2a02      	cmp	r2, #2
 80014be:	d102      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014c0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80014c4:	e7e0      	b.n	8001488 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80014c6:	b912      	cbnz	r2, 80014ce <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014c8:	f013 0f02 	tst.w	r3, #2
 80014cc:	e7dc      	b.n	8001488 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014ce:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80014d2:	e7d9      	b.n	8001488 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014d4:	4a0d      	ldr	r2, [pc, #52]	; (800150c <HAL_RCC_ClockConfig+0x118>)
 80014d6:	68a0      	ldr	r0, [r4, #8]
 80014d8:	6893      	ldr	r3, [r2, #8]
 80014da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014de:	4303      	orrs	r3, r0
 80014e0:	6093      	str	r3, [r2, #8]
 80014e2:	e79b      	b.n	800141c <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e4:	6813      	ldr	r3, [r2, #0]
 80014e6:	f023 0307 	bic.w	r3, r3, #7
 80014ea:	4333      	orrs	r3, r6
 80014ec:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ee:	6813      	ldr	r3, [r2, #0]
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	429e      	cmp	r6, r3
 80014f6:	d182      	bne.n	80013fe <HAL_RCC_ClockConfig+0xa>
 80014f8:	e796      	b.n	8001428 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014fa:	68ab      	ldr	r3, [r5, #8]
 80014fc:	68e2      	ldr	r2, [r4, #12]
 80014fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001502:	4313      	orrs	r3, r2
 8001504:	60ab      	str	r3, [r5, #8]
 8001506:	e793      	b.n	8001430 <HAL_RCC_ClockConfig+0x3c>
 8001508:	40022000 	.word	0x40022000
 800150c:	40021000 	.word	0x40021000
 8001510:	080026aa 	.word	0x080026aa
 8001514:	2000001c 	.word	0x2000001c

08001518 <HAL_RCC_GetHCLKFreq>:
}
 8001518:	4b01      	ldr	r3, [pc, #4]	; (8001520 <HAL_RCC_GetHCLKFreq+0x8>)
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	2000001c 	.word	0x2000001c

08001524 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001526:	4a06      	ldr	r2, [pc, #24]	; (8001540 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800152e:	5cd3      	ldrb	r3, [r2, r3]
 8001530:	4a04      	ldr	r2, [pc, #16]	; (8001544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001532:	6810      	ldr	r0, [r2, #0]
 8001534:	f003 031f 	and.w	r3, r3, #31
}
 8001538:	40d8      	lsrs	r0, r3
 800153a:	4770      	bx	lr
 800153c:	40021000 	.word	0x40021000
 8001540:	080026ba 	.word	0x080026ba
 8001544:	2000001c 	.word	0x2000001c

08001548 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_RCC_GetPCLK2Freq+0x18>)
 800154a:	4a06      	ldr	r2, [pc, #24]	; (8001564 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001552:	5cd3      	ldrb	r3, [r2, r3]
 8001554:	4a04      	ldr	r2, [pc, #16]	; (8001568 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001556:	6810      	ldr	r0, [r2, #0]
 8001558:	f003 031f 	and.w	r3, r3, #31
}
 800155c:	40d8      	lsrs	r0, r3
 800155e:	4770      	bx	lr
 8001560:	40021000 	.word	0x40021000
 8001564:	080026ba 	.word	0x080026ba
 8001568:	2000001c 	.word	0x2000001c

0800156c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800156c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800156e:	4b44      	ldr	r3, [pc, #272]	; (8001680 <RCCEx_PLLSAI1_Config+0x114>)
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	f012 0f03 	tst.w	r2, #3
{
 8001576:	4605      	mov	r5, r0
 8001578:	460e      	mov	r6, r1
 800157a:	461c      	mov	r4, r3
 800157c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800157e:	d039      	beq.n	80015f4 <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	f002 0203 	and.w	r2, r2, #3
 8001586:	4282      	cmp	r2, r0
 8001588:	d14b      	bne.n	8001622 <RCCEx_PLLSAI1_Config+0xb6>
       ||
 800158a:	2a00      	cmp	r2, #0
 800158c:	d049      	beq.n	8001622 <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800158e:	68db      	ldr	r3, [r3, #12]
       ||
 8001590:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001592:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001596:	3301      	adds	r3, #1
       ||
 8001598:	4293      	cmp	r3, r2
 800159a:	d142      	bne.n	8001622 <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800159c:	6823      	ldr	r3, [r4, #0]
 800159e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80015a2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015a4:	f7fe ffd4 	bl	8000550 <HAL_GetTick>
 80015a8:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80015aa:	6823      	ldr	r3, [r4, #0]
 80015ac:	011a      	lsls	r2, r3, #4
 80015ae:	d441      	bmi.n	8001634 <RCCEx_PLLSAI1_Config+0xc8>
 80015b0:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80015b2:	2e00      	cmp	r6, #0
 80015b4:	d045      	beq.n	8001642 <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80015b6:	2e01      	cmp	r6, #1
 80015b8:	d14f      	bne.n	800165a <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80015ba:	6922      	ldr	r2, [r4, #16]
 80015bc:	6928      	ldr	r0, [r5, #16]
 80015be:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80015c2:	0840      	lsrs	r0, r0, #1
 80015c4:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80015c8:	3801      	subs	r0, #1
 80015ca:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80015ce:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 80015d2:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80015d4:	6823      	ldr	r3, [r4, #0]
 80015d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015da:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015dc:	f7fe ffb8 	bl	8000550 <HAL_GetTick>
 80015e0:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80015e2:	6823      	ldr	r3, [r4, #0]
 80015e4:	011b      	lsls	r3, r3, #4
 80015e6:	d545      	bpl.n	8001674 <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80015e8:	6923      	ldr	r3, [r4, #16]
 80015ea:	69aa      	ldr	r2, [r5, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	6123      	str	r3, [r4, #16]
 80015f0:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80015f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 80015f4:	2802      	cmp	r0, #2
 80015f6:	d010      	beq.n	800161a <RCCEx_PLLSAI1_Config+0xae>
 80015f8:	2803      	cmp	r0, #3
 80015fa:	d014      	beq.n	8001626 <RCCEx_PLLSAI1_Config+0xba>
 80015fc:	2801      	cmp	r0, #1
 80015fe:	d110      	bne.n	8001622 <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	079f      	lsls	r7, r3, #30
 8001604:	d5f5      	bpl.n	80015f2 <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001606:	68e3      	ldr	r3, [r4, #12]
 8001608:	686a      	ldr	r2, [r5, #4]
 800160a:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800160e:	3a01      	subs	r2, #1
 8001610:	4318      	orrs	r0, r3
 8001612:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001616:	60e0      	str	r0, [r4, #12]
 8001618:	e7c0      	b.n	800159c <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001620:	d1f1      	bne.n	8001606 <RCCEx_PLLSAI1_Config+0x9a>
 8001622:	2001      	movs	r0, #1
 8001624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	0391      	lsls	r1, r2, #14
 800162a:	d4ec      	bmi.n	8001606 <RCCEx_PLLSAI1_Config+0x9a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001632:	e7f5      	b.n	8001620 <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001634:	f7fe ff8c 	bl	8000550 <HAL_GetTick>
 8001638:	1bc0      	subs	r0, r0, r7
 800163a:	2802      	cmp	r0, #2
 800163c:	d9b5      	bls.n	80015aa <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 800163e:	2003      	movs	r0, #3
 8001640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001642:	6922      	ldr	r2, [r4, #16]
 8001644:	68e9      	ldr	r1, [r5, #12]
 8001646:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 800164a:	06c9      	lsls	r1, r1, #27
 800164c:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 8001650:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001654:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001656:	6123      	str	r3, [r4, #16]
 8001658:	e7bc      	b.n	80015d4 <RCCEx_PLLSAI1_Config+0x68>
 800165a:	6923      	ldr	r3, [r4, #16]
 800165c:	6968      	ldr	r0, [r5, #20]
 800165e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001662:	0840      	lsrs	r0, r0, #1
 8001664:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001668:	3801      	subs	r0, #1
 800166a:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800166e:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001672:	e7f0      	b.n	8001656 <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001674:	f7fe ff6c 	bl	8000550 <HAL_GetTick>
 8001678:	1b80      	subs	r0, r0, r6
 800167a:	2802      	cmp	r0, #2
 800167c:	d9b1      	bls.n	80015e2 <RCCEx_PLLSAI1_Config+0x76>
 800167e:	e7de      	b.n	800163e <RCCEx_PLLSAI1_Config+0xd2>
 8001680:	40021000 	.word	0x40021000

08001684 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001684:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001688:	6805      	ldr	r5, [r0, #0]
 800168a:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 800168e:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001690:	d00e      	beq.n	80016b0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001692:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8001694:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001698:	d053      	beq.n	8001742 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800169a:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800169e:	d055      	beq.n	800174c <HAL_RCCEx_PeriphCLKConfig+0xc8>
 80016a0:	2900      	cmp	r1, #0
 80016a2:	d15e      	bne.n	8001762 <HAL_RCCEx_PeriphCLKConfig+0xde>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80016a4:	3004      	adds	r0, #4
 80016a6:	f7ff ff61 	bl	800156c <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 80016aa:	4605      	mov	r5, r0
 80016ac:	2800      	cmp	r0, #0
 80016ae:	d04d      	beq.n	800174c <HAL_RCCEx_PeriphCLKConfig+0xc8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80016b0:	6823      	ldr	r3, [r4, #0]
 80016b2:	039e      	lsls	r6, r3, #14
 80016b4:	d563      	bpl.n	800177e <HAL_RCCEx_PeriphCLKConfig+0xfa>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016b6:	4eb8      	ldr	r6, [pc, #736]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80016b8:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80016ba:	00d8      	lsls	r0, r3, #3
 80016bc:	f140 8160 	bpl.w	8001980 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    FlagStatus       pwrclkchanged = RESET;
 80016c0:	2700      	movs	r7, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016c2:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 800199c <HAL_RCCEx_PeriphCLKConfig+0x318>
 80016c6:	f8d8 3000 	ldr.w	r3, [r8]
 80016ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ce:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 80016d2:	f7fe ff3d 	bl	8000550 <HAL_GetTick>
 80016d6:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80016d8:	f8d8 3000 	ldr.w	r3, [r8]
 80016dc:	05d9      	lsls	r1, r3, #23
 80016de:	d542      	bpl.n	8001766 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    if(ret == HAL_OK)
 80016e0:	2d00      	cmp	r5, #0
 80016e2:	d147      	bne.n	8001774 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80016e4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80016e8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80016ec:	d014      	beq.n	8001718 <HAL_RCCEx_PeriphCLKConfig+0x94>
 80016ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d011      	beq.n	8001718 <HAL_RCCEx_PeriphCLKConfig+0x94>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80016f4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80016f8:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80016fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001700:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001704:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800170c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001710:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001714:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001718:	07da      	lsls	r2, r3, #31
 800171a:	d509      	bpl.n	8001730 <HAL_RCCEx_PeriphCLKConfig+0xac>
        tickstart = HAL_GetTick();
 800171c:	f7fe ff18 	bl	8000550 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001720:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001724:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001726:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800172a:	079b      	lsls	r3, r3, #30
 800172c:	f140 80ff 	bpl.w	800192e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001730:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001734:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800173a:	4313      	orrs	r3, r2
 800173c:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 8001740:	e018      	b.n	8001774 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001742:	4a95      	ldr	r2, [pc, #596]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001744:	68d3      	ldr	r3, [r2, #12]
 8001746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800174a:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800174c:	4a92      	ldr	r2, [pc, #584]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800174e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001750:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001754:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001758:	430b      	orrs	r3, r1
 800175a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800175e:	2500      	movs	r5, #0
 8001760:	e7a6      	b.n	80016b0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 8001762:	2501      	movs	r5, #1
 8001764:	e7a4      	b.n	80016b0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001766:	f7fe fef3 	bl	8000550 <HAL_GetTick>
 800176a:	eba0 0009 	sub.w	r0, r0, r9
 800176e:	2802      	cmp	r0, #2
 8001770:	d9b2      	bls.n	80016d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
        ret = HAL_TIMEOUT;
 8001772:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8001774:	b11f      	cbz	r7, 800177e <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001776:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001778:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800177c:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800177e:	6823      	ldr	r3, [r4, #0]
 8001780:	07df      	lsls	r7, r3, #31
 8001782:	d508      	bpl.n	8001796 <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001784:	4984      	ldr	r1, [pc, #528]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001786:	6a20      	ldr	r0, [r4, #32]
 8001788:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800178c:	f022 0203 	bic.w	r2, r2, #3
 8001790:	4302      	orrs	r2, r0
 8001792:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001796:	079e      	lsls	r6, r3, #30
 8001798:	d508      	bpl.n	80017ac <HAL_RCCEx_PeriphCLKConfig+0x128>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800179a:	497f      	ldr	r1, [pc, #508]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800179c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800179e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80017a2:	f022 020c 	bic.w	r2, r2, #12
 80017a6:	4302      	orrs	r2, r0
 80017a8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80017ac:	0758      	lsls	r0, r3, #29
 80017ae:	d508      	bpl.n	80017c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80017b0:	4979      	ldr	r1, [pc, #484]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80017b2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80017b4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80017b8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80017bc:	4302      	orrs	r2, r0
 80017be:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80017c2:	0719      	lsls	r1, r3, #28
 80017c4:	d508      	bpl.n	80017d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80017c6:	4974      	ldr	r1, [pc, #464]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80017c8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80017ca:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80017ce:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80017d2:	4302      	orrs	r2, r0
 80017d4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80017d8:	069a      	lsls	r2, r3, #26
 80017da:	d508      	bpl.n	80017ee <HAL_RCCEx_PeriphCLKConfig+0x16a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80017dc:	496e      	ldr	r1, [pc, #440]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80017de:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80017e0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80017e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80017e8:	4302      	orrs	r2, r0
 80017ea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80017ee:	059f      	lsls	r7, r3, #22
 80017f0:	d508      	bpl.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80017f2:	4969      	ldr	r1, [pc, #420]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80017f4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80017f6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80017fa:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80017fe:	4302      	orrs	r2, r0
 8001800:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001804:	055e      	lsls	r6, r3, #21
 8001806:	d508      	bpl.n	800181a <HAL_RCCEx_PeriphCLKConfig+0x196>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001808:	4963      	ldr	r1, [pc, #396]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800180a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800180c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001810:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001814:	4302      	orrs	r2, r0
 8001816:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800181a:	0658      	lsls	r0, r3, #25
 800181c:	d508      	bpl.n	8001830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800181e:	495e      	ldr	r1, [pc, #376]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001820:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001822:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001826:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800182a:	4302      	orrs	r2, r0
 800182c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001830:	0619      	lsls	r1, r3, #24
 8001832:	d508      	bpl.n	8001846 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001834:	4958      	ldr	r1, [pc, #352]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001836:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001838:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800183c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001840:	4302      	orrs	r2, r0
 8001842:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001846:	05da      	lsls	r2, r3, #23
 8001848:	d508      	bpl.n	800185c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800184a:	4953      	ldr	r1, [pc, #332]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800184c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800184e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001852:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001856:	4302      	orrs	r2, r0
 8001858:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800185c:	02df      	lsls	r7, r3, #11
 800185e:	d508      	bpl.n	8001872 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001860:	494d      	ldr	r1, [pc, #308]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001862:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001864:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8001868:	f022 0203 	bic.w	r2, r2, #3
 800186c:	4302      	orrs	r2, r0
 800186e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001872:	049e      	lsls	r6, r3, #18
 8001874:	d50f      	bpl.n	8001896 <HAL_RCCEx_PeriphCLKConfig+0x212>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001876:	4a48      	ldr	r2, [pc, #288]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001878:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800187a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800187e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001882:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001884:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800188c:	d157      	bne.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800188e:	68d3      	ldr	r3, [r2, #12]
 8001890:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001894:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001896:	6823      	ldr	r3, [r4, #0]
 8001898:	0318      	lsls	r0, r3, #12
 800189a:	d50f      	bpl.n	80018bc <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800189c:	4a3e      	ldr	r2, [pc, #248]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800189e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80018a0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80018a4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80018a8:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80018aa:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80018ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80018b2:	d14f      	bne.n	8001954 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80018b4:	68d3      	ldr	r3, [r2, #12]
 80018b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018ba:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80018bc:	6823      	ldr	r3, [r4, #0]
 80018be:	0359      	lsls	r1, r3, #13
 80018c0:	d50f      	bpl.n	80018e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80018c2:	4a35      	ldr	r2, [pc, #212]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80018c4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80018c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80018ca:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80018ce:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80018d0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80018d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80018d8:	d147      	bne.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80018da:	68d3      	ldr	r3, [r2, #12]
 80018dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018e0:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80018e2:	6823      	ldr	r3, [r4, #0]
 80018e4:	045a      	lsls	r2, r3, #17
 80018e6:	d512      	bpl.n	800190e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80018e8:	492b      	ldr	r1, [pc, #172]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80018ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80018ec:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80018f0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80018f4:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80018f6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80018fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80018fe:	d106      	bne.n	800190e <HAL_RCCEx_PeriphCLKConfig+0x28a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001900:	2102      	movs	r1, #2
 8001902:	1d20      	adds	r0, r4, #4
 8001904:	f7ff fe32 	bl	800156c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001908:	2800      	cmp	r0, #0
 800190a:	bf18      	it	ne
 800190c:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800190e:	6823      	ldr	r3, [r4, #0]
 8001910:	03db      	lsls	r3, r3, #15
 8001912:	d508      	bpl.n	8001926 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001914:	4a20      	ldr	r2, [pc, #128]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001916:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8001918:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800191c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001920:	430b      	orrs	r3, r1
 8001922:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001926:	4628      	mov	r0, r5
 8001928:	b003      	add	sp, #12
 800192a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192e:	f7fe fe0f 	bl	8000550 <HAL_GetTick>
 8001932:	eba0 0008 	sub.w	r0, r0, r8
 8001936:	4548      	cmp	r0, r9
 8001938:	f67f aef5 	bls.w	8001726 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800193c:	e719      	b.n	8001772 <HAL_RCCEx_PeriphCLKConfig+0xee>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800193e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001942:	d1a8      	bne.n	8001896 <HAL_RCCEx_PeriphCLKConfig+0x212>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001944:	2101      	movs	r1, #1
 8001946:	1d20      	adds	r0, r4, #4
 8001948:	f7ff fe10 	bl	800156c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800194c:	2800      	cmp	r0, #0
 800194e:	bf18      	it	ne
 8001950:	4605      	movne	r5, r0
 8001952:	e7a0      	b.n	8001896 <HAL_RCCEx_PeriphCLKConfig+0x212>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001954:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001958:	d1b0      	bne.n	80018bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800195a:	2101      	movs	r1, #1
 800195c:	1d20      	adds	r0, r4, #4
 800195e:	f7ff fe05 	bl	800156c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001962:	2800      	cmp	r0, #0
 8001964:	bf18      	it	ne
 8001966:	4605      	movne	r5, r0
 8001968:	e7a8      	b.n	80018bc <HAL_RCCEx_PeriphCLKConfig+0x238>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800196a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800196e:	d1b8      	bne.n	80018e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001970:	2101      	movs	r1, #1
 8001972:	1d20      	adds	r0, r4, #4
 8001974:	f7ff fdfa 	bl	800156c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001978:	2800      	cmp	r0, #0
 800197a:	bf18      	it	ne
 800197c:	4605      	movne	r5, r0
 800197e:	e7b0      	b.n	80018e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001980:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001986:	65b3      	str	r3, [r6, #88]	; 0x58
 8001988:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001992:	2701      	movs	r7, #1
 8001994:	e695      	b.n	80016c2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000
 800199c:	40007000 	.word	0x40007000

080019a0 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80019a0:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80019a2:	69c1      	ldr	r1, [r0, #28]
{
 80019a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019a6:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80019a8:	6883      	ldr	r3, [r0, #8]
 80019aa:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80019ac:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80019ae:	4303      	orrs	r3, r0
 80019b0:	6960      	ldr	r0, [r4, #20]
 80019b2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80019b4:	48af      	ldr	r0, [pc, #700]	; (8001c74 <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80019b6:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80019b8:	4028      	ands	r0, r5
 80019ba:	4303      	orrs	r3, r0
 80019bc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019be:	6853      	ldr	r3, [r2, #4]
 80019c0:	68e0      	ldr	r0, [r4, #12]
 80019c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019c6:	4303      	orrs	r3, r0
 80019c8:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80019ca:	4bab      	ldr	r3, [pc, #684]	; (8001c78 <UART_SetConfig+0x2d8>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80019cc:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80019ce:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 80019d0:	bf1c      	itt	ne
 80019d2:	6a23      	ldrne	r3, [r4, #32]
 80019d4:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80019d6:	6893      	ldr	r3, [r2, #8]
 80019d8:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80019dc:	4303      	orrs	r3, r0
 80019de:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019e0:	4ba6      	ldr	r3, [pc, #664]	; (8001c7c <UART_SetConfig+0x2dc>)
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d118      	bne.n	8001a18 <UART_SetConfig+0x78>
 80019e6:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80019ea:	4aa5      	ldr	r2, [pc, #660]	; (8001c80 <UART_SetConfig+0x2e0>)
 80019ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f0:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019f4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80019f8:	5cd3      	ldrb	r3, [r2, r3]
 80019fa:	f040 8123 	bne.w	8001c44 <UART_SetConfig+0x2a4>
  {
    switch (clocksource)
 80019fe:	2b08      	cmp	r3, #8
 8001a00:	d877      	bhi.n	8001af2 <UART_SetConfig+0x152>
 8001a02:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001a06:	0100      	.short	0x0100
 8001a08:	00e200b3 	.word	0x00e200b3
 8001a0c:	011c0076 	.word	0x011c0076
 8001a10:	00760076 	.word	0x00760076
 8001a14:	00360076 	.word	0x00360076
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a18:	4b9a      	ldr	r3, [pc, #616]	; (8001c84 <UART_SetConfig+0x2e4>)
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d107      	bne.n	8001a2e <UART_SetConfig+0x8e>
 8001a1e:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001a22:	4a99      	ldr	r2, [pc, #612]	; (8001c88 <UART_SetConfig+0x2e8>)
 8001a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a28:	f003 030c 	and.w	r3, r3, #12
 8001a2c:	e7e2      	b.n	80019f4 <UART_SetConfig+0x54>
 8001a2e:	4b97      	ldr	r3, [pc, #604]	; (8001c8c <UART_SetConfig+0x2ec>)
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d123      	bne.n	8001a7c <UART_SetConfig+0xdc>
 8001a34:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001a40:	2b10      	cmp	r3, #16
 8001a42:	f000 80f9 	beq.w	8001c38 <UART_SetConfig+0x298>
 8001a46:	d80b      	bhi.n	8001a60 <UART_SetConfig+0xc0>
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80d9 	beq.w	8001c00 <UART_SetConfig+0x260>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a4e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001a52:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001a56:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a5a:	f000 80de 	beq.w	8001c1a <UART_SetConfig+0x27a>
 8001a5e:	e091      	b.n	8001b84 <UART_SetConfig+0x1e4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a60:	2b20      	cmp	r3, #32
 8001a62:	f000 80af 	beq.w	8001bc4 <UART_SetConfig+0x224>
 8001a66:	2b30      	cmp	r3, #48	; 0x30
 8001a68:	d1f1      	bne.n	8001a4e <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a6a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001a6e:	f040 80a1 	bne.w	8001bb4 <UART_SetConfig+0x214>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001a72:	6860      	ldr	r0, [r4, #4]
 8001a74:	0843      	lsrs	r3, r0, #1
 8001a76:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001a7a:	e0ac      	b.n	8001bd6 <UART_SetConfig+0x236>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a7c:	4b84      	ldr	r3, [pc, #528]	; (8001c90 <UART_SetConfig+0x2f0>)
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d11c      	bne.n	8001abc <UART_SetConfig+0x11c>
 8001a82:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8001a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001a8e:	2b40      	cmp	r3, #64	; 0x40
 8001a90:	f000 80af 	beq.w	8001bf2 <UART_SetConfig+0x252>
 8001a94:	d806      	bhi.n	8001aa4 <UART_SetConfig+0x104>
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 80a0 	beq.w	8001bdc <UART_SetConfig+0x23c>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001a9c:	4b76      	ldr	r3, [pc, #472]	; (8001c78 <UART_SetConfig+0x2d8>)
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d1d5      	bne.n	8001a4e <UART_SetConfig+0xae>
 8001aa2:	e026      	b.n	8001af2 <UART_SetConfig+0x152>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001aa4:	2b80      	cmp	r3, #128	; 0x80
 8001aa6:	f000 808a 	beq.w	8001bbe <UART_SetConfig+0x21e>
 8001aaa:	2bc0      	cmp	r3, #192	; 0xc0
 8001aac:	d1f6      	bne.n	8001a9c <UART_SetConfig+0xfc>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001aae:	4b72      	ldr	r3, [pc, #456]	; (8001c78 <UART_SetConfig+0x2d8>)
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d1da      	bne.n	8001a6a <UART_SetConfig+0xca>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001ab4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8001ab8:	2308      	movs	r3, #8
 8001aba:	e015      	b.n	8001ae8 <UART_SetConfig+0x148>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001abc:	4b6e      	ldr	r3, [pc, #440]	; (8001c78 <UART_SetConfig+0x2d8>)
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d1c5      	bne.n	8001a4e <UART_SetConfig+0xae>
 8001ac2:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8001ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad2:	f000 808e 	beq.w	8001bf2 <UART_SetConfig+0x252>
 8001ad6:	d9de      	bls.n	8001a96 <UART_SetConfig+0xf6>
 8001ad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001adc:	d06f      	beq.n	8001bbe <UART_SetConfig+0x21e>
 8001ade:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001ae2:	e7e3      	b.n	8001aac <UART_SetConfig+0x10c>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001ae4:	486b      	ldr	r0, [pc, #428]	; (8001c94 <UART_SetConfig+0x2f4>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8001ae6:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8001ae8:	6862      	ldr	r2, [r4, #4]
 8001aea:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8001aee:	4281      	cmp	r1, r0
 8001af0:	d905      	bls.n	8001afe <UART_SetConfig+0x15e>
        ret = HAL_ERROR;
 8001af2:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001af8:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001afa:	4610      	mov	r0, r2
 8001afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8001afe:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8001b02:	d8f6      	bhi.n	8001af2 <UART_SetConfig+0x152>
        switch (clocksource)
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d82e      	bhi.n	8001b66 <UART_SetConfig+0x1c6>
 8001b08:	e8df f003 	tbb	[pc, r3]
 8001b0c:	2d1c2d05 	.word	0x2d1c2d05
 8001b10:	2d2d2d24 	.word	0x2d2d2d24
 8001b14:	27          	.byte	0x27
 8001b15:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001b16:	f7ff fd05 	bl	8001524 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001b1a:	6862      	ldr	r2, [r4, #4]
 8001b1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b20:	0856      	lsrs	r6, r2, #1
 8001b22:	2700      	movs	r7, #0
 8001b24:	fbe1 6700 	umlal	r6, r7, r1, r0
 8001b28:	2300      	movs	r3, #0
 8001b2a:	4630      	mov	r0, r6
 8001b2c:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001b2e:	f7fe fb51 	bl	80001d4 <__aeabi_uldivmod>
            break;
 8001b32:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001b34:	4b58      	ldr	r3, [pc, #352]	; (8001c98 <UART_SetConfig+0x2f8>)
 8001b36:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8001b3a:	4299      	cmp	r1, r3
 8001b3c:	d8d9      	bhi.n	8001af2 <UART_SetConfig+0x152>
          huart->Instance->BRR = usartdiv;
 8001b3e:	6823      	ldr	r3, [r4, #0]
 8001b40:	60d8      	str	r0, [r3, #12]
 8001b42:	e7d7      	b.n	8001af4 <UART_SetConfig+0x154>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8001b44:	4855      	ldr	r0, [pc, #340]	; (8001c9c <UART_SetConfig+0x2fc>)
 8001b46:	0855      	lsrs	r5, r2, #1
 8001b48:	2300      	movs	r3, #0
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001b4e:	f141 0100 	adc.w	r1, r1, #0
 8001b52:	e7ec      	b.n	8001b2e <UART_SetConfig+0x18e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001b54:	f7ff f9a8 	bl	8000ea8 <HAL_RCC_GetSysClockFreq>
 8001b58:	e7df      	b.n	8001b1a <UART_SetConfig+0x17a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001b5a:	0850      	lsrs	r0, r2, #1
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8001b64:	e7f3      	b.n	8001b4e <UART_SetConfig+0x1ae>
            ret = HAL_ERROR;
 8001b66:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001b68:	2000      	movs	r0, #0
 8001b6a:	e7e3      	b.n	8001b34 <UART_SetConfig+0x194>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001b6c:	f7ff fcec 	bl	8001548 <HAL_RCC_GetPCLK2Freq>
 8001b70:	e04b      	b.n	8001c0a <UART_SetConfig+0x26a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001b72:	f7ff fcd7 	bl	8001524 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001b76:	6862      	ldr	r2, [r4, #4]
 8001b78:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001b7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b80:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001b82:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b84:	f1a3 0010 	sub.w	r0, r3, #16
 8001b88:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001b8c:	4288      	cmp	r0, r1
 8001b8e:	d8b0      	bhi.n	8001af2 <UART_SetConfig+0x152>
      huart->Instance->BRR = usartdiv;
 8001b90:	6821      	ldr	r1, [r4, #0]
 8001b92:	60cb      	str	r3, [r1, #12]
 8001b94:	e7ae      	b.n	8001af4 <UART_SetConfig+0x154>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001b96:	f7ff fcd7 	bl	8001548 <HAL_RCC_GetPCLK2Freq>
 8001b9a:	e7ec      	b.n	8001b76 <UART_SetConfig+0x1d6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001b9c:	6860      	ldr	r0, [r4, #4]
 8001b9e:	0843      	lsrs	r3, r0, #1
 8001ba0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001ba4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001ba8:	fbb3 f3f0 	udiv	r3, r3, r0
 8001bac:	e7e8      	b.n	8001b80 <UART_SetConfig+0x1e0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001bae:	f7ff f97b 	bl	8000ea8 <HAL_RCC_GetSysClockFreq>
 8001bb2:	e7e0      	b.n	8001b76 <UART_SetConfig+0x1d6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001bb4:	6860      	ldr	r0, [r4, #4]
 8001bb6:	0843      	lsrs	r3, r0, #1
 8001bb8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001bbc:	e7f4      	b.n	8001ba8 <UART_SetConfig+0x208>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001bbe:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <UART_SetConfig+0x2d8>)
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d08f      	beq.n	8001ae4 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bc4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001bc8:	d1e8      	bne.n	8001b9c <UART_SetConfig+0x1fc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001bca:	6860      	ldr	r0, [r4, #4]
 8001bcc:	0843      	lsrs	r3, r0, #1
 8001bce:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001bd2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001bd6:	fbb3 f3f0 	udiv	r3, r3, r0
 8001bda:	e01c      	b.n	8001c16 <UART_SetConfig+0x276>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001bdc:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <UART_SetConfig+0x2d8>)
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d10e      	bne.n	8001c00 <UART_SetConfig+0x260>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001be2:	f7ff fc9f 	bl	8001524 <HAL_RCC_GetPCLK1Freq>
        break;
 8001be6:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8001be8:	2800      	cmp	r0, #0
 8001bea:	f47f af7d 	bne.w	8001ae8 <UART_SetConfig+0x148>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	e780      	b.n	8001af4 <UART_SetConfig+0x154>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001bf2:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <UART_SetConfig+0x2d8>)
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d11f      	bne.n	8001c38 <UART_SetConfig+0x298>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001bf8:	f7ff f956 	bl	8000ea8 <HAL_RCC_GetSysClockFreq>
        break;
 8001bfc:	2304      	movs	r3, #4
 8001bfe:	e7f3      	b.n	8001be8 <UART_SetConfig+0x248>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c00:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001c04:	d1b5      	bne.n	8001b72 <UART_SetConfig+0x1d2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001c06:	f7ff fc8d 	bl	8001524 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c0a:	6861      	ldr	r1, [r4, #4]
 8001c0c:	084a      	lsrs	r2, r1, #1
 8001c0e:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c16:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c18:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001c1a:	f1a3 0010 	sub.w	r0, r3, #16
 8001c1e:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001c22:	4288      	cmp	r0, r1
 8001c24:	f63f af65 	bhi.w	8001af2 <UART_SetConfig+0x152>
      brrtemp = usartdiv & 0xFFF0U;
 8001c28:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8001c2c:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001c2e:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001c32:	430b      	orrs	r3, r1
 8001c34:	60c3      	str	r3, [r0, #12]
 8001c36:	e75d      	b.n	8001af4 <UART_SetConfig+0x154>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c38:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001c3c:	d1b7      	bne.n	8001bae <UART_SetConfig+0x20e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c3e:	f7ff f933 	bl	8000ea8 <HAL_RCC_GetSysClockFreq>
 8001c42:	e7e2      	b.n	8001c0a <UART_SetConfig+0x26a>
    switch (clocksource)
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	f63f af54 	bhi.w	8001af2 <UART_SetConfig+0x152>
 8001c4a:	a201      	add	r2, pc, #4	; (adr r2, 8001c50 <UART_SetConfig+0x2b0>)
 8001c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c50:	08001b73 	.word	0x08001b73
 8001c54:	08001b97 	.word	0x08001b97
 8001c58:	08001b9d 	.word	0x08001b9d
 8001c5c:	08001af3 	.word	0x08001af3
 8001c60:	08001baf 	.word	0x08001baf
 8001c64:	08001af3 	.word	0x08001af3
 8001c68:	08001af3 	.word	0x08001af3
 8001c6c:	08001af3 	.word	0x08001af3
 8001c70:	08001bb5 	.word	0x08001bb5
 8001c74:	efff69f3 	.word	0xefff69f3
 8001c78:	40008000 	.word	0x40008000
 8001c7c:	40013800 	.word	0x40013800
 8001c80:	0800268c 	.word	0x0800268c
 8001c84:	40004400 	.word	0x40004400
 8001c88:	08002690 	.word	0x08002690
 8001c8c:	40004800 	.word	0x40004800
 8001c90:	40004c00 	.word	0x40004c00
 8001c94:	00f42400 	.word	0x00f42400
 8001c98:	000ffcff 	.word	0x000ffcff
 8001c9c:	f4240000 	.word	0xf4240000

08001ca0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ca0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ca2:	07da      	lsls	r2, r3, #31
{
 8001ca4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ca6:	d506      	bpl.n	8001cb6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001ca8:	6801      	ldr	r1, [r0, #0]
 8001caa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001cac:	684a      	ldr	r2, [r1, #4]
 8001cae:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001cb2:	4322      	orrs	r2, r4
 8001cb4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001cb6:	079c      	lsls	r4, r3, #30
 8001cb8:	d506      	bpl.n	8001cc8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001cba:	6801      	ldr	r1, [r0, #0]
 8001cbc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001cbe:	684a      	ldr	r2, [r1, #4]
 8001cc0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001cc4:	4322      	orrs	r2, r4
 8001cc6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001cc8:	0759      	lsls	r1, r3, #29
 8001cca:	d506      	bpl.n	8001cda <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001ccc:	6801      	ldr	r1, [r0, #0]
 8001cce:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001cd0:	684a      	ldr	r2, [r1, #4]
 8001cd2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cd6:	4322      	orrs	r2, r4
 8001cd8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001cda:	071a      	lsls	r2, r3, #28
 8001cdc:	d506      	bpl.n	8001cec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001cde:	6801      	ldr	r1, [r0, #0]
 8001ce0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001ce2:	684a      	ldr	r2, [r1, #4]
 8001ce4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ce8:	4322      	orrs	r2, r4
 8001cea:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001cec:	06dc      	lsls	r4, r3, #27
 8001cee:	d506      	bpl.n	8001cfe <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001cf0:	6801      	ldr	r1, [r0, #0]
 8001cf2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001cf4:	688a      	ldr	r2, [r1, #8]
 8001cf6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cfa:	4322      	orrs	r2, r4
 8001cfc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001cfe:	0699      	lsls	r1, r3, #26
 8001d00:	d506      	bpl.n	8001d10 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001d02:	6801      	ldr	r1, [r0, #0]
 8001d04:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001d06:	688a      	ldr	r2, [r1, #8]
 8001d08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d0c:	4322      	orrs	r2, r4
 8001d0e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001d10:	065a      	lsls	r2, r3, #25
 8001d12:	d50f      	bpl.n	8001d34 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001d14:	6801      	ldr	r1, [r0, #0]
 8001d16:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001d18:	684a      	ldr	r2, [r1, #4]
 8001d1a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001d1e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001d20:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001d24:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001d26:	d105      	bne.n	8001d34 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001d28:	684a      	ldr	r2, [r1, #4]
 8001d2a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001d2c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001d30:	4322      	orrs	r2, r4
 8001d32:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001d34:	061b      	lsls	r3, r3, #24
 8001d36:	d506      	bpl.n	8001d46 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001d38:	6802      	ldr	r2, [r0, #0]
 8001d3a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001d3c:	6853      	ldr	r3, [r2, #4]
 8001d3e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001d42:	430b      	orrs	r3, r1
 8001d44:	6053      	str	r3, [r2, #4]
 8001d46:	bd10      	pop	{r4, pc}

08001d48 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d4c:	9d06      	ldr	r5, [sp, #24]
 8001d4e:	4604      	mov	r4, r0
 8001d50:	460f      	mov	r7, r1
 8001d52:	4616      	mov	r6, r2
 8001d54:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d56:	6821      	ldr	r1, [r4, #0]
 8001d58:	69ca      	ldr	r2, [r1, #28]
 8001d5a:	ea37 0302 	bics.w	r3, r7, r2
 8001d5e:	bf0c      	ite	eq
 8001d60:	2201      	moveq	r2, #1
 8001d62:	2200      	movne	r2, #0
 8001d64:	42b2      	cmp	r2, r6
 8001d66:	d002      	beq.n	8001d6e <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001d68:	2000      	movs	r0, #0
}
 8001d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001d6e:	1c6b      	adds	r3, r5, #1
 8001d70:	d0f2      	beq.n	8001d58 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d72:	b99d      	cbnz	r5, 8001d9c <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d74:	6823      	ldr	r3, [r4, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d7c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	f022 0201 	bic.w	r2, r2, #1
 8001d84:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001d86:	2320      	movs	r3, #32
 8001d88:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8001d8c:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8001d90:	2300      	movs	r3, #0
 8001d92:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8001d96:	2003      	movs	r0, #3
 8001d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d9c:	f7fe fbd8 	bl	8000550 <HAL_GetTick>
 8001da0:	eba0 0008 	sub.w	r0, r0, r8
 8001da4:	4285      	cmp	r5, r0
 8001da6:	d2d6      	bcs.n	8001d56 <UART_WaitOnFlagUntilTimeout+0xe>
 8001da8:	e7e4      	b.n	8001d74 <UART_WaitOnFlagUntilTimeout+0x2c>

08001daa <UART_CheckIdleState>:
{
 8001daa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001dac:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dae:	2600      	movs	r6, #0
 8001db0:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8001db2:	f7fe fbcd 	bl	8000550 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001db6:	6823      	ldr	r3, [r4, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001dbc:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001dbe:	d417      	bmi.n	8001df0 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001dc0:	6823      	ldr	r3, [r4, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	075b      	lsls	r3, r3, #29
 8001dc6:	d50a      	bpl.n	8001dde <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001dc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	462b      	mov	r3, r5
 8001dd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f7ff ffb6 	bl	8001d48 <UART_WaitOnFlagUntilTimeout>
 8001ddc:	b9a0      	cbnz	r0, 8001e08 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8001dde:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001de0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001de2:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8001de6:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8001dea:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8001dee:	e00c      	b.n	8001e0a <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001df0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	4632      	mov	r2, r6
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001dfe:	4620      	mov	r0, r4
 8001e00:	f7ff ffa2 	bl	8001d48 <UART_WaitOnFlagUntilTimeout>
 8001e04:	2800      	cmp	r0, #0
 8001e06:	d0db      	beq.n	8001dc0 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001e08:	2003      	movs	r0, #3
}
 8001e0a:	b002      	add	sp, #8
 8001e0c:	bd70      	pop	{r4, r5, r6, pc}

08001e0e <HAL_UART_Init>:
{
 8001e0e:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001e10:	4604      	mov	r4, r0
 8001e12:	b360      	cbz	r0, 8001e6e <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001e14:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8001e18:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e1c:	b91b      	cbnz	r3, 8001e26 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001e1e:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001e22:	f000 fbb5 	bl	8002590 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001e26:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001e28:	2324      	movs	r3, #36	; 0x24
 8001e2a:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8001e2e:	6813      	ldr	r3, [r2, #0]
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e36:	4620      	mov	r0, r4
 8001e38:	f7ff fdb2 	bl	80019a0 <UART_SetConfig>
 8001e3c:	2801      	cmp	r0, #1
 8001e3e:	d016      	beq.n	8001e6e <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e42:	b113      	cbz	r3, 8001e4a <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001e44:	4620      	mov	r0, r4
 8001e46:	f7ff ff2b 	bl	8001ca0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e4a:	6823      	ldr	r3, [r4, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e5a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001e62:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001e64:	601a      	str	r2, [r3, #0]
}
 8001e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001e6a:	f7ff bf9e 	b.w	8001daa <UART_CheckIdleState>
}
 8001e6e:	2001      	movs	r0, #1
 8001e70:	bd10      	pop	{r4, pc}
	...

08001e74 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e74:	4b22      	ldr	r3, [pc, #136]	; (8001f00 <MX_GPIO_Init+0x8c>)
{
 8001e76:	b510      	push	{r4, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e7a:	f042 0204 	orr.w	r2, r2, #4
 8001e7e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 8001e82:	b08a      	sub	sp, #40	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e84:	f002 0204 	and.w	r2, r2, #4
 8001e88:	9201      	str	r2, [sp, #4]
 8001e8a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e92:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e96:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001e9a:	9202      	str	r2, [sp, #8]
 8001e9c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ea0:	f042 0201 	orr.w	r2, r2, #1
 8001ea4:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ea6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ea8:	f002 0201 	and.w	r2, r2, #1
 8001eac:	9203      	str	r2, [sp, #12]
 8001eae:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001eb2:	f042 0202 	orr.w	r2, r2, #2
 8001eb6:	64da      	str	r2, [r3, #76]	; 0x4c
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eba:	f003 0302 	and.w	r3, r3, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001ebe:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec0:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001ec2:	2120      	movs	r1, #32
 8001ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec8:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001eca:	f7fe fc85 	bl	80007d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ece:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 8001ed4:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ed6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <MX_GPIO_Init+0x90>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001eda:	480b      	ldr	r0, [pc, #44]	; (8001f08 <MX_GPIO_Init+0x94>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001edc:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ee0:	f7fe fbb8 	bl	8000654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001ee4:	2320      	movs	r3, #32
 8001ee6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001ee8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eea:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001ef6:	f7fe fbad 	bl	8000654 <HAL_GPIO_Init>

}
 8001efa:	b00a      	add	sp, #40	; 0x28
 8001efc:	bd10      	pop	{r4, pc}
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
 8001f04:	10210000 	.word	0x10210000
 8001f08:	48000800 	.word	0x48000800

08001f0c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f0c:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8001f0e:	4815      	ldr	r0, [pc, #84]	; (8001f64 <MX_I2C1_Init+0x58>)
  hi2c1.Init.Timing = 0x10909CEC;
 8001f10:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <MX_I2C1_Init+0x5c>)
 8001f12:	4916      	ldr	r1, [pc, #88]	; (8001f6c <MX_I2C1_Init+0x60>)
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f14:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x10909CEC;
 8001f16:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c1.Init.OwnAddress1 = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f1e:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f20:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f22:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f24:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f26:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f28:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f2a:	f7fe fd75 	bl	8000a18 <HAL_I2C_Init>
 8001f2e:	b118      	cbz	r0, 8001f38 <MX_I2C1_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001f30:	2142      	movs	r1, #66	; 0x42
 8001f32:	480f      	ldr	r0, [pc, #60]	; (8001f70 <MX_I2C1_Init+0x64>)
 8001f34:	f000 fa8e 	bl	8002454 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f38:	2100      	movs	r1, #0
 8001f3a:	480a      	ldr	r0, [pc, #40]	; (8001f64 <MX_I2C1_Init+0x58>)
 8001f3c:	f7fe fee8 	bl	8000d10 <HAL_I2CEx_ConfigAnalogFilter>
 8001f40:	b118      	cbz	r0, 8001f4a <MX_I2C1_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001f42:	2149      	movs	r1, #73	; 0x49
 8001f44:	480a      	ldr	r0, [pc, #40]	; (8001f70 <MX_I2C1_Init+0x64>)
 8001f46:	f000 fa85 	bl	8002454 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4805      	ldr	r0, [pc, #20]	; (8001f64 <MX_I2C1_Init+0x58>)
 8001f4e:	f7fe ff05 	bl	8000d5c <HAL_I2CEx_ConfigDigitalFilter>
 8001f52:	b128      	cbz	r0, 8001f60 <MX_I2C1_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001f54:	2150      	movs	r1, #80	; 0x50
 8001f56:	4806      	ldr	r0, [pc, #24]	; (8001f70 <MX_I2C1_Init+0x64>)
  }

}
 8001f58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001f5c:	f000 ba7a 	b.w	8002454 <_Error_Handler>
 8001f60:	bd08      	pop	{r3, pc}
 8001f62:	bf00      	nop
 8001f64:	20000068 	.word	0x20000068
 8001f68:	10909cec 	.word	0x10909cec
 8001f6c:	40005400 	.word	0x40005400
 8001f70:	0800269d 	.word	0x0800269d

08001f74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8001f76:	6802      	ldr	r2, [r0, #0]
 8001f78:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <HAL_I2C_MspInit+0x44>)
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d119      	bne.n	8001fb2 <HAL_I2C_MspInit+0x3e>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f82:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f84:	2312      	movs	r3, #18
 8001f86:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f90:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f92:	eb0d 0103 	add.w	r1, sp, r3
 8001f96:	4809      	ldr	r0, [pc, #36]	; (8001fbc <HAL_I2C_MspInit+0x48>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f98:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9a:	f7fe fb5b 	bl	8000654 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f9e:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <HAL_I2C_MspInit+0x4c>)
 8001fa0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fa2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001fa6:	659a      	str	r2, [r3, #88]	; 0x58
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001fb2:	b007      	add	sp, #28
 8001fb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fb8:	40005400 	.word	0x40005400
 8001fbc:	48000400 	.word	0x48000400
 8001fc0:	40021000 	.word	0x40021000

08001fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fc4:	b510      	push	{r4, lr}
 8001fc6:	b0b0      	sub	sp, #192	; 0xc0
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fcc:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001fce:	2210      	movs	r2, #16
 8001fd0:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001fd6:	220a      	movs	r2, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fd8:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001fda:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fdc:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001fde:	2207      	movs	r2, #7
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fe0:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fe2:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fe4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001fe6:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fe8:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fea:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fec:	f7fe ffb0 	bl	8000f50 <HAL_RCC_OscConfig>
 8001ff0:	b100      	cbz	r0, 8001ff4 <SystemClock_Config+0x30>
 8001ff2:	e7fe      	b.n	8001ff2 <SystemClock_Config+0x2e>

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ff4:	220f      	movs	r2, #15
 8001ff6:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ff8:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ffa:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ffc:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ffe:	2104      	movs	r1, #4
 8002000:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002002:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002006:	f7ff f9f5 	bl	80013f4 <HAL_RCC_ClockConfig>
 800200a:	b100      	cbz	r0, 800200e <SystemClock_Config+0x4a>
 800200c:	e7fe      	b.n	800200c <SystemClock_Config+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800200e:	2342      	movs	r3, #66	; 0x42
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002010:	901f      	str	r0, [sp, #124]	; 0x7c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002012:	9023      	str	r0, [sp, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002014:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8002016:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002018:	f7ff fb34 	bl	8001684 <HAL_RCCEx_PeriphCLKConfig>
 800201c:	b100      	cbz	r0, 8002020 <SystemClock_Config+0x5c>
 800201e:	e7fe      	b.n	800201e <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002020:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002024:	f7fe fec8 	bl	8000db8 <HAL_PWREx_ControlVoltageScaling>
 8002028:	4604      	mov	r4, r0
 800202a:	b100      	cbz	r0, 800202e <SystemClock_Config+0x6a>
 800202c:	e7fe      	b.n	800202c <SystemClock_Config+0x68>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800202e:	f7ff fa73 	bl	8001518 <HAL_RCC_GetHCLKFreq>
 8002032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002036:	fbb0 f0f3 	udiv	r0, r0, r3
 800203a:	f7fe fae3 	bl	8000604 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800203e:	2004      	movs	r0, #4
 8002040:	f7fe faf6 	bl	8000630 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002044:	4622      	mov	r2, r4
 8002046:	4621      	mov	r1, r4
 8002048:	f04f 30ff 	mov.w	r0, #4294967295
 800204c:	f7fe faa6 	bl	800059c <HAL_NVIC_SetPriority>
}
 8002050:	b030      	add	sp, #192	; 0xc0
 8002052:	bd10      	pop	{r4, pc}

08002054 <get_register>:

/* USER CODE BEGIN 4 */
void get_register(uint8_t addr_sensor[], uint8_t addr_register[], uint8_t data_register[]){
 8002054:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	  while(HAL_I2C_Master_Transmit(&hi2c1, addr_sensor[0], addr_register, 1, HAL_TIMEOUT) != HAL_OK);
 8002058:	4d10      	ldr	r5, [pc, #64]	; (800209c <get_register+0x48>)
void get_register(uint8_t addr_sensor[], uint8_t addr_register[], uint8_t data_register[]){
 800205a:	4604      	mov	r4, r0
 800205c:	460f      	mov	r7, r1
 800205e:	4616      	mov	r6, r2
	  while(HAL_I2C_Master_Transmit(&hi2c1, addr_sensor[0], addr_register, 1, HAL_TIMEOUT) != HAL_OK);
 8002060:	f04f 0803 	mov.w	r8, #3
 8002064:	7821      	ldrb	r1, [r4, #0]
 8002066:	f8cd 8000 	str.w	r8, [sp]
 800206a:	2301      	movs	r3, #1
 800206c:	463a      	mov	r2, r7
 800206e:	4628      	mov	r0, r5
 8002070:	f7fe fd24 	bl	8000abc <HAL_I2C_Master_Transmit>
 8002074:	2800      	cmp	r0, #0
 8002076:	d1f5      	bne.n	8002064 <get_register+0x10>
	  while(HAL_I2C_Master_Receive(&hi2c1, addr_sensor[0], data_register, 1, HAL_TIMEOUT) != HAL_OK);
 8002078:	4d08      	ldr	r5, [pc, #32]	; (800209c <get_register+0x48>)
 800207a:	2703      	movs	r7, #3
 800207c:	7821      	ldrb	r1, [r4, #0]
 800207e:	9700      	str	r7, [sp, #0]
 8002080:	2301      	movs	r3, #1
 8002082:	4632      	mov	r2, r6
 8002084:	4628      	mov	r0, r5
 8002086:	f7fe fdad 	bl	8000be4 <HAL_I2C_Master_Receive>
 800208a:	2800      	cmp	r0, #0
 800208c:	d1f6      	bne.n	800207c <get_register+0x28>
	  HAL_Delay(100);
 800208e:	2064      	movs	r0, #100	; 0x64
}
 8002090:	b002      	add	sp, #8
 8002092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	  HAL_Delay(100);
 8002096:	f7fe ba61 	b.w	800055c <HAL_Delay>
 800209a:	bf00      	nop
 800209c:	20000068 	.word	0x20000068

080020a0 <get_temp>:

void get_temp(void){
 80020a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	// read register T0_degC_x8
	get_register(addr_sensor, addr_T0_degC_x8, T0_degC_x8);
 80020a4:	4c3f      	ldr	r4, [pc, #252]	; (80021a4 <get_temp+0x104>)
 80020a6:	4e40      	ldr	r6, [pc, #256]	; (80021a8 <get_temp+0x108>)
	// read register T1_degC_x8
	get_register(addr_sensor, addr_T1_degC_x8, T1_degC_x8);
 80020a8:	4d40      	ldr	r5, [pc, #256]	; (80021ac <get_temp+0x10c>)
	// Read register MSB
	get_register(addr_sensor, addr_MSB, MSB);
 80020aa:	4f41      	ldr	r7, [pc, #260]	; (80021b0 <get_temp+0x110>)
	get_register(addr_sensor, addr_T0_degC_x8, T0_degC_x8);
 80020ac:	4941      	ldr	r1, [pc, #260]	; (80021b4 <get_temp+0x114>)
	T1_DegC[0] = T1_degC_x8_u16[0] >> 3;

	// Read register T0_OUT_L
	get_register(addr_sensor, addr_T0_OUT_L, T0_OUT_L);
	// Read register T0_OUT_H
	get_register(addr_sensor, addr_T0_OUT_H, T0_OUT_H);
 80020ae:	f8df 914c 	ldr.w	r9, [pc, #332]	; 80021fc <get_temp+0x15c>
	  T0_OUT[0] = (((uint16_t)T0_OUT_H[0])<<8) + (uint16_t)T0_OUT_L[0];

	// Read register T1_OUT_L
	get_register(addr_sensor, addr_T1_OUT_L, T1_OUT_L);
	// Read register T1_OUT_H
	get_register(addr_sensor, addr_T1_OUT_H, T1_OUT_H);
 80020b2:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8002200 <get_temp+0x160>
	  T0_OUT[0] = (((uint16_t)T0_OUT_H[0])<<8) + (uint16_t)T0_OUT_L[0];
 80020b6:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8002204 <get_temp+0x164>
	get_register(addr_sensor, addr_T0_degC_x8, T0_degC_x8);
 80020ba:	4632      	mov	r2, r6
 80020bc:	4620      	mov	r0, r4
 80020be:	f7ff ffc9 	bl	8002054 <get_register>
	get_register(addr_sensor, addr_T1_degC_x8, T1_degC_x8);
 80020c2:	462a      	mov	r2, r5
 80020c4:	493c      	ldr	r1, [pc, #240]	; (80021b8 <get_temp+0x118>)
 80020c6:	4620      	mov	r0, r4
 80020c8:	f7ff ffc4 	bl	8002054 <get_register>
	get_register(addr_sensor, addr_MSB, MSB);
 80020cc:	463a      	mov	r2, r7
 80020ce:	493b      	ldr	r1, [pc, #236]	; (80021bc <get_temp+0x11c>)
 80020d0:	4620      	mov	r0, r4
 80020d2:	f7ff ffbf 	bl	8002054 <get_register>
	T0_degC_x8_u16[0] = (((uint16_t)(MSB[0] & 0x03)) << 8) + ((uint16_t)T0_degC_x8[0]);
 80020d6:	783b      	ldrb	r3, [r7, #0]
	T1_DegC[0] = T1_degC_x8_u16[0] >> 3;
 80020d8:	4f39      	ldr	r7, [pc, #228]	; (80021c0 <get_temp+0x120>)
	T0_degC_x8_u16[0] = (((uint16_t)(MSB[0] & 0x03)) << 8) + ((uint16_t)T0_degC_x8[0]);
 80020da:	021a      	lsls	r2, r3, #8
 80020dc:	f402 7140 	and.w	r1, r2, #768	; 0x300
 80020e0:	7832      	ldrb	r2, [r6, #0]
	get_register(addr_sensor, addr_T0_OUT_L, T0_OUT_L);
 80020e2:	4e38      	ldr	r6, [pc, #224]	; (80021c4 <get_temp+0x124>)
	T0_degC_x8_u16[0] = (((uint16_t)(MSB[0] & 0x03)) << 8) + ((uint16_t)T0_degC_x8[0]);
 80020e4:	440a      	add	r2, r1
 80020e6:	4938      	ldr	r1, [pc, #224]	; (80021c8 <get_temp+0x128>)
	T1_degC_x8_u16[0] = (((uint16_t)(MSB[0] & 0x0C)) << 6) + ((uint16_t)T1_degC_x8[0]);
 80020e8:	019b      	lsls	r3, r3, #6
	T0_degC_x8_u16[0] = (((uint16_t)(MSB[0] & 0x03)) << 8) + ((uint16_t)T0_degC_x8[0]);
 80020ea:	800a      	strh	r2, [r1, #0]
	T1_degC_x8_u16[0] = (((uint16_t)(MSB[0] & 0x0C)) << 6) + ((uint16_t)T1_degC_x8[0]);
 80020ec:	f403 7140 	and.w	r1, r3, #768	; 0x300
 80020f0:	782b      	ldrb	r3, [r5, #0]
	T0_DegC[0] = T0_degC_x8_u16[0] >> 3;
 80020f2:	4d36      	ldr	r5, [pc, #216]	; (80021cc <get_temp+0x12c>)
	T1_degC_x8_u16[0] = (((uint16_t)(MSB[0] & 0x0C)) << 6) + ((uint16_t)T1_degC_x8[0]);
 80020f4:	440b      	add	r3, r1
 80020f6:	4936      	ldr	r1, [pc, #216]	; (80021d0 <get_temp+0x130>)
	T0_DegC[0] = T0_degC_x8_u16[0] >> 3;
 80020f8:	10d2      	asrs	r2, r2, #3
	T1_degC_x8_u16[0] = (((uint16_t)(MSB[0] & 0x0C)) << 6) + ((uint16_t)T1_degC_x8[0]);
 80020fa:	800b      	strh	r3, [r1, #0]
	T0_DegC[0] = T0_degC_x8_u16[0] >> 3;
 80020fc:	802a      	strh	r2, [r5, #0]
	T1_DegC[0] = T1_degC_x8_u16[0] >> 3;
 80020fe:	10db      	asrs	r3, r3, #3
	get_register(addr_sensor, addr_T0_OUT_L, T0_OUT_L);
 8002100:	4632      	mov	r2, r6
 8002102:	4934      	ldr	r1, [pc, #208]	; (80021d4 <get_temp+0x134>)
	T1_DegC[0] = T1_degC_x8_u16[0] >> 3;
 8002104:	803b      	strh	r3, [r7, #0]
	get_register(addr_sensor, addr_T0_OUT_L, T0_OUT_L);
 8002106:	4620      	mov	r0, r4
 8002108:	f7ff ffa4 	bl	8002054 <get_register>
	get_register(addr_sensor, addr_T0_OUT_H, T0_OUT_H);
 800210c:	464a      	mov	r2, r9
 800210e:	4932      	ldr	r1, [pc, #200]	; (80021d8 <get_temp+0x138>)
 8002110:	4620      	mov	r0, r4
 8002112:	f7ff ff9f 	bl	8002054 <get_register>
	  T0_OUT[0] = (((uint16_t)T0_OUT_H[0])<<8) + (uint16_t)T0_OUT_L[0];
 8002116:	f899 2000 	ldrb.w	r2, [r9]
 800211a:	7833      	ldrb	r3, [r6, #0]
	get_register(addr_sensor, addr_T1_OUT_L, T1_OUT_L);
 800211c:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8002208 <get_temp+0x168>
 8002120:	492e      	ldr	r1, [pc, #184]	; (80021dc <get_temp+0x13c>)

	T1_OUT[0] = (((uint16_t)T1_OUT_H[0])<<8) + (uint16_t)T1_OUT_L[0];
 8002122:	4e2f      	ldr	r6, [pc, #188]	; (80021e0 <get_temp+0x140>)
	  T0_OUT[0] = (((uint16_t)T0_OUT_H[0])<<8) + (uint16_t)T0_OUT_L[0];
 8002124:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	get_register(addr_sensor, addr_T1_OUT_L, T1_OUT_L);
 8002128:	4620      	mov	r0, r4
 800212a:	464a      	mov	r2, r9
	  T0_OUT[0] = (((uint16_t)T0_OUT_H[0])<<8) + (uint16_t)T0_OUT_L[0];
 800212c:	f8a8 3000 	strh.w	r3, [r8]
	get_register(addr_sensor, addr_T1_OUT_L, T1_OUT_L);
 8002130:	f7ff ff90 	bl	8002054 <get_register>
	get_register(addr_sensor, addr_T1_OUT_H, T1_OUT_H);
 8002134:	4652      	mov	r2, sl
 8002136:	492b      	ldr	r1, [pc, #172]	; (80021e4 <get_temp+0x144>)
 8002138:	4620      	mov	r0, r4
 800213a:	f7ff ff8b 	bl	8002054 <get_register>
	T1_OUT[0] = (((uint16_t)T1_OUT_H[0])<<8) + (uint16_t)T1_OUT_L[0];
 800213e:	f89a 2000 	ldrb.w	r2, [sl]
 8002142:	f899 3000 	ldrb.w	r3, [r9]

	// Read register T_OUT_L
	get_register(addr_sensor, addr_T_OUT_L, T_OUT_L);
 8002146:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800220c <get_temp+0x16c>
	// Read register T_OUT_H
	get_register(addr_sensor, addr_T_OUT_H, T_OUT_H);
 800214a:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002210 <get_temp+0x170>
	get_register(addr_sensor, addr_T_OUT_L, T_OUT_L);
 800214e:	4926      	ldr	r1, [pc, #152]	; (80021e8 <get_temp+0x148>)
	T1_OUT[0] = (((uint16_t)T1_OUT_H[0])<<8) + (uint16_t)T1_OUT_L[0];
 8002150:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	get_register(addr_sensor, addr_T_OUT_L, T_OUT_L);
 8002154:	4620      	mov	r0, r4
 8002156:	464a      	mov	r2, r9
	T1_OUT[0] = (((uint16_t)T1_OUT_H[0])<<8) + (uint16_t)T1_OUT_L[0];
 8002158:	8033      	strh	r3, [r6, #0]
	get_register(addr_sensor, addr_T_OUT_L, T_OUT_L);
 800215a:	f7ff ff7b 	bl	8002054 <get_register>
	get_register(addr_sensor, addr_T_OUT_H, T_OUT_H);
 800215e:	4652      	mov	r2, sl
 8002160:	4922      	ldr	r1, [pc, #136]	; (80021ec <get_temp+0x14c>)
 8002162:	4620      	mov	r0, r4
 8002164:	f7ff ff76 	bl	8002054 <get_register>


	  T_OUT[0]=(((uint16_t)T_OUT_H[0])<<8) + (uint16_t)T_OUT_L[0];
 8002168:	f89a 3000 	ldrb.w	r3, [sl]
 800216c:	f899 2000 	ldrb.w	r2, [r9]

	  temp32= (int32_t)(T1_DegC[0]-T0_DegC[0])*(T_OUT[0]-T0_OUT[0]);
 8002170:	f9b5 1000 	ldrsh.w	r1, [r5]
 8002174:	f9b8 0000 	ldrsh.w	r0, [r8]
	  T_OUT[0]=(((uint16_t)T_OUT_H[0])<<8) + (uint16_t)T_OUT_L[0];
 8002178:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 800217c:	4b1c      	ldr	r3, [pc, #112]	; (80021f0 <get_temp+0x150>)
 800217e:	b212      	sxth	r2, r2
 8002180:	801a      	strh	r2, [r3, #0]
	  temp32= (int32_t)(T1_DegC[0]-T0_DegC[0])*(T_OUT[0]-T0_OUT[0]);
 8002182:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002186:	1a12      	subs	r2, r2, r0
 8002188:	1a5b      	subs	r3, r3, r1
 800218a:	4353      	muls	r3, r2
 800218c:	4a19      	ldr	r2, [pc, #100]	; (80021f4 <get_temp+0x154>)
 800218e:	6013      	str	r3, [r2, #0]
	  temp_value = (int16_t)(temp32/(T1_OUT[0] - T0_OUT[0])) + T0_DegC[0];
 8002190:	f9b6 2000 	ldrsh.w	r2, [r6]
 8002194:	1a12      	subs	r2, r2, r0
 8002196:	fb93 f3f2 	sdiv	r3, r3, r2
 800219a:	4a17      	ldr	r2, [pc, #92]	; (80021f8 <get_temp+0x158>)
 800219c:	440b      	add	r3, r1
 800219e:	8013      	strh	r3, [r2, #0]
 80021a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021a4:	20000017 	.word	0x20000017
 80021a8:	20000052 	.word	0x20000052
 80021ac:	2000005c 	.word	0x2000005c
 80021b0:	20000044 	.word	0x20000044
 80021b4:	20000011 	.word	0x20000011
 80021b8:	20000014 	.word	0x20000014
 80021bc:	20000008 	.word	0x20000008
 80021c0:	20000056 	.word	0x20000056
 80021c4:	20000051 	.word	0x20000051
 80021c8:	20000054 	.word	0x20000054
 80021cc:	2000004c 	.word	0x2000004c
 80021d0:	2000005e 	.word	0x2000005e
 80021d4:	20000010 	.word	0x20000010
 80021d8:	2000000f 	.word	0x2000000f
 80021dc:	20000013 	.word	0x20000013
 80021e0:	20000058 	.word	0x20000058
 80021e4:	20000012 	.word	0x20000012
 80021e8:	20000016 	.word	0x20000016
 80021ec:	20000015 	.word	0x20000015
 80021f0:	20000060 	.word	0x20000060
 80021f4:	200000c4 	.word	0x200000c4
 80021f8:	200000c0 	.word	0x200000c0
 80021fc:	20000050 	.word	0x20000050
 8002200:	2000005a 	.word	0x2000005a
 8002204:	2000004e 	.word	0x2000004e
 8002208:	2000005b 	.word	0x2000005b
 800220c:	20000063 	.word	0x20000063
 8002210:	20000062 	.word	0x20000062

08002214 <get_hum>:

}


void get_hum(void){
 8002214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	get_register(addr_sensor, addr_H0_rH_x2, H0_rH_x2);
 8002218:	4c36      	ldr	r4, [pc, #216]	; (80022f4 <get_hum+0xe0>)
 800221a:	4e37      	ldr	r6, [pc, #220]	; (80022f8 <get_hum+0xe4>)

	get_register(addr_sensor, addr_H1_rH_x2, H1_rH_x2);
 800221c:	4d37      	ldr	r5, [pc, #220]	; (80022fc <get_hum+0xe8>)
	get_register(addr_sensor, addr_H0_rH_x2, H0_rH_x2);
 800221e:	4938      	ldr	r1, [pc, #224]	; (8002300 <get_hum+0xec>)

	H0_rH= H0_rH_x2[0]>>2;
 8002220:	f8df 8118 	ldr.w	r8, [pc, #280]	; 800233c <get_hum+0x128>
	H1_rH= H1_rH_x2[0]>>2;

	get_register(addr_sensor, addr_H0_T0_OUT_L, H0_T0_OUT_L);

	get_register(addr_sensor, addr_H0_T0_OUT_H, H0_T0_OUT_H);
 8002224:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8002340 <get_hum+0x12c>
	H0_T0_OUT = (H0_T0_OUT_H[0]<<8) + H0_T0_OUT_L[0];


	get_register(addr_sensor, addr_H1_T0_OUT_L, H1_T0_OUT_L);

	get_register(addr_sensor, addr_H1_T0_OUT_H, H1_T0_OUT_H);
 8002228:	f8df a118 	ldr.w	sl, [pc, #280]	; 8002344 <get_hum+0x130>
	H0_T0_OUT = (H0_T0_OUT_H[0]<<8) + H0_T0_OUT_L[0];
 800222c:	4f35      	ldr	r7, [pc, #212]	; (8002304 <get_hum+0xf0>)
	get_register(addr_sensor, addr_H0_rH_x2, H0_rH_x2);
 800222e:	4632      	mov	r2, r6
 8002230:	4620      	mov	r0, r4
 8002232:	f7ff ff0f 	bl	8002054 <get_register>
	get_register(addr_sensor, addr_H1_rH_x2, H1_rH_x2);
 8002236:	462a      	mov	r2, r5
 8002238:	4933      	ldr	r1, [pc, #204]	; (8002308 <get_hum+0xf4>)
 800223a:	4620      	mov	r0, r4
 800223c:	f7ff ff0a 	bl	8002054 <get_register>
	H0_rH= H0_rH_x2[0]>>2;
 8002240:	7833      	ldrb	r3, [r6, #0]
	H1_rH= H1_rH_x2[0]>>2;
 8002242:	4e32      	ldr	r6, [pc, #200]	; (800230c <get_hum+0xf8>)
	get_register(addr_sensor, addr_H0_T0_OUT_L, H0_T0_OUT_L);
 8002244:	4932      	ldr	r1, [pc, #200]	; (8002310 <get_hum+0xfc>)
	H0_rH= H0_rH_x2[0]>>2;
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	f8a8 3000 	strh.w	r3, [r8]
	H1_rH= H1_rH_x2[0]>>2;
 800224c:	782b      	ldrb	r3, [r5, #0]
	get_register(addr_sensor, addr_H0_T0_OUT_L, H0_T0_OUT_L);
 800224e:	4d31      	ldr	r5, [pc, #196]	; (8002314 <get_hum+0x100>)
	H1_rH= H1_rH_x2[0]>>2;
 8002250:	089b      	lsrs	r3, r3, #2
	get_register(addr_sensor, addr_H0_T0_OUT_L, H0_T0_OUT_L);
 8002252:	462a      	mov	r2, r5
 8002254:	4620      	mov	r0, r4
	H1_rH= H1_rH_x2[0]>>2;
 8002256:	8033      	strh	r3, [r6, #0]
	get_register(addr_sensor, addr_H0_T0_OUT_L, H0_T0_OUT_L);
 8002258:	f7ff fefc 	bl	8002054 <get_register>
	get_register(addr_sensor, addr_H0_T0_OUT_H, H0_T0_OUT_H);
 800225c:	464a      	mov	r2, r9
 800225e:	492e      	ldr	r1, [pc, #184]	; (8002318 <get_hum+0x104>)
 8002260:	4620      	mov	r0, r4
 8002262:	f7ff fef7 	bl	8002054 <get_register>
	H0_T0_OUT = (H0_T0_OUT_H[0]<<8) + H0_T0_OUT_L[0];
 8002266:	f899 2000 	ldrb.w	r2, [r9]
 800226a:	782b      	ldrb	r3, [r5, #0]
	get_register(addr_sensor, addr_H1_T0_OUT_L, H1_T0_OUT_L);
 800226c:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8002348 <get_hum+0x134>
 8002270:	492a      	ldr	r1, [pc, #168]	; (800231c <get_hum+0x108>)

	H1_T0_OUT = (H1_T0_OUT_H[0]<<8) + H1_T0_OUT_L[0];
 8002272:	4d2b      	ldr	r5, [pc, #172]	; (8002320 <get_hum+0x10c>)
	H0_T0_OUT = (H0_T0_OUT_H[0]<<8) + H0_T0_OUT_L[0];
 8002274:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	get_register(addr_sensor, addr_H1_T0_OUT_L, H1_T0_OUT_L);
 8002278:	4620      	mov	r0, r4
 800227a:	464a      	mov	r2, r9
	H0_T0_OUT = (H0_T0_OUT_H[0]<<8) + H0_T0_OUT_L[0];
 800227c:	803b      	strh	r3, [r7, #0]
	get_register(addr_sensor, addr_H1_T0_OUT_L, H1_T0_OUT_L);
 800227e:	f7ff fee9 	bl	8002054 <get_register>
	get_register(addr_sensor, addr_H1_T0_OUT_H, H1_T0_OUT_H);
 8002282:	4652      	mov	r2, sl
 8002284:	4927      	ldr	r1, [pc, #156]	; (8002324 <get_hum+0x110>)
 8002286:	4620      	mov	r0, r4
 8002288:	f7ff fee4 	bl	8002054 <get_register>
	H1_T0_OUT = (H1_T0_OUT_H[0]<<8) + H1_T0_OUT_L[0];
 800228c:	f89a 2000 	ldrb.w	r2, [sl]
 8002290:	f899 3000 	ldrb.w	r3, [r9]


	get_register(addr_sensor, addr_H_T0_OUT_L, H_T0_OUT_L);
 8002294:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 800234c <get_hum+0x138>

	get_register(addr_sensor, addr_H_T0_OUT_H, H_T0_OUT_H);
 8002298:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 8002350 <get_hum+0x13c>
	get_register(addr_sensor, addr_H_T0_OUT_L, H_T0_OUT_L);
 800229c:	4922      	ldr	r1, [pc, #136]	; (8002328 <get_hum+0x114>)
	H1_T0_OUT = (H1_T0_OUT_H[0]<<8) + H1_T0_OUT_L[0];
 800229e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	get_register(addr_sensor, addr_H_T0_OUT_L, H_T0_OUT_L);
 80022a2:	4620      	mov	r0, r4
 80022a4:	464a      	mov	r2, r9
	H1_T0_OUT = (H1_T0_OUT_H[0]<<8) + H1_T0_OUT_L[0];
 80022a6:	802b      	strh	r3, [r5, #0]
	get_register(addr_sensor, addr_H_T0_OUT_L, H_T0_OUT_L);
 80022a8:	f7ff fed4 	bl	8002054 <get_register>
	get_register(addr_sensor, addr_H_T0_OUT_H, H_T0_OUT_H);
 80022ac:	4652      	mov	r2, sl
 80022ae:	491f      	ldr	r1, [pc, #124]	; (800232c <get_hum+0x118>)
 80022b0:	4620      	mov	r0, r4
 80022b2:	f7ff fecf 	bl	8002054 <get_register>

	H_T0_OUT = (H_T0_OUT_H[0]<<8) + H_T0_OUT_L[0];
 80022b6:	f89a 3000 	ldrb.w	r3, [sl]
 80022ba:	f899 2000 	ldrb.w	r2, [r9]

	hum = (H1_rH-H0_rH)*(H_T0_OUT-H0_T0_OUT);
 80022be:	f9b8 1000 	ldrsh.w	r1, [r8]
 80022c2:	f9b7 0000 	ldrsh.w	r0, [r7]
	H_T0_OUT = (H_T0_OUT_H[0]<<8) + H_T0_OUT_L[0];
 80022c6:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 80022ca:	4b19      	ldr	r3, [pc, #100]	; (8002330 <get_hum+0x11c>)
 80022cc:	b212      	sxth	r2, r2
 80022ce:	801a      	strh	r2, [r3, #0]
	hum = (H1_rH-H0_rH)*(H_T0_OUT-H0_T0_OUT);
 80022d0:	f9b6 3000 	ldrsh.w	r3, [r6]
 80022d4:	1a12      	subs	r2, r2, r0
 80022d6:	1a5b      	subs	r3, r3, r1
 80022d8:	4353      	muls	r3, r2
 80022da:	4a16      	ldr	r2, [pc, #88]	; (8002334 <get_hum+0x120>)
 80022dc:	6013      	str	r3, [r2, #0]
	value_hum = (hum/(H1_T0_OUT-H0_T0_OUT))+H0_rH;
 80022de:	f9b5 2000 	ldrsh.w	r2, [r5]
 80022e2:	1a12      	subs	r2, r2, r0
 80022e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80022e8:	4a13      	ldr	r2, [pc, #76]	; (8002338 <get_hum+0x124>)
 80022ea:	440b      	add	r3, r1
 80022ec:	8013      	strh	r3, [r2, #0]
 80022ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022f2:	bf00      	nop
 80022f4:	20000017 	.word	0x20000017
 80022f8:	2000003e 	.word	0x2000003e
 80022fc:	20000041 	.word	0x20000041
 8002300:	20000002 	.word	0x20000002
 8002304:	200000d4 	.word	0x200000d4
 8002308:	20000005 	.word	0x20000005
 800230c:	200000b8 	.word	0x200000b8
 8002310:	20000001 	.word	0x20000001
 8002314:	2000003d 	.word	0x2000003d
 8002318:	20000000 	.word	0x20000000
 800231c:	20000004 	.word	0x20000004
 8002320:	200000ce 	.word	0x200000ce
 8002324:	20000003 	.word	0x20000003
 8002328:	20000007 	.word	0x20000007
 800232c:	20000006 	.word	0x20000006
 8002330:	200000cc 	.word	0x200000cc
 8002334:	200000b4 	.word	0x200000b4
 8002338:	200000be 	.word	0x200000be
 800233c:	200000bc 	.word	0x200000bc
 8002340:	2000003c 	.word	0x2000003c
 8002344:	2000003f 	.word	0x2000003f
 8002348:	20000040 	.word	0x20000040
 800234c:	20000043 	.word	0x20000043
 8002350:	20000042 	.word	0x20000042

08002354 <get_press>:

}

void get_press(void){
 8002354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	get_register(addr_sensor_press, addr_REF_P_H, REF_P_H);
 8002358:	4d24      	ldr	r5, [pc, #144]	; (80023ec <get_press+0x98>)
 800235a:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8002428 <get_press+0xd4>
	get_register(addr_sensor_press, addr_REF_P_L, REF_P_L);
 800235e:	4f24      	ldr	r7, [pc, #144]	; (80023f0 <get_press+0x9c>)
	get_register(addr_sensor_press, addr_REF_P_XL, REF_P_XL);
 8002360:	4e24      	ldr	r6, [pc, #144]	; (80023f4 <get_press+0xa0>)
	get_register(addr_sensor_press, addr_REF_P_H, REF_P_H);
 8002362:	4925      	ldr	r1, [pc, #148]	; (80023f8 <get_press+0xa4>)

	REF_P =  ( ((REF_P_H[0]+0x10)<<16) + (REF_P_L[0]<<8) + (REF_P_XL[0]) );
 8002364:	4c25      	ldr	r4, [pc, #148]	; (80023fc <get_press+0xa8>)
	get_register(addr_sensor_press, addr_REF_P_H, REF_P_H);
 8002366:	4642      	mov	r2, r8
 8002368:	4628      	mov	r0, r5
 800236a:	f7ff fe73 	bl	8002054 <get_register>
	get_register(addr_sensor_press, addr_REF_P_L, REF_P_L);
 800236e:	463a      	mov	r2, r7
 8002370:	4923      	ldr	r1, [pc, #140]	; (8002400 <get_press+0xac>)
 8002372:	4628      	mov	r0, r5
 8002374:	f7ff fe6e 	bl	8002054 <get_register>
	get_register(addr_sensor_press, addr_REF_P_XL, REF_P_XL);
 8002378:	4632      	mov	r2, r6
 800237a:	4922      	ldr	r1, [pc, #136]	; (8002404 <get_press+0xb0>)
 800237c:	4628      	mov	r0, r5
 800237e:	f7ff fe69 	bl	8002054 <get_register>
	REF_P =  ( ((REF_P_H[0]+0x10)<<16) + (REF_P_L[0]<<8) + (REF_P_XL[0]) );
 8002382:	f898 3000 	ldrb.w	r3, [r8]

	get_register(addr_sensor_press, addr_PRESS_OUT_H, P_OUT_H);
 8002386:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800242c <get_press+0xd8>
 800238a:	491f      	ldr	r1, [pc, #124]	; (8002408 <get_press+0xb4>)
	REF_P =  ( ((REF_P_H[0]+0x10)<<16) + (REF_P_L[0]<<8) + (REF_P_XL[0]) );
 800238c:	f103 0210 	add.w	r2, r3, #16
 8002390:	783b      	ldrb	r3, [r7, #0]
	get_register(addr_sensor_press, addr_PRESS_OUT_L, P_OUT_L);
 8002392:	4f1e      	ldr	r7, [pc, #120]	; (800240c <get_press+0xb8>)
	REF_P =  ( ((REF_P_H[0]+0x10)<<16) + (REF_P_L[0]<<8) + (REF_P_XL[0]) );
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 800239a:	7832      	ldrb	r2, [r6, #0]
	get_register(addr_sensor_press, addr_PRESS_OUT_XL, P_OUT_XL);
 800239c:	4e1c      	ldr	r6, [pc, #112]	; (8002410 <get_press+0xbc>)
	REF_P =  ( ((REF_P_H[0]+0x10)<<16) + (REF_P_L[0]<<8) + (REF_P_XL[0]) );
 800239e:	4413      	add	r3, r2
	get_register(addr_sensor_press, addr_PRESS_OUT_H, P_OUT_H);
 80023a0:	4628      	mov	r0, r5
 80023a2:	4642      	mov	r2, r8
	REF_P =  ( ((REF_P_H[0]+0x10)<<16) + (REF_P_L[0]<<8) + (REF_P_XL[0]) );
 80023a4:	6023      	str	r3, [r4, #0]
	get_register(addr_sensor_press, addr_PRESS_OUT_H, P_OUT_H);
 80023a6:	f7ff fe55 	bl	8002054 <get_register>
	get_register(addr_sensor_press, addr_PRESS_OUT_L, P_OUT_L);
 80023aa:	463a      	mov	r2, r7
 80023ac:	4919      	ldr	r1, [pc, #100]	; (8002414 <get_press+0xc0>)
 80023ae:	4628      	mov	r0, r5
 80023b0:	f7ff fe50 	bl	8002054 <get_register>
	get_register(addr_sensor_press, addr_PRESS_OUT_XL, P_OUT_XL);
 80023b4:	4632      	mov	r2, r6
 80023b6:	4918      	ldr	r1, [pc, #96]	; (8002418 <get_press+0xc4>)
 80023b8:	4628      	mov	r0, r5
 80023ba:	f7ff fe4b 	bl	8002054 <get_register>

	//Avec OFFSET Manuel
	//P_OUT = ( ((P_OUT_H[0]+0x10)<<16) + (P_OUT_L[0]<<8) + (P_OUT_XL[0]) );
	//Sans offset
	P_OUT = ( ((P_OUT_H[0])<<16) + (P_OUT_L[0]<<8) + (P_OUT_XL[0]) );
 80023be:	783b      	ldrb	r3, [r7, #0]
 80023c0:	f898 2000 	ldrb.w	r2, [r8]
 80023c4:	021b      	lsls	r3, r3, #8
 80023c6:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 80023ca:	7832      	ldrb	r2, [r6, #0]
 80023cc:	4413      	add	r3, r2
 80023ce:	4a13      	ldr	r2, [pc, #76]	; (800241c <get_press+0xc8>)
 80023d0:	6013      	str	r3, [r2, #0]
	//Probleme d'offset : verifier avec la valeur de reference si elle n'en est pas a l'origine
	press32 = P_OUT + REF_P;
 80023d2:	6822      	ldr	r2, [r4, #0]
 80023d4:	4413      	add	r3, r2
 80023d6:	4a12      	ldr	r2, [pc, #72]	; (8002420 <get_press+0xcc>)
 80023d8:	6013      	str	r3, [r2, #0]

	value_press = press32/4096;
 80023da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023de:	fb93 f3f2 	sdiv	r3, r3, r2
 80023e2:	4a10      	ldr	r2, [pc, #64]	; (8002424 <get_press+0xd0>)
 80023e4:	8013      	strh	r3, [r2, #0]
 80023e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023ea:	bf00      	nop
 80023ec:	20000018 	.word	0x20000018
 80023f0:	20000049 	.word	0x20000049
 80023f4:	2000004a 	.word	0x2000004a
 80023f8:	2000000c 	.word	0x2000000c
 80023fc:	200000c8 	.word	0x200000c8
 8002400:	2000000d 	.word	0x2000000d
 8002404:	2000000e 	.word	0x2000000e
 8002408:	20000009 	.word	0x20000009
 800240c:	20000046 	.word	0x20000046
 8002410:	20000047 	.word	0x20000047
 8002414:	2000000a 	.word	0x2000000a
 8002418:	2000000b 	.word	0x2000000b
 800241c:	200000d0 	.word	0x200000d0
 8002420:	200000d8 	.word	0x200000d8
 8002424:	200000c2 	.word	0x200000c2
 8002428:	20000048 	.word	0x20000048
 800242c:	20000045 	.word	0x20000045

08002430 <main>:
{
 8002430:	b508      	push	{r3, lr}
  HAL_Init();
 8002432:	f7fe f86f 	bl	8000514 <HAL_Init>
  SystemClock_Config();
 8002436:	f7ff fdc5 	bl	8001fc4 <SystemClock_Config>
  MX_GPIO_Init();
 800243a:	f7ff fd1b 	bl	8001e74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800243e:	f000 f885 	bl	800254c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002442:	f7ff fd63 	bl	8001f0c <MX_I2C1_Init>
	  get_temp();
 8002446:	f7ff fe2b 	bl	80020a0 <get_temp>
	  get_hum();
 800244a:	f7ff fee3 	bl	8002214 <get_hum>
	  get_press();
 800244e:	f7ff ff81 	bl	8002354 <get_press>
 8002452:	e7f8      	b.n	8002446 <main+0x16>

08002454 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002454:	e7fe      	b.n	8002454 <_Error_Handler>
	...

08002458 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002458:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <HAL_MspInit+0x88>)
{
 800245a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	661a      	str	r2, [r3, #96]	; 0x60
 8002464:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002466:	f002 0201 	and.w	r2, r2, #1
 800246a:	9200      	str	r2, [sp, #0]
 800246c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800246e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002470:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002474:	659a      	str	r2, [r3, #88]	; 0x58
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247c:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800247e:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8002480:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002482:	f7fe f879 	bl	8000578 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002486:	2200      	movs	r2, #0
 8002488:	4611      	mov	r1, r2
 800248a:	f06f 000b 	mvn.w	r0, #11
 800248e:	f7fe f885 	bl	800059c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002492:	2200      	movs	r2, #0
 8002494:	4611      	mov	r1, r2
 8002496:	f06f 000a 	mvn.w	r0, #10
 800249a:	f7fe f87f 	bl	800059c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	4611      	mov	r1, r2
 80024a2:	f06f 0009 	mvn.w	r0, #9
 80024a6:	f7fe f879 	bl	800059c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80024aa:	2200      	movs	r2, #0
 80024ac:	4611      	mov	r1, r2
 80024ae:	f06f 0004 	mvn.w	r0, #4
 80024b2:	f7fe f873 	bl	800059c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80024b6:	2200      	movs	r2, #0
 80024b8:	4611      	mov	r1, r2
 80024ba:	f06f 0003 	mvn.w	r0, #3
 80024be:	f7fe f86d 	bl	800059c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80024c2:	2200      	movs	r2, #0
 80024c4:	4611      	mov	r1, r2
 80024c6:	f06f 0001 	mvn.w	r0, #1
 80024ca:	f7fe f867 	bl	800059c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80024ce:	2200      	movs	r2, #0
 80024d0:	4611      	mov	r1, r2
 80024d2:	f04f 30ff 	mov.w	r0, #4294967295
 80024d6:	f7fe f861 	bl	800059c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024da:	b003      	add	sp, #12
 80024dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80024e0:	40021000 	.word	0x40021000

080024e4 <NMI_Handler>:
 80024e4:	4770      	bx	lr

080024e6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80024e6:	e7fe      	b.n	80024e6 <HardFault_Handler>

080024e8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80024e8:	e7fe      	b.n	80024e8 <MemManage_Handler>

080024ea <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80024ea:	e7fe      	b.n	80024ea <BusFault_Handler>

080024ec <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80024ec:	e7fe      	b.n	80024ec <UsageFault_Handler>

080024ee <SVC_Handler>:
 80024ee:	4770      	bx	lr

080024f0 <DebugMon_Handler>:
 80024f0:	4770      	bx	lr

080024f2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80024f2:	4770      	bx	lr

080024f4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80024f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024f6:	f7fe f823 	bl	8000540 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80024fe:	f7fe b8a4 	b.w	800064a <HAL_SYSTICK_IRQHandler>
	...

08002504 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002504:	490f      	ldr	r1, [pc, #60]	; (8002544 <SystemInit+0x40>)
 8002506:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800250a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800250e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002512:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <SystemInit+0x44>)
 8002514:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002516:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8002518:	f042 0201 	orr.w	r2, r2, #1
 800251c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 800251e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8002526:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800252a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800252c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002530:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002538:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800253a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800253c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002540:	608b      	str	r3, [r1, #8]
 8002542:	4770      	bx	lr
 8002544:	e000ed00 	.word	0xe000ed00
 8002548:	40021000 	.word	0x40021000

0800254c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800254c:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 800254e:	480d      	ldr	r0, [pc, #52]	; (8002584 <MX_USART2_UART_Init+0x38>)
  huart2.Init.BaudRate = 115200;
 8002550:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <MX_USART2_UART_Init+0x3c>)
 8002552:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8002556:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800255a:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800255c:	2300      	movs	r3, #0
 800255e:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002560:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002562:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002564:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002566:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002568:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800256a:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800256c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800256e:	f7ff fc4e 	bl	8001e0e <HAL_UART_Init>
 8002572:	b128      	cbz	r0, 8002580 <MX_USART2_UART_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002574:	2144      	movs	r1, #68	; 0x44
 8002576:	4805      	ldr	r0, [pc, #20]	; (800258c <MX_USART2_UART_Init+0x40>)
  }

}
 8002578:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800257c:	f7ff bf6a 	b.w	8002454 <_Error_Handler>
 8002580:	bd08      	pop	{r3, pc}
 8002582:	bf00      	nop
 8002584:	200000dc 	.word	0x200000dc
 8002588:	40004400 	.word	0x40004400
 800258c:	080026f4 	.word	0x080026f4

08002590 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002590:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8002592:	6802      	ldr	r2, [r0, #0]
 8002594:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <HAL_UART_MspInit+0x44>)
 8002596:	429a      	cmp	r2, r3
 8002598:	d119      	bne.n	80025ce <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800259a:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259e:	a901      	add	r1, sp, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80025a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025a2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80025a6:	659a      	str	r2, [r3, #88]	; 0x58
 80025a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80025b2:	230c      	movs	r3, #12
 80025b4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b6:	2302      	movs	r3, #2
 80025b8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025be:	2303      	movs	r3, #3
 80025c0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025c6:	2307      	movs	r3, #7
 80025c8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ca:	f7fe f843 	bl	8000654 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80025ce:	b007      	add	sp, #28
 80025d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80025d4:	40004400 	.word	0x40004400

080025d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80025d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002610 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80025dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80025de:	e003      	b.n	80025e8 <LoopCopyDataInit>

080025e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80025e0:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80025e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80025e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80025e6:	3104      	adds	r1, #4

080025e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80025e8:	480b      	ldr	r0, [pc, #44]	; (8002618 <LoopForever+0xa>)
	ldr	r3, =_edata
 80025ea:	4b0c      	ldr	r3, [pc, #48]	; (800261c <LoopForever+0xe>)
	adds	r2, r0, r1
 80025ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80025ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80025f0:	d3f6      	bcc.n	80025e0 <CopyDataInit>
	ldr	r2, =_sbss
 80025f2:	4a0b      	ldr	r2, [pc, #44]	; (8002620 <LoopForever+0x12>)
	b	LoopFillZerobss
 80025f4:	e002      	b.n	80025fc <LoopFillZerobss>

080025f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80025f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80025f8:	f842 3b04 	str.w	r3, [r2], #4

080025fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <LoopForever+0x16>)
	cmp	r2, r3
 80025fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002600:	d3f9      	bcc.n	80025f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002602:	f7ff ff7f 	bl	8002504 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002606:	f000 f811 	bl	800262c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800260a:	f7ff ff11 	bl	8002430 <main>

0800260e <LoopForever>:

LoopForever:
    b LoopForever
 800260e:	e7fe      	b.n	800260e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002610:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8002614:	08002714 	.word	0x08002714
	ldr	r0, =_sdata
 8002618:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800261c:	20000020 	.word	0x20000020
	ldr	r2, =_sbss
 8002620:	20000020 	.word	0x20000020
	ldr	r3, = _ebss
 8002624:	20000154 	.word	0x20000154

08002628 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002628:	e7fe      	b.n	8002628 <ADC1_IRQHandler>
	...

0800262c <__libc_init_array>:
 800262c:	b570      	push	{r4, r5, r6, lr}
 800262e:	4e0d      	ldr	r6, [pc, #52]	; (8002664 <__libc_init_array+0x38>)
 8002630:	4c0d      	ldr	r4, [pc, #52]	; (8002668 <__libc_init_array+0x3c>)
 8002632:	1ba4      	subs	r4, r4, r6
 8002634:	10a4      	asrs	r4, r4, #2
 8002636:	2500      	movs	r5, #0
 8002638:	42a5      	cmp	r5, r4
 800263a:	d109      	bne.n	8002650 <__libc_init_array+0x24>
 800263c:	4e0b      	ldr	r6, [pc, #44]	; (800266c <__libc_init_array+0x40>)
 800263e:	4c0c      	ldr	r4, [pc, #48]	; (8002670 <__libc_init_array+0x44>)
 8002640:	f000 f818 	bl	8002674 <_init>
 8002644:	1ba4      	subs	r4, r4, r6
 8002646:	10a4      	asrs	r4, r4, #2
 8002648:	2500      	movs	r5, #0
 800264a:	42a5      	cmp	r5, r4
 800264c:	d105      	bne.n	800265a <__libc_init_array+0x2e>
 800264e:	bd70      	pop	{r4, r5, r6, pc}
 8002650:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002654:	4798      	blx	r3
 8002656:	3501      	adds	r5, #1
 8002658:	e7ee      	b.n	8002638 <__libc_init_array+0xc>
 800265a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800265e:	4798      	blx	r3
 8002660:	3501      	adds	r5, #1
 8002662:	e7f2      	b.n	800264a <__libc_init_array+0x1e>
 8002664:	0800270c 	.word	0x0800270c
 8002668:	0800270c 	.word	0x0800270c
 800266c:	0800270c 	.word	0x0800270c
 8002670:	08002710 	.word	0x08002710

08002674 <_init>:
 8002674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002676:	bf00      	nop
 8002678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800267a:	bc08      	pop	{r3}
 800267c:	469e      	mov	lr, r3
 800267e:	4770      	bx	lr

08002680 <_fini>:
 8002680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002682:	bf00      	nop
 8002684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002686:	bc08      	pop	{r3}
 8002688:	469e      	mov	lr, r3
 800268a:	4770      	bx	lr
