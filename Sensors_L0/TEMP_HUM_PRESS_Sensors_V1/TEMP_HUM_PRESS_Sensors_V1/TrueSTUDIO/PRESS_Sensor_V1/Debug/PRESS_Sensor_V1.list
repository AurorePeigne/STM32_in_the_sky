
PRESS_Sensor_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000253c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080025fc  080025fc  000125fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002658  08002658  00012658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002660  08002660  00012660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002664  08002664  00012664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000020  20000000  08002668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000012c  20000020  08002688  00020020  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000014c  08002688  0002014c  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .debug_line   00005810  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000130c5  00000000  00000000  00025858  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000025ab  00000000  00000000  0003891d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000810  00000000  00000000  0003aec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000980  00000000  00000000  0003b6d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000322a  00000000  00000000  0003c058  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003f282  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001714  00000000  00000000  0003f300  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00006026  00000000  00000000  00040a14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080025e4 	.word	0x080025e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	080025e4 	.word	0x080025e4

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	1c08      	adds	r0, r1, #0
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	; (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f806 	bl	8000448 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__udivmoddi4>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	4657      	mov	r7, sl
 800044c:	464e      	mov	r6, r9
 800044e:	4645      	mov	r5, r8
 8000450:	46de      	mov	lr, fp
 8000452:	b5e0      	push	{r5, r6, r7, lr}
 8000454:	0004      	movs	r4, r0
 8000456:	b083      	sub	sp, #12
 8000458:	000d      	movs	r5, r1
 800045a:	4692      	mov	sl, r2
 800045c:	4699      	mov	r9, r3
 800045e:	428b      	cmp	r3, r1
 8000460:	d82f      	bhi.n	80004c2 <__udivmoddi4+0x7a>
 8000462:	d02c      	beq.n	80004be <__udivmoddi4+0x76>
 8000464:	4649      	mov	r1, r9
 8000466:	4650      	mov	r0, sl
 8000468:	f000 f8ae 	bl	80005c8 <__clzdi2>
 800046c:	0029      	movs	r1, r5
 800046e:	0006      	movs	r6, r0
 8000470:	0020      	movs	r0, r4
 8000472:	f000 f8a9 	bl	80005c8 <__clzdi2>
 8000476:	1a33      	subs	r3, r6, r0
 8000478:	4698      	mov	r8, r3
 800047a:	3b20      	subs	r3, #32
 800047c:	469b      	mov	fp, r3
 800047e:	d500      	bpl.n	8000482 <__udivmoddi4+0x3a>
 8000480:	e074      	b.n	800056c <__udivmoddi4+0x124>
 8000482:	4653      	mov	r3, sl
 8000484:	465a      	mov	r2, fp
 8000486:	4093      	lsls	r3, r2
 8000488:	001f      	movs	r7, r3
 800048a:	4653      	mov	r3, sl
 800048c:	4642      	mov	r2, r8
 800048e:	4093      	lsls	r3, r2
 8000490:	001e      	movs	r6, r3
 8000492:	42af      	cmp	r7, r5
 8000494:	d829      	bhi.n	80004ea <__udivmoddi4+0xa2>
 8000496:	d026      	beq.n	80004e6 <__udivmoddi4+0x9e>
 8000498:	465b      	mov	r3, fp
 800049a:	1ba4      	subs	r4, r4, r6
 800049c:	41bd      	sbcs	r5, r7
 800049e:	2b00      	cmp	r3, #0
 80004a0:	da00      	bge.n	80004a4 <__udivmoddi4+0x5c>
 80004a2:	e079      	b.n	8000598 <__udivmoddi4+0x150>
 80004a4:	2200      	movs	r2, #0
 80004a6:	2300      	movs	r3, #0
 80004a8:	9200      	str	r2, [sp, #0]
 80004aa:	9301      	str	r3, [sp, #4]
 80004ac:	2301      	movs	r3, #1
 80004ae:	465a      	mov	r2, fp
 80004b0:	4093      	lsls	r3, r2
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	2301      	movs	r3, #1
 80004b6:	4642      	mov	r2, r8
 80004b8:	4093      	lsls	r3, r2
 80004ba:	9300      	str	r3, [sp, #0]
 80004bc:	e019      	b.n	80004f2 <__udivmoddi4+0xaa>
 80004be:	4282      	cmp	r2, r0
 80004c0:	d9d0      	bls.n	8000464 <__udivmoddi4+0x1c>
 80004c2:	2200      	movs	r2, #0
 80004c4:	2300      	movs	r3, #0
 80004c6:	9200      	str	r2, [sp, #0]
 80004c8:	9301      	str	r3, [sp, #4]
 80004ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <__udivmoddi4+0x8c>
 80004d0:	601c      	str	r4, [r3, #0]
 80004d2:	605d      	str	r5, [r3, #4]
 80004d4:	9800      	ldr	r0, [sp, #0]
 80004d6:	9901      	ldr	r1, [sp, #4]
 80004d8:	b003      	add	sp, #12
 80004da:	bc3c      	pop	{r2, r3, r4, r5}
 80004dc:	4690      	mov	r8, r2
 80004de:	4699      	mov	r9, r3
 80004e0:	46a2      	mov	sl, r4
 80004e2:	46ab      	mov	fp, r5
 80004e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e6:	42a3      	cmp	r3, r4
 80004e8:	d9d6      	bls.n	8000498 <__udivmoddi4+0x50>
 80004ea:	2200      	movs	r2, #0
 80004ec:	2300      	movs	r3, #0
 80004ee:	9200      	str	r2, [sp, #0]
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	4643      	mov	r3, r8
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d0e8      	beq.n	80004ca <__udivmoddi4+0x82>
 80004f8:	07fb      	lsls	r3, r7, #31
 80004fa:	0872      	lsrs	r2, r6, #1
 80004fc:	431a      	orrs	r2, r3
 80004fe:	4646      	mov	r6, r8
 8000500:	087b      	lsrs	r3, r7, #1
 8000502:	e00e      	b.n	8000522 <__udivmoddi4+0xda>
 8000504:	42ab      	cmp	r3, r5
 8000506:	d101      	bne.n	800050c <__udivmoddi4+0xc4>
 8000508:	42a2      	cmp	r2, r4
 800050a:	d80c      	bhi.n	8000526 <__udivmoddi4+0xde>
 800050c:	1aa4      	subs	r4, r4, r2
 800050e:	419d      	sbcs	r5, r3
 8000510:	2001      	movs	r0, #1
 8000512:	1924      	adds	r4, r4, r4
 8000514:	416d      	adcs	r5, r5
 8000516:	2100      	movs	r1, #0
 8000518:	3e01      	subs	r6, #1
 800051a:	1824      	adds	r4, r4, r0
 800051c:	414d      	adcs	r5, r1
 800051e:	2e00      	cmp	r6, #0
 8000520:	d006      	beq.n	8000530 <__udivmoddi4+0xe8>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d9ee      	bls.n	8000504 <__udivmoddi4+0xbc>
 8000526:	3e01      	subs	r6, #1
 8000528:	1924      	adds	r4, r4, r4
 800052a:	416d      	adcs	r5, r5
 800052c:	2e00      	cmp	r6, #0
 800052e:	d1f8      	bne.n	8000522 <__udivmoddi4+0xda>
 8000530:	465b      	mov	r3, fp
 8000532:	9800      	ldr	r0, [sp, #0]
 8000534:	9901      	ldr	r1, [sp, #4]
 8000536:	1900      	adds	r0, r0, r4
 8000538:	4169      	adcs	r1, r5
 800053a:	2b00      	cmp	r3, #0
 800053c:	db22      	blt.n	8000584 <__udivmoddi4+0x13c>
 800053e:	002b      	movs	r3, r5
 8000540:	465a      	mov	r2, fp
 8000542:	40d3      	lsrs	r3, r2
 8000544:	002a      	movs	r2, r5
 8000546:	4644      	mov	r4, r8
 8000548:	40e2      	lsrs	r2, r4
 800054a:	001c      	movs	r4, r3
 800054c:	465b      	mov	r3, fp
 800054e:	0015      	movs	r5, r2
 8000550:	2b00      	cmp	r3, #0
 8000552:	db2c      	blt.n	80005ae <__udivmoddi4+0x166>
 8000554:	0026      	movs	r6, r4
 8000556:	409e      	lsls	r6, r3
 8000558:	0033      	movs	r3, r6
 800055a:	0026      	movs	r6, r4
 800055c:	4647      	mov	r7, r8
 800055e:	40be      	lsls	r6, r7
 8000560:	0032      	movs	r2, r6
 8000562:	1a80      	subs	r0, r0, r2
 8000564:	4199      	sbcs	r1, r3
 8000566:	9000      	str	r0, [sp, #0]
 8000568:	9101      	str	r1, [sp, #4]
 800056a:	e7ae      	b.n	80004ca <__udivmoddi4+0x82>
 800056c:	4642      	mov	r2, r8
 800056e:	2320      	movs	r3, #32
 8000570:	1a9b      	subs	r3, r3, r2
 8000572:	4652      	mov	r2, sl
 8000574:	40da      	lsrs	r2, r3
 8000576:	4641      	mov	r1, r8
 8000578:	0013      	movs	r3, r2
 800057a:	464a      	mov	r2, r9
 800057c:	408a      	lsls	r2, r1
 800057e:	0017      	movs	r7, r2
 8000580:	431f      	orrs	r7, r3
 8000582:	e782      	b.n	800048a <__udivmoddi4+0x42>
 8000584:	4642      	mov	r2, r8
 8000586:	2320      	movs	r3, #32
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	002a      	movs	r2, r5
 800058c:	4646      	mov	r6, r8
 800058e:	409a      	lsls	r2, r3
 8000590:	0023      	movs	r3, r4
 8000592:	40f3      	lsrs	r3, r6
 8000594:	4313      	orrs	r3, r2
 8000596:	e7d5      	b.n	8000544 <__udivmoddi4+0xfc>
 8000598:	4642      	mov	r2, r8
 800059a:	2320      	movs	r3, #32
 800059c:	2100      	movs	r1, #0
 800059e:	1a9b      	subs	r3, r3, r2
 80005a0:	2200      	movs	r2, #0
 80005a2:	9100      	str	r1, [sp, #0]
 80005a4:	9201      	str	r2, [sp, #4]
 80005a6:	2201      	movs	r2, #1
 80005a8:	40da      	lsrs	r2, r3
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	e782      	b.n	80004b4 <__udivmoddi4+0x6c>
 80005ae:	4642      	mov	r2, r8
 80005b0:	2320      	movs	r3, #32
 80005b2:	0026      	movs	r6, r4
 80005b4:	1a9b      	subs	r3, r3, r2
 80005b6:	40de      	lsrs	r6, r3
 80005b8:	002f      	movs	r7, r5
 80005ba:	46b4      	mov	ip, r6
 80005bc:	4097      	lsls	r7, r2
 80005be:	4666      	mov	r6, ip
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7c9      	b.n	800055a <__udivmoddi4+0x112>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	1c08      	adds	r0, r1, #0
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800061c:	480d      	ldr	r0, [pc, #52]	; (8000654 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800061e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000620:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000622:	e003      	b.n	800062c <LoopCopyDataInit>

08000624 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000626:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000628:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800062a:	3104      	adds	r1, #4

0800062c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800062c:	480b      	ldr	r0, [pc, #44]	; (800065c <LoopForever+0xa>)
  ldr  r3, =_edata
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000630:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000632:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000634:	d3f6      	bcc.n	8000624 <CopyDataInit>
  ldr  r2, =_sbss
 8000636:	4a0b      	ldr	r2, [pc, #44]	; (8000664 <LoopForever+0x12>)
  b  LoopFillZerobss
 8000638:	e002      	b.n	8000640 <LoopFillZerobss>

0800063a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800063a:	2300      	movs	r3, #0
  str  r3, [r2]
 800063c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800063e:	3204      	adds	r2, #4

08000640 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <LoopForever+0x16>)
  cmp  r2, r3
 8000642:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000644:	d3f9      	bcc.n	800063a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000646:	f000 fb4b 	bl	8000ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800064a:	f001 ffa7 	bl	800259c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800064e:	f000 fac9 	bl	8000be4 <main>

08000652 <LoopForever>:

LoopForever:
    b LoopForever
 8000652:	e7fe      	b.n	8000652 <LoopForever>
   ldr   r0, =_estack
 8000654:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8000658:	08002668 	.word	0x08002668
  ldr  r0, =_sdata
 800065c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000660:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 8000664:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 8000668:	2000014c 	.word	0x2000014c

0800066c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800066c:	e7fe      	b.n	800066c <ADC1_COMP_IRQHandler>
	...

08000670 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000670:	2004      	movs	r0, #4
 8000672:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <MX_GPIO_Init+0x80>)
{
 8000674:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000676:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000678:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067a:	4301      	orrs	r1, r0
 800067c:	62d9      	str	r1, [r3, #44]	; 0x2c
 800067e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
{
 8000680:	b08a      	sub	sp, #40	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000682:	4002      	ands	r2, r0
 8000684:	9201      	str	r2, [sp, #4]
 8000686:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000688:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800068a:	307c      	adds	r0, #124	; 0x7c
 800068c:	4301      	orrs	r1, r0
 800068e:	62d9      	str	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000690:	2102      	movs	r1, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000692:	26a0      	movs	r6, #160	; 0xa0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000696:	05f6      	lsls	r6, r6, #23
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000698:	4002      	ands	r2, r0
 800069a:	9202      	str	r2, [sp, #8]
 800069c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006a0:	0030      	movs	r0, r6
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	432a      	orrs	r2, r5
 80006a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80006a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	402a      	ands	r2, r5
 80006ac:	9203      	str	r2, [sp, #12]
 80006ae:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006b2:	430a      	orrs	r2, r1
 80006b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80006b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	400b      	ands	r3, r1
 80006bc:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006be:	311e      	adds	r1, #30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c0:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006c2:	f000 fc93 	bl	8000fec <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80006c6:	2380      	movs	r3, #128	; 0x80
 80006c8:	019b      	lsls	r3, r3, #6
 80006ca:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_GPIO_Init+0x84>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ce:	a905      	add	r1, sp, #20
 80006d0:	4809      	ldr	r0, [pc, #36]	; (80006f8 <MX_GPIO_Init+0x88>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006d2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006d6:	f000 fbcd 	bl	8000e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006da:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006dc:	a905      	add	r1, sp, #20
 80006de:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = LD2_Pin;
 80006e0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006e8:	f000 fbc4 	bl	8000e74 <HAL_GPIO_Init>

}
 80006ec:	b00a      	add	sp, #40	; 0x28
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	40021000 	.word	0x40021000
 80006f4:	10210000 	.word	0x10210000
 80006f8:	50000800 	.word	0x50000800

080006fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006fc:	b510      	push	{r4, lr}

  hi2c1.Instance = I2C1;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <MX_I2C1_Init+0x5c>)
 8000700:	4c16      	ldr	r4, [pc, #88]	; (800075c <MX_I2C1_Init+0x60>)
  hi2c1.Init.Timing = 0x00300F38;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000702:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 8000704:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_I2C1_Init+0x64>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000708:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00300F38;
 800070a:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800070c:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800070e:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 8000710:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000712:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000714:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000716:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000718:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071a:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800071c:	f000 fd8c 	bl	8001238 <HAL_I2C_Init>
 8000720:	2800      	cmp	r0, #0
 8000722:	d003      	beq.n	800072c <MX_I2C1_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000724:	2142      	movs	r1, #66	; 0x42
 8000726:	480f      	ldr	r0, [pc, #60]	; (8000764 <MX_I2C1_Init+0x68>)
 8000728:	f000 fa6e 	bl	8000c08 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800072c:	2100      	movs	r1, #0
 800072e:	0020      	movs	r0, r4
 8000730:	f000 ff0c 	bl	800154c <HAL_I2CEx_ConfigAnalogFilter>
 8000734:	2800      	cmp	r0, #0
 8000736:	d003      	beq.n	8000740 <MX_I2C1_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000738:	2149      	movs	r1, #73	; 0x49
 800073a:	480a      	ldr	r0, [pc, #40]	; (8000764 <MX_I2C1_Init+0x68>)
 800073c:	f000 fa64 	bl	8000c08 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000740:	2100      	movs	r1, #0
 8000742:	0020      	movs	r0, r4
 8000744:	f000 ff28 	bl	8001598 <HAL_I2CEx_ConfigDigitalFilter>
 8000748:	2800      	cmp	r0, #0
 800074a:	d003      	beq.n	8000754 <MX_I2C1_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 800074c:	2150      	movs	r1, #80	; 0x50
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_I2C1_Init+0x68>)
 8000750:	f000 fa5a 	bl	8000c08 <_Error_Handler>
  }

}
 8000754:	bd10      	pop	{r4, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	40005400 	.word	0x40005400
 800075c:	20000064 	.word	0x20000064
 8000760:	00300f38 	.word	0x00300f38
 8000764:	080025fc 	.word	0x080025fc

08000768 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000768:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 800076a:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <HAL_I2C_MspInit+0x38>)
 800076c:	6802      	ldr	r2, [r0, #0]
 800076e:	429a      	cmp	r2, r3
 8000770:	d114      	bne.n	800079c <HAL_I2C_MspInit+0x34>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000772:	23c0      	movs	r3, #192	; 0xc0
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000778:	2312      	movs	r3, #18
 800077a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800077c:	3b11      	subs	r3, #17
 800077e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000780:	3302      	adds	r3, #2
 8000782:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000784:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000786:	3301      	adds	r3, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000788:	4806      	ldr	r0, [pc, #24]	; (80007a4 <HAL_I2C_MspInit+0x3c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800078a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078c:	f000 fb72 	bl	8000e74 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	4a05      	ldr	r2, [pc, #20]	; (80007a8 <HAL_I2C_MspInit+0x40>)
 8000794:	039b      	lsls	r3, r3, #14
 8000796:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8000798:	430b      	orrs	r3, r1
 800079a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800079c:	b007      	add	sp, #28
 800079e:	bd00      	pop	{pc}
 80007a0:	40005400 	.word	0x40005400
 80007a4:	50000400 	.word	0x50000400
 80007a8:	40021000 	.word	0x40021000

080007ac <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ac:	4925      	ldr	r1, [pc, #148]	; (8000844 <SystemClock_Config+0x98>)
 80007ae:	4a26      	ldr	r2, [pc, #152]	; (8000848 <SystemClock_Config+0x9c>)
 80007b0:	680b      	ldr	r3, [r1, #0]
{
 80007b2:	b510      	push	{r4, lr}
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b4:	401a      	ands	r2, r3
 80007b6:	2380      	movs	r3, #128	; 0x80
 80007b8:	011b      	lsls	r3, r3, #4
 80007ba:	4313      	orrs	r3, r2
 80007bc:	600b      	str	r3, [r1, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007be:	23a0      	movs	r3, #160	; 0xa0
{
 80007c0:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007c2:	02db      	lsls	r3, r3, #11
 80007c4:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c6:	2302      	movs	r3, #2
 80007c8:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ca:	2380      	movs	r3, #128	; 0x80
 80007cc:	025b      	lsls	r3, r3, #9
 80007ce:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 80007d0:	23c0      	movs	r3, #192	; 0xc0
 80007d2:	031b      	lsls	r3, r3, #12
 80007d4:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80007d6:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d8:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80007da:	03db      	lsls	r3, r3, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007dc:	a810      	add	r0, sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007de:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80007e0:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e2:	f000 ff37 	bl	8001654 <HAL_RCC_OscConfig>
 80007e6:	2800      	cmp	r0, #0
 80007e8:	d000      	beq.n	80007ec <SystemClock_Config+0x40>
 80007ea:	e7fe      	b.n	80007ea <SystemClock_Config+0x3e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ec:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ee:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f0:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007f2:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f4:	3b0c      	subs	r3, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f6:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007f8:	0021      	movs	r1, r4
 80007fa:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fc:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007fe:	f001 f9d5 	bl	8001bac <HAL_RCC_ClockConfig>
 8000802:	2800      	cmp	r0, #0
 8000804:	d000      	beq.n	8000808 <SystemClock_Config+0x5c>
 8000806:	e7fe      	b.n	8000806 <SystemClock_Config+0x5a>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000808:	230a      	movs	r3, #10
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800080a:	900a      	str	r0, [sp, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800080c:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800080e:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000810:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000812:	f001 faa9 	bl	8001d68 <HAL_RCCEx_PeriphCLKConfig>
 8000816:	1e04      	subs	r4, r0, #0
 8000818:	d000      	beq.n	800081c <SystemClock_Config+0x70>
 800081a:	e7fe      	b.n	800081a <SystemClock_Config+0x6e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800081c:	f001 fa7e 	bl	8001d1c <HAL_RCC_GetHCLKFreq>
 8000820:	21fa      	movs	r1, #250	; 0xfa
 8000822:	0089      	lsls	r1, r1, #2
 8000824:	f7ff fc7a 	bl	800011c <__udivsi3>
 8000828:	f000 faf6 	bl	8000e18 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800082c:	2004      	movs	r0, #4
 800082e:	f000 fb0d 	bl	8000e4c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000832:	2001      	movs	r0, #1
 8000834:	0022      	movs	r2, r4
 8000836:	0021      	movs	r1, r4
 8000838:	4240      	negs	r0, r0
 800083a:	f000 fabd 	bl	8000db8 <HAL_NVIC_SetPriority>
}
 800083e:	b01e      	add	sp, #120	; 0x78
 8000840:	bd10      	pop	{r4, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	40007000 	.word	0x40007000
 8000848:	ffffe7ff 	.word	0xffffe7ff

0800084c <get_register>:

/* USER CODE BEGIN 4 */
void get_register(uint8_t addr_sensor[], uint8_t addr_register[], uint8_t data_register[]){
 800084c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800084e:	0005      	movs	r5, r0
 8000850:	000f      	movs	r7, r1
 8000852:	0016      	movs	r6, r2

	  while(HAL_I2C_Master_Transmit(&hi2c1, addr_sensor[0], addr_register, 1, HAL_TIMEOUT) != HAL_OK);
 8000854:	2303      	movs	r3, #3
 8000856:	4c0c      	ldr	r4, [pc, #48]	; (8000888 <get_register+0x3c>)
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	7829      	ldrb	r1, [r5, #0]
 800085c:	3b02      	subs	r3, #2
 800085e:	003a      	movs	r2, r7
 8000860:	0020      	movs	r0, r4
 8000862:	f000 fd3f 	bl	80012e4 <HAL_I2C_Master_Transmit>
 8000866:	2800      	cmp	r0, #0
 8000868:	d1f4      	bne.n	8000854 <get_register+0x8>
	  while(HAL_I2C_Master_Receive(&hi2c1, addr_sensor[0], data_register, 1, HAL_TIMEOUT) != HAL_OK);
 800086a:	2703      	movs	r7, #3
 800086c:	7829      	ldrb	r1, [r5, #0]
 800086e:	9700      	str	r7, [sp, #0]
 8000870:	2301      	movs	r3, #1
 8000872:	0032      	movs	r2, r6
 8000874:	0020      	movs	r0, r4
 8000876:	f000 fdcf 	bl	8001418 <HAL_I2C_Master_Receive>
 800087a:	2800      	cmp	r0, #0
 800087c:	d1f6      	bne.n	800086c <get_register+0x20>
	  HAL_Delay(100);
 800087e:	3064      	adds	r0, #100	; 0x64
 8000880:	f000 fa8e 	bl	8000da0 <HAL_Delay>
}
 8000884:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	20000064 	.word	0x20000064

0800088c <get_temp>:

void get_temp(void){
 800088c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	// read register T0_degC_x8
	get_register(addr_sensor, addr_T0_degC_x8, T0_degC_x8);
 800088e:	4c3b      	ldr	r4, [pc, #236]	; (800097c <get_temp+0xf0>)
 8000890:	4e3b      	ldr	r6, [pc, #236]	; (8000980 <get_temp+0xf4>)
 8000892:	0020      	movs	r0, r4
 8000894:	0032      	movs	r2, r6
 8000896:	493b      	ldr	r1, [pc, #236]	; (8000984 <get_temp+0xf8>)
 8000898:	f7ff ffd8 	bl	800084c <get_register>
	// read register T1_degC_x8
	get_register(addr_sensor, addr_T1_degC_x8, T1_degC_x8);
 800089c:	4d3a      	ldr	r5, [pc, #232]	; (8000988 <get_temp+0xfc>)
 800089e:	0020      	movs	r0, r4
 80008a0:	002a      	movs	r2, r5
 80008a2:	493a      	ldr	r1, [pc, #232]	; (800098c <get_temp+0x100>)
 80008a4:	f7ff ffd2 	bl	800084c <get_register>
	// Read register MSB
	get_register(addr_sensor, addr_MSB, MSB);
 80008a8:	4f39      	ldr	r7, [pc, #228]	; (8000990 <get_temp+0x104>)
 80008aa:	0020      	movs	r0, r4
 80008ac:	003a      	movs	r2, r7
 80008ae:	4939      	ldr	r1, [pc, #228]	; (8000994 <get_temp+0x108>)
 80008b0:	f7ff ffcc 	bl	800084c <get_register>

	T0_degC_x8_u16[0] = (((uint16_t)(MSB[0] & 0x03)) << 8) + ((uint16_t)T0_degC_x8[0]);
 80008b4:	21c0      	movs	r1, #192	; 0xc0
 80008b6:	783b      	ldrb	r3, [r7, #0]
 80008b8:	0089      	lsls	r1, r1, #2
 80008ba:	021a      	lsls	r2, r3, #8

	T1_degC_x8_u16[0] = (((uint16_t)(MSB[0] & 0x0C)) << 6) + ((uint16_t)T1_degC_x8[0]);
 80008bc:	019b      	lsls	r3, r3, #6
	T0_degC_x8_u16[0] = (((uint16_t)(MSB[0] & 0x03)) << 8) + ((uint16_t)T0_degC_x8[0]);
 80008be:	400a      	ands	r2, r1
	T1_degC_x8_u16[0] = (((uint16_t)(MSB[0] & 0x0C)) << 6) + ((uint16_t)T1_degC_x8[0]);
 80008c0:	4019      	ands	r1, r3
 80008c2:	782b      	ldrb	r3, [r5, #0]
	T0_degC_x8_u16[0] = (((uint16_t)(MSB[0] & 0x03)) << 8) + ((uint16_t)T0_degC_x8[0]);
 80008c4:	7830      	ldrb	r0, [r6, #0]
	T1_degC_x8_u16[0] = (((uint16_t)(MSB[0] & 0x0C)) << 6) + ((uint16_t)T1_degC_x8[0]);
 80008c6:	185b      	adds	r3, r3, r1
 80008c8:	4933      	ldr	r1, [pc, #204]	; (8000998 <get_temp+0x10c>)
	T0_degC_x8_u16[0] = (((uint16_t)(MSB[0] & 0x03)) << 8) + ((uint16_t)T0_degC_x8[0]);
 80008ca:	1882      	adds	r2, r0, r2
 80008cc:	4833      	ldr	r0, [pc, #204]	; (800099c <get_temp+0x110>)
	T1_degC_x8_u16[0] = (((uint16_t)(MSB[0] & 0x0C)) << 6) + ((uint16_t)T1_degC_x8[0]);
 80008ce:	800b      	strh	r3, [r1, #0]

	T0_DegC[0] = T0_degC_x8_u16[0] >> 3;
 80008d0:	4933      	ldr	r1, [pc, #204]	; (80009a0 <get_temp+0x114>)
	T0_degC_x8_u16[0] = (((uint16_t)(MSB[0] & 0x03)) << 8) + ((uint16_t)T0_degC_x8[0]);
 80008d2:	8002      	strh	r2, [r0, #0]
	T0_DegC[0] = T0_degC_x8_u16[0] >> 3;
 80008d4:	10d2      	asrs	r2, r2, #3

	T1_DegC[0] = T1_degC_x8_u16[0] >> 3;

	// Read register T0_OUT_L
	get_register(addr_sensor, addr_T0_OUT_L, T0_OUT_L);
 80008d6:	4d33      	ldr	r5, [pc, #204]	; (80009a4 <get_temp+0x118>)
	T0_DegC[0] = T0_degC_x8_u16[0] >> 3;
 80008d8:	800a      	strh	r2, [r1, #0]
	T1_DegC[0] = T1_degC_x8_u16[0] >> 3;
 80008da:	4a33      	ldr	r2, [pc, #204]	; (80009a8 <get_temp+0x11c>)
 80008dc:	10db      	asrs	r3, r3, #3
 80008de:	8013      	strh	r3, [r2, #0]
	get_register(addr_sensor, addr_T0_OUT_L, T0_OUT_L);
 80008e0:	0020      	movs	r0, r4
 80008e2:	002a      	movs	r2, r5
 80008e4:	4931      	ldr	r1, [pc, #196]	; (80009ac <get_temp+0x120>)
 80008e6:	f7ff ffb1 	bl	800084c <get_register>
	// Read register T0_OUT_H
	get_register(addr_sensor, addr_T0_OUT_H, T0_OUT_H);
 80008ea:	4e31      	ldr	r6, [pc, #196]	; (80009b0 <get_temp+0x124>)
 80008ec:	0020      	movs	r0, r4
 80008ee:	0032      	movs	r2, r6
 80008f0:	4930      	ldr	r1, [pc, #192]	; (80009b4 <get_temp+0x128>)
 80008f2:	f7ff ffab 	bl	800084c <get_register>

	  T0_OUT[0] = (((uint16_t)T0_OUT_H[0])<<8) + (uint16_t)T0_OUT_L[0];
 80008f6:	7832      	ldrb	r2, [r6, #0]
 80008f8:	782b      	ldrb	r3, [r5, #0]
 80008fa:	0212      	lsls	r2, r2, #8
 80008fc:	189b      	adds	r3, r3, r2

	// Read register T1_OUT_L
	get_register(addr_sensor, addr_T1_OUT_L, T1_OUT_L);
 80008fe:	4e2e      	ldr	r6, [pc, #184]	; (80009b8 <get_temp+0x12c>)
	  T0_OUT[0] = (((uint16_t)T0_OUT_H[0])<<8) + (uint16_t)T0_OUT_L[0];
 8000900:	4a2e      	ldr	r2, [pc, #184]	; (80009bc <get_temp+0x130>)
	get_register(addr_sensor, addr_T1_OUT_L, T1_OUT_L);
 8000902:	0020      	movs	r0, r4
	  T0_OUT[0] = (((uint16_t)T0_OUT_H[0])<<8) + (uint16_t)T0_OUT_L[0];
 8000904:	8013      	strh	r3, [r2, #0]
	get_register(addr_sensor, addr_T1_OUT_L, T1_OUT_L);
 8000906:	492e      	ldr	r1, [pc, #184]	; (80009c0 <get_temp+0x134>)
 8000908:	0032      	movs	r2, r6
 800090a:	f7ff ff9f 	bl	800084c <get_register>
	// Read register T1_OUT_H
	get_register(addr_sensor, addr_T1_OUT_H, T1_OUT_H);
 800090e:	4f2d      	ldr	r7, [pc, #180]	; (80009c4 <get_temp+0x138>)
 8000910:	0020      	movs	r0, r4
 8000912:	003a      	movs	r2, r7
 8000914:	492c      	ldr	r1, [pc, #176]	; (80009c8 <get_temp+0x13c>)
 8000916:	f7ff ff99 	bl	800084c <get_register>

	T1_OUT[0] = (((uint16_t)T1_OUT_H[0])<<8) + (uint16_t)T1_OUT_L[0];
 800091a:	783a      	ldrb	r2, [r7, #0]
 800091c:	7833      	ldrb	r3, [r6, #0]

	// Read register T_OUT_L
	get_register(addr_sensor, addr_T_OUT_L, T_OUT_L);
 800091e:	4e2b      	ldr	r6, [pc, #172]	; (80009cc <get_temp+0x140>)
	T1_OUT[0] = (((uint16_t)T1_OUT_H[0])<<8) + (uint16_t)T1_OUT_L[0];
 8000920:	4d2b      	ldr	r5, [pc, #172]	; (80009d0 <get_temp+0x144>)
 8000922:	0212      	lsls	r2, r2, #8
 8000924:	189b      	adds	r3, r3, r2
	get_register(addr_sensor, addr_T_OUT_L, T_OUT_L);
 8000926:	0020      	movs	r0, r4
 8000928:	0032      	movs	r2, r6
 800092a:	492a      	ldr	r1, [pc, #168]	; (80009d4 <get_temp+0x148>)
	T1_OUT[0] = (((uint16_t)T1_OUT_H[0])<<8) + (uint16_t)T1_OUT_L[0];
 800092c:	802b      	strh	r3, [r5, #0]
	get_register(addr_sensor, addr_T_OUT_L, T_OUT_L);
 800092e:	f7ff ff8d 	bl	800084c <get_register>
	// Read register T_OUT_H
	get_register(addr_sensor, addr_T_OUT_H, T_OUT_H);
 8000932:	4f29      	ldr	r7, [pc, #164]	; (80009d8 <get_temp+0x14c>)
 8000934:	4929      	ldr	r1, [pc, #164]	; (80009dc <get_temp+0x150>)
 8000936:	003a      	movs	r2, r7
 8000938:	0020      	movs	r0, r4
 800093a:	f7ff ff87 	bl	800084c <get_register>


	  T_OUT[0]=(((uint16_t)T_OUT_H[0])<<8) + (uint16_t)T_OUT_L[0];
 800093e:	7838      	ldrb	r0, [r7, #0]
 8000940:	7833      	ldrb	r3, [r6, #0]
 8000942:	0200      	lsls	r0, r0, #8
 8000944:	4a26      	ldr	r2, [pc, #152]	; (80009e0 <get_temp+0x154>)
 8000946:	181b      	adds	r3, r3, r0
 8000948:	b21b      	sxth	r3, r3
 800094a:	8013      	strh	r3, [r2, #0]

	  temp32= (int32_t)(T1_DegC[0]-T0_DegC[0])*(T_OUT[0]-T0_OUT[0]);
 800094c:	4a14      	ldr	r2, [pc, #80]	; (80009a0 <get_temp+0x114>)
 800094e:	2400      	movs	r4, #0
 8000950:	5f14      	ldrsh	r4, [r2, r4]
 8000952:	4a1a      	ldr	r2, [pc, #104]	; (80009bc <get_temp+0x130>)
 8000954:	2600      	movs	r6, #0
 8000956:	5f96      	ldrsh	r6, [r2, r6]
 8000958:	4a13      	ldr	r2, [pc, #76]	; (80009a8 <get_temp+0x11c>)
 800095a:	1b98      	subs	r0, r3, r6
 800095c:	2100      	movs	r1, #0
 800095e:	5e52      	ldrsh	r2, [r2, r1]
 8000960:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <get_temp+0x158>)
 8000962:	1b12      	subs	r2, r2, r4
 8000964:	4350      	muls	r0, r2
 8000966:	6018      	str	r0, [r3, #0]
	  temp_value = (int16_t)(temp32/(T1_OUT[0] - T0_OUT[0])) + T0_DegC[0];
 8000968:	2300      	movs	r3, #0
 800096a:	5ee9      	ldrsh	r1, [r5, r3]
 800096c:	1b89      	subs	r1, r1, r6
 800096e:	f7ff fc5f 	bl	8000230 <__divsi3>
 8000972:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <get_temp+0x15c>)
 8000974:	1904      	adds	r4, r0, r4
 8000976:	801c      	strh	r4, [r3, #0]

}
 8000978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	20000017 	.word	0x20000017
 8000980:	20000052 	.word	0x20000052
 8000984:	20000011 	.word	0x20000011
 8000988:	2000005c 	.word	0x2000005c
 800098c:	20000014 	.word	0x20000014
 8000990:	20000044 	.word	0x20000044
 8000994:	20000008 	.word	0x20000008
 8000998:	2000005e 	.word	0x2000005e
 800099c:	20000054 	.word	0x20000054
 80009a0:	2000004c 	.word	0x2000004c
 80009a4:	20000051 	.word	0x20000051
 80009a8:	20000056 	.word	0x20000056
 80009ac:	20000010 	.word	0x20000010
 80009b0:	20000050 	.word	0x20000050
 80009b4:	2000000f 	.word	0x2000000f
 80009b8:	2000005b 	.word	0x2000005b
 80009bc:	2000004e 	.word	0x2000004e
 80009c0:	20000013 	.word	0x20000013
 80009c4:	2000005a 	.word	0x2000005a
 80009c8:	20000012 	.word	0x20000012
 80009cc:	20000063 	.word	0x20000063
 80009d0:	20000058 	.word	0x20000058
 80009d4:	20000016 	.word	0x20000016
 80009d8:	20000062 	.word	0x20000062
 80009dc:	20000015 	.word	0x20000015
 80009e0:	20000060 	.word	0x20000060
 80009e4:	200000c0 	.word	0x200000c0
 80009e8:	200000bc 	.word	0x200000bc

080009ec <get_hum>:


void get_hum(void){
 80009ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	get_register(addr_sensor, addr_H0_rH_x2, H0_rH_x2);
 80009ee:	4c31      	ldr	r4, [pc, #196]	; (8000ab4 <get_hum+0xc8>)
 80009f0:	4e31      	ldr	r6, [pc, #196]	; (8000ab8 <get_hum+0xcc>)
 80009f2:	0020      	movs	r0, r4
 80009f4:	0032      	movs	r2, r6
 80009f6:	4931      	ldr	r1, [pc, #196]	; (8000abc <get_hum+0xd0>)
 80009f8:	f7ff ff28 	bl	800084c <get_register>

	get_register(addr_sensor, addr_H1_rH_x2, H1_rH_x2);
 80009fc:	4d30      	ldr	r5, [pc, #192]	; (8000ac0 <get_hum+0xd4>)
 80009fe:	0020      	movs	r0, r4
 8000a00:	002a      	movs	r2, r5
 8000a02:	4930      	ldr	r1, [pc, #192]	; (8000ac4 <get_hum+0xd8>)
 8000a04:	f7ff ff22 	bl	800084c <get_register>

	H0_rH= H0_rH_x2[0]>>2;
 8000a08:	7833      	ldrb	r3, [r6, #0]
 8000a0a:	4a2f      	ldr	r2, [pc, #188]	; (8000ac8 <get_hum+0xdc>)
 8000a0c:	089b      	lsrs	r3, r3, #2
 8000a0e:	8013      	strh	r3, [r2, #0]
	H1_rH= H1_rH_x2[0]>>2;
 8000a10:	782b      	ldrb	r3, [r5, #0]
 8000a12:	4a2e      	ldr	r2, [pc, #184]	; (8000acc <get_hum+0xe0>)

	get_register(addr_sensor, addr_H0_T0_OUT_L, H0_T0_OUT_L);
 8000a14:	4d2e      	ldr	r5, [pc, #184]	; (8000ad0 <get_hum+0xe4>)
	H1_rH= H1_rH_x2[0]>>2;
 8000a16:	089b      	lsrs	r3, r3, #2
 8000a18:	8013      	strh	r3, [r2, #0]
	get_register(addr_sensor, addr_H0_T0_OUT_L, H0_T0_OUT_L);
 8000a1a:	0020      	movs	r0, r4
 8000a1c:	002a      	movs	r2, r5
 8000a1e:	492d      	ldr	r1, [pc, #180]	; (8000ad4 <get_hum+0xe8>)
 8000a20:	f7ff ff14 	bl	800084c <get_register>

	get_register(addr_sensor, addr_H0_T0_OUT_H, H0_T0_OUT_H);
 8000a24:	4e2c      	ldr	r6, [pc, #176]	; (8000ad8 <get_hum+0xec>)
 8000a26:	0020      	movs	r0, r4
 8000a28:	0032      	movs	r2, r6
 8000a2a:	492c      	ldr	r1, [pc, #176]	; (8000adc <get_hum+0xf0>)
 8000a2c:	f7ff ff0e 	bl	800084c <get_register>

	H0_T0_OUT = (H0_T0_OUT_H[0]<<8) + H0_T0_OUT_L[0];
 8000a30:	7832      	ldrb	r2, [r6, #0]
 8000a32:	782b      	ldrb	r3, [r5, #0]
 8000a34:	0212      	lsls	r2, r2, #8
 8000a36:	189b      	adds	r3, r3, r2


	get_register(addr_sensor, addr_H1_T0_OUT_L, H1_T0_OUT_L);
 8000a38:	4e29      	ldr	r6, [pc, #164]	; (8000ae0 <get_hum+0xf4>)
	H0_T0_OUT = (H0_T0_OUT_H[0]<<8) + H0_T0_OUT_L[0];
 8000a3a:	4a2a      	ldr	r2, [pc, #168]	; (8000ae4 <get_hum+0xf8>)
	get_register(addr_sensor, addr_H1_T0_OUT_L, H1_T0_OUT_L);
 8000a3c:	0020      	movs	r0, r4
	H0_T0_OUT = (H0_T0_OUT_H[0]<<8) + H0_T0_OUT_L[0];
 8000a3e:	8013      	strh	r3, [r2, #0]
	get_register(addr_sensor, addr_H1_T0_OUT_L, H1_T0_OUT_L);
 8000a40:	4929      	ldr	r1, [pc, #164]	; (8000ae8 <get_hum+0xfc>)
 8000a42:	0032      	movs	r2, r6
 8000a44:	f7ff ff02 	bl	800084c <get_register>

	get_register(addr_sensor, addr_H1_T0_OUT_H, H1_T0_OUT_H);
 8000a48:	4f28      	ldr	r7, [pc, #160]	; (8000aec <get_hum+0x100>)
 8000a4a:	0020      	movs	r0, r4
 8000a4c:	003a      	movs	r2, r7
 8000a4e:	4928      	ldr	r1, [pc, #160]	; (8000af0 <get_hum+0x104>)
 8000a50:	f7ff fefc 	bl	800084c <get_register>

	H1_T0_OUT = (H1_T0_OUT_H[0]<<8) + H1_T0_OUT_L[0];
 8000a54:	783a      	ldrb	r2, [r7, #0]
 8000a56:	7833      	ldrb	r3, [r6, #0]


	get_register(addr_sensor, addr_H_T0_OUT_L, H_T0_OUT_L);
 8000a58:	4e26      	ldr	r6, [pc, #152]	; (8000af4 <get_hum+0x108>)
	H1_T0_OUT = (H1_T0_OUT_H[0]<<8) + H1_T0_OUT_L[0];
 8000a5a:	4d27      	ldr	r5, [pc, #156]	; (8000af8 <get_hum+0x10c>)
 8000a5c:	0212      	lsls	r2, r2, #8
 8000a5e:	189b      	adds	r3, r3, r2
	get_register(addr_sensor, addr_H_T0_OUT_L, H_T0_OUT_L);
 8000a60:	0020      	movs	r0, r4
 8000a62:	0032      	movs	r2, r6
 8000a64:	4925      	ldr	r1, [pc, #148]	; (8000afc <get_hum+0x110>)
	H1_T0_OUT = (H1_T0_OUT_H[0]<<8) + H1_T0_OUT_L[0];
 8000a66:	802b      	strh	r3, [r5, #0]
	get_register(addr_sensor, addr_H_T0_OUT_L, H_T0_OUT_L);
 8000a68:	f7ff fef0 	bl	800084c <get_register>

	get_register(addr_sensor, addr_H_T0_OUT_H, H_T0_OUT_H);
 8000a6c:	4f24      	ldr	r7, [pc, #144]	; (8000b00 <get_hum+0x114>)
 8000a6e:	4925      	ldr	r1, [pc, #148]	; (8000b04 <get_hum+0x118>)
 8000a70:	003a      	movs	r2, r7
 8000a72:	0020      	movs	r0, r4
 8000a74:	f7ff feea 	bl	800084c <get_register>

	H_T0_OUT = (H_T0_OUT_H[0]<<8) + H_T0_OUT_L[0];
 8000a78:	7838      	ldrb	r0, [r7, #0]
 8000a7a:	7833      	ldrb	r3, [r6, #0]
 8000a7c:	0200      	lsls	r0, r0, #8
 8000a7e:	4a22      	ldr	r2, [pc, #136]	; (8000b08 <get_hum+0x11c>)
 8000a80:	181b      	adds	r3, r3, r0
 8000a82:	b21b      	sxth	r3, r3
 8000a84:	8013      	strh	r3, [r2, #0]

	hum = (H1_rH-H0_rH)*(H_T0_OUT-H0_T0_OUT);
 8000a86:	4a10      	ldr	r2, [pc, #64]	; (8000ac8 <get_hum+0xdc>)
 8000a88:	2400      	movs	r4, #0
 8000a8a:	5f14      	ldrsh	r4, [r2, r4]
 8000a8c:	4a15      	ldr	r2, [pc, #84]	; (8000ae4 <get_hum+0xf8>)
 8000a8e:	2600      	movs	r6, #0
 8000a90:	5f96      	ldrsh	r6, [r2, r6]
 8000a92:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <get_hum+0xe0>)
 8000a94:	1b98      	subs	r0, r3, r6
 8000a96:	2100      	movs	r1, #0
 8000a98:	5e52      	ldrsh	r2, [r2, r1]
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <get_hum+0x120>)
 8000a9c:	1b12      	subs	r2, r2, r4
 8000a9e:	4350      	muls	r0, r2
 8000aa0:	6018      	str	r0, [r3, #0]
	value_hum = (hum/(H1_T0_OUT-H0_T0_OUT))+H0_rH;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	5ee9      	ldrsh	r1, [r5, r3]
 8000aa6:	1b89      	subs	r1, r1, r6
 8000aa8:	f7ff fbc2 	bl	8000230 <__divsi3>
 8000aac:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <get_hum+0x124>)
 8000aae:	1904      	adds	r4, r0, r4
 8000ab0:	801c      	strh	r4, [r3, #0]

}
 8000ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ab4:	20000017 	.word	0x20000017
 8000ab8:	2000003e 	.word	0x2000003e
 8000abc:	20000002 	.word	0x20000002
 8000ac0:	20000041 	.word	0x20000041
 8000ac4:	20000005 	.word	0x20000005
 8000ac8:	200000b8 	.word	0x200000b8
 8000acc:	200000b4 	.word	0x200000b4
 8000ad0:	2000003d 	.word	0x2000003d
 8000ad4:	20000001 	.word	0x20000001
 8000ad8:	2000003c 	.word	0x2000003c
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	20000040 	.word	0x20000040
 8000ae4:	200000d0 	.word	0x200000d0
 8000ae8:	20000004 	.word	0x20000004
 8000aec:	2000003f 	.word	0x2000003f
 8000af0:	20000003 	.word	0x20000003
 8000af4:	20000043 	.word	0x20000043
 8000af8:	200000ca 	.word	0x200000ca
 8000afc:	20000007 	.word	0x20000007
 8000b00:	20000042 	.word	0x20000042
 8000b04:	20000006 	.word	0x20000006
 8000b08:	200000c8 	.word	0x200000c8
 8000b0c:	200000b0 	.word	0x200000b0
 8000b10:	200000ba 	.word	0x200000ba

08000b14 <get_press>:

void get_press(void){
 8000b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	get_register(addr_sensor_press, addr_REF_P_H, REF_P_H);
 8000b16:	4c22      	ldr	r4, [pc, #136]	; (8000ba0 <get_press+0x8c>)
 8000b18:	4f22      	ldr	r7, [pc, #136]	; (8000ba4 <get_press+0x90>)
 8000b1a:	0020      	movs	r0, r4
 8000b1c:	003a      	movs	r2, r7
 8000b1e:	4922      	ldr	r1, [pc, #136]	; (8000ba8 <get_press+0x94>)
 8000b20:	f7ff fe94 	bl	800084c <get_register>
	get_register(addr_sensor_press, addr_REF_P_L, REF_P_L);
 8000b24:	4e21      	ldr	r6, [pc, #132]	; (8000bac <get_press+0x98>)
 8000b26:	0020      	movs	r0, r4
 8000b28:	0032      	movs	r2, r6
 8000b2a:	4921      	ldr	r1, [pc, #132]	; (8000bb0 <get_press+0x9c>)
 8000b2c:	f7ff fe8e 	bl	800084c <get_register>
	get_register(addr_sensor_press, addr_REF_P_XL, REF_P_XL);
 8000b30:	0020      	movs	r0, r4
 8000b32:	4a20      	ldr	r2, [pc, #128]	; (8000bb4 <get_press+0xa0>)
 8000b34:	4920      	ldr	r1, [pc, #128]	; (8000bb8 <get_press+0xa4>)
 8000b36:	f7ff fe89 	bl	800084c <get_register>

	REF_P =  ( ((REF_P_H[0]+0x10)<<16) + (REF_P_L[0]<<8) + (REF_P_XL[0]) );
 8000b3a:	783b      	ldrb	r3, [r7, #0]
 8000b3c:	7832      	ldrb	r2, [r6, #0]
 8000b3e:	3310      	adds	r3, #16
 8000b40:	0212      	lsls	r2, r2, #8
 8000b42:	041b      	lsls	r3, r3, #16
 8000b44:	189b      	adds	r3, r3, r2
 8000b46:	4a1b      	ldr	r2, [pc, #108]	; (8000bb4 <get_press+0xa0>)

	get_register(addr_sensor_press, addr_PRESS_OUT_H, P_OUT_H);
 8000b48:	4f1c      	ldr	r7, [pc, #112]	; (8000bbc <get_press+0xa8>)
	REF_P =  ( ((REF_P_H[0]+0x10)<<16) + (REF_P_L[0]<<8) + (REF_P_XL[0]) );
 8000b4a:	7812      	ldrb	r2, [r2, #0]
 8000b4c:	4d1c      	ldr	r5, [pc, #112]	; (8000bc0 <get_press+0xac>)
 8000b4e:	189b      	adds	r3, r3, r2
	get_register(addr_sensor_press, addr_PRESS_OUT_H, P_OUT_H);
 8000b50:	0020      	movs	r0, r4
 8000b52:	003a      	movs	r2, r7
 8000b54:	491b      	ldr	r1, [pc, #108]	; (8000bc4 <get_press+0xb0>)
	REF_P =  ( ((REF_P_H[0]+0x10)<<16) + (REF_P_L[0]<<8) + (REF_P_XL[0]) );
 8000b56:	602b      	str	r3, [r5, #0]
	get_register(addr_sensor_press, addr_PRESS_OUT_H, P_OUT_H);
 8000b58:	f7ff fe78 	bl	800084c <get_register>
	get_register(addr_sensor_press, addr_PRESS_OUT_L, P_OUT_L);
 8000b5c:	4e1a      	ldr	r6, [pc, #104]	; (8000bc8 <get_press+0xb4>)
 8000b5e:	0020      	movs	r0, r4
 8000b60:	0032      	movs	r2, r6
 8000b62:	491a      	ldr	r1, [pc, #104]	; (8000bcc <get_press+0xb8>)
 8000b64:	f7ff fe72 	bl	800084c <get_register>
	get_register(addr_sensor_press, addr_PRESS_OUT_XL, P_OUT_XL);
 8000b68:	4a19      	ldr	r2, [pc, #100]	; (8000bd0 <get_press+0xbc>)
 8000b6a:	491a      	ldr	r1, [pc, #104]	; (8000bd4 <get_press+0xc0>)
 8000b6c:	0020      	movs	r0, r4
 8000b6e:	f7ff fe6d 	bl	800084c <get_register>

	//Avec OFFSET Manuel
	//P_OUT = ( ((P_OUT_H[0]+0x10)<<16) + (P_OUT_L[0]<<8) + (P_OUT_XL[0]) );
	//Sans offset
	P_OUT = ( ((P_OUT_H[0])<<16) + (P_OUT_L[0]<<8) + (P_OUT_XL[0]) );
 8000b72:	783b      	ldrb	r3, [r7, #0]
 8000b74:	7832      	ldrb	r2, [r6, #0]
 8000b76:	041b      	lsls	r3, r3, #16
 8000b78:	0212      	lsls	r2, r2, #8
 8000b7a:	189b      	adds	r3, r3, r2
 8000b7c:	4a14      	ldr	r2, [pc, #80]	; (8000bd0 <get_press+0xbc>)
 8000b7e:	7812      	ldrb	r2, [r2, #0]
 8000b80:	189b      	adds	r3, r3, r2
 8000b82:	4a15      	ldr	r2, [pc, #84]	; (8000bd8 <get_press+0xc4>)
 8000b84:	6013      	str	r3, [r2, #0]
	//Probleme d'offset : verifier avec la valeur de reference si elle n'en est pas a l'origine
	press32 = P_OUT + REF_P;
 8000b86:	682a      	ldr	r2, [r5, #0]
 8000b88:	189b      	adds	r3, r3, r2
 8000b8a:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <get_press+0xc8>)
 8000b8c:	6013      	str	r3, [r2, #0]

	value_press = press32/4096;
 8000b8e:	17da      	asrs	r2, r3, #31
 8000b90:	0512      	lsls	r2, r2, #20
 8000b92:	0d12      	lsrs	r2, r2, #20
 8000b94:	18d3      	adds	r3, r2, r3
 8000b96:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <get_press+0xcc>)
 8000b98:	131b      	asrs	r3, r3, #12
 8000b9a:	8013      	strh	r3, [r2, #0]

}
 8000b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	20000018 	.word	0x20000018
 8000ba4:	20000048 	.word	0x20000048
 8000ba8:	2000000c 	.word	0x2000000c
 8000bac:	20000049 	.word	0x20000049
 8000bb0:	2000000d 	.word	0x2000000d
 8000bb4:	2000004a 	.word	0x2000004a
 8000bb8:	2000000e 	.word	0x2000000e
 8000bbc:	20000045 	.word	0x20000045
 8000bc0:	200000c4 	.word	0x200000c4
 8000bc4:	20000009 	.word	0x20000009
 8000bc8:	20000046 	.word	0x20000046
 8000bcc:	2000000a 	.word	0x2000000a
 8000bd0:	20000047 	.word	0x20000047
 8000bd4:	2000000b 	.word	0x2000000b
 8000bd8:	200000cc 	.word	0x200000cc
 8000bdc:	200000d4 	.word	0x200000d4
 8000be0:	200000be 	.word	0x200000be

08000be4 <main>:
{
 8000be4:	b510      	push	{r4, lr}
  HAL_Init();
 8000be6:	f000 f8bd 	bl	8000d64 <HAL_Init>
  SystemClock_Config();
 8000bea:	f7ff fddf 	bl	80007ac <SystemClock_Config>
  MX_GPIO_Init();
 8000bee:	f7ff fd3f 	bl	8000670 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bf2:	f000 f835 	bl	8000c60 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000bf6:	f7ff fd81 	bl	80006fc <MX_I2C1_Init>
	  get_temp();
 8000bfa:	f7ff fe47 	bl	800088c <get_temp>
	  get_hum();
 8000bfe:	f7ff fef5 	bl	80009ec <get_hum>
	  get_press();
 8000c02:	f7ff ff87 	bl	8000b14 <get_press>
 8000c06:	e7f8      	b.n	8000bfa <main+0x16>

08000c08 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8000c08:	e7fe      	b.n	8000c08 <_Error_Handler>
	...

08000c0c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <HAL_MspInit+0x3c>)
{
 8000c10:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	6b59      	ldr	r1, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8000c14:	2005      	movs	r0, #5
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	430a      	orrs	r2, r1
 8000c18:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	2280      	movs	r2, #128	; 0x80
 8000c1c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000c1e:	0552      	lsls	r2, r2, #21
 8000c20:	430a      	orrs	r2, r1
 8000c22:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	4240      	negs	r0, r0
 8000c28:	0011      	movs	r1, r2
 8000c2a:	f000 f8c5 	bl	8000db8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2002      	movs	r0, #2
 8000c32:	0011      	movs	r1, r2
 8000c34:	4240      	negs	r0, r0
 8000c36:	f000 f8bf 	bl	8000db8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	0011      	movs	r1, r2
 8000c40:	4240      	negs	r0, r0
 8000c42:	f000 f8b9 	bl	8000db8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c46:	bd10      	pop	{r4, pc}
 8000c48:	40021000 	.word	0x40021000

08000c4c <NMI_Handler>:
 8000c4c:	4770      	bx	lr

08000c4e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000c4e:	e7fe      	b.n	8000c4e <HardFault_Handler>

08000c50 <SVC_Handler>:
 8000c50:	4770      	bx	lr

08000c52 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c52:	4770      	bx	lr

08000c54 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000c54:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c56:	f000 f895 	bl	8000d84 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000c5a:	f000 f906 	bl	8000e6a <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5e:	bd10      	pop	{r4, pc}

08000c60 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8000c60:	480c      	ldr	r0, [pc, #48]	; (8000c94 <MX_USART2_UART_Init+0x34>)
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <MX_USART2_UART_Init+0x38>)
{
 8000c64:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 8000c66:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000c68:	23e1      	movs	r3, #225	; 0xe1
 8000c6a:	025b      	lsls	r3, r3, #9
 8000c6c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c6e:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c70:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c72:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c74:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c76:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c78:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c7e:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c80:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c82:	f001 fc55 	bl	8002530 <HAL_UART_Init>
 8000c86:	2800      	cmp	r0, #0
 8000c88:	d003      	beq.n	8000c92 <MX_USART2_UART_Init+0x32>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000c8a:	2144      	movs	r1, #68	; 0x44
 8000c8c:	4803      	ldr	r0, [pc, #12]	; (8000c9c <MX_USART2_UART_Init+0x3c>)
 8000c8e:	f7ff ffbb 	bl	8000c08 <_Error_Handler>
  }

}
 8000c92:	bd10      	pop	{r4, pc}
 8000c94:	200000d8 	.word	0x200000d8
 8000c98:	40004400 	.word	0x40004400
 8000c9c:	0800260f 	.word	0x0800260f

08000ca0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ca0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <HAL_UART_MspInit+0x38>)
 8000ca4:	6802      	ldr	r2, [r0, #0]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d114      	bne.n	8000cd4 <HAL_UART_MspInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000caa:	2380      	movs	r3, #128	; 0x80
 8000cac:	4a0b      	ldr	r2, [pc, #44]	; (8000cdc <HAL_UART_MspInit+0x3c>)
 8000cae:	029b      	lsls	r3, r3, #10
 8000cb0:	6b91      	ldr	r1, [r2, #56]	; 0x38
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb4:	430b      	orrs	r3, r1
 8000cb6:	6393      	str	r3, [r2, #56]	; 0x38
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cb8:	230c      	movs	r3, #12
 8000cba:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	3b0a      	subs	r3, #10
 8000cbe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	3303      	adds	r3, #3
 8000cc6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000cca:	3301      	adds	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ccc:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000cce:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	f000 f8d0 	bl	8000e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cd4:	b007      	add	sp, #28
 8000cd6:	bd00      	pop	{pc}
 8000cd8:	40004400 	.word	0x40004400
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000ce0:	2280      	movs	r2, #128	; 0x80
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <SystemInit+0x44>)
 8000ce4:	0052      	lsls	r2, r2, #1
 8000ce6:	6819      	ldr	r1, [r3, #0]
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000cec:	68da      	ldr	r2, [r3, #12]
 8000cee:	490e      	ldr	r1, [pc, #56]	; (8000d28 <SystemInit+0x48>)
 8000cf0:	400a      	ands	r2, r1
 8000cf2:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	490d      	ldr	r1, [pc, #52]	; (8000d2c <SystemInit+0x4c>)
 8000cf8:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000cfa:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000cfc:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000cfe:	689a      	ldr	r2, [r3, #8]
 8000d00:	438a      	bics	r2, r1
 8000d02:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	490a      	ldr	r1, [pc, #40]	; (8000d30 <SystemInit+0x50>)
 8000d08:	400a      	ands	r2, r1
 8000d0a:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000d0c:	68da      	ldr	r2, [r3, #12]
 8000d0e:	4909      	ldr	r1, [pc, #36]	; (8000d34 <SystemInit+0x54>)
 8000d10:	400a      	ands	r2, r1
 8000d12:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d18:	2280      	movs	r2, #128	; 0x80
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <SystemInit+0x58>)
 8000d1c:	0512      	lsls	r2, r2, #20
 8000d1e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d20:	4770      	bx	lr
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	40021000 	.word	0x40021000
 8000d28:	88ff400c 	.word	0x88ff400c
 8000d2c:	fef6fff6 	.word	0xfef6fff6
 8000d30:	fffbffff 	.word	0xfffbffff
 8000d34:	ff02ffff 	.word	0xff02ffff
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000d3c:	21fa      	movs	r1, #250	; 0xfa
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <HAL_InitTick+0x24>)
{
 8000d40:	b510      	push	{r4, lr}
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000d42:	0089      	lsls	r1, r1, #2
{
 8000d44:	0004      	movs	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000d46:	6818      	ldr	r0, [r3, #0]
 8000d48:	f7ff f9e8 	bl	800011c <__udivsi3>
 8000d4c:	f000 f864 	bl	8000e18 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000d50:	2001      	movs	r0, #1
 8000d52:	2200      	movs	r2, #0
 8000d54:	0021      	movs	r1, r4
 8000d56:	4240      	negs	r0, r0
 8000d58:	f000 f82e 	bl	8000db8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	bd10      	pop	{r4, pc}
 8000d60:	2000001c 	.word	0x2000001c

08000d64 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d64:	2340      	movs	r3, #64	; 0x40
 8000d66:	4a06      	ldr	r2, [pc, #24]	; (8000d80 <HAL_Init+0x1c>)
{
 8000d68:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d6a:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6c:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d6e:	430b      	orrs	r3, r1
 8000d70:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d72:	f7ff ffe3 	bl	8000d3c <HAL_InitTick>
  HAL_MspInit();
 8000d76:	f7ff ff49 	bl	8000c0c <HAL_MspInit>
}
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	bd10      	pop	{r4, pc}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	40022000 	.word	0x40022000

08000d84 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000d84:	4a02      	ldr	r2, [pc, #8]	; (8000d90 <HAL_IncTick+0xc>)
 8000d86:	6813      	ldr	r3, [r2, #0]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	4770      	bx	lr
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	20000148 	.word	0x20000148

08000d94 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d94:	4b01      	ldr	r3, [pc, #4]	; (8000d9c <HAL_GetTick+0x8>)
 8000d96:	6818      	ldr	r0, [r3, #0]
}
 8000d98:	4770      	bx	lr
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	20000148 	.word	0x20000148

08000da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000da0:	b513      	push	{r0, r1, r4, lr}
 8000da2:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 8000da4:	f7ff fff6 	bl	8000d94 <HAL_GetTick>
 8000da8:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000daa:	f7ff fff3 	bl	8000d94 <HAL_GetTick>
 8000dae:	9b01      	ldr	r3, [sp, #4]
 8000db0:	1b00      	subs	r0, r0, r4
 8000db2:	4298      	cmp	r0, r3
 8000db4:	d3f9      	bcc.n	8000daa <HAL_Delay+0xa>
  {
  }
}
 8000db6:	bd13      	pop	{r0, r1, r4, pc}

08000db8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db8:	b570      	push	{r4, r5, r6, lr}
 8000dba:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000dbc:	2800      	cmp	r0, #0
 8000dbe:	da14      	bge.n	8000dea <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc0:	230f      	movs	r3, #15
 8000dc2:	b2c0      	uxtb	r0, r0
 8000dc4:	4003      	ands	r3, r0
 8000dc6:	3b08      	subs	r3, #8
 8000dc8:	4a11      	ldr	r2, [pc, #68]	; (8000e10 <HAL_NVIC_SetPriority+0x58>)
 8000dca:	089b      	lsrs	r3, r3, #2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	189b      	adds	r3, r3, r2
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	4010      	ands	r0, r2
 8000dd4:	4090      	lsls	r0, r2
 8000dd6:	32fc      	adds	r2, #252	; 0xfc
 8000dd8:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dda:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ddc:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dde:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de0:	69dc      	ldr	r4, [r3, #28]
 8000de2:	43ac      	bics	r4, r5
 8000de4:	4321      	orrs	r1, r4
 8000de6:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000de8:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dea:	2503      	movs	r5, #3
 8000dec:	0883      	lsrs	r3, r0, #2
 8000dee:	4028      	ands	r0, r5
 8000df0:	40a8      	lsls	r0, r5
 8000df2:	35fc      	adds	r5, #252	; 0xfc
 8000df4:	002e      	movs	r6, r5
 8000df6:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <HAL_NVIC_SetPriority+0x5c>)
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	189b      	adds	r3, r3, r2
 8000dfc:	22c0      	movs	r2, #192	; 0xc0
 8000dfe:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e00:	4029      	ands	r1, r5
 8000e02:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e04:	0092      	lsls	r2, r2, #2
 8000e06:	589c      	ldr	r4, [r3, r2]
 8000e08:	43b4      	bics	r4, r6
 8000e0a:	4321      	orrs	r1, r4
 8000e0c:	5099      	str	r1, [r3, r2]
 8000e0e:	e7eb      	b.n	8000de8 <HAL_NVIC_SetPriority+0x30>
 8000e10:	e000ed00 	.word	0xe000ed00
 8000e14:	e000e100 	.word	0xe000e100

08000e18 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e18:	4a09      	ldr	r2, [pc, #36]	; (8000e40 <HAL_SYSTICK_Config+0x28>)
 8000e1a:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1c:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d80d      	bhi.n	8000e3e <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e22:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e24:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e26:	4808      	ldr	r0, [pc, #32]	; (8000e48 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e28:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e2a:	6a03      	ldr	r3, [r0, #32]
 8000e2c:	0609      	lsls	r1, r1, #24
 8000e2e:	021b      	lsls	r3, r3, #8
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	430b      	orrs	r3, r1
 8000e34:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e36:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e38:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e3a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e3e:	4770      	bx	lr
 8000e40:	00ffffff 	.word	0x00ffffff
 8000e44:	e000e010 	.word	0xe000e010
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e4e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000e50:	2804      	cmp	r0, #4
 8000e52:	d102      	bne.n	8000e5a <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e54:	4310      	orrs	r0, r2
 8000e56:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000e58:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000e5a:	2104      	movs	r1, #4
 8000e5c:	438a      	bics	r2, r1
 8000e5e:	601a      	str	r2, [r3, #0]
}
 8000e60:	e7fa      	b.n	8000e58 <HAL_SYSTICK_CLKSourceConfig+0xc>
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	e000e010 	.word	0xe000e010

08000e68 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000e68:	4770      	bx	lr

08000e6a <HAL_SYSTICK_IRQHandler>:
{
 8000e6a:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000e6c:	f7ff fffc 	bl	8000e68 <HAL_SYSTICK_Callback>
}
 8000e70:	bd10      	pop	{r4, pc}
	...

08000e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e74:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000e76:	4a55      	ldr	r2, [pc, #340]	; (8000fcc <HAL_GPIO_Init+0x158>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e78:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000e7a:	1882      	adds	r2, r0, r2
 8000e7c:	1e54      	subs	r4, r2, #1
 8000e7e:	41a2      	sbcs	r2, r4
{
 8000e80:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e82:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 8000e84:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000e86:	3205      	adds	r2, #5
 8000e88:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e8a:	9a01      	ldr	r2, [sp, #4]
 8000e8c:	40da      	lsrs	r2, r3
 8000e8e:	d101      	bne.n	8000e94 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8000e90:	b005      	add	sp, #20
 8000e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e94:	2501      	movs	r5, #1
 8000e96:	409d      	lsls	r5, r3
 8000e98:	9a01      	ldr	r2, [sp, #4]
 8000e9a:	402a      	ands	r2, r5
 8000e9c:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000e9e:	d100      	bne.n	8000ea2 <HAL_GPIO_Init+0x2e>
 8000ea0:	e091      	b.n	8000fc6 <HAL_GPIO_Init+0x152>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000ea2:	684a      	ldr	r2, [r1, #4]
 8000ea4:	4694      	mov	ip, r2
 8000ea6:	2210      	movs	r2, #16
 8000ea8:	4664      	mov	r4, ip
 8000eaa:	4394      	bics	r4, r2
 8000eac:	0022      	movs	r2, r4
 8000eae:	3c01      	subs	r4, #1
 8000eb0:	2a02      	cmp	r2, #2
 8000eb2:	d11f      	bne.n	8000ef4 <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000eb4:	2407      	movs	r4, #7
 8000eb6:	270f      	movs	r7, #15
 8000eb8:	401c      	ands	r4, r3
 8000eba:	00a4      	lsls	r4, r4, #2
 8000ebc:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 8000ebe:	08da      	lsrs	r2, r3, #3
 8000ec0:	0092      	lsls	r2, r2, #2
 8000ec2:	1882      	adds	r2, r0, r2
 8000ec4:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000ec6:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000ec8:	690f      	ldr	r7, [r1, #16]
 8000eca:	40a7      	lsls	r7, r4
 8000ecc:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8000ece:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000ed0:	2403      	movs	r4, #3
 8000ed2:	005e      	lsls	r6, r3, #1
 8000ed4:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 8000ed6:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000ed8:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eda:	68cc      	ldr	r4, [r1, #12]
 8000edc:	40b4      	lsls	r4, r6
 8000ede:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 8000ee0:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ee2:	4662      	mov	r2, ip
 8000ee4:	06d2      	lsls	r2, r2, #27
 8000ee6:	0fd2      	lsrs	r2, r2, #31
 8000ee8:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 8000eea:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eec:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000eee:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000ef0:	6042      	str	r2, [r0, #4]
 8000ef2:	e001      	b.n	8000ef8 <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ef4:	2c01      	cmp	r4, #1
 8000ef6:	d9eb      	bls.n	8000ed0 <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ef8:	2603      	movs	r6, #3
 8000efa:	0034      	movs	r4, r6
 8000efc:	005d      	lsls	r5, r3, #1
 8000efe:	40ac      	lsls	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f00:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f02:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f04:	4032      	ands	r2, r6
 8000f06:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 8000f08:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f0a:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f0c:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 8000f0e:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 8000f10:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f12:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000f14:	688a      	ldr	r2, [r1, #8]
 8000f16:	40aa      	lsls	r2, r5
 8000f18:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000f1a:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 8000f1c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000f1e:	00d2      	lsls	r2, r2, #3
 8000f20:	d551      	bpl.n	8000fc6 <HAL_GPIO_Init+0x152>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	2501      	movs	r5, #1
 8000f24:	4c2a      	ldr	r4, [pc, #168]	; (8000fd0 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000f26:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f28:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000f2a:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000f2c:	001d      	movs	r5, r3
 8000f2e:	4035      	ands	r5, r6
 8000f30:	00ad      	lsls	r5, r5, #2
 8000f32:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f34:	6362      	str	r2, [r4, #52]	; 0x34
 8000f36:	4a27      	ldr	r2, [pc, #156]	; (8000fd4 <HAL_GPIO_Init+0x160>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f38:	089c      	lsrs	r4, r3, #2
 8000f3a:	00a4      	lsls	r4, r4, #2
 8000f3c:	18a4      	adds	r4, r4, r2
 8000f3e:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000f40:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f42:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000f44:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f46:	05ff      	lsls	r7, r7, #23
 8000f48:	2200      	movs	r2, #0
 8000f4a:	42b8      	cmp	r0, r7
 8000f4c:	d010      	beq.n	8000f70 <HAL_GPIO_Init+0xfc>
 8000f4e:	4f22      	ldr	r7, [pc, #136]	; (8000fd8 <HAL_GPIO_Init+0x164>)
 8000f50:	3201      	adds	r2, #1
 8000f52:	42b8      	cmp	r0, r7
 8000f54:	d00c      	beq.n	8000f70 <HAL_GPIO_Init+0xfc>
 8000f56:	4f21      	ldr	r7, [pc, #132]	; (8000fdc <HAL_GPIO_Init+0x168>)
 8000f58:	3201      	adds	r2, #1
 8000f5a:	42b8      	cmp	r0, r7
 8000f5c:	d008      	beq.n	8000f70 <HAL_GPIO_Init+0xfc>
 8000f5e:	4f20      	ldr	r7, [pc, #128]	; (8000fe0 <HAL_GPIO_Init+0x16c>)
 8000f60:	0032      	movs	r2, r6
 8000f62:	42b8      	cmp	r0, r7
 8000f64:	d004      	beq.n	8000f70 <HAL_GPIO_Init+0xfc>
 8000f66:	4e1f      	ldr	r6, [pc, #124]	; (8000fe4 <HAL_GPIO_Init+0x170>)
 8000f68:	3201      	adds	r2, #1
 8000f6a:	42b0      	cmp	r0, r6
 8000f6c:	d000      	beq.n	8000f70 <HAL_GPIO_Init+0xfc>
 8000f6e:	9a03      	ldr	r2, [sp, #12]
 8000f70:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f72:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f74:	9d02      	ldr	r5, [sp, #8]
 8000f76:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f78:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000f7a:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <HAL_GPIO_Init+0x174>)
        temp &= ~((uint32_t)iocurrent);
 8000f7c:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 8000f7e:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8000f80:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f82:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000f84:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f86:	03ff      	lsls	r7, r7, #15
 8000f88:	d401      	bmi.n	8000f8e <HAL_GPIO_Init+0x11a>
        temp &= ~((uint32_t)iocurrent);
 8000f8a:	0035      	movs	r5, r6
 8000f8c:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f8e:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8000f90:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000f92:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000f94:	9d00      	ldr	r5, [sp, #0]
 8000f96:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f98:	03bf      	lsls	r7, r7, #14
 8000f9a:	d401      	bmi.n	8000fa0 <HAL_GPIO_Init+0x12c>
        temp &= ~((uint32_t)iocurrent);
 8000f9c:	0035      	movs	r5, r6
 8000f9e:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fa0:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8000fa2:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000fa4:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000fa6:	9d00      	ldr	r5, [sp, #0]
 8000fa8:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000faa:	02ff      	lsls	r7, r7, #11
 8000fac:	d401      	bmi.n	8000fb2 <HAL_GPIO_Init+0x13e>
        temp &= ~((uint32_t)iocurrent);
 8000fae:	0035      	movs	r5, r6
 8000fb0:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fb2:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000fb4:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000fb6:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000fb8:	9e00      	ldr	r6, [sp, #0]
 8000fba:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fbc:	02bf      	lsls	r7, r7, #10
 8000fbe:	d401      	bmi.n	8000fc4 <HAL_GPIO_Init+0x150>
        temp &= ~((uint32_t)iocurrent);
 8000fc0:	4025      	ands	r5, r4
 8000fc2:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8000fc4:	60d6      	str	r6, [r2, #12]
    position++;
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	e75f      	b.n	8000e8a <HAL_GPIO_Init+0x16>
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	afffe400 	.word	0xafffe400
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40010000 	.word	0x40010000
 8000fd8:	50000400 	.word	0x50000400
 8000fdc:	50000800 	.word	0x50000800
 8000fe0:	50000c00 	.word	0x50000c00
 8000fe4:	50001000 	.word	0x50001000
 8000fe8:	40010400 	.word	0x40010400

08000fec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8000fec:	2a00      	cmp	r2, #0
 8000fee:	d001      	beq.n	8000ff4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ff0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000ff2:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8000ff4:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000ff6:	e7fc      	b.n	8000ff2 <HAL_GPIO_WritePin+0x6>

08000ff8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000ff8:	6803      	ldr	r3, [r0, #0]
 8000ffa:	699a      	ldr	r2, [r3, #24]
 8000ffc:	0792      	lsls	r2, r2, #30
 8000ffe:	d501      	bpl.n	8001004 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001000:	2200      	movs	r2, #0
 8001002:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001004:	2201      	movs	r2, #1
 8001006:	6999      	ldr	r1, [r3, #24]
 8001008:	4211      	tst	r1, r2
 800100a:	d102      	bne.n	8001012 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800100c:	6999      	ldr	r1, [r3, #24]
 800100e:	430a      	orrs	r2, r1
 8001010:	619a      	str	r2, [r3, #24]
  }
}
 8001012:	4770      	bx	lr

08001014 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001014:	b570      	push	{r4, r5, r6, lr}
 8001016:	9e04      	ldr	r6, [sp, #16]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001018:	0589      	lsls	r1, r1, #22
 800101a:	4333      	orrs	r3, r6
 800101c:	0d89      	lsrs	r1, r1, #22
 800101e:	4319      	orrs	r1, r3
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	6804      	ldr	r4, [r0, #0]
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	0d70      	lsrs	r0, r6, #21
 8001028:	4018      	ands	r0, r3
 800102a:	4b04      	ldr	r3, [pc, #16]	; (800103c <I2C_TransferConfig+0x28>)
 800102c:	6865      	ldr	r5, [r4, #4]
 800102e:	0412      	lsls	r2, r2, #16
 8001030:	4318      	orrs	r0, r3
 8001032:	4385      	bics	r5, r0
 8001034:	4311      	orrs	r1, r2
 8001036:	4329      	orrs	r1, r5
 8001038:	6061      	str	r1, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800103a:	bd70      	pop	{r4, r5, r6, pc}
 800103c:	03ff63ff 	.word	0x03ff63ff

08001040 <I2C_WaitOnFlagUntilTimeout>:
{
 8001040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001042:	0004      	movs	r4, r0
 8001044:	000e      	movs	r6, r1
 8001046:	0017      	movs	r7, r2
 8001048:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800104a:	6822      	ldr	r2, [r4, #0]
 800104c:	6993      	ldr	r3, [r2, #24]
 800104e:	4033      	ands	r3, r6
 8001050:	1b9b      	subs	r3, r3, r6
 8001052:	4259      	negs	r1, r3
 8001054:	414b      	adcs	r3, r1
 8001056:	42bb      	cmp	r3, r7
 8001058:	d001      	beq.n	800105e <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800105a:	2000      	movs	r0, #0
 800105c:	e00e      	b.n	800107c <I2C_WaitOnFlagUntilTimeout+0x3c>
    if (Timeout != HAL_MAX_DELAY)
 800105e:	1c6b      	adds	r3, r5, #1
 8001060:	d0f4      	beq.n	800104c <I2C_WaitOnFlagUntilTimeout+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001062:	2d00      	cmp	r5, #0
 8001064:	d10b      	bne.n	800107e <I2C_WaitOnFlagUntilTimeout+0x3e>
        hi2c->State = HAL_I2C_STATE_READY;
 8001066:	0023      	movs	r3, r4
 8001068:	2220      	movs	r2, #32
 800106a:	3341      	adds	r3, #65	; 0x41
 800106c:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800106e:	0022      	movs	r2, r4
 8001070:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8001072:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001074:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8001076:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001078:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800107a:	7023      	strb	r3, [r4, #0]
}
 800107c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800107e:	f7ff fe89 	bl	8000d94 <HAL_GetTick>
 8001082:	9b06      	ldr	r3, [sp, #24]
 8001084:	1ac0      	subs	r0, r0, r3
 8001086:	4285      	cmp	r5, r0
 8001088:	d2df      	bcs.n	800104a <I2C_WaitOnFlagUntilTimeout+0xa>
 800108a:	e7ec      	b.n	8001066 <I2C_WaitOnFlagUntilTimeout+0x26>

0800108c <I2C_IsAcknowledgeFailed>:
{
 800108c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800108e:	6803      	ldr	r3, [r0, #0]
{
 8001090:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001092:	6998      	ldr	r0, [r3, #24]
 8001094:	2310      	movs	r3, #16
{
 8001096:	000e      	movs	r6, r1
 8001098:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800109a:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800109c:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800109e:	2800      	cmp	r0, #0
 80010a0:	d115      	bne.n	80010ce <I2C_IsAcknowledgeFailed+0x42>
}
 80010a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 80010a4:	1c72      	adds	r2, r6, #1
 80010a6:	d013      	beq.n	80010d0 <I2C_IsAcknowledgeFailed+0x44>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80010a8:	2e00      	cmp	r6, #0
 80010aa:	d10b      	bne.n	80010c4 <I2C_IsAcknowledgeFailed+0x38>
          hi2c->State = HAL_I2C_STATE_READY;
 80010ac:	0023      	movs	r3, r4
 80010ae:	2220      	movs	r2, #32
 80010b0:	3341      	adds	r3, #65	; 0x41
 80010b2:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80010b4:	0022      	movs	r2, r4
 80010b6:	2300      	movs	r3, #0
 80010b8:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 80010ba:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80010bc:	7013      	strb	r3, [r2, #0]
          return HAL_TIMEOUT;
 80010be:	2003      	movs	r0, #3
          __HAL_UNLOCK(hi2c);
 80010c0:	7023      	strb	r3, [r4, #0]
 80010c2:	e7ee      	b.n	80010a2 <I2C_IsAcknowledgeFailed+0x16>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80010c4:	f7ff fe66 	bl	8000d94 <HAL_GetTick>
 80010c8:	1bc0      	subs	r0, r0, r7
 80010ca:	4286      	cmp	r6, r0
 80010cc:	d3ee      	bcc.n	80010ac <I2C_IsAcknowledgeFailed+0x20>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80010ce:	6823      	ldr	r3, [r4, #0]
 80010d0:	699a      	ldr	r2, [r3, #24]
 80010d2:	422a      	tst	r2, r5
 80010d4:	d0e6      	beq.n	80010a4 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010d6:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 80010d8:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010da:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80010dc:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80010de:	f7ff ff8b 	bl	8000ff8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80010e2:	6822      	ldr	r2, [r4, #0]
 80010e4:	4908      	ldr	r1, [pc, #32]	; (8001108 <I2C_IsAcknowledgeFailed+0x7c>)
 80010e6:	6853      	ldr	r3, [r2, #4]
    return HAL_ERROR;
 80010e8:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80010ea:	400b      	ands	r3, r1
 80010ec:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80010ee:	2304      	movs	r3, #4
 80010f0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80010f2:	0023      	movs	r3, r4
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80010f4:	0022      	movs	r2, r4
    hi2c->State = HAL_I2C_STATE_READY;
 80010f6:	3341      	adds	r3, #65	; 0x41
 80010f8:	701d      	strb	r5, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 80010fe:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001100:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8001102:	7023      	strb	r3, [r4, #0]
 8001104:	e7cd      	b.n	80010a2 <I2C_IsAcknowledgeFailed+0x16>
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	fe00e800 	.word	0xfe00e800

0800110c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800110c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800110e:	0004      	movs	r4, r0
 8001110:	000d      	movs	r5, r1
 8001112:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001114:	2702      	movs	r7, #2
 8001116:	6823      	ldr	r3, [r4, #0]
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	423b      	tst	r3, r7
 800111c:	d001      	beq.n	8001122 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 800111e:	2000      	movs	r0, #0
 8001120:	e018      	b.n	8001154 <I2C_WaitOnTXISFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001122:	0032      	movs	r2, r6
 8001124:	0029      	movs	r1, r5
 8001126:	0020      	movs	r0, r4
 8001128:	f7ff ffb0 	bl	800108c <I2C_IsAcknowledgeFailed>
 800112c:	2800      	cmp	r0, #0
 800112e:	d118      	bne.n	8001162 <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8001130:	1c6b      	adds	r3, r5, #1
 8001132:	d0f0      	beq.n	8001116 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001134:	2d00      	cmp	r5, #0
 8001136:	d10e      	bne.n	8001156 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001138:	2220      	movs	r2, #32
 800113a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800113c:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800113e:	4313      	orrs	r3, r2
 8001140:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001142:	0023      	movs	r3, r4
 8001144:	3341      	adds	r3, #65	; 0x41
 8001146:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001148:	0022      	movs	r2, r4
 800114a:	2300      	movs	r3, #0
 800114c:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 800114e:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001150:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8001152:	7023      	strb	r3, [r4, #0]
}
 8001154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001156:	f7ff fe1d 	bl	8000d94 <HAL_GetTick>
 800115a:	1b80      	subs	r0, r0, r6
 800115c:	4285      	cmp	r5, r0
 800115e:	d2da      	bcs.n	8001116 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 8001160:	e7ea      	b.n	8001138 <I2C_WaitOnTXISFlagUntilTimeout+0x2c>
      return HAL_ERROR;
 8001162:	2001      	movs	r0, #1
 8001164:	e7f6      	b.n	8001154 <I2C_WaitOnTXISFlagUntilTimeout+0x48>
	...

08001168 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800116a:	0004      	movs	r4, r0
 800116c:	000d      	movs	r5, r1
 800116e:	0017      	movs	r7, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001170:	2620      	movs	r6, #32
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001172:	2204      	movs	r2, #4
 8001174:	6823      	ldr	r3, [r4, #0]
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4213      	tst	r3, r2
 800117a:	d001      	beq.n	8001180 <I2C_WaitOnRXNEFlagUntilTimeout+0x18>
  return HAL_OK;
 800117c:	2000      	movs	r0, #0
 800117e:	e025      	b.n	80011cc <I2C_WaitOnRXNEFlagUntilTimeout+0x64>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001180:	003a      	movs	r2, r7
 8001182:	0029      	movs	r1, r5
 8001184:	0020      	movs	r0, r4
 8001186:	f7ff ff81 	bl	800108c <I2C_IsAcknowledgeFailed>
 800118a:	2800      	cmp	r0, #0
 800118c:	d10f      	bne.n	80011ae <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800118e:	6823      	ldr	r3, [r4, #0]
 8001190:	699a      	ldr	r2, [r3, #24]
 8001192:	4232      	tst	r2, r6
 8001194:	d00d      	beq.n	80011b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001196:	61de      	str	r6, [r3, #28]
      I2C_RESET_CR2(hi2c);
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	4910      	ldr	r1, [pc, #64]	; (80011dc <I2C_WaitOnRXNEFlagUntilTimeout+0x74>)
 800119c:	400a      	ands	r2, r1
 800119e:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_READY;
 80011a0:	0023      	movs	r3, r4
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011a2:	6460      	str	r0, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80011a4:	3341      	adds	r3, #65	; 0x41
      __HAL_UNLOCK(hi2c);
 80011a6:	3440      	adds	r4, #64	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 80011a8:	701e      	strb	r6, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80011aa:	7058      	strb	r0, [r3, #1]
      __HAL_UNLOCK(hi2c);
 80011ac:	7020      	strb	r0, [r4, #0]
      return HAL_ERROR;
 80011ae:	2001      	movs	r0, #1
 80011b0:	e00c      	b.n	80011cc <I2C_WaitOnRXNEFlagUntilTimeout+0x64>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80011b2:	2d00      	cmp	r5, #0
 80011b4:	d10b      	bne.n	80011ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80011b6:	2220      	movs	r2, #32
 80011b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80011ba:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80011bc:	4313      	orrs	r3, r2
 80011be:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80011c0:	0023      	movs	r3, r4
 80011c2:	3341      	adds	r3, #65	; 0x41
 80011c4:	701a      	strb	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);
 80011c6:	2300      	movs	r3, #0
 80011c8:	3440      	adds	r4, #64	; 0x40
 80011ca:	7023      	strb	r3, [r4, #0]
}
 80011cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80011ce:	f7ff fde1 	bl	8000d94 <HAL_GetTick>
 80011d2:	1bc0      	subs	r0, r0, r7
 80011d4:	4285      	cmp	r5, r0
 80011d6:	d2cc      	bcs.n	8001172 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
 80011d8:	e7ed      	b.n	80011b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	fe00e800 	.word	0xfe00e800

080011e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80011e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011e2:	0004      	movs	r4, r0
 80011e4:	000d      	movs	r5, r1
 80011e6:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80011e8:	2720      	movs	r7, #32
 80011ea:	6823      	ldr	r3, [r4, #0]
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	423b      	tst	r3, r7
 80011f0:	d001      	beq.n	80011f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80011f2:	2000      	movs	r0, #0
 80011f4:	e016      	b.n	8001224 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80011f6:	0032      	movs	r2, r6
 80011f8:	0029      	movs	r1, r5
 80011fa:	0020      	movs	r0, r4
 80011fc:	f7ff ff46 	bl	800108c <I2C_IsAcknowledgeFailed>
 8001200:	2800      	cmp	r0, #0
 8001202:	d116      	bne.n	8001232 <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001204:	2d00      	cmp	r5, #0
 8001206:	d10e      	bne.n	8001226 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001208:	2220      	movs	r2, #32
 800120a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800120c:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800120e:	4313      	orrs	r3, r2
 8001210:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001212:	0023      	movs	r3, r4
 8001214:	3341      	adds	r3, #65	; 0x41
 8001216:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001218:	0022      	movs	r2, r4
 800121a:	2300      	movs	r3, #0
 800121c:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 800121e:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001220:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8001222:	7023      	strb	r3, [r4, #0]
}
 8001224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001226:	f7ff fdb5 	bl	8000d94 <HAL_GetTick>
 800122a:	1b80      	subs	r0, r0, r6
 800122c:	4285      	cmp	r5, r0
 800122e:	d2dc      	bcs.n	80011ea <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 8001230:	e7ea      	b.n	8001208 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
      return HAL_ERROR;
 8001232:	2001      	movs	r0, #1
 8001234:	e7f6      	b.n	8001224 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
	...

08001238 <HAL_I2C_Init>:
{
 8001238:	b570      	push	{r4, r5, r6, lr}
 800123a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800123c:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800123e:	2c00      	cmp	r4, #0
 8001240:	d03f      	beq.n	80012c2 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001242:	0025      	movs	r5, r4
 8001244:	3541      	adds	r5, #65	; 0x41
 8001246:	782b      	ldrb	r3, [r5, #0]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d105      	bne.n	800125a <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 800124e:	0022      	movs	r2, r4
 8001250:	3240      	adds	r2, #64	; 0x40
 8001252:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 8001254:	0020      	movs	r0, r4
 8001256:	f7ff fa87 	bl	8000768 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800125a:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800125c:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800125e:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8001260:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001262:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	68a6      	ldr	r6, [r4, #8]
 8001268:	438a      	bics	r2, r1
 800126a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800126c:	6861      	ldr	r1, [r4, #4]
 800126e:	4a1a      	ldr	r2, [pc, #104]	; (80012d8 <HAL_I2C_Init+0xa0>)
 8001270:	400a      	ands	r2, r1
 8001272:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001274:	6899      	ldr	r1, [r3, #8]
 8001276:	4a19      	ldr	r2, [pc, #100]	; (80012dc <HAL_I2C_Init+0xa4>)
 8001278:	4011      	ands	r1, r2
 800127a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800127c:	2801      	cmp	r0, #1
 800127e:	d121      	bne.n	80012c4 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001280:	2180      	movs	r1, #128	; 0x80
 8001282:	0209      	lsls	r1, r1, #8
 8001284:	4331      	orrs	r1, r6
 8001286:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001288:	6858      	ldr	r0, [r3, #4]
 800128a:	4915      	ldr	r1, [pc, #84]	; (80012e0 <HAL_I2C_Init+0xa8>)
 800128c:	4301      	orrs	r1, r0
 800128e:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001290:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001292:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001294:	400a      	ands	r2, r1
 8001296:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001298:	6961      	ldr	r1, [r4, #20]
 800129a:	6922      	ldr	r2, [r4, #16]
 800129c:	430a      	orrs	r2, r1
 800129e:	69a1      	ldr	r1, [r4, #24]
 80012a0:	0209      	lsls	r1, r1, #8
 80012a2:	430a      	orrs	r2, r1
 80012a4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012a6:	6a21      	ldr	r1, [r4, #32]
 80012a8:	69e2      	ldr	r2, [r4, #28]
 80012aa:	430a      	orrs	r2, r1
 80012ac:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80012ae:	2201      	movs	r2, #1
 80012b0:	6819      	ldr	r1, [r3, #0]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80012b6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012b8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012ba:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80012bc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012be:	3442      	adds	r4, #66	; 0x42
 80012c0:	7020      	strb	r0, [r4, #0]
}
 80012c2:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012c4:	2184      	movs	r1, #132	; 0x84
 80012c6:	0209      	lsls	r1, r1, #8
 80012c8:	4331      	orrs	r1, r6
 80012ca:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012cc:	2802      	cmp	r0, #2
 80012ce:	d1db      	bne.n	8001288 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012d0:	2180      	movs	r1, #128	; 0x80
 80012d2:	0109      	lsls	r1, r1, #4
 80012d4:	6059      	str	r1, [r3, #4]
 80012d6:	e7d7      	b.n	8001288 <HAL_I2C_Init+0x50>
 80012d8:	f0ffffff 	.word	0xf0ffffff
 80012dc:	ffff7fff 	.word	0xffff7fff
 80012e0:	02008000 	.word	0x02008000

080012e4 <HAL_I2C_Master_Transmit>:
{
 80012e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80012e6:	0005      	movs	r5, r0
{
 80012e8:	b087      	sub	sp, #28
 80012ea:	9103      	str	r1, [sp, #12]
 80012ec:	9204      	str	r2, [sp, #16]
 80012ee:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80012f0:	3541      	adds	r5, #65	; 0x41
 80012f2:	782b      	ldrb	r3, [r5, #0]
{
 80012f4:	0004      	movs	r4, r0
    return HAL_BUSY;
 80012f6:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80012f8:	2b20      	cmp	r3, #32
 80012fa:	d156      	bne.n	80013aa <HAL_I2C_Master_Transmit+0xc6>
    __HAL_LOCK(hi2c);
 80012fc:	0023      	movs	r3, r4
 80012fe:	3340      	adds	r3, #64	; 0x40
 8001300:	781a      	ldrb	r2, [r3, #0]
 8001302:	2a01      	cmp	r2, #1
 8001304:	d051      	beq.n	80013aa <HAL_I2C_Master_Transmit+0xc6>
 8001306:	2601      	movs	r6, #1
 8001308:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 800130a:	f7ff fd43 	bl	8000d94 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800130e:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8001310:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001312:	9000      	str	r0, [sp, #0]
 8001314:	2319      	movs	r3, #25
 8001316:	0032      	movs	r2, r6
 8001318:	0209      	lsls	r1, r1, #8
 800131a:	0020      	movs	r0, r4
 800131c:	f7ff fe90 	bl	8001040 <I2C_WaitOnFlagUntilTimeout>
 8001320:	2800      	cmp	r0, #0
 8001322:	d141      	bne.n	80013a8 <HAL_I2C_Master_Transmit+0xc4>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001324:	2321      	movs	r3, #33	; 0x21
 8001326:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001328:	3b11      	subs	r3, #17
 800132a:	19ad      	adds	r5, r5, r6
 800132c:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 800132e:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001330:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001332:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001334:	466b      	mov	r3, sp
 8001336:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 8001338:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800133a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800133c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800133e:	4b34      	ldr	r3, [pc, #208]	; (8001410 <HAL_I2C_Master_Transmit+0x12c>)
 8001340:	2aff      	cmp	r2, #255	; 0xff
 8001342:	d921      	bls.n	8001388 <HAL_I2C_Master_Transmit+0xa4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001344:	22ff      	movs	r2, #255	; 0xff
 8001346:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	045b      	lsls	r3, r3, #17
 800134e:	9903      	ldr	r1, [sp, #12]
 8001350:	0020      	movs	r0, r4
 8001352:	f7ff fe5f 	bl	8001014 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001356:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 8001358:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800135a:	003a      	movs	r2, r7
 800135c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800135e:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 8001360:	2b00      	cmp	r3, #0
 8001362:	d119      	bne.n	8001398 <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001364:	f7ff ff3c 	bl	80011e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001368:	2800      	cmp	r0, #0
 800136a:	d119      	bne.n	80013a0 <HAL_I2C_Master_Transmit+0xbc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800136c:	2120      	movs	r1, #32
 800136e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8001370:	4e28      	ldr	r6, [pc, #160]	; (8001414 <HAL_I2C_Master_Transmit+0x130>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001372:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	4032      	ands	r2, r6
 8001378:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800137a:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 800137c:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800137e:	3341      	adds	r3, #65	; 0x41
 8001380:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001382:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8001384:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8001386:	e010      	b.n	80013aa <HAL_I2C_Master_Transmit+0xc6>
      hi2c->XferSize = hi2c->XferCount;
 8001388:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800138a:	b292      	uxth	r2, r2
 800138c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	049b      	lsls	r3, r3, #18
 8001396:	e7da      	b.n	800134e <HAL_I2C_Master_Transmit+0x6a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001398:	f7ff feb8 	bl	800110c <I2C_WaitOnTXISFlagUntilTimeout>
 800139c:	2800      	cmp	r0, #0
 800139e:	d006      	beq.n	80013ae <HAL_I2C_Master_Transmit+0xca>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80013a2:	2001      	movs	r0, #1
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013a4:	2b04      	cmp	r3, #4
 80013a6:	d000      	beq.n	80013aa <HAL_I2C_Master_Transmit+0xc6>
          return HAL_TIMEOUT;
 80013a8:	2003      	movs	r0, #3
}
 80013aa:	b007      	add	sp, #28
 80013ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80013ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013b0:	6822      	ldr	r2, [r4, #0]
 80013b2:	1c59      	adds	r1, r3, #1
 80013b4:	6261      	str	r1, [r4, #36]	; 0x24
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 80013ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80013bc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80013be:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80013c0:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80013c2:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80013c4:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80013c6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80013c8:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80013ca:	2a00      	cmp	r2, #0
 80013cc:	d1c4      	bne.n	8001358 <HAL_I2C_Master_Transmit+0x74>
 80013ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0c1      	beq.n	8001358 <HAL_I2C_Master_Transmit+0x74>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013d4:	9700      	str	r7, [sp, #0]
 80013d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80013d8:	2180      	movs	r1, #128	; 0x80
 80013da:	0020      	movs	r0, r4
 80013dc:	f7ff fe30 	bl	8001040 <I2C_WaitOnFlagUntilTimeout>
 80013e0:	2800      	cmp	r0, #0
 80013e2:	d1e1      	bne.n	80013a8 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013e6:	2bff      	cmp	r3, #255	; 0xff
 80013e8:	d909      	bls.n	80013fe <HAL_I2C_Master_Transmit+0x11a>
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013ee:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013f0:	045b      	lsls	r3, r3, #17
 80013f2:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80013f4:	9903      	ldr	r1, [sp, #12]
 80013f6:	0020      	movs	r0, r4
 80013f8:	f7ff fe0c 	bl	8001014 <I2C_TransferConfig>
 80013fc:	e7ac      	b.n	8001358 <HAL_I2C_Master_Transmit+0x74>
 80013fe:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8001400:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001402:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8001404:	b292      	uxth	r2, r2
 8001406:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	9000      	str	r0, [sp, #0]
 800140c:	e7f2      	b.n	80013f4 <HAL_I2C_Master_Transmit+0x110>
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	80002000 	.word	0x80002000
 8001414:	fe00e800 	.word	0xfe00e800

08001418 <HAL_I2C_Master_Receive>:
{
 8001418:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800141a:	0005      	movs	r5, r0
{
 800141c:	b087      	sub	sp, #28
 800141e:	9103      	str	r1, [sp, #12]
 8001420:	9204      	str	r2, [sp, #16]
 8001422:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001424:	3541      	adds	r5, #65	; 0x41
 8001426:	782b      	ldrb	r3, [r5, #0]
{
 8001428:	0004      	movs	r4, r0
    return HAL_BUSY;
 800142a:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800142c:	2b20      	cmp	r3, #32
 800142e:	d156      	bne.n	80014de <HAL_I2C_Master_Receive+0xc6>
    __HAL_LOCK(hi2c);
 8001430:	0023      	movs	r3, r4
 8001432:	3340      	adds	r3, #64	; 0x40
 8001434:	781a      	ldrb	r2, [r3, #0]
 8001436:	2a01      	cmp	r2, #1
 8001438:	d051      	beq.n	80014de <HAL_I2C_Master_Receive+0xc6>
 800143a:	2601      	movs	r6, #1
 800143c:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 800143e:	f7ff fca9 	bl	8000d94 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001442:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8001444:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001446:	9000      	str	r0, [sp, #0]
 8001448:	2319      	movs	r3, #25
 800144a:	0032      	movs	r2, r6
 800144c:	0209      	lsls	r1, r1, #8
 800144e:	0020      	movs	r0, r4
 8001450:	f7ff fdf6 	bl	8001040 <I2C_WaitOnFlagUntilTimeout>
 8001454:	2800      	cmp	r0, #0
 8001456:	d141      	bne.n	80014dc <HAL_I2C_Master_Receive+0xc4>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001458:	2322      	movs	r3, #34	; 0x22
 800145a:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800145c:	3b12      	subs	r3, #18
 800145e:	19ad      	adds	r5, r5, r6
 8001460:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 8001462:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001464:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001466:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001468:	466b      	mov	r3, sp
 800146a:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 800146c:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800146e:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001470:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001472:	4b34      	ldr	r3, [pc, #208]	; (8001544 <HAL_I2C_Master_Receive+0x12c>)
 8001474:	2aff      	cmp	r2, #255	; 0xff
 8001476:	d921      	bls.n	80014bc <HAL_I2C_Master_Receive+0xa4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001478:	22ff      	movs	r2, #255	; 0xff
 800147a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2380      	movs	r3, #128	; 0x80
 8001480:	045b      	lsls	r3, r3, #17
 8001482:	9903      	ldr	r1, [sp, #12]
 8001484:	0020      	movs	r0, r4
 8001486:	f7ff fdc5 	bl	8001014 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800148a:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 800148c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800148e:	003a      	movs	r2, r7
 8001490:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001492:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 8001494:	2b00      	cmp	r3, #0
 8001496:	d119      	bne.n	80014cc <HAL_I2C_Master_Receive+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001498:	f7ff fea2 	bl	80011e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800149c:	2800      	cmp	r0, #0
 800149e:	d119      	bne.n	80014d4 <HAL_I2C_Master_Receive+0xbc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014a0:	2120      	movs	r1, #32
 80014a2:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80014a4:	4e28      	ldr	r6, [pc, #160]	; (8001548 <HAL_I2C_Master_Receive+0x130>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014a6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	4032      	ands	r2, r6
 80014ac:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80014ae:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80014b0:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80014b2:	3341      	adds	r3, #65	; 0x41
 80014b4:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014b6:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80014b8:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80014ba:	e010      	b.n	80014de <HAL_I2C_Master_Receive+0xc6>
      hi2c->XferSize = hi2c->XferCount;
 80014bc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80014be:	b292      	uxth	r2, r2
 80014c0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	049b      	lsls	r3, r3, #18
 80014ca:	e7da      	b.n	8001482 <HAL_I2C_Master_Receive+0x6a>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014cc:	f7ff fe4c 	bl	8001168 <I2C_WaitOnRXNEFlagUntilTimeout>
 80014d0:	2800      	cmp	r0, #0
 80014d2:	d006      	beq.n	80014e2 <HAL_I2C_Master_Receive+0xca>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80014d6:	2001      	movs	r0, #1
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014d8:	2b04      	cmp	r3, #4
 80014da:	d000      	beq.n	80014de <HAL_I2C_Master_Receive+0xc6>
          return HAL_TIMEOUT;
 80014dc:	2003      	movs	r0, #3
}
 80014de:	b007      	add	sp, #28
 80014e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80014e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	6262      	str	r2, [r4, #36]	; 0x24
 80014e8:	6822      	ldr	r2, [r4, #0]
 80014ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014ec:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80014ee:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80014f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80014f2:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80014f4:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80014f6:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80014f8:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80014fa:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80014fc:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80014fe:	2a00      	cmp	r2, #0
 8001500:	d1c4      	bne.n	800148c <HAL_I2C_Master_Receive+0x74>
 8001502:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0c1      	beq.n	800148c <HAL_I2C_Master_Receive+0x74>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001508:	9700      	str	r7, [sp, #0]
 800150a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800150c:	2180      	movs	r1, #128	; 0x80
 800150e:	0020      	movs	r0, r4
 8001510:	f7ff fd96 	bl	8001040 <I2C_WaitOnFlagUntilTimeout>
 8001514:	2800      	cmp	r0, #0
 8001516:	d1e1      	bne.n	80014dc <HAL_I2C_Master_Receive+0xc4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001518:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800151a:	2bff      	cmp	r3, #255	; 0xff
 800151c:	d909      	bls.n	8001532 <HAL_I2C_Master_Receive+0x11a>
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800151e:	2380      	movs	r3, #128	; 0x80
 8001520:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001522:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001524:	045b      	lsls	r3, r3, #17
 8001526:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001528:	9903      	ldr	r1, [sp, #12]
 800152a:	0020      	movs	r0, r4
 800152c:	f7ff fd72 	bl	8001014 <I2C_TransferConfig>
 8001530:	e7ac      	b.n	800148c <HAL_I2C_Master_Receive+0x74>
 8001532:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8001534:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001536:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8001538:	b292      	uxth	r2, r2
 800153a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	9000      	str	r0, [sp, #0]
 8001540:	e7f2      	b.n	8001528 <HAL_I2C_Master_Receive+0x110>
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	80002400 	.word	0x80002400
 8001548:	fe00e800 	.word	0xfe00e800

0800154c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800154c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800154e:	0004      	movs	r4, r0
 8001550:	3441      	adds	r4, #65	; 0x41
 8001552:	7822      	ldrb	r2, [r4, #0]
{
 8001554:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001556:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001558:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800155a:	2a20      	cmp	r2, #32
 800155c:	d118      	bne.n	8001590 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 800155e:	001d      	movs	r5, r3
 8001560:	3540      	adds	r5, #64	; 0x40
 8001562:	782e      	ldrb	r6, [r5, #0]
 8001564:	2e01      	cmp	r6, #1
 8001566:	d013      	beq.n	8001590 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8001568:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800156a:	3022      	adds	r0, #34	; 0x22
 800156c:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800156e:	681e      	ldr	r6, [r3, #0]
 8001570:	3823      	subs	r0, #35	; 0x23
 8001572:	4386      	bics	r6, r0
 8001574:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001576:	681e      	ldr	r6, [r3, #0]
 8001578:	4f06      	ldr	r7, [pc, #24]	; (8001594 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 800157a:	403e      	ands	r6, r7
 800157c:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800157e:	681e      	ldr	r6, [r3, #0]
 8001580:	4331      	orrs	r1, r6
 8001582:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001584:	6819      	ldr	r1, [r3, #0]
 8001586:	4308      	orrs	r0, r1
 8001588:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800158a:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800158c:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 800158e:	7028      	strb	r0, [r5, #0]
  }
}
 8001590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	ffffefff 	.word	0xffffefff

08001598 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001598:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800159a:	0005      	movs	r5, r0
 800159c:	3541      	adds	r5, #65	; 0x41
 800159e:	782a      	ldrb	r2, [r5, #0]
{
 80015a0:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80015a2:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80015a4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80015a6:	2a20      	cmp	r2, #32
 80015a8:	d117      	bne.n	80015da <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 80015aa:	001c      	movs	r4, r3
 80015ac:	3440      	adds	r4, #64	; 0x40
 80015ae:	7826      	ldrb	r6, [r4, #0]
 80015b0:	2e01      	cmp	r6, #1
 80015b2:	d012      	beq.n	80015da <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 80015b4:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80015b6:	3022      	adds	r0, #34	; 0x22
 80015b8:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 80015ba:	681e      	ldr	r6, [r3, #0]
 80015bc:	3823      	subs	r0, #35	; 0x23
 80015be:	4386      	bics	r6, r0
 80015c0:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80015c2:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80015c4:	4f05      	ldr	r7, [pc, #20]	; (80015dc <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 80015c6:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80015c8:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80015ca:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80015cc:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80015ce:	6819      	ldr	r1, [r3, #0]
 80015d0:	4308      	orrs	r0, r1
 80015d2:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80015d4:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80015d6:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80015d8:	7020      	strb	r0, [r4, #0]
  }
}
 80015da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015dc:	fffff0ff 	.word	0xfffff0ff

080015e0 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80015e0:	22f0      	movs	r2, #240	; 0xf0
 80015e2:	4b17      	ldr	r3, [pc, #92]	; (8001640 <RCC_SetFlashLatencyFromMSIRange+0x60>)
{
 80015e4:	b530      	push	{r4, r5, lr}
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80015e6:	68d9      	ldr	r1, [r3, #12]
 80015e8:	4211      	tst	r1, r2
 80015ea:	d00b      	beq.n	8001604 <RCC_SetFlashLatencyFromMSIRange+0x24>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80015ec:	2300      	movs	r3, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 80015ee:	2101      	movs	r1, #1
 80015f0:	4814      	ldr	r0, [pc, #80]	; (8001644 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80015f2:	6802      	ldr	r2, [r0, #0]
 80015f4:	438a      	bics	r2, r1
 80015f6:	431a      	orrs	r2, r3
 80015f8:	6002      	str	r2, [r0, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80015fa:	6800      	ldr	r0, [r0, #0]
 80015fc:	4008      	ands	r0, r1
 80015fe:	4058      	eors	r0, r3
 8001600:	4008      	ands	r0, r1
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8001602:	bd30      	pop	{r4, r5, pc}
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001604:	2180      	movs	r1, #128	; 0x80
 8001606:	22c0      	movs	r2, #192	; 0xc0
 8001608:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800160a:	0549      	lsls	r1, r1, #21
 800160c:	4c0e      	ldr	r4, [pc, #56]	; (8001648 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800160e:	0152      	lsls	r2, r2, #5
 8001610:	420d      	tst	r5, r1
 8001612:	d00a      	beq.n	800162a <RCC_SetFlashLatencyFromMSIRange+0x4a>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001614:	6823      	ldr	r3, [r4, #0]
 8001616:	401a      	ands	r2, r3
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001618:	23c0      	movs	r3, #192	; 0xc0
 800161a:	015b      	lsls	r3, r3, #5
 800161c:	429a      	cmp	r2, r3
 800161e:	d1e5      	bne.n	80015ec <RCC_SetFlashLatencyFromMSIRange+0xc>
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8001622:	18c0      	adds	r0, r0, r3
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001624:	4243      	negs	r3, r0
 8001626:	4143      	adcs	r3, r0
 8001628:	e7e1      	b.n	80015ee <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800162c:	4329      	orrs	r1, r5
 800162e:	6399      	str	r1, [r3, #56]	; 0x38
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001630:	6821      	ldr	r1, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001632:	4c07      	ldr	r4, [pc, #28]	; (8001650 <RCC_SetFlashLatencyFromMSIRange+0x70>)
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001634:	400a      	ands	r2, r1
      __HAL_RCC_PWR_CLK_DISABLE();
 8001636:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001638:	4021      	ands	r1, r4
 800163a:	6399      	str	r1, [r3, #56]	; 0x38
 800163c:	e7ec      	b.n	8001618 <RCC_SetFlashLatencyFromMSIRange+0x38>
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	40021000 	.word	0x40021000
 8001644:	40022000 	.word	0x40022000
 8001648:	40007000 	.word	0x40007000
 800164c:	ffff4000 	.word	0xffff4000
 8001650:	efffffff 	.word	0xefffffff

08001654 <HAL_RCC_OscConfig>:
{
 8001654:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001656:	6803      	ldr	r3, [r0, #0]
{
 8001658:	b085      	sub	sp, #20
 800165a:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800165c:	07db      	lsls	r3, r3, #31
 800165e:	d44e      	bmi.n	80016fe <HAL_RCC_OscConfig+0xaa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001660:	6823      	ldr	r3, [r4, #0]
 8001662:	079b      	lsls	r3, r3, #30
 8001664:	d500      	bpl.n	8001668 <HAL_RCC_OscConfig+0x14>
 8001666:	e09f      	b.n	80017a8 <HAL_RCC_OscConfig+0x154>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001668:	6823      	ldr	r3, [r4, #0]
 800166a:	06db      	lsls	r3, r3, #27
 800166c:	d535      	bpl.n	80016da <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 800166e:	230c      	movs	r3, #12
 8001670:	4dbc      	ldr	r5, [pc, #752]	; (8001964 <HAL_RCC_OscConfig+0x310>)
 8001672:	68ea      	ldr	r2, [r5, #12]
 8001674:	421a      	tst	r2, r3
 8001676:	d000      	beq.n	800167a <HAL_RCC_OscConfig+0x26>
 8001678:	e0e9      	b.n	800184e <HAL_RCC_OscConfig+0x1fa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800167a:	682b      	ldr	r3, [r5, #0]
 800167c:	059b      	lsls	r3, r3, #22
 800167e:	d502      	bpl.n	8001686 <HAL_RCC_OscConfig+0x32>
 8001680:	69e3      	ldr	r3, [r4, #28]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d050      	beq.n	8001728 <HAL_RCC_OscConfig+0xd4>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001686:	22e0      	movs	r2, #224	; 0xe0
 8001688:	686b      	ldr	r3, [r5, #4]
 800168a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800168c:	0212      	lsls	r2, r2, #8
 800168e:	4013      	ands	r3, r2
 8001690:	4298      	cmp	r0, r3
 8001692:	d800      	bhi.n	8001696 <HAL_RCC_OscConfig+0x42>
 8001694:	e0c9      	b.n	800182a <HAL_RCC_OscConfig+0x1d6>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001696:	f7ff ffa3 	bl	80015e0 <RCC_SetFlashLatencyFromMSIRange>
 800169a:	2800      	cmp	r0, #0
 800169c:	d144      	bne.n	8001728 <HAL_RCC_OscConfig+0xd4>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800169e:	686b      	ldr	r3, [r5, #4]
 80016a0:	4ab1      	ldr	r2, [pc, #708]	; (8001968 <HAL_RCC_OscConfig+0x314>)
 80016a2:	4013      	ands	r3, r2
 80016a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80016a6:	4313      	orrs	r3, r2
 80016a8:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016aa:	686a      	ldr	r2, [r5, #4]
 80016ac:	6a23      	ldr	r3, [r4, #32]
 80016ae:	0212      	lsls	r2, r2, #8
 80016b0:	061b      	lsls	r3, r3, #24
 80016b2:	0a12      	lsrs	r2, r2, #8
 80016b4:	4313      	orrs	r3, r2
 80016b6:	606b      	str	r3, [r5, #4]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80016b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80016ba:	68ea      	ldr	r2, [r5, #12]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80016bc:	0b59      	lsrs	r1, r3, #13
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	3101      	adds	r1, #1
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80016c6:	0612      	lsls	r2, r2, #24
 80016c8:	49a8      	ldr	r1, [pc, #672]	; (800196c <HAL_RCC_OscConfig+0x318>)
 80016ca:	0f12      	lsrs	r2, r2, #28
 80016cc:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 80016ce:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80016d0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80016d2:	4aa7      	ldr	r2, [pc, #668]	; (8001970 <HAL_RCC_OscConfig+0x31c>)
 80016d4:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 80016d6:	f7ff fb31 	bl	8000d3c <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016da:	6823      	ldr	r3, [r4, #0]
 80016dc:	071b      	lsls	r3, r3, #28
 80016de:	d500      	bpl.n	80016e2 <HAL_RCC_OscConfig+0x8e>
 80016e0:	e0ec      	b.n	80018bc <HAL_RCC_OscConfig+0x268>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e2:	6823      	ldr	r3, [r4, #0]
 80016e4:	075b      	lsls	r3, r3, #29
 80016e6:	d500      	bpl.n	80016ea <HAL_RCC_OscConfig+0x96>
 80016e8:	e10f      	b.n	800190a <HAL_RCC_OscConfig+0x2b6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016ea:	6823      	ldr	r3, [r4, #0]
 80016ec:	069b      	lsls	r3, r3, #26
 80016ee:	d500      	bpl.n	80016f2 <HAL_RCC_OscConfig+0x9e>
 80016f0:	e190      	b.n	8001a14 <HAL_RCC_OscConfig+0x3c0>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80016f4:	2900      	cmp	r1, #0
 80016f6:	d000      	beq.n	80016fa <HAL_RCC_OscConfig+0xa6>
 80016f8:	e1c0      	b.n	8001a7c <HAL_RCC_OscConfig+0x428>
  return HAL_OK;
 80016fa:	2000      	movs	r0, #0
 80016fc:	e015      	b.n	800172a <HAL_RCC_OscConfig+0xd6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016fe:	210c      	movs	r1, #12
 8001700:	4d98      	ldr	r5, [pc, #608]	; (8001964 <HAL_RCC_OscConfig+0x310>)
 8001702:	68eb      	ldr	r3, [r5, #12]
 8001704:	400b      	ands	r3, r1
 8001706:	2b08      	cmp	r3, #8
 8001708:	d008      	beq.n	800171c <HAL_RCC_OscConfig+0xc8>
 800170a:	2380      	movs	r3, #128	; 0x80
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800170c:	68ea      	ldr	r2, [r5, #12]
 800170e:	025b      	lsls	r3, r3, #9
 8001710:	400a      	ands	r2, r1
 8001712:	428a      	cmp	r2, r1
 8001714:	d10b      	bne.n	800172e <HAL_RCC_OscConfig+0xda>
 8001716:	68ea      	ldr	r2, [r5, #12]
 8001718:	421a      	tst	r2, r3
 800171a:	d008      	beq.n	800172e <HAL_RCC_OscConfig+0xda>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171c:	682b      	ldr	r3, [r5, #0]
 800171e:	039b      	lsls	r3, r3, #14
 8001720:	d59e      	bpl.n	8001660 <HAL_RCC_OscConfig+0xc>
 8001722:	6863      	ldr	r3, [r4, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d19b      	bne.n	8001660 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001728:	2001      	movs	r0, #1
}
 800172a:	b005      	add	sp, #20
 800172c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800172e:	6862      	ldr	r2, [r4, #4]
 8001730:	429a      	cmp	r2, r3
 8001732:	d112      	bne.n	800175a <HAL_RCC_OscConfig+0x106>
 8001734:	682a      	ldr	r2, [r5, #0]
 8001736:	4313      	orrs	r3, r2
 8001738:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800173a:	f7ff fb2b 	bl	8000d94 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173e:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001740:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001742:	02b6      	lsls	r6, r6, #10
 8001744:	682b      	ldr	r3, [r5, #0]
 8001746:	4233      	tst	r3, r6
 8001748:	d000      	beq.n	800174c <HAL_RCC_OscConfig+0xf8>
 800174a:	e789      	b.n	8001660 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800174c:	f7ff fb22 	bl	8000d94 <HAL_GetTick>
 8001750:	1bc0      	subs	r0, r0, r7
 8001752:	2864      	cmp	r0, #100	; 0x64
 8001754:	d9f6      	bls.n	8001744 <HAL_RCC_OscConfig+0xf0>
            return HAL_TIMEOUT;
 8001756:	2003      	movs	r0, #3
 8001758:	e7e7      	b.n	800172a <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175a:	21a0      	movs	r1, #160	; 0xa0
 800175c:	02c9      	lsls	r1, r1, #11
 800175e:	428a      	cmp	r2, r1
 8001760:	d105      	bne.n	800176e <HAL_RCC_OscConfig+0x11a>
 8001762:	2280      	movs	r2, #128	; 0x80
 8001764:	6829      	ldr	r1, [r5, #0]
 8001766:	02d2      	lsls	r2, r2, #11
 8001768:	430a      	orrs	r2, r1
 800176a:	602a      	str	r2, [r5, #0]
 800176c:	e7e2      	b.n	8001734 <HAL_RCC_OscConfig+0xe0>
 800176e:	6829      	ldr	r1, [r5, #0]
 8001770:	4880      	ldr	r0, [pc, #512]	; (8001974 <HAL_RCC_OscConfig+0x320>)
 8001772:	4001      	ands	r1, r0
 8001774:	6029      	str	r1, [r5, #0]
 8001776:	6829      	ldr	r1, [r5, #0]
 8001778:	400b      	ands	r3, r1
 800177a:	9303      	str	r3, [sp, #12]
 800177c:	9b03      	ldr	r3, [sp, #12]
 800177e:	497e      	ldr	r1, [pc, #504]	; (8001978 <HAL_RCC_OscConfig+0x324>)
 8001780:	682b      	ldr	r3, [r5, #0]
 8001782:	400b      	ands	r3, r1
 8001784:	602b      	str	r3, [r5, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001786:	2a00      	cmp	r2, #0
 8001788:	d1d7      	bne.n	800173a <HAL_RCC_OscConfig+0xe6>
        tickstart = HAL_GetTick();
 800178a:	f7ff fb03 	bl	8000d94 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178e:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001790:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001792:	02b6      	lsls	r6, r6, #10
 8001794:	682b      	ldr	r3, [r5, #0]
 8001796:	4233      	tst	r3, r6
 8001798:	d100      	bne.n	800179c <HAL_RCC_OscConfig+0x148>
 800179a:	e761      	b.n	8001660 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800179c:	f7ff fafa 	bl	8000d94 <HAL_GetTick>
 80017a0:	1bc0      	subs	r0, r0, r7
 80017a2:	2864      	cmp	r0, #100	; 0x64
 80017a4:	d9f6      	bls.n	8001794 <HAL_RCC_OscConfig+0x140>
 80017a6:	e7d6      	b.n	8001756 <HAL_RCC_OscConfig+0x102>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017a8:	210c      	movs	r1, #12
 80017aa:	4d6e      	ldr	r5, [pc, #440]	; (8001964 <HAL_RCC_OscConfig+0x310>)
 80017ac:	68ea      	ldr	r2, [r5, #12]
 80017ae:	400a      	ands	r2, r1
 80017b0:	2a04      	cmp	r2, #4
 80017b2:	d006      	beq.n	80017c2 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017b4:	68eb      	ldr	r3, [r5, #12]
 80017b6:	400b      	ands	r3, r1
 80017b8:	428b      	cmp	r3, r1
 80017ba:	d110      	bne.n	80017de <HAL_RCC_OscConfig+0x18a>
 80017bc:	68eb      	ldr	r3, [r5, #12]
 80017be:	03db      	lsls	r3, r3, #15
 80017c0:	d40d      	bmi.n	80017de <HAL_RCC_OscConfig+0x18a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c2:	682b      	ldr	r3, [r5, #0]
 80017c4:	075b      	lsls	r3, r3, #29
 80017c6:	d502      	bpl.n	80017ce <HAL_RCC_OscConfig+0x17a>
 80017c8:	68e3      	ldr	r3, [r4, #12]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d1ac      	bne.n	8001728 <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ce:	686a      	ldr	r2, [r5, #4]
 80017d0:	6923      	ldr	r3, [r4, #16]
 80017d2:	496a      	ldr	r1, [pc, #424]	; (800197c <HAL_RCC_OscConfig+0x328>)
 80017d4:	021b      	lsls	r3, r3, #8
 80017d6:	400a      	ands	r2, r1
 80017d8:	4313      	orrs	r3, r2
 80017da:	606b      	str	r3, [r5, #4]
 80017dc:	e744      	b.n	8001668 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017de:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017e0:	682b      	ldr	r3, [r5, #0]
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017e2:	2a00      	cmp	r2, #0
 80017e4:	d010      	beq.n	8001808 <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017e6:	2109      	movs	r1, #9
 80017e8:	438b      	bics	r3, r1
 80017ea:	4313      	orrs	r3, r2
 80017ec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017ee:	f7ff fad1 	bl	8000d94 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f2:	2604      	movs	r6, #4
        tickstart = HAL_GetTick();
 80017f4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f6:	682b      	ldr	r3, [r5, #0]
 80017f8:	4233      	tst	r3, r6
 80017fa:	d1e8      	bne.n	80017ce <HAL_RCC_OscConfig+0x17a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017fc:	f7ff faca 	bl	8000d94 <HAL_GetTick>
 8001800:	1bc0      	subs	r0, r0, r7
 8001802:	2802      	cmp	r0, #2
 8001804:	d9f7      	bls.n	80017f6 <HAL_RCC_OscConfig+0x1a2>
 8001806:	e7a6      	b.n	8001756 <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_HSI_DISABLE();
 8001808:	2201      	movs	r2, #1
 800180a:	4393      	bics	r3, r2
 800180c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800180e:	f7ff fac1 	bl	8000d94 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001812:	2604      	movs	r6, #4
        tickstart = HAL_GetTick();
 8001814:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001816:	682b      	ldr	r3, [r5, #0]
 8001818:	4233      	tst	r3, r6
 800181a:	d100      	bne.n	800181e <HAL_RCC_OscConfig+0x1ca>
 800181c:	e724      	b.n	8001668 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800181e:	f7ff fab9 	bl	8000d94 <HAL_GetTick>
 8001822:	1bc0      	subs	r0, r0, r7
 8001824:	2802      	cmp	r0, #2
 8001826:	d9f6      	bls.n	8001816 <HAL_RCC_OscConfig+0x1c2>
 8001828:	e795      	b.n	8001756 <HAL_RCC_OscConfig+0x102>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800182a:	686b      	ldr	r3, [r5, #4]
 800182c:	4a4e      	ldr	r2, [pc, #312]	; (8001968 <HAL_RCC_OscConfig+0x314>)
 800182e:	4013      	ands	r3, r2
 8001830:	4303      	orrs	r3, r0
 8001832:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001834:	686a      	ldr	r2, [r5, #4]
 8001836:	6a23      	ldr	r3, [r4, #32]
 8001838:	0212      	lsls	r2, r2, #8
 800183a:	061b      	lsls	r3, r3, #24
 800183c:	0a12      	lsrs	r2, r2, #8
 800183e:	4313      	orrs	r3, r2
 8001840:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001842:	f7ff fecd 	bl	80015e0 <RCC_SetFlashLatencyFromMSIRange>
 8001846:	2800      	cmp	r0, #0
 8001848:	d100      	bne.n	800184c <HAL_RCC_OscConfig+0x1f8>
 800184a:	e735      	b.n	80016b8 <HAL_RCC_OscConfig+0x64>
 800184c:	e76c      	b.n	8001728 <HAL_RCC_OscConfig+0xd4>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800184e:	69e3      	ldr	r3, [r4, #28]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d020      	beq.n	8001896 <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_MSI_ENABLE();
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	682a      	ldr	r2, [r5, #0]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	4313      	orrs	r3, r2
 800185c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800185e:	f7ff fa99 	bl	8000d94 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001862:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001864:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001866:	00b6      	lsls	r6, r6, #2
 8001868:	682b      	ldr	r3, [r5, #0]
 800186a:	4233      	tst	r3, r6
 800186c:	d00d      	beq.n	800188a <HAL_RCC_OscConfig+0x236>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800186e:	686b      	ldr	r3, [r5, #4]
 8001870:	4a3d      	ldr	r2, [pc, #244]	; (8001968 <HAL_RCC_OscConfig+0x314>)
 8001872:	4013      	ands	r3, r2
 8001874:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001876:	4313      	orrs	r3, r2
 8001878:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800187a:	686a      	ldr	r2, [r5, #4]
 800187c:	6a23      	ldr	r3, [r4, #32]
 800187e:	0212      	lsls	r2, r2, #8
 8001880:	061b      	lsls	r3, r3, #24
 8001882:	0a12      	lsrs	r2, r2, #8
 8001884:	4313      	orrs	r3, r2
 8001886:	606b      	str	r3, [r5, #4]
 8001888:	e727      	b.n	80016da <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800188a:	f7ff fa83 	bl	8000d94 <HAL_GetTick>
 800188e:	1bc0      	subs	r0, r0, r7
 8001890:	2802      	cmp	r0, #2
 8001892:	d9e9      	bls.n	8001868 <HAL_RCC_OscConfig+0x214>
 8001894:	e75f      	b.n	8001756 <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_MSI_DISABLE();
 8001896:	682b      	ldr	r3, [r5, #0]
 8001898:	4a39      	ldr	r2, [pc, #228]	; (8001980 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 800189a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_MSI_DISABLE();
 800189c:	4013      	ands	r3, r2
 800189e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80018a0:	f7ff fa78 	bl	8000d94 <HAL_GetTick>
 80018a4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80018a6:	00b6      	lsls	r6, r6, #2
 80018a8:	682b      	ldr	r3, [r5, #0]
 80018aa:	4233      	tst	r3, r6
 80018ac:	d100      	bne.n	80018b0 <HAL_RCC_OscConfig+0x25c>
 80018ae:	e714      	b.n	80016da <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018b0:	f7ff fa70 	bl	8000d94 <HAL_GetTick>
 80018b4:	1bc0      	subs	r0, r0, r7
 80018b6:	2802      	cmp	r0, #2
 80018b8:	d9f6      	bls.n	80018a8 <HAL_RCC_OscConfig+0x254>
 80018ba:	e74c      	b.n	8001756 <HAL_RCC_OscConfig+0x102>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018bc:	6962      	ldr	r2, [r4, #20]
 80018be:	2301      	movs	r3, #1
 80018c0:	4d28      	ldr	r5, [pc, #160]	; (8001964 <HAL_RCC_OscConfig+0x310>)
 80018c2:	2a00      	cmp	r2, #0
 80018c4:	d010      	beq.n	80018e8 <HAL_RCC_OscConfig+0x294>
      __HAL_RCC_LSI_ENABLE();
 80018c6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c8:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80018ca:	4313      	orrs	r3, r2
 80018cc:	652b      	str	r3, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 80018ce:	f7ff fa61 	bl	8000d94 <HAL_GetTick>
 80018d2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80018d6:	4233      	tst	r3, r6
 80018d8:	d000      	beq.n	80018dc <HAL_RCC_OscConfig+0x288>
 80018da:	e702      	b.n	80016e2 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018dc:	f7ff fa5a 	bl	8000d94 <HAL_GetTick>
 80018e0:	1bc0      	subs	r0, r0, r7
 80018e2:	2802      	cmp	r0, #2
 80018e4:	d9f6      	bls.n	80018d4 <HAL_RCC_OscConfig+0x280>
 80018e6:	e736      	b.n	8001756 <HAL_RCC_OscConfig+0x102>
      __HAL_RCC_LSI_DISABLE();
 80018e8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ea:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80018ec:	439a      	bics	r2, r3
 80018ee:	652a      	str	r2, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 80018f0:	f7ff fa50 	bl	8000d94 <HAL_GetTick>
 80018f4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80018f8:	4233      	tst	r3, r6
 80018fa:	d100      	bne.n	80018fe <HAL_RCC_OscConfig+0x2aa>
 80018fc:	e6f1      	b.n	80016e2 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018fe:	f7ff fa49 	bl	8000d94 <HAL_GetTick>
 8001902:	1bc0      	subs	r0, r0, r7
 8001904:	2802      	cmp	r0, #2
 8001906:	d9f6      	bls.n	80018f6 <HAL_RCC_OscConfig+0x2a2>
 8001908:	e725      	b.n	8001756 <HAL_RCC_OscConfig+0x102>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800190a:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800190c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800190e:	4d15      	ldr	r5, [pc, #84]	; (8001964 <HAL_RCC_OscConfig+0x310>)
 8001910:	055b      	lsls	r3, r3, #21
 8001912:	6baa      	ldr	r2, [r5, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8001914:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001916:	421a      	tst	r2, r3
 8001918:	d104      	bne.n	8001924 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 800191a:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800191c:	4313      	orrs	r3, r2
 800191e:	63ab      	str	r3, [r5, #56]	; 0x38
      pwrclkchanged = SET;
 8001920:	2301      	movs	r3, #1
 8001922:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001924:	2780      	movs	r7, #128	; 0x80
 8001926:	4e17      	ldr	r6, [pc, #92]	; (8001984 <HAL_RCC_OscConfig+0x330>)
 8001928:	007f      	lsls	r7, r7, #1
 800192a:	6833      	ldr	r3, [r6, #0]
 800192c:	423b      	tst	r3, r7
 800192e:	d008      	beq.n	8001942 <HAL_RCC_OscConfig+0x2ee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001930:	2280      	movs	r2, #128	; 0x80
 8001932:	68a3      	ldr	r3, [r4, #8]
 8001934:	0052      	lsls	r2, r2, #1
 8001936:	4293      	cmp	r3, r2
 8001938:	d126      	bne.n	8001988 <HAL_RCC_OscConfig+0x334>
 800193a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800193c:	4313      	orrs	r3, r2
 800193e:	652b      	str	r3, [r5, #80]	; 0x50
 8001940:	e047      	b.n	80019d2 <HAL_RCC_OscConfig+0x37e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001942:	6833      	ldr	r3, [r6, #0]
 8001944:	433b      	orrs	r3, r7
 8001946:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001948:	f7ff fa24 	bl	8000d94 <HAL_GetTick>
 800194c:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194e:	6833      	ldr	r3, [r6, #0]
 8001950:	423b      	tst	r3, r7
 8001952:	d1ed      	bne.n	8001930 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001954:	f7ff fa1e 	bl	8000d94 <HAL_GetTick>
 8001958:	9b01      	ldr	r3, [sp, #4]
 800195a:	1ac0      	subs	r0, r0, r3
 800195c:	2864      	cmp	r0, #100	; 0x64
 800195e:	d9f6      	bls.n	800194e <HAL_RCC_OscConfig+0x2fa>
 8001960:	e6f9      	b.n	8001756 <HAL_RCC_OscConfig+0x102>
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	40021000 	.word	0x40021000
 8001968:	ffff1fff 	.word	0xffff1fff
 800196c:	08002624 	.word	0x08002624
 8001970:	2000001c 	.word	0x2000001c
 8001974:	fffeffff 	.word	0xfffeffff
 8001978:	fffbffff 	.word	0xfffbffff
 800197c:	ffffe0ff 	.word	0xffffe0ff
 8001980:	fffffeff 	.word	0xfffffeff
 8001984:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001988:	2b00      	cmp	r3, #0
 800198a:	d116      	bne.n	80019ba <HAL_RCC_OscConfig+0x366>
 800198c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800198e:	4a60      	ldr	r2, [pc, #384]	; (8001b10 <HAL_RCC_OscConfig+0x4bc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001990:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001992:	4013      	ands	r3, r2
 8001994:	652b      	str	r3, [r5, #80]	; 0x50
 8001996:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8001998:	4a5e      	ldr	r2, [pc, #376]	; (8001b14 <HAL_RCC_OscConfig+0x4c0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800199a:	00bf      	lsls	r7, r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800199c:	4013      	ands	r3, r2
 800199e:	652b      	str	r3, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 80019a0:	f7ff f9f8 	bl	8000d94 <HAL_GetTick>
 80019a4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80019a8:	423b      	tst	r3, r7
 80019aa:	d02a      	beq.n	8001a02 <HAL_RCC_OscConfig+0x3ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ac:	f7ff f9f2 	bl	8000d94 <HAL_GetTick>
 80019b0:	4b59      	ldr	r3, [pc, #356]	; (8001b18 <HAL_RCC_OscConfig+0x4c4>)
 80019b2:	1b80      	subs	r0, r0, r6
 80019b4:	4298      	cmp	r0, r3
 80019b6:	d9f6      	bls.n	80019a6 <HAL_RCC_OscConfig+0x352>
 80019b8:	e6cd      	b.n	8001756 <HAL_RCC_OscConfig+0x102>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ba:	21a0      	movs	r1, #160	; 0xa0
 80019bc:	00c9      	lsls	r1, r1, #3
 80019be:	428b      	cmp	r3, r1
 80019c0:	d10d      	bne.n	80019de <HAL_RCC_OscConfig+0x38a>
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	6d29      	ldr	r1, [r5, #80]	; 0x50
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	430b      	orrs	r3, r1
 80019ca:	652b      	str	r3, [r5, #80]	; 0x50
 80019cc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80019ce:	431a      	orrs	r2, r3
 80019d0:	652a      	str	r2, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 80019d2:	f7ff f9df 	bl	8000d94 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d6:	2780      	movs	r7, #128	; 0x80
      tickstart = HAL_GetTick();
 80019d8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019da:	00bf      	lsls	r7, r7, #2
 80019dc:	e00e      	b.n	80019fc <HAL_RCC_OscConfig+0x3a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019de:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80019e0:	4a4b      	ldr	r2, [pc, #300]	; (8001b10 <HAL_RCC_OscConfig+0x4bc>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	652b      	str	r3, [r5, #80]	; 0x50
 80019e6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80019e8:	4a4a      	ldr	r2, [pc, #296]	; (8001b14 <HAL_RCC_OscConfig+0x4c0>)
 80019ea:	4013      	ands	r3, r2
 80019ec:	e7a7      	b.n	800193e <HAL_RCC_OscConfig+0x2ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ee:	f7ff f9d1 	bl	8000d94 <HAL_GetTick>
 80019f2:	4b49      	ldr	r3, [pc, #292]	; (8001b18 <HAL_RCC_OscConfig+0x4c4>)
 80019f4:	1b80      	subs	r0, r0, r6
 80019f6:	4298      	cmp	r0, r3
 80019f8:	d900      	bls.n	80019fc <HAL_RCC_OscConfig+0x3a8>
 80019fa:	e6ac      	b.n	8001756 <HAL_RCC_OscConfig+0x102>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019fc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80019fe:	423b      	tst	r3, r7
 8001a00:	d0f5      	beq.n	80019ee <HAL_RCC_OscConfig+0x39a>
    if(pwrclkchanged == SET)
 8001a02:	9b00      	ldr	r3, [sp, #0]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d000      	beq.n	8001a0a <HAL_RCC_OscConfig+0x3b6>
 8001a08:	e66f      	b.n	80016ea <HAL_RCC_OscConfig+0x96>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a0a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001a0c:	4a43      	ldr	r2, [pc, #268]	; (8001b1c <HAL_RCC_OscConfig+0x4c8>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	63ab      	str	r3, [r5, #56]	; 0x38
 8001a12:	e66a      	b.n	80016ea <HAL_RCC_OscConfig+0x96>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a14:	69a1      	ldr	r1, [r4, #24]
 8001a16:	2301      	movs	r3, #1
 8001a18:	4d41      	ldr	r5, [pc, #260]	; (8001b20 <HAL_RCC_OscConfig+0x4cc>)
 8001a1a:	4a42      	ldr	r2, [pc, #264]	; (8001b24 <HAL_RCC_OscConfig+0x4d0>)
 8001a1c:	2900      	cmp	r1, #0
 8001a1e:	d018      	beq.n	8001a52 <HAL_RCC_OscConfig+0x3fe>
        __HAL_RCC_HSI48_ENABLE();
 8001a20:	68a9      	ldr	r1, [r5, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a22:	2602      	movs	r6, #2
        __HAL_RCC_HSI48_ENABLE();
 8001a24:	4319      	orrs	r1, r3
 8001a26:	60a9      	str	r1, [r5, #8]
 8001a28:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8001a2a:	430b      	orrs	r3, r1
 8001a2c:	636b      	str	r3, [r5, #52]	; 0x34
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	6a11      	ldr	r1, [r2, #32]
 8001a32:	019b      	lsls	r3, r3, #6
 8001a34:	430b      	orrs	r3, r1
 8001a36:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8001a38:	f7ff f9ac 	bl	8000d94 <HAL_GetTick>
 8001a3c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a3e:	68ab      	ldr	r3, [r5, #8]
 8001a40:	4233      	tst	r3, r6
 8001a42:	d000      	beq.n	8001a46 <HAL_RCC_OscConfig+0x3f2>
 8001a44:	e655      	b.n	80016f2 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a46:	f7ff f9a5 	bl	8000d94 <HAL_GetTick>
 8001a4a:	1bc0      	subs	r0, r0, r7
 8001a4c:	2802      	cmp	r0, #2
 8001a4e:	d9f6      	bls.n	8001a3e <HAL_RCC_OscConfig+0x3ea>
 8001a50:	e681      	b.n	8001756 <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_HSI48_DISABLE();
 8001a52:	68a9      	ldr	r1, [r5, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001a54:	2602      	movs	r6, #2
        __HAL_RCC_HSI48_DISABLE();
 8001a56:	4399      	bics	r1, r3
 8001a58:	60a9      	str	r1, [r5, #8]
 8001a5a:	6a13      	ldr	r3, [r2, #32]
 8001a5c:	4932      	ldr	r1, [pc, #200]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 8001a5e:	400b      	ands	r3, r1
 8001a60:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8001a62:	f7ff f997 	bl	8000d94 <HAL_GetTick>
 8001a66:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001a68:	68ab      	ldr	r3, [r5, #8]
 8001a6a:	4233      	tst	r3, r6
 8001a6c:	d100      	bne.n	8001a70 <HAL_RCC_OscConfig+0x41c>
 8001a6e:	e640      	b.n	80016f2 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a70:	f7ff f990 	bl	8000d94 <HAL_GetTick>
 8001a74:	1bc0      	subs	r0, r0, r7
 8001a76:	2802      	cmp	r0, #2
 8001a78:	d9f6      	bls.n	8001a68 <HAL_RCC_OscConfig+0x414>
 8001a7a:	e66c      	b.n	8001756 <HAL_RCC_OscConfig+0x102>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a7c:	220c      	movs	r2, #12
 8001a7e:	4d28      	ldr	r5, [pc, #160]	; (8001b20 <HAL_RCC_OscConfig+0x4cc>)
      return HAL_ERROR;
 8001a80:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a82:	68eb      	ldr	r3, [r5, #12]
 8001a84:	4013      	ands	r3, r2
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d100      	bne.n	8001a8c <HAL_RCC_OscConfig+0x438>
 8001a8a:	e64e      	b.n	800172a <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_PLL_DISABLE();
 8001a8c:	682b      	ldr	r3, [r5, #0]
 8001a8e:	4a27      	ldr	r2, [pc, #156]	; (8001b2c <HAL_RCC_OscConfig+0x4d8>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a94:	2902      	cmp	r1, #2
 8001a96:	d12b      	bne.n	8001af0 <HAL_RCC_OscConfig+0x49c>
        tickstart = HAL_GetTick();
 8001a98:	f7ff f97c 	bl	8000d94 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a9c:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001a9e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa0:	04b6      	lsls	r6, r6, #18
 8001aa2:	682b      	ldr	r3, [r5, #0]
 8001aa4:	4233      	tst	r3, r6
 8001aa6:	d11d      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001aaa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001aac:	68ea      	ldr	r2, [r5, #12]
 8001aae:	430b      	orrs	r3, r1
 8001ab0:	491f      	ldr	r1, [pc, #124]	; (8001b30 <HAL_RCC_OscConfig+0x4dc>)
 8001ab2:	400a      	ands	r2, r1
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	6b62      	ldr	r2, [r4, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ab8:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aba:	4313      	orrs	r3, r2
 8001abc:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	682a      	ldr	r2, [r5, #0]
 8001ac2:	045b      	lsls	r3, r3, #17
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001ac8:	f7ff f964 	bl	8000d94 <HAL_GetTick>
 8001acc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ace:	04a4      	lsls	r4, r4, #18
 8001ad0:	682b      	ldr	r3, [r5, #0]
 8001ad2:	4223      	tst	r3, r4
 8001ad4:	d000      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x484>
 8001ad6:	e610      	b.n	80016fa <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad8:	f7ff f95c 	bl	8000d94 <HAL_GetTick>
 8001adc:	1b80      	subs	r0, r0, r6
 8001ade:	2802      	cmp	r0, #2
 8001ae0:	d9f6      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x47c>
 8001ae2:	e638      	b.n	8001756 <HAL_RCC_OscConfig+0x102>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae4:	f7ff f956 	bl	8000d94 <HAL_GetTick>
 8001ae8:	1bc0      	subs	r0, r0, r7
 8001aea:	2802      	cmp	r0, #2
 8001aec:	d9d9      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x44e>
 8001aee:	e632      	b.n	8001756 <HAL_RCC_OscConfig+0x102>
        tickstart = HAL_GetTick();
 8001af0:	f7ff f950 	bl	8000d94 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af4:	2480      	movs	r4, #128	; 0x80
        tickstart = HAL_GetTick();
 8001af6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af8:	04a4      	lsls	r4, r4, #18
 8001afa:	682b      	ldr	r3, [r5, #0]
 8001afc:	4223      	tst	r3, r4
 8001afe:	d100      	bne.n	8001b02 <HAL_RCC_OscConfig+0x4ae>
 8001b00:	e5fb      	b.n	80016fa <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b02:	f7ff f947 	bl	8000d94 <HAL_GetTick>
 8001b06:	1b80      	subs	r0, r0, r6
 8001b08:	2802      	cmp	r0, #2
 8001b0a:	d9f6      	bls.n	8001afa <HAL_RCC_OscConfig+0x4a6>
 8001b0c:	e623      	b.n	8001756 <HAL_RCC_OscConfig+0x102>
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	fffffeff 	.word	0xfffffeff
 8001b14:	fffffbff 	.word	0xfffffbff
 8001b18:	00001388 	.word	0x00001388
 8001b1c:	efffffff 	.word	0xefffffff
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40010000 	.word	0x40010000
 8001b28:	ffffdfff 	.word	0xffffdfff
 8001b2c:	feffffff 	.word	0xfeffffff
 8001b30:	ff02ffff 	.word	0xff02ffff

08001b34 <HAL_RCC_GetSysClockFreq>:
  switch (tmpreg & RCC_CFGR_SWS)
 8001b34:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8001b36:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001b38:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8001b3a:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8001b3c:	400a      	ands	r2, r1
 8001b3e:	2a08      	cmp	r2, #8
 8001b40:	d026      	beq.n	8001b90 <HAL_RCC_GetSysClockFreq+0x5c>
 8001b42:	2a0c      	cmp	r2, #12
 8001b44:	d006      	beq.n	8001b54 <HAL_RCC_GetSysClockFreq+0x20>
 8001b46:	2a04      	cmp	r2, #4
 8001b48:	d11a      	bne.n	8001b80 <HAL_RCC_GetSysClockFreq+0x4c>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	06db      	lsls	r3, r3, #27
 8001b4e:	d421      	bmi.n	8001b94 <HAL_RCC_GetSysClockFreq+0x60>
        sysclockfreq =  HSI_VALUE;
 8001b50:	4812      	ldr	r0, [pc, #72]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x68>)
}
 8001b52:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b54:	028a      	lsls	r2, r1, #10
 8001b56:	4812      	ldr	r0, [pc, #72]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001b58:	0f12      	lsrs	r2, r2, #28
 8001b5a:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 8001b5c:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b5e:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 8001b60:	0f89      	lsrs	r1, r1, #30
 8001b62:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b64:	03c0      	lsls	r0, r0, #15
 8001b66:	d504      	bpl.n	8001b72 <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 8001b68:	480e      	ldr	r0, [pc, #56]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001b6a:	4350      	muls	r0, r2
 8001b6c:	f7fe fad6 	bl	800011c <__udivsi3>
 8001b70:	e7ef      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	06db      	lsls	r3, r3, #27
 8001b76:	d501      	bpl.n	8001b7c <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001b78:	480b      	ldr	r0, [pc, #44]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x74>)
 8001b7a:	e7f6      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8001b7c:	4807      	ldr	r0, [pc, #28]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x68>)
 8001b7e:	e7f4      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8001b80:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8001b82:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8001b84:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8001b86:	041b      	lsls	r3, r3, #16
 8001b88:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	4098      	lsls	r0, r3
 8001b8e:	e7e0      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8001b90:	4804      	ldr	r0, [pc, #16]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x70>)
 8001b92:	e7de      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8001b94:	4804      	ldr	r0, [pc, #16]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8001b96:	e7dc      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x1e>
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	00f42400 	.word	0x00f42400
 8001ba0:	0800263c 	.word	0x0800263c
 8001ba4:	007a1200 	.word	0x007a1200
 8001ba8:	003d0900 	.word	0x003d0900

08001bac <HAL_RCC_ClockConfig>:
{
 8001bac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001bae:	2201      	movs	r2, #1
 8001bb0:	4c53      	ldr	r4, [pc, #332]	; (8001d00 <HAL_RCC_ClockConfig+0x154>)
{
 8001bb2:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001bb4:	6823      	ldr	r3, [r4, #0]
{
 8001bb6:	9101      	str	r1, [sp, #4]
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001bb8:	4013      	ands	r3, r2
 8001bba:	428b      	cmp	r3, r1
 8001bbc:	d328      	bcc.n	8001c10 <HAL_RCC_ClockConfig+0x64>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bbe:	6832      	ldr	r2, [r6, #0]
 8001bc0:	0793      	lsls	r3, r2, #30
 8001bc2:	d431      	bmi.n	8001c28 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc4:	07d3      	lsls	r3, r2, #31
 8001bc6:	d437      	bmi.n	8001c38 <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001bc8:	2301      	movs	r3, #1
 8001bca:	6822      	ldr	r2, [r4, #0]
 8001bcc:	9901      	ldr	r1, [sp, #4]
 8001bce:	401a      	ands	r2, r3
 8001bd0:	4291      	cmp	r1, r2
 8001bd2:	d200      	bcs.n	8001bd6 <HAL_RCC_ClockConfig+0x2a>
 8001bd4:	e085      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd6:	6832      	ldr	r2, [r6, #0]
 8001bd8:	4c4a      	ldr	r4, [pc, #296]	; (8001d04 <HAL_RCC_ClockConfig+0x158>)
 8001bda:	0753      	lsls	r3, r2, #29
 8001bdc:	d500      	bpl.n	8001be0 <HAL_RCC_ClockConfig+0x34>
 8001bde:	e087      	b.n	8001cf0 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be0:	0713      	lsls	r3, r2, #28
 8001be2:	d506      	bpl.n	8001bf2 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001be4:	68e2      	ldr	r2, [r4, #12]
 8001be6:	6933      	ldr	r3, [r6, #16]
 8001be8:	4947      	ldr	r1, [pc, #284]	; (8001d08 <HAL_RCC_ClockConfig+0x15c>)
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	400a      	ands	r2, r1
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001bf2:	f7ff ff9f 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8001bf6:	68e3      	ldr	r3, [r4, #12]
 8001bf8:	4a44      	ldr	r2, [pc, #272]	; (8001d0c <HAL_RCC_ClockConfig+0x160>)
 8001bfa:	061b      	lsls	r3, r3, #24
 8001bfc:	0f1b      	lsrs	r3, r3, #28
 8001bfe:	5cd3      	ldrb	r3, [r2, r3]
 8001c00:	40d8      	lsrs	r0, r3
 8001c02:	4b43      	ldr	r3, [pc, #268]	; (8001d10 <HAL_RCC_ClockConfig+0x164>)
 8001c04:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c06:	2000      	movs	r0, #0
 8001c08:	f7ff f898 	bl	8000d3c <HAL_InitTick>
  return HAL_OK;
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	e00a      	b.n	8001c26 <HAL_RCC_ClockConfig+0x7a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c10:	6823      	ldr	r3, [r4, #0]
 8001c12:	9901      	ldr	r1, [sp, #4]
 8001c14:	4393      	bics	r3, r2
 8001c16:	430b      	orrs	r3, r1
 8001c18:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c1a:	6823      	ldr	r3, [r4, #0]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	9a01      	ldr	r2, [sp, #4]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d0cc      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8001c24:	2001      	movs	r0, #1
}
 8001c26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c28:	20f0      	movs	r0, #240	; 0xf0
 8001c2a:	4936      	ldr	r1, [pc, #216]	; (8001d04 <HAL_RCC_ClockConfig+0x158>)
 8001c2c:	68cb      	ldr	r3, [r1, #12]
 8001c2e:	4383      	bics	r3, r0
 8001c30:	68b0      	ldr	r0, [r6, #8]
 8001c32:	4303      	orrs	r3, r0
 8001c34:	60cb      	str	r3, [r1, #12]
 8001c36:	e7c5      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x18>
 8001c38:	4d32      	ldr	r5, [pc, #200]	; (8001d04 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c3a:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c3e:	2a02      	cmp	r2, #2
 8001c40:	d119      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xca>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	039b      	lsls	r3, r3, #14
 8001c44:	d5ee      	bpl.n	8001c24 <HAL_RCC_ClockConfig+0x78>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c46:	2103      	movs	r1, #3
 8001c48:	68eb      	ldr	r3, [r5, #12]
 8001c4a:	438b      	bics	r3, r1
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8001c50:	f7ff f8a0 	bl	8000d94 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c54:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001c56:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d119      	bne.n	8001c90 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c5c:	220c      	movs	r2, #12
 8001c5e:	68eb      	ldr	r3, [r5, #12]
 8001c60:	4013      	ands	r3, r2
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d0b0      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c66:	f7ff f895 	bl	8000d94 <HAL_GetTick>
 8001c6a:	4b2a      	ldr	r3, [pc, #168]	; (8001d14 <HAL_RCC_ClockConfig+0x168>)
 8001c6c:	1bc0      	subs	r0, r0, r7
 8001c6e:	4298      	cmp	r0, r3
 8001c70:	d9f4      	bls.n	8001c5c <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8001c72:	2003      	movs	r0, #3
 8001c74:	e7d7      	b.n	8001c26 <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c76:	2a03      	cmp	r2, #3
 8001c78:	d102      	bne.n	8001c80 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7a:	019b      	lsls	r3, r3, #6
 8001c7c:	d4e3      	bmi.n	8001c46 <HAL_RCC_ClockConfig+0x9a>
 8001c7e:	e7d1      	b.n	8001c24 <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c80:	2a01      	cmp	r2, #1
 8001c82:	d102      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c84:	075b      	lsls	r3, r3, #29
 8001c86:	d4de      	bmi.n	8001c46 <HAL_RCC_ClockConfig+0x9a>
 8001c88:	e7cc      	b.n	8001c24 <HAL_RCC_ClockConfig+0x78>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001c8a:	059b      	lsls	r3, r3, #22
 8001c8c:	d4db      	bmi.n	8001c46 <HAL_RCC_ClockConfig+0x9a>
 8001c8e:	e7c9      	b.n	8001c24 <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	d10c      	bne.n	8001cae <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c94:	220c      	movs	r2, #12
 8001c96:	68eb      	ldr	r3, [r5, #12]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d100      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0xf4>
 8001c9e:	e793      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca0:	f7ff f878 	bl	8000d94 <HAL_GetTick>
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <HAL_RCC_ClockConfig+0x168>)
 8001ca6:	1bc0      	subs	r0, r0, r7
 8001ca8:	4298      	cmp	r0, r3
 8001caa:	d9f3      	bls.n	8001c94 <HAL_RCC_ClockConfig+0xe8>
 8001cac:	e7e1      	b.n	8001c72 <HAL_RCC_ClockConfig+0xc6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d011      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001cb2:	220c      	movs	r2, #12
 8001cb4:	68eb      	ldr	r3, [r5, #12]
 8001cb6:	4213      	tst	r3, r2
 8001cb8:	d100      	bne.n	8001cbc <HAL_RCC_ClockConfig+0x110>
 8001cba:	e785      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cbc:	f7ff f86a 	bl	8000d94 <HAL_GetTick>
 8001cc0:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <HAL_RCC_ClockConfig+0x168>)
 8001cc2:	1bc0      	subs	r0, r0, r7
 8001cc4:	4298      	cmp	r0, r3
 8001cc6:	d9f4      	bls.n	8001cb2 <HAL_RCC_ClockConfig+0x106>
 8001cc8:	e7d3      	b.n	8001c72 <HAL_RCC_ClockConfig+0xc6>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cca:	f7ff f863 	bl	8000d94 <HAL_GetTick>
 8001cce:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <HAL_RCC_ClockConfig+0x168>)
 8001cd0:	1bc0      	subs	r0, r0, r7
 8001cd2:	4298      	cmp	r0, r3
 8001cd4:	d8cd      	bhi.n	8001c72 <HAL_RCC_ClockConfig+0xc6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	68eb      	ldr	r3, [r5, #12]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d1f4      	bne.n	8001cca <HAL_RCC_ClockConfig+0x11e>
 8001ce0:	e772      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce2:	6822      	ldr	r2, [r4, #0]
 8001ce4:	439a      	bics	r2, r3
 8001ce6:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ce8:	6822      	ldr	r2, [r4, #0]
 8001cea:	421a      	tst	r2, r3
 8001cec:	d19a      	bne.n	8001c24 <HAL_RCC_ClockConfig+0x78>
 8001cee:	e772      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf0:	68e3      	ldr	r3, [r4, #12]
 8001cf2:	4909      	ldr	r1, [pc, #36]	; (8001d18 <HAL_RCC_ClockConfig+0x16c>)
 8001cf4:	400b      	ands	r3, r1
 8001cf6:	68f1      	ldr	r1, [r6, #12]
 8001cf8:	430b      	orrs	r3, r1
 8001cfa:	60e3      	str	r3, [r4, #12]
 8001cfc:	e770      	b.n	8001be0 <HAL_RCC_ClockConfig+0x34>
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	40022000 	.word	0x40022000
 8001d04:	40021000 	.word	0x40021000
 8001d08:	ffffc7ff 	.word	0xffffc7ff
 8001d0c:	08002624 	.word	0x08002624
 8001d10:	2000001c 	.word	0x2000001c
 8001d14:	00001388 	.word	0x00001388
 8001d18:	fffff8ff 	.word	0xfffff8ff

08001d1c <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8001d1c:	4b01      	ldr	r3, [pc, #4]	; (8001d24 <HAL_RCC_GetHCLKFreq+0x8>)
 8001d1e:	6818      	ldr	r0, [r3, #0]
}
 8001d20:	4770      	bx	lr
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	2000001c 	.word	0x2000001c

08001d28 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001d28:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <HAL_RCC_GetPCLK1Freq+0x14>)
 8001d2a:	4a05      	ldr	r2, [pc, #20]	; (8001d40 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	055b      	lsls	r3, r3, #21
 8001d30:	0f5b      	lsrs	r3, r3, #29
 8001d32:	5cd3      	ldrb	r3, [r2, r3]
 8001d34:	4a03      	ldr	r2, [pc, #12]	; (8001d44 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001d36:	6810      	ldr	r0, [r2, #0]
 8001d38:	40d8      	lsrs	r0, r3
}    
 8001d3a:	4770      	bx	lr
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	08002634 	.word	0x08002634
 8001d44:	2000001c 	.word	0x2000001c

08001d48 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <HAL_RCC_GetPCLK2Freq+0x14>)
 8001d4a:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	049b      	lsls	r3, r3, #18
 8001d50:	0f5b      	lsrs	r3, r3, #29
 8001d52:	5cd3      	ldrb	r3, [r2, r3]
 8001d54:	4a03      	ldr	r2, [pc, #12]	; (8001d64 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001d56:	6810      	ldr	r0, [r2, #0]
 8001d58:	40d8      	lsrs	r0, r3
} 
 8001d5a:	4770      	bx	lr
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	08002634 	.word	0x08002634
 8001d64:	2000001c 	.word	0x2000001c

08001d68 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001d68:	2382      	movs	r3, #130	; 0x82
{
 8001d6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 8001d6c:	6802      	ldr	r2, [r0, #0]
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001d6e:	011b      	lsls	r3, r3, #4
{
 8001d70:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 8001d72:	421a      	tst	r2, r3
 8001d74:	d048      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d76:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001d78:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7a:	4c65      	ldr	r4, [pc, #404]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001d7c:	055b      	lsls	r3, r3, #21
 8001d7e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8001d80:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d82:	421a      	tst	r2, r3
 8001d84:	d104      	bne.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x28>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d90:	2780      	movs	r7, #128	; 0x80
 8001d92:	4e60      	ldr	r6, [pc, #384]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d94:	007f      	lsls	r7, r7, #1
 8001d96:	6833      	ldr	r3, [r6, #0]
 8001d98:	423b      	tst	r3, r7
 8001d9a:	d077      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x124>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */ 
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001d9c:	6869      	ldr	r1, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001d9e:	22c0      	movs	r2, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001da0:	0008      	movs	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001da2:	6823      	ldr	r3, [r4, #0]
 8001da4:	0392      	lsls	r2, r2, #14
 8001da6:	4013      	ands	r3, r2
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001da8:	4010      	ands	r0, r2
 8001daa:	4283      	cmp	r3, r0
 8001dac:	d103      	bne.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001dae:	68a8      	ldr	r0, [r5, #8]
 8001db0:	4002      	ands	r2, r0
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d009      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */
       )
    { /* Check HSE State */
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001db6:	23c0      	movs	r3, #192	; 0xc0
 8001db8:	000a      	movs	r2, r1
 8001dba:	029b      	lsls	r3, r3, #10
 8001dbc:	401a      	ands	r2, r3
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d103      	bne.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x62>
 8001dc2:	6823      	ldr	r3, [r4, #0]
      {
        /* To update HSE divider, first switch-OFF HSE clock oscillator*/
        return HAL_ERROR; 
 8001dc4:	2001      	movs	r0, #1
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001dc6:	039b      	lsls	r3, r3, #14
 8001dc8:	d471      	bmi.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x146>
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001dca:	22c0      	movs	r2, #192	; 0xc0
 8001dcc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001dce:	0292      	lsls	r2, r2, #10
 8001dd0:	4013      	ands	r3, r2
    
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001dd2:	d000      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8001dd4:	e06c      	b.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x148>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dd6:	6869      	ldr	r1, [r5, #4]
 8001dd8:	23c0      	movs	r3, #192	; 0xc0
 8001dda:	000a      	movs	r2, r1
 8001ddc:	029b      	lsls	r3, r3, #10
 8001dde:	401a      	ands	r2, r3
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d107      	bne.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	484c      	ldr	r0, [pc, #304]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001de8:	4003      	ands	r3, r0
 8001dea:	20c0      	movs	r0, #192	; 0xc0
 8001dec:	0380      	lsls	r0, r0, #14
 8001dee:	4001      	ands	r1, r0
 8001df0:	430b      	orrs	r3, r1
 8001df2:	6023      	str	r3, [r4, #0]
 8001df4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001df6:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001df8:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dfa:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d103      	bne.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e02:	4a46      	ldr	r2, [pc, #280]	; (8001f1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }
  
#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e08:	682b      	ldr	r3, [r5, #0]
 8001e0a:	07da      	lsls	r2, r3, #31
 8001e0c:	d506      	bpl.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e0e:	2003      	movs	r0, #3
 8001e10:	493f      	ldr	r1, [pc, #252]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e12:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001e14:	4382      	bics	r2, r0
 8001e16:	68e8      	ldr	r0, [r5, #12]
 8001e18:	4302      	orrs	r2, r0
 8001e1a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */
  
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e1c:	079a      	lsls	r2, r3, #30
 8001e1e:	d506      	bpl.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e20:	200c      	movs	r0, #12
 8001e22:	493b      	ldr	r1, [pc, #236]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e24:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001e26:	4382      	bics	r2, r0
 8001e28:	6928      	ldr	r0, [r5, #16]
 8001e2a:	4302      	orrs	r2, r0
 8001e2c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
  
  /*------------------------------ LPUART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e2e:	075a      	lsls	r2, r3, #29
 8001e30:	d506      	bpl.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
    
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e32:	4937      	ldr	r1, [pc, #220]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e34:	483a      	ldr	r0, [pc, #232]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e36:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001e38:	4002      	ands	r2, r0
 8001e3a:	6968      	ldr	r0, [r5, #20]
 8001e3c:	4302      	orrs	r2, r0
 8001e3e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e40:	071a      	lsls	r2, r3, #28
 8001e42:	d506      	bpl.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e44:	4932      	ldr	r1, [pc, #200]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e46:	4837      	ldr	r0, [pc, #220]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e48:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001e4a:	4002      	ands	r2, r0
 8001e4c:	69a8      	ldr	r0, [r5, #24]
 8001e4e:	4302      	orrs	r2, r0
 8001e50:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e52:	05da      	lsls	r2, r3, #23
 8001e54:	d506      	bpl.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e56:	492e      	ldr	r1, [pc, #184]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e58:	4833      	ldr	r0, [pc, #204]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001e5a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001e5c:	4002      	ands	r2, r0
 8001e5e:	69e8      	ldr	r0, [r5, #28]
 8001e60:	4302      	orrs	r2, r0
 8001e62:	64ca      	str	r2, [r1, #76]	; 0x4c
  }  
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001e64:	065a      	lsls	r2, r3, #25
 8001e66:	d506      	bpl.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e68:	4929      	ldr	r1, [pc, #164]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e6a:	4830      	ldr	r0, [pc, #192]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e6c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001e6e:	4002      	ands	r2, r0
 8001e70:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8001e72:	4302      	orrs	r2, r0
 8001e74:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8001e76:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e78:	061b      	lsls	r3, r3, #24
 8001e7a:	d518      	bpl.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x146>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001e7c:	4a24      	ldr	r2, [pc, #144]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e7e:	492c      	ldr	r1, [pc, #176]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001e80:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001e82:	400b      	ands	r3, r1
 8001e84:	6a29      	ldr	r1, [r5, #32]
 8001e86:	430b      	orrs	r3, r1
 8001e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e8a:	e010      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x146>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e8c:	6833      	ldr	r3, [r6, #0]
 8001e8e:	433b      	orrs	r3, r7
 8001e90:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001e92:	f7fe ff7f 	bl	8000d94 <HAL_GetTick>
 8001e96:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e98:	6833      	ldr	r3, [r6, #0]
 8001e9a:	423b      	tst	r3, r7
 8001e9c:	d000      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8001e9e:	e77d      	b.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea0:	f7fe ff78 	bl	8000d94 <HAL_GetTick>
 8001ea4:	9b01      	ldr	r3, [sp, #4]
 8001ea6:	1ac0      	subs	r0, r0, r3
 8001ea8:	2864      	cmp	r0, #100	; 0x64
 8001eaa:	d9f5      	bls.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x130>
          return HAL_TIMEOUT;
 8001eac:	2003      	movs	r0, #3
}
 8001eae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001eb0:	4011      	ands	r1, r2
 8001eb2:	428b      	cmp	r3, r1
 8001eb4:	d002      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x154>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001eb6:	6829      	ldr	r1, [r5, #0]
 8001eb8:	0689      	lsls	r1, r1, #26
 8001eba:	d408      	bmi.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x166>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001ebc:	68a9      	ldr	r1, [r5, #8]
 8001ebe:	400a      	ands	r2, r1
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d100      	bne.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8001ec4:	e787      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001ec6:	682b      	ldr	r3, [r5, #0]
 8001ec8:	051b      	lsls	r3, r3, #20
 8001eca:	d400      	bmi.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001ecc:	e783      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ece:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001ed0:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ed2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001ed4:	0312      	lsls	r2, r2, #12
 8001ed6:	4302      	orrs	r2, r0
 8001ed8:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eda:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ede:	4815      	ldr	r0, [pc, #84]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001ee0:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ee2:	4002      	ands	r2, r0
 8001ee4:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8001ee6:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001ee8:	05cb      	lsls	r3, r1, #23
 8001eea:	d400      	bmi.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001eec:	e773      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        tickstart = HAL_GetTick();
 8001eee:	f7fe ff51 	bl	8000d94 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef2:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001ef4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef6:	00bf      	lsls	r7, r7, #2
 8001ef8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001efa:	423b      	tst	r3, r7
 8001efc:	d000      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8001efe:	e76a      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f00:	f7fe ff48 	bl	8000d94 <HAL_GetTick>
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f06:	1b80      	subs	r0, r0, r6
 8001f08:	4298      	cmp	r0, r3
 8001f0a:	d9f5      	bls.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8001f0c:	e7ce      	b.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x144>
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40007000 	.word	0x40007000
 8001f18:	ffcfffff 	.word	0xffcfffff
 8001f1c:	efffffff 	.word	0xefffffff
 8001f20:	fffff3ff 	.word	0xfffff3ff
 8001f24:	ffffcfff 	.word	0xffffcfff
 8001f28:	fffcffff 	.word	0xfffcffff
 8001f2c:	fbffffff 	.word	0xfbffffff
 8001f30:	fff3ffff 	.word	0xfff3ffff
 8001f34:	fff7ffff 	.word	0xfff7ffff
 8001f38:	00001388 	.word	0x00001388

08001f3c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_I2C3     I2C3 peripheral clock (*)
  * @note   (*) means that this peripheral is not present on all the devices
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001f3c:	b570      	push	{r4, r5, r6, lr}
#endif /* USB */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8001f3e:	2810      	cmp	r0, #16
 8001f40:	d100      	bne.n	8001f44 <HAL_RCCEx_GetPeriphCLKFreq+0x8>
 8001f42:	e0cd      	b.n	80020e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8001f44:	d81e      	bhi.n	8001f84 <HAL_RCCEx_GetPeriphCLKFreq+0x48>
 8001f46:	2802      	cmp	r0, #2
 8001f48:	d100      	bne.n	8001f4c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 8001f4a:	e09e      	b.n	800208a <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
 8001f4c:	d804      	bhi.n	8001f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
 8001f4e:	2801      	cmp	r0, #1
 8001f50:	d100      	bne.n	8001f54 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8001f52:	e081      	b.n	8002058 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
  uint32_t temp_reg = 0U, clkprediv = 0U, frequency = 0U;
 8001f54:	2000      	movs	r0, #0
 8001f56:	e03b      	b.n	8001fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
  switch (PeriphClk)
 8001f58:	2804      	cmp	r0, #4
 8001f5a:	d100      	bne.n	8001f5e <HAL_RCCEx_GetPeriphCLKFreq+0x22>
 8001f5c:	e0a6      	b.n	80020ac <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8001f5e:	2808      	cmp	r0, #8
 8001f60:	d1f8      	bne.n	8001f54 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
      break;
    }    
  case RCC_PERIPHCLK_I2C1:
    {
      /* Get the current I2C1 source */
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8001f62:	21c0      	movs	r1, #192	; 0xc0
 8001f64:	4a6a      	ldr	r2, [pc, #424]	; (8002110 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8001f66:	0189      	lsls	r1, r1, #6
 8001f68:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001f6a:	400b      	ands	r3, r1

      /* Check if I2C1 clock selection is PCLK1 */
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8001f6c:	d100      	bne.n	8001f70 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
 8001f6e:	e091      	b.n	8002094 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      {
        frequency = HAL_RCC_GetPCLK1Freq();
      }
      /* Check if HSI is ready and if I2C1 clock selection is HSI */
      else if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8001f70:	2180      	movs	r1, #128	; 0x80
 8001f72:	0189      	lsls	r1, r1, #6
 8001f74:	428b      	cmp	r3, r1
 8001f76:	d100      	bne.n	8001f7a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8001f78:	e078      	b.n	800206c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      {
        frequency = HSI_VALUE;
      }
      /* Check if I2C1 clock selection is SYSCLK */
      else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8001f7a:	2280      	movs	r2, #128	; 0x80
 8001f7c:	0152      	lsls	r2, r2, #5
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
      {
        frequency = HSI_VALUE;
      }
      /* Check if I2C3 clock selection is SYSCLK */
      else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d1e8      	bne.n	8001f54 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8001f82:	e079      	b.n	8002078 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  switch (PeriphClk)
 8001f84:	2840      	cmp	r0, #64	; 0x40
 8001f86:	d03f      	beq.n	8002008 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8001f88:	d80f      	bhi.n	8001faa <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 8001f8a:	2820      	cmp	r0, #32
 8001f8c:	d1e2      	bne.n	8001f54 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8001f8e:	25c0      	movs	r5, #192	; 0xc0
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 8001f90:	2080      	movs	r0, #128	; 0x80
      temp_reg = RCC->CSR;
 8001f92:	495f      	ldr	r1, [pc, #380]	; (8002110 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8001f94:	02ad      	lsls	r5, r5, #10
      temp_reg = RCC->CSR;
 8001f96:	6d0b      	ldr	r3, [r1, #80]	; 0x50
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8001f98:	6d0a      	ldr	r2, [r1, #80]	; 0x50
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 8001f9a:	0240      	lsls	r0, r0, #9
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8001f9c:	402a      	ands	r2, r5
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 8001f9e:	4282      	cmp	r2, r0
 8001fa0:	d10d      	bne.n	8001fbe <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 8001fa2:	0598      	lsls	r0, r3, #22
        frequency = LSE_VALUE;
 8001fa4:	0fc0      	lsrs	r0, r0, #31
 8001fa6:	03c0      	lsls	r0, r0, #15
 8001fa8:	e012      	b.n	8001fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
  switch (PeriphClk)
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	4298      	cmp	r0, r3
 8001fb0:	d100      	bne.n	8001fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 8001fb2:	e09d      	b.n	80020f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	4298      	cmp	r0, r3
 8001fba:	d0e8      	beq.n	8001f8e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8001fbc:	e7ca      	b.n	8001f54 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 8001fbe:	2480      	movs	r4, #128	; 0x80
 8001fc0:	02a4      	lsls	r4, r4, #10
 8001fc2:	42a2      	cmp	r2, r4
 8001fc4:	d105      	bne.n	8001fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 8001fc6:	2002      	movs	r0, #2
 8001fc8:	4003      	ands	r3, r0
            frequency = 0U;
 8001fca:	1e18      	subs	r0, r3, #0
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 8001fcc:	d000      	beq.n	8001fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
        frequency = LSI_VALUE;
 8001fce:	4851      	ldr	r0, [pc, #324]	; (8002114 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
    {
      break;
    }
  }
  return(frequency);
}
 8001fd0:	bd70      	pop	{r4, r5, r6, pc}
            frequency = 0U;
 8001fd2:	2000      	movs	r0, #0
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIVX) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001fd4:	42aa      	cmp	r2, r5
 8001fd6:	d1fb      	bne.n	8001fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 8001fd8:	680b      	ldr	r3, [r1, #0]
 8001fda:	4223      	tst	r3, r4
 8001fdc:	d0f8      	beq.n	8001fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 8001fde:	22c0      	movs	r2, #192	; 0xc0
 8001fe0:	680b      	ldr	r3, [r1, #0]
        switch (clkprediv)
 8001fe2:	2180      	movs	r1, #128	; 0x80
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 8001fe4:	0392      	lsls	r2, r2, #14
 8001fe6:	4013      	ands	r3, r2
        switch (clkprediv)
 8001fe8:	0389      	lsls	r1, r1, #14
 8001fea:	428b      	cmp	r3, r1
 8001fec:	d008      	beq.n	8002000 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d100      	bne.n	8001ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8001ff2:	e08a      	b.n	800210a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8001ff4:	2280      	movs	r2, #128	; 0x80
 8001ff6:	0352      	lsls	r2, r2, #13
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d103      	bne.n	8002004 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
            frequency = HSE_VALUE / 4U;
 8001ffc:	4846      	ldr	r0, [pc, #280]	; (8002118 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
            break;
 8001ffe:	e7e7      	b.n	8001fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
            frequency = HSE_VALUE / 8U;
 8002000:	4846      	ldr	r0, [pc, #280]	; (800211c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8002002:	e7e5      	b.n	8001fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
            frequency = HSE_VALUE / 2U;
 8002004:	4846      	ldr	r0, [pc, #280]	; (8002120 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
            break;
 8002006:	e7e3      	b.n	8001fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8002008:	2080      	movs	r0, #128	; 0x80
 800200a:	4b41      	ldr	r3, [pc, #260]	; (8002110 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800200c:	04c0      	lsls	r0, r0, #19
 800200e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002010:	4010      	ands	r0, r2
        if((srcclk == RCC_USBCLKSOURCE_PLL) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8002012:	d11a      	bne.n	800204a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	0192      	lsls	r2, r2, #6
 8002018:	d5da      	bpl.n	8001fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
            pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 800201a:	68da      	ldr	r2, [r3, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 800201c:	4841      	ldr	r0, [pc, #260]	; (8002124 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>)
            plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 800201e:	68d9      	ldr	r1, [r3, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 8002020:	0292      	lsls	r2, r2, #10
 8002022:	0f12      	lsrs	r2, r2, #28
 8002024:	5c80      	ldrb	r0, [r0, r2]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 8002026:	0209      	lsls	r1, r1, #8
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 8002028:	68da      	ldr	r2, [r3, #12]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 800202a:	0f89      	lsrs	r1, r1, #30
 800202c:	3101      	adds	r1, #1
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 800202e:	03d2      	lsls	r2, r2, #15
 8002030:	d407      	bmi.n	8002042 <HAL_RCCEx_GetPeriphCLKFreq+0x106>
                if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	06db      	lsls	r3, r3, #27
 8002036:	d406      	bmi.n	8002046 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
                    pllvco =  HSI_VALUE;
 8002038:	4b3b      	ldr	r3, [pc, #236]	; (8002128 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>)
            pllvco = (pllvco * pllmul);
 800203a:	4358      	muls	r0, r3
            frequency = (pllvco/ plldiv);
 800203c:	f7fe f86e 	bl	800011c <__udivsi3>
 8002040:	e7c6      	b.n	8001fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
                pllvco = HSE_VALUE;
 8002042:	4b3a      	ldr	r3, [pc, #232]	; (800212c <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>)
 8002044:	e7f9      	b.n	800203a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
                    pllvco =  (HSI_VALUE >> 2U);
 8002046:	4b36      	ldr	r3, [pc, #216]	; (8002120 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
 8002048:	e7f7      	b.n	800203a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 800204a:	2202      	movs	r2, #2
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	4013      	ands	r3, r2
            frequency = 0U;
 8002050:	1e18      	subs	r0, r3, #0
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 8002052:	d0bd      	beq.n	8001fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
            frequency = HSI48_VALUE;
 8002054:	4836      	ldr	r0, [pc, #216]	; (8002130 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>)
 8002056:	e7bb      	b.n	8001fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8002058:	2103      	movs	r1, #3
 800205a:	4a2d      	ldr	r2, [pc, #180]	; (8002110 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800205c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800205e:	400b      	ands	r3, r1
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8002060:	d102      	bne.n	8002068 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        frequency = HAL_RCC_GetPCLK2Freq();
 8002062:	f7ff fe71 	bl	8001d48 <HAL_RCC_GetPCLK2Freq>
 8002066:	e7b3      	b.n	8001fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8002068:	2b02      	cmp	r3, #2
 800206a:	d103      	bne.n	8002074 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800206c:	6813      	ldr	r3, [r2, #0]
 800206e:	2204      	movs	r2, #4
 8002070:	4013      	ands	r3, r2
 8002072:	e027      	b.n	80020c4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8002074:	2b01      	cmp	r3, #1
 8002076:	d102      	bne.n	800207e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        frequency = HAL_RCC_GetSysClockFreq();
 8002078:	f7ff fd5c 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 800207c:	e7a8      	b.n	8001fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
            frequency = 0U;
 800207e:	2000      	movs	r0, #0
      else if ((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8002080:	2b03      	cmp	r3, #3
 8002082:	d1a5      	bne.n	8001fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 8002084:	6d10      	ldr	r0, [r2, #80]	; 0x50
 8002086:	0580      	lsls	r0, r0, #22
 8002088:	e78c      	b.n	8001fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800208a:	210c      	movs	r1, #12
 800208c:	4a20      	ldr	r2, [pc, #128]	; (8002110 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 800208e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002090:	400b      	ands	r3, r1
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8002092:	d102      	bne.n	800209a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        frequency = HAL_RCC_GetPCLK1Freq();
 8002094:	f7ff fe48 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 8002098:	e79a      	b.n	8001fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800209a:	2b08      	cmp	r3, #8
 800209c:	d0e6      	beq.n	800206c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d0ea      	beq.n	8002078 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
            frequency = 0U;
 80020a2:	2000      	movs	r0, #0
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 80020a4:	2b0c      	cmp	r3, #12
 80020a6:	d000      	beq.n	80020aa <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 80020a8:	e792      	b.n	8001fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 80020aa:	e7eb      	b.n	8002084 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80020ac:	21c0      	movs	r1, #192	; 0xc0
 80020ae:	4a18      	ldr	r2, [pc, #96]	; (8002110 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80020b0:	0109      	lsls	r1, r1, #4
 80020b2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80020b4:	400b      	ands	r3, r1
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 80020b6:	d0ed      	beq.n	8002094 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80020b8:	2480      	movs	r4, #128	; 0x80
 80020ba:	0124      	lsls	r4, r4, #4
 80020bc:	42a3      	cmp	r3, r4
 80020be:	d106      	bne.n	80020ce <HAL_RCCEx_GetPeriphCLKFreq+0x192>
 80020c0:	6813      	ldr	r3, [r2, #0]
 80020c2:	4003      	ands	r3, r0
            frequency = 0U;
 80020c4:	1e18      	subs	r0, r3, #0
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80020c6:	d100      	bne.n	80020ca <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
 80020c8:	e782      	b.n	8001fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
        frequency = HSI_VALUE;
 80020ca:	4817      	ldr	r0, [pc, #92]	; (8002128 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>)
 80020cc:	e780      	b.n	8001fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80020ce:	2080      	movs	r0, #128	; 0x80
 80020d0:	00c0      	lsls	r0, r0, #3
 80020d2:	4283      	cmp	r3, r0
 80020d4:	d0d0      	beq.n	8002078 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
            frequency = 0U;
 80020d6:	2000      	movs	r0, #0
      else if ((srcclk == RCC_LPUART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 80020d8:	428b      	cmp	r3, r1
 80020da:	d000      	beq.n	80020de <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80020dc:	e778      	b.n	8001fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 80020de:	e7d1      	b.n	8002084 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      if (READ_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C2EN))==RCC_APB1ENR_I2C2EN)
 80020e0:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80020e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	03db      	lsls	r3, r3, #15
 80020e8:	4018      	ands	r0, r3
 80020ea:	d100      	bne.n	80020ee <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 80020ec:	e770      	b.n	8001fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 80020ee:	e7d1      	b.n	8002094 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80020f0:	21c0      	movs	r1, #192	; 0xc0
 80020f2:	4a07      	ldr	r2, [pc, #28]	; (8002110 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80020f4:	0289      	lsls	r1, r1, #10
 80020f6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80020f8:	400b      	ands	r3, r1
      if (srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 80020fa:	d0cb      	beq.n	8002094 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80020fc:	2180      	movs	r1, #128	; 0x80
 80020fe:	0289      	lsls	r1, r1, #10
 8002100:	428b      	cmp	r3, r1
 8002102:	d0b3      	beq.n	800206c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8002104:	2280      	movs	r2, #128	; 0x80
 8002106:	0252      	lsls	r2, r2, #9
 8002108:	e739      	b.n	8001f7e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
            frequency = HSE_VALUE / 16U;
 800210a:	480a      	ldr	r0, [pc, #40]	; (8002134 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>)
 800210c:	e760      	b.n	8001fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	40021000 	.word	0x40021000
 8002114:	00009088 	.word	0x00009088
 8002118:	001e8480 	.word	0x001e8480
 800211c:	000f4240 	.word	0x000f4240
 8002120:	003d0900 	.word	0x003d0900
 8002124:	0800263c 	.word	0x0800263c
 8002128:	00f42400 	.word	0x00f42400
 800212c:	007a1200 	.word	0x007a1200
 8002130:	02dc6c00 	.word	0x02dc6c00
 8002134:	0007a120 	.word	0x0007a120

08002138 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800213a:	0005      	movs	r5, r0
  HAL_StatusTypeDef ret               = HAL_OK;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 800213c:	6803      	ldr	r3, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800213e:	6882      	ldr	r2, [r0, #8]
 8002140:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002142:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002144:	4302      	orrs	r2, r0
 8002146:	6968      	ldr	r0, [r5, #20]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002148:	4e82      	ldr	r6, [pc, #520]	; (8002354 <UART_SetConfig+0x21c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800214a:	4302      	orrs	r2, r0
 800214c:	69e8      	ldr	r0, [r5, #28]
 800214e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002150:	4881      	ldr	r0, [pc, #516]	; (8002358 <UART_SetConfig+0x220>)
 8002152:	4001      	ands	r1, r0
 8002154:	430a      	orrs	r2, r1
 8002156:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	4980      	ldr	r1, [pc, #512]	; (800235c <UART_SetConfig+0x224>)
 800215c:	400a      	ands	r2, r1
 800215e:	68e9      	ldr	r1, [r5, #12]
 8002160:	430a      	orrs	r2, r1
 8002162:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002164:	69a9      	ldr	r1, [r5, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002166:	42b3      	cmp	r3, r6
 8002168:	d001      	beq.n	800216e <UART_SetConfig+0x36>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800216a:	6a2a      	ldr	r2, [r5, #32]
 800216c:	4311      	orrs	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	487b      	ldr	r0, [pc, #492]	; (8002360 <UART_SetConfig+0x228>)
 8002172:	4002      	ands	r2, r0
 8002174:	430a      	orrs	r2, r1
 8002176:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002178:	4a7a      	ldr	r2, [pc, #488]	; (8002364 <UART_SetConfig+0x22c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d117      	bne.n	80021ae <UART_SetConfig+0x76>
 800217e:	2203      	movs	r2, #3
 8002180:	4b79      	ldr	r3, [pc, #484]	; (8002368 <UART_SetConfig+0x230>)
 8002182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002184:	4013      	ands	r3, r2
 8002186:	4a79      	ldr	r2, [pc, #484]	; (800236c <UART_SetConfig+0x234>)
 8002188:	5cd4      	ldrb	r4, [r2, r3]
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 800218a:	2002      	movs	r0, #2
 800218c:	f7ff fed6 	bl	8001f3c <HAL_RCCEx_GetPeriphCLKFreq>

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 8002190:	682f      	ldr	r7, [r5, #0]
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 8002192:	0003      	movs	r3, r0
  if(UART_INSTANCE_LOWPOWER(huart))
 8002194:	42b7      	cmp	r7, r6
 8002196:	d166      	bne.n	8002266 <UART_SetConfig+0x12e>
  {
    /* Retrieve frequency clock */
    tmpreg = 0;

    switch (clocksource)
 8002198:	2c08      	cmp	r4, #8
 800219a:	d900      	bls.n	800219e <UART_SetConfig+0x66>
 800219c:	e0d7      	b.n	800234e <UART_SetConfig+0x216>
 800219e:	0020      	movs	r0, r4
 80021a0:	f7fd ffb2 	bl	8000108 <__gnu_thumb1_case_uqi>
 80021a4:	d539d531 	.word	0xd539d531
 80021a8:	d5d5d559 	.word	0xd5d5d559
 80021ac:	5c          	.byte	0x5c
 80021ad:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021ae:	4a70      	ldr	r2, [pc, #448]	; (8002370 <UART_SetConfig+0x238>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d105      	bne.n	80021c0 <UART_SetConfig+0x88>
 80021b4:	220c      	movs	r2, #12
 80021b6:	4b6c      	ldr	r3, [pc, #432]	; (8002368 <UART_SetConfig+0x230>)
 80021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ba:	4013      	ands	r3, r2
 80021bc:	4a6d      	ldr	r2, [pc, #436]	; (8002374 <UART_SetConfig+0x23c>)
 80021be:	e7e3      	b.n	8002188 <UART_SetConfig+0x50>
 80021c0:	4a6d      	ldr	r2, [pc, #436]	; (8002378 <UART_SetConfig+0x240>)
 80021c2:	2400      	movs	r4, #0
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d0e0      	beq.n	800218a <UART_SetConfig+0x52>
 80021c8:	4a6c      	ldr	r2, [pc, #432]	; (800237c <UART_SetConfig+0x244>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d0dd      	beq.n	800218a <UART_SetConfig+0x52>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80021ce:	3410      	adds	r4, #16
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021d0:	42b3      	cmp	r3, r6
 80021d2:	d1da      	bne.n	800218a <UART_SetConfig+0x52>
 80021d4:	22c0      	movs	r2, #192	; 0xc0
 80021d6:	2180      	movs	r1, #128	; 0x80
 80021d8:	4b63      	ldr	r3, [pc, #396]	; (8002368 <UART_SetConfig+0x230>)
 80021da:	0112      	lsls	r2, r2, #4
 80021dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021de:	00c9      	lsls	r1, r1, #3
 80021e0:	4013      	ands	r3, r2
 80021e2:	3c0c      	subs	r4, #12
 80021e4:	428b      	cmp	r3, r1
 80021e6:	d0d0      	beq.n	800218a <UART_SetConfig+0x52>
 80021e8:	d804      	bhi.n	80021f4 <UART_SetConfig+0xbc>
 80021ea:	2400      	movs	r4, #0
 80021ec:	42a3      	cmp	r3, r4
 80021ee:	d0cc      	beq.n	800218a <UART_SetConfig+0x52>
 80021f0:	2410      	movs	r4, #16
 80021f2:	e7ca      	b.n	800218a <UART_SetConfig+0x52>
 80021f4:	2180      	movs	r1, #128	; 0x80
 80021f6:	2402      	movs	r4, #2
 80021f8:	0109      	lsls	r1, r1, #4
 80021fa:	428b      	cmp	r3, r1
 80021fc:	d0c5      	beq.n	800218a <UART_SetConfig+0x52>
 80021fe:	3406      	adds	r4, #6
 8002200:	4293      	cmp	r3, r2
 8002202:	d0c2      	beq.n	800218a <UART_SetConfig+0x52>
 8002204:	e7f4      	b.n	80021f0 <UART_SetConfig+0xb8>
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8002206:	f7ff fd8f 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 800220a:	2400      	movs	r4, #0
      {
        tmpreg = (uint32_t) HSI_VALUE;
      }
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 800220c:	0003      	movs	r3, r0
        ret = HAL_ERROR;
      break;
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 800220e:	42a0      	cmp	r0, r4
 8002210:	d106      	bne.n	8002220 <UART_SetConfig+0xe8>
    }
  }

  return ret;

}
 8002212:	0020      	movs	r0, r4
 8002214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002216:	4b54      	ldr	r3, [pc, #336]	; (8002368 <UART_SetConfig+0x230>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	06db      	lsls	r3, r3, #27
 800221c:	d421      	bmi.n	8002262 <UART_SetConfig+0x12a>
        tmpreg = (uint32_t) HSI_VALUE;
 800221e:	4b58      	ldr	r3, [pc, #352]	; (8002380 <UART_SetConfig+0x248>)
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8002220:	2103      	movs	r1, #3
 8002222:	686a      	ldr	r2, [r5, #4]
        ret = HAL_ERROR;
 8002224:	2401      	movs	r4, #1
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8002226:	4351      	muls	r1, r2
 8002228:	4299      	cmp	r1, r3
 800222a:	d8f2      	bhi.n	8002212 <UART_SetConfig+0xda>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 800222c:	0311      	lsls	r1, r2, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800222e:	4299      	cmp	r1, r3
 8002230:	d3ef      	bcc.n	8002212 <UART_SetConfig+0xda>
        tmpreg = (uint32_t)(UART_DIV_LPUART(tmpreg, huart->Init.BaudRate));
 8002232:	2700      	movs	r7, #0
 8002234:	0856      	lsrs	r6, r2, #1
 8002236:	0e19      	lsrs	r1, r3, #24
 8002238:	0218      	lsls	r0, r3, #8
 800223a:	1980      	adds	r0, r0, r6
 800223c:	4179      	adcs	r1, r7
 800223e:	003b      	movs	r3, r7
 8002240:	f7fe f8e2 	bl	8000408 <__aeabi_uldivmod>
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8002244:	4b4f      	ldr	r3, [pc, #316]	; (8002384 <UART_SetConfig+0x24c>)
 8002246:	18c2      	adds	r2, r0, r3
 8002248:	4b4f      	ldr	r3, [pc, #316]	; (8002388 <UART_SetConfig+0x250>)
 800224a:	429a      	cmp	r2, r3
 800224c:	d8e1      	bhi.n	8002212 <UART_SetConfig+0xda>
           huart->Instance->BRR = tmpreg;
 800224e:	682b      	ldr	r3, [r5, #0]
 8002250:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002252:	2400      	movs	r4, #0
      break;
 8002254:	e7dd      	b.n	8002212 <UART_SetConfig+0xda>
      tmpreg = HAL_RCC_GetSysClockFreq();
 8002256:	f7ff fc6d 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 800225a:	e7d6      	b.n	800220a <UART_SetConfig+0xd2>
      tmpreg = (uint32_t) LSE_VALUE;
 800225c:	2380      	movs	r3, #128	; 0x80
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	e7de      	b.n	8002220 <UART_SetConfig+0xe8>
        tmpreg = (uint32_t) (HSI_VALUE >> 2U);
 8002262:	4b4a      	ldr	r3, [pc, #296]	; (800238c <UART_SetConfig+0x254>)
 8002264:	e7dc      	b.n	8002220 <UART_SetConfig+0xe8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002266:	2280      	movs	r2, #128	; 0x80
 8002268:	69e9      	ldr	r1, [r5, #28]
 800226a:	0212      	lsls	r2, r2, #8
 800226c:	4291      	cmp	r1, r2
 800226e:	d13f      	bne.n	80022f0 <UART_SetConfig+0x1b8>
    switch (clocksource)
 8002270:	2c08      	cmp	r4, #8
 8002272:	d83a      	bhi.n	80022ea <UART_SetConfig+0x1b2>
 8002274:	0020      	movs	r0, r4
 8002276:	f7fd ff47 	bl	8000108 <__gnu_thumb1_case_uqi>
 800227a:	0f05      	.short	0x0f05
 800227c:	38303817 	.word	0x38303817
 8002280:	3838      	.short	0x3838
 8002282:	33          	.byte	0x33
 8002283:	00          	.byte	0x00
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(frequency, huart->Init.BaudRate));
 8002284:	686a      	ldr	r2, [r5, #4]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	0011      	movs	r1, r2
 800228a:	0850      	lsrs	r0, r2, #1
 800228c:	1818      	adds	r0, r3, r0
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800228e:	f7fd ff45 	bl	800011c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8002292:	2400      	movs	r4, #0
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002294:	b280      	uxth	r0, r0
      break;
 8002296:	e016      	b.n	80022c6 <UART_SetConfig+0x18e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002298:	f7ff fd56 	bl	8001d48 <HAL_RCC_GetPCLK2Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800229c:	686b      	ldr	r3, [r5, #4]
 800229e:	0040      	lsls	r0, r0, #1
 80022a0:	085b      	lsrs	r3, r3, #1
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80022a2:	18c0      	adds	r0, r0, r3
 80022a4:	6869      	ldr	r1, [r5, #4]
 80022a6:	e7f2      	b.n	800228e <UART_SetConfig+0x156>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022a8:	4b2f      	ldr	r3, [pc, #188]	; (8002368 <UART_SetConfig+0x230>)
 80022aa:	6869      	ldr	r1, [r5, #4]
 80022ac:	681c      	ldr	r4, [r3, #0]
 80022ae:	2310      	movs	r3, #16
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80022b0:	0848      	lsrs	r0, r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022b2:	401c      	ands	r4, r3
 80022b4:	d002      	beq.n	80022bc <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80022b6:	4b36      	ldr	r3, [pc, #216]	; (8002390 <UART_SetConfig+0x258>)
 80022b8:	18c0      	adds	r0, r0, r3
 80022ba:	e7e8      	b.n	800228e <UART_SetConfig+0x156>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
 80022bc:	4b35      	ldr	r3, [pc, #212]	; (8002394 <UART_SetConfig+0x25c>)
 80022be:	18c0      	adds	r0, r0, r3
 80022c0:	f7fd ff2c 	bl	800011c <__udivsi3>
 80022c4:	b280      	uxth	r0, r0
    brrtemp = usartdiv & 0xFFF0U;
 80022c6:	230f      	movs	r3, #15
 80022c8:	0002      	movs	r2, r0
 80022ca:	439a      	bics	r2, r3
 80022cc:	0013      	movs	r3, r2
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 80022ce:	0700      	lsls	r0, r0, #28
    huart->Instance->BRR = brrtemp;
 80022d0:	682a      	ldr	r2, [r5, #0]
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 80022d2:	0f40      	lsrs	r0, r0, #29
    huart->Instance->BRR = brrtemp;
 80022d4:	4318      	orrs	r0, r3
 80022d6:	60d0      	str	r0, [r2, #12]
 80022d8:	e79b      	b.n	8002212 <UART_SetConfig+0xda>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80022da:	f7ff fc2b 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 80022de:	e7dd      	b.n	800229c <UART_SetConfig+0x164>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80022e0:	686b      	ldr	r3, [r5, #4]
 80022e2:	0858      	lsrs	r0, r3, #1
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	025b      	lsls	r3, r3, #9
 80022e8:	e7db      	b.n	80022a2 <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 80022ea:	2401      	movs	r4, #1
  uint16_t usartdiv                   = 0x0000U;
 80022ec:	2000      	movs	r0, #0
 80022ee:	e7ea      	b.n	80022c6 <UART_SetConfig+0x18e>
    switch (clocksource)
 80022f0:	2c08      	cmp	r4, #8
 80022f2:	d82c      	bhi.n	800234e <UART_SetConfig+0x216>
 80022f4:	0020      	movs	r0, r4
 80022f6:	f7fd ff07 	bl	8000108 <__gnu_thumb1_case_uqi>
 80022fa:	0f05      	.short	0x0f05
 80022fc:	2a222a12 	.word	0x2a222a12
 8002300:	2a2a      	.short	0x2a2a
 8002302:	25          	.byte	0x25
 8002303:	00          	.byte	0x00
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002304:	f7ff fd10 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 8002308:	6869      	ldr	r1, [r5, #4]
 800230a:	084b      	lsrs	r3, r1, #1
 800230c:	1818      	adds	r0, r3, r0
 800230e:	f7fd ff05 	bl	800011c <__udivsi3>
 8002312:	b280      	uxth	r0, r0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	e79c      	b.n	8002252 <UART_SetConfig+0x11a>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002318:	f7ff fd16 	bl	8001d48 <HAL_RCC_GetPCLK2Freq>
 800231c:	e7f4      	b.n	8002308 <UART_SetConfig+0x1d0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800231e:	4b12      	ldr	r3, [pc, #72]	; (8002368 <UART_SetConfig+0x230>)
 8002320:	6869      	ldr	r1, [r5, #4]
 8002322:	681c      	ldr	r4, [r3, #0]
 8002324:	2310      	movs	r3, #16
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002326:	0848      	lsrs	r0, r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002328:	401c      	ands	r4, r3
 800232a:	d001      	beq.n	8002330 <UART_SetConfig+0x1f8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800232c:	4b17      	ldr	r3, [pc, #92]	; (800238c <UART_SetConfig+0x254>)
 800232e:	e7ed      	b.n	800230c <UART_SetConfig+0x1d4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002330:	4b13      	ldr	r3, [pc, #76]	; (8002380 <UART_SetConfig+0x248>)
 8002332:	18c0      	adds	r0, r0, r3
 8002334:	f7fd fef2 	bl	800011c <__udivsi3>
 8002338:	b280      	uxth	r0, r0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	e769      	b.n	8002212 <UART_SetConfig+0xda>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800233e:	f7ff fbf9 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8002342:	e7e1      	b.n	8002308 <UART_SetConfig+0x1d0>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002344:	2380      	movs	r3, #128	; 0x80
 8002346:	6869      	ldr	r1, [r5, #4]
 8002348:	021b      	lsls	r3, r3, #8
 800234a:	0848      	lsrs	r0, r1, #1
 800234c:	e7de      	b.n	800230c <UART_SetConfig+0x1d4>
        ret = HAL_ERROR;
 800234e:	2401      	movs	r4, #1
 8002350:	e75f      	b.n	8002212 <UART_SetConfig+0xda>
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	40004800 	.word	0x40004800
 8002358:	efff69f3 	.word	0xefff69f3
 800235c:	ffffcfff 	.word	0xffffcfff
 8002360:	fffff4ff 	.word	0xfffff4ff
 8002364:	40013800 	.word	0x40013800
 8002368:	40021000 	.word	0x40021000
 800236c:	08002645 	.word	0x08002645
 8002370:	40004400 	.word	0x40004400
 8002374:	08002649 	.word	0x08002649
 8002378:	40004c00 	.word	0x40004c00
 800237c:	40005000 	.word	0x40005000
 8002380:	00f42400 	.word	0x00f42400
 8002384:	fffffd00 	.word	0xfffffd00
 8002388:	000ffcff 	.word	0x000ffcff
 800238c:	003d0900 	.word	0x003d0900
 8002390:	007a1200 	.word	0x007a1200
 8002394:	01e84800 	.word	0x01e84800

08002398 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002398:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800239a:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800239c:	07da      	lsls	r2, r3, #31
 800239e:	d506      	bpl.n	80023ae <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80023a0:	6801      	ldr	r1, [r0, #0]
 80023a2:	4c28      	ldr	r4, [pc, #160]	; (8002444 <UART_AdvFeatureConfig+0xac>)
 80023a4:	684a      	ldr	r2, [r1, #4]
 80023a6:	4022      	ands	r2, r4
 80023a8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80023aa:	4322      	orrs	r2, r4
 80023ac:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80023ae:	079a      	lsls	r2, r3, #30
 80023b0:	d506      	bpl.n	80023c0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80023b2:	6801      	ldr	r1, [r0, #0]
 80023b4:	4c24      	ldr	r4, [pc, #144]	; (8002448 <UART_AdvFeatureConfig+0xb0>)
 80023b6:	684a      	ldr	r2, [r1, #4]
 80023b8:	4022      	ands	r2, r4
 80023ba:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80023bc:	4322      	orrs	r2, r4
 80023be:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80023c0:	075a      	lsls	r2, r3, #29
 80023c2:	d506      	bpl.n	80023d2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023c4:	6801      	ldr	r1, [r0, #0]
 80023c6:	4c21      	ldr	r4, [pc, #132]	; (800244c <UART_AdvFeatureConfig+0xb4>)
 80023c8:	684a      	ldr	r2, [r1, #4]
 80023ca:	4022      	ands	r2, r4
 80023cc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80023ce:	4322      	orrs	r2, r4
 80023d0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023d2:	071a      	lsls	r2, r3, #28
 80023d4:	d506      	bpl.n	80023e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023d6:	6801      	ldr	r1, [r0, #0]
 80023d8:	4c1d      	ldr	r4, [pc, #116]	; (8002450 <UART_AdvFeatureConfig+0xb8>)
 80023da:	684a      	ldr	r2, [r1, #4]
 80023dc:	4022      	ands	r2, r4
 80023de:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80023e0:	4322      	orrs	r2, r4
 80023e2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80023e4:	06da      	lsls	r2, r3, #27
 80023e6:	d506      	bpl.n	80023f6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80023e8:	6801      	ldr	r1, [r0, #0]
 80023ea:	4c1a      	ldr	r4, [pc, #104]	; (8002454 <UART_AdvFeatureConfig+0xbc>)
 80023ec:	688a      	ldr	r2, [r1, #8]
 80023ee:	4022      	ands	r2, r4
 80023f0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80023f2:	4322      	orrs	r2, r4
 80023f4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023f6:	069a      	lsls	r2, r3, #26
 80023f8:	d506      	bpl.n	8002408 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023fa:	6801      	ldr	r1, [r0, #0]
 80023fc:	4c16      	ldr	r4, [pc, #88]	; (8002458 <UART_AdvFeatureConfig+0xc0>)
 80023fe:	688a      	ldr	r2, [r1, #8]
 8002400:	4022      	ands	r2, r4
 8002402:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002404:	4322      	orrs	r2, r4
 8002406:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002408:	065a      	lsls	r2, r3, #25
 800240a:	d510      	bpl.n	800242e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800240c:	6801      	ldr	r1, [r0, #0]
 800240e:	4d13      	ldr	r5, [pc, #76]	; (800245c <UART_AdvFeatureConfig+0xc4>)
 8002410:	684a      	ldr	r2, [r1, #4]
 8002412:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002414:	402a      	ands	r2, r5
 8002416:	4322      	orrs	r2, r4
 8002418:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800241a:	2280      	movs	r2, #128	; 0x80
 800241c:	0352      	lsls	r2, r2, #13
 800241e:	4294      	cmp	r4, r2
 8002420:	d105      	bne.n	800242e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002422:	684a      	ldr	r2, [r1, #4]
 8002424:	4c0e      	ldr	r4, [pc, #56]	; (8002460 <UART_AdvFeatureConfig+0xc8>)
 8002426:	4022      	ands	r2, r4
 8002428:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800242a:	4322      	orrs	r2, r4
 800242c:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800242e:	061b      	lsls	r3, r3, #24
 8002430:	d506      	bpl.n	8002440 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002432:	6802      	ldr	r2, [r0, #0]
 8002434:	490b      	ldr	r1, [pc, #44]	; (8002464 <UART_AdvFeatureConfig+0xcc>)
 8002436:	6853      	ldr	r3, [r2, #4]
 8002438:	400b      	ands	r3, r1
 800243a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800243c:	430b      	orrs	r3, r1
 800243e:	6053      	str	r3, [r2, #4]
  }
}
 8002440:	bd30      	pop	{r4, r5, pc}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	fffdffff 	.word	0xfffdffff
 8002448:	fffeffff 	.word	0xfffeffff
 800244c:	fffbffff 	.word	0xfffbffff
 8002450:	ffff7fff 	.word	0xffff7fff
 8002454:	ffffefff 	.word	0xffffefff
 8002458:	ffffdfff 	.word	0xffffdfff
 800245c:	ffefffff 	.word	0xffefffff
 8002460:	ff9fffff 	.word	0xff9fffff
 8002464:	fff7ffff 	.word	0xfff7ffff

08002468 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800246a:	0004      	movs	r4, r0
 800246c:	000e      	movs	r6, r1
 800246e:	0015      	movs	r5, r2
 8002470:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002472:	6822      	ldr	r2, [r4, #0]
 8002474:	69d3      	ldr	r3, [r2, #28]
 8002476:	4033      	ands	r3, r6
 8002478:	1b9b      	subs	r3, r3, r6
 800247a:	4259      	negs	r1, r3
 800247c:	414b      	adcs	r3, r1
 800247e:	42ab      	cmp	r3, r5
 8002480:	d001      	beq.n	8002486 <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002482:	2000      	movs	r0, #0
 8002484:	e018      	b.n	80024b8 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8002486:	9b06      	ldr	r3, [sp, #24]
 8002488:	3301      	adds	r3, #1
 800248a:	d0f3      	beq.n	8002474 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 800248c:	9b06      	ldr	r3, [sp, #24]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d113      	bne.n	80024ba <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002492:	6823      	ldr	r3, [r4, #0]
 8002494:	490c      	ldr	r1, [pc, #48]	; (80024c8 <UART_WaitOnFlagUntilTimeout+0x60>)
 8002496:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8002498:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800249a:	400a      	ands	r2, r1
 800249c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	31a3      	adds	r1, #163	; 0xa3
 80024a2:	31ff      	adds	r1, #255	; 0xff
 80024a4:	438a      	bics	r2, r1
 80024a6:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80024a8:	0022      	movs	r2, r4
 80024aa:	2320      	movs	r3, #32
 80024ac:	3269      	adds	r2, #105	; 0x69
 80024ae:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 80024b0:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 80024b2:	2300      	movs	r3, #0
 80024b4:	3468      	adds	r4, #104	; 0x68
 80024b6:	7023      	strb	r3, [r4, #0]
}
 80024b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 80024ba:	f7fe fc6b 	bl	8000d94 <HAL_GetTick>
 80024be:	9b06      	ldr	r3, [sp, #24]
 80024c0:	1bc0      	subs	r0, r0, r7
 80024c2:	4283      	cmp	r3, r0
 80024c4:	d2d5      	bcs.n	8002472 <UART_WaitOnFlagUntilTimeout+0xa>
 80024c6:	e7e4      	b.n	8002492 <UART_WaitOnFlagUntilTimeout+0x2a>
 80024c8:	fffffe5f 	.word	0xfffffe5f

080024cc <UART_CheckIdleState>:
{
 80024cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ce:	2600      	movs	r6, #0
{
 80024d0:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d2:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80024d4:	f7fe fc5e 	bl	8000d94 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80024d8:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80024da:	0005      	movs	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	071b      	lsls	r3, r3, #28
 80024e0:	d417      	bmi.n	8002512 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80024e2:	6823      	ldr	r3, [r4, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	075b      	lsls	r3, r3, #29
 80024e8:	d50a      	bpl.n	8002500 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024ea:	2180      	movs	r1, #128	; 0x80
 80024ec:	4b0f      	ldr	r3, [pc, #60]	; (800252c <UART_CheckIdleState+0x60>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	03c9      	lsls	r1, r1, #15
 80024f4:	002b      	movs	r3, r5
 80024f6:	0020      	movs	r0, r4
 80024f8:	f7ff ffb6 	bl	8002468 <UART_WaitOnFlagUntilTimeout>
 80024fc:	2800      	cmp	r0, #0
 80024fe:	d113      	bne.n	8002528 <UART_CheckIdleState+0x5c>
  huart->gState  = HAL_UART_STATE_READY;
 8002500:	0022      	movs	r2, r4
 8002502:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002504:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8002506:	3269      	adds	r2, #105	; 0x69
  __HAL_UNLOCK(huart);
 8002508:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 800250a:	7013      	strb	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 800250c:	7053      	strb	r3, [r2, #1]
  __HAL_UNLOCK(huart);
 800250e:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8002510:	e00b      	b.n	800252a <UART_CheckIdleState+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002512:	2180      	movs	r1, #128	; 0x80
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <UART_CheckIdleState+0x60>)
 8002516:	0032      	movs	r2, r6
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	0389      	lsls	r1, r1, #14
 800251c:	0003      	movs	r3, r0
 800251e:	0020      	movs	r0, r4
 8002520:	f7ff ffa2 	bl	8002468 <UART_WaitOnFlagUntilTimeout>
 8002524:	2800      	cmp	r0, #0
 8002526:	d0dc      	beq.n	80024e2 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002528:	2003      	movs	r0, #3
}
 800252a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800252c:	01ffffff 	.word	0x01ffffff

08002530 <HAL_UART_Init>:
{
 8002530:	b570      	push	{r4, r5, r6, lr}
 8002532:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8002534:	d101      	bne.n	800253a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8002536:	2001      	movs	r0, #1
}
 8002538:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 800253a:	0005      	movs	r5, r0
 800253c:	3569      	adds	r5, #105	; 0x69
 800253e:	782b      	ldrb	r3, [r5, #0]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d104      	bne.n	8002550 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8002546:	0002      	movs	r2, r0
 8002548:	3268      	adds	r2, #104	; 0x68
 800254a:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800254c:	f7fe fba8 	bl	8000ca0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002550:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002552:	2101      	movs	r1, #1
 8002554:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002556:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8002558:	6813      	ldr	r3, [r2, #0]
 800255a:	438b      	bics	r3, r1
 800255c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800255e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <HAL_UART_Init+0x3a>
    UART_AdvFeatureConfig(huart);
 8002564:	0020      	movs	r0, r4
 8002566:	f7ff ff17 	bl	8002398 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800256a:	0020      	movs	r0, r4
 800256c:	f7ff fde4 	bl	8002138 <UART_SetConfig>
 8002570:	2801      	cmp	r0, #1
 8002572:	d0e0      	beq.n	8002536 <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002574:	6823      	ldr	r3, [r4, #0]
 8002576:	4908      	ldr	r1, [pc, #32]	; (8002598 <HAL_UART_Init+0x68>)
 8002578:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800257a:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800257c:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800257e:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002580:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	438a      	bics	r2, r1
 8002586:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002588:	2201      	movs	r2, #1
 800258a:	6819      	ldr	r1, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002590:	f7ff ff9c 	bl	80024cc <UART_CheckIdleState>
 8002594:	e7d0      	b.n	8002538 <HAL_UART_Init+0x8>
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	ffffb7ff 	.word	0xffffb7ff

0800259c <__libc_init_array>:
 800259c:	b570      	push	{r4, r5, r6, lr}
 800259e:	2600      	movs	r6, #0
 80025a0:	4d0c      	ldr	r5, [pc, #48]	; (80025d4 <__libc_init_array+0x38>)
 80025a2:	4c0d      	ldr	r4, [pc, #52]	; (80025d8 <__libc_init_array+0x3c>)
 80025a4:	1b64      	subs	r4, r4, r5
 80025a6:	10a4      	asrs	r4, r4, #2
 80025a8:	42a6      	cmp	r6, r4
 80025aa:	d109      	bne.n	80025c0 <__libc_init_array+0x24>
 80025ac:	2600      	movs	r6, #0
 80025ae:	f000 f819 	bl	80025e4 <_init>
 80025b2:	4d0a      	ldr	r5, [pc, #40]	; (80025dc <__libc_init_array+0x40>)
 80025b4:	4c0a      	ldr	r4, [pc, #40]	; (80025e0 <__libc_init_array+0x44>)
 80025b6:	1b64      	subs	r4, r4, r5
 80025b8:	10a4      	asrs	r4, r4, #2
 80025ba:	42a6      	cmp	r6, r4
 80025bc:	d105      	bne.n	80025ca <__libc_init_array+0x2e>
 80025be:	bd70      	pop	{r4, r5, r6, pc}
 80025c0:	00b3      	lsls	r3, r6, #2
 80025c2:	58eb      	ldr	r3, [r5, r3]
 80025c4:	4798      	blx	r3
 80025c6:	3601      	adds	r6, #1
 80025c8:	e7ee      	b.n	80025a8 <__libc_init_array+0xc>
 80025ca:	00b3      	lsls	r3, r6, #2
 80025cc:	58eb      	ldr	r3, [r5, r3]
 80025ce:	4798      	blx	r3
 80025d0:	3601      	adds	r6, #1
 80025d2:	e7f2      	b.n	80025ba <__libc_init_array+0x1e>
 80025d4:	08002660 	.word	0x08002660
 80025d8:	08002660 	.word	0x08002660
 80025dc:	08002660 	.word	0x08002660
 80025e0:	08002664 	.word	0x08002664

080025e4 <_init>:
 80025e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ea:	bc08      	pop	{r3}
 80025ec:	469e      	mov	lr, r3
 80025ee:	4770      	bx	lr

080025f0 <_fini>:
 80025f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025f6:	bc08      	pop	{r3}
 80025f8:	469e      	mov	lr, r3
 80025fa:	4770      	bx	lr
