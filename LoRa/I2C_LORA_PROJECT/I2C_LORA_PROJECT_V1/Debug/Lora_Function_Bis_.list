
Lora_Function_Bis_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b80  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08002d08  08002d08  00012d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002dc4  08002dc4  00012dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002dcc  08002dcc  00012dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002dd0  08002dd0  00012dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000001c  20000000  08002dd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001a8  2000001c  08002df0  0002001c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001c4  08002df0  000201c4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011830  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000022ce  00000000  00000000  0003187c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000084f7  00000000  00000000  00033b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000af0  00000000  00000000  0003c048  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c20  00000000  00000000  0003cb38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006135  00000000  00000000  0003d758  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004129  00000000  00000000  0004388d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000479b6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000020ac  00000000  00000000  00047a34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002cf0 	.word	0x08002cf0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08002cf0 	.word	0x08002cf0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80004da:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <HAL_InitTick+0x2c>)
{
 80004dc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80004de:	6818      	ldr	r0, [r3, #0]
 80004e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80004e8:	f000 f886 	bl	80005f8 <HAL_SYSTICK_Config>
 80004ec:	4604      	mov	r4, r0
 80004ee:	b938      	cbnz	r0, 8000500 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80004f0:	4602      	mov	r2, r0
 80004f2:	4629      	mov	r1, r5
 80004f4:	f04f 30ff 	mov.w	r0, #4294967295
 80004f8:	f000 f84a 	bl	8000590 <HAL_NVIC_SetPriority>
 80004fc:	4620      	mov	r0, r4
 80004fe:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8000500:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000502:	bd38      	pop	{r3, r4, r5, pc}
 8000504:	20000018 	.word	0x20000018

08000508 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000508:	4a09      	ldr	r2, [pc, #36]	; (8000530 <HAL_Init+0x28>)
 800050a:	6813      	ldr	r3, [r2, #0]
 800050c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8000510:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000512:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000514:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000516:	f000 f829 	bl	800056c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800051a:	2000      	movs	r0, #0
 800051c:	f7ff ffdc 	bl	80004d8 <HAL_InitTick>
 8000520:	4604      	mov	r4, r0
 8000522:	b918      	cbnz	r0, 800052c <HAL_Init+0x24>
    HAL_MspInit();
 8000524:	f002 fa24 	bl	8002970 <HAL_MspInit>
}
 8000528:	4620      	mov	r0, r4
 800052a:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800052c:	2401      	movs	r4, #1
 800052e:	e7fb      	b.n	8000528 <HAL_Init+0x20>
 8000530:	40022000 	.word	0x40022000

08000534 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000534:	4a02      	ldr	r2, [pc, #8]	; (8000540 <HAL_IncTick+0xc>)
 8000536:	6813      	ldr	r3, [r2, #0]
 8000538:	3301      	adds	r3, #1
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000038 	.word	0x20000038

08000544 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000544:	4b01      	ldr	r3, [pc, #4]	; (800054c <HAL_GetTick+0x8>)
 8000546:	6818      	ldr	r0, [r3, #0]
}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000038 	.word	0x20000038

08000550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000550:	b538      	push	{r3, r4, r5, lr}
 8000552:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000554:	f7ff fff6 	bl	8000544 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000558:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800055a:	4605      	mov	r5, r0
  {
    wait++;
 800055c:	bf18      	it	ne
 800055e:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000560:	f7ff fff0 	bl	8000544 <HAL_GetTick>
 8000564:	1b40      	subs	r0, r0, r5
 8000566:	4284      	cmp	r4, r0
 8000568:	d8fa      	bhi.n	8000560 <HAL_Delay+0x10>
  {
  }
}
 800056a:	bd38      	pop	{r3, r4, r5, pc}

0800056c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800056c:	4a07      	ldr	r2, [pc, #28]	; (800058c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800056e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000570:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000574:	041b      	lsls	r3, r3, #16
 8000576:	0c1b      	lsrs	r3, r3, #16
 8000578:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800057c:	0200      	lsls	r0, r0, #8
 800057e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000582:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000586:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000588:	60d3      	str	r3, [r2, #12]
 800058a:	4770      	bx	lr
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000590:	4b17      	ldr	r3, [pc, #92]	; (80005f0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	68dc      	ldr	r4, [r3, #12]
 8000596:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800059a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005a0:	2b04      	cmp	r3, #4
 80005a2:	bf28      	it	cs
 80005a4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a8:	f04f 0501 	mov.w	r5, #1
 80005ac:	fa05 f303 	lsl.w	r3, r5, r3
 80005b0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b4:	bf8c      	ite	hi
 80005b6:	3c03      	subhi	r4, #3
 80005b8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ba:	4019      	ands	r1, r3
 80005bc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005be:	fa05 f404 	lsl.w	r4, r5, r4
 80005c2:	3c01      	subs	r4, #1
 80005c4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005c6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c8:	ea42 0201 	orr.w	r2, r2, r1
 80005cc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d0:	bfaf      	iteee	ge
 80005d2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	f000 000f 	andlt.w	r0, r0, #15
 80005da:	4b06      	ldrlt	r3, [pc, #24]	; (80005f4 <HAL_NVIC_SetPriority+0x64>)
 80005dc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005de:	bfa5      	ittet	ge
 80005e0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005e4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005ec:	bd30      	pop	{r4, r5, pc}
 80005ee:	bf00      	nop
 80005f0:	e000ed00 	.word	0xe000ed00
 80005f4:	e000ed14 	.word	0xe000ed14

080005f8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005f8:	3801      	subs	r0, #1
 80005fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005fe:	d20a      	bcs.n	8000616 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000602:	4a07      	ldr	r2, [pc, #28]	; (8000620 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000604:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000606:	21f0      	movs	r1, #240	; 0xf0
 8000608:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800060c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800060e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000610:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000616:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	e000e010 	.word	0xe000e010
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000626:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000628:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800062a:	bf0c      	ite	eq
 800062c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000630:	f022 0204 	bicne.w	r2, r2, #4
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	4770      	bx	lr
 8000638:	e000e010 	.word	0xe000e010

0800063c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800063c:	4770      	bx	lr

0800063e <HAL_SYSTICK_IRQHandler>:
{
 800063e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000640:	f7ff fffc 	bl	800063c <HAL_SYSTICK_Callback>
 8000644:	bd08      	pop	{r3, pc}
	...

08000648 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800064c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800064e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000650:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80007fc <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000654:	4c67      	ldr	r4, [pc, #412]	; (80007f4 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000656:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8000658:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800065a:	9a01      	ldr	r2, [sp, #4]
 800065c:	40da      	lsrs	r2, r3
 800065e:	d102      	bne.n	8000666 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8000660:	b005      	add	sp, #20
 8000662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000666:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8000668:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800066a:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 800066c:	ea12 0e06 	ands.w	lr, r2, r6
 8000670:	f000 80b1 	beq.w	80007d6 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000674:	684a      	ldr	r2, [r1, #4]
 8000676:	f022 0710 	bic.w	r7, r2, #16
 800067a:	2f02      	cmp	r7, #2
 800067c:	d116      	bne.n	80006ac <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 800067e:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8000682:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000686:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800068a:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800068e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000692:	f04f 0c0f 	mov.w	ip, #15
 8000696:	fa0c fc0a 	lsl.w	ip, ip, sl
 800069a:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800069e:	690d      	ldr	r5, [r1, #16]
 80006a0:	fa05 f50a 	lsl.w	r5, r5, sl
 80006a4:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 80006a8:	f8c9 5020 	str.w	r5, [r9, #32]
 80006ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006b0:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006b2:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006b6:	fa05 f50c 	lsl.w	r5, r5, ip
 80006ba:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006bc:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006c0:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006c4:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006c8:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006ca:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ce:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80006d0:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006d4:	d811      	bhi.n	80006fa <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80006d6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80006d8:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80006dc:	68cf      	ldr	r7, [r1, #12]
 80006de:	fa07 f70c 	lsl.w	r7, r7, ip
 80006e2:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 80006e6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80006e8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80006ea:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80006ee:	f3c2 1700 	ubfx	r7, r2, #4, #1
 80006f2:	409f      	lsls	r7, r3
 80006f4:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 80006f8:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80006fa:	f1ba 0f03 	cmp.w	sl, #3
 80006fe:	d107      	bne.n	8000710 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8000700:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000702:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000706:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 800070a:	409f      	lsls	r7, r3
 800070c:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 800070e:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8000710:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000712:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000714:	688e      	ldr	r6, [r1, #8]
 8000716:	fa06 f60c 	lsl.w	r6, r6, ip
 800071a:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 800071c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800071e:	00d5      	lsls	r5, r2, #3
 8000720:	d559      	bpl.n	80007d6 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000722:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000726:	f045 0501 	orr.w	r5, r5, #1
 800072a:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 800072e:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000732:	f023 0603 	bic.w	r6, r3, #3
 8000736:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800073a:	f005 0501 	and.w	r5, r5, #1
 800073e:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000742:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000744:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000748:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 800074a:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800074c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000750:	270f      	movs	r7, #15
 8000752:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000756:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800075a:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800075e:	d03c      	beq.n	80007da <HAL_GPIO_Init+0x192>
 8000760:	4d25      	ldr	r5, [pc, #148]	; (80007f8 <HAL_GPIO_Init+0x1b0>)
 8000762:	42a8      	cmp	r0, r5
 8000764:	d03b      	beq.n	80007de <HAL_GPIO_Init+0x196>
 8000766:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800076a:	42a8      	cmp	r0, r5
 800076c:	d039      	beq.n	80007e2 <HAL_GPIO_Init+0x19a>
 800076e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000772:	42a8      	cmp	r0, r5
 8000774:	d037      	beq.n	80007e6 <HAL_GPIO_Init+0x19e>
 8000776:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800077a:	42a8      	cmp	r0, r5
 800077c:	d035      	beq.n	80007ea <HAL_GPIO_Init+0x1a2>
 800077e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000782:	42a8      	cmp	r0, r5
 8000784:	d033      	beq.n	80007ee <HAL_GPIO_Init+0x1a6>
 8000786:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800078a:	42a8      	cmp	r0, r5
 800078c:	bf14      	ite	ne
 800078e:	2507      	movne	r5, #7
 8000790:	2506      	moveq	r5, #6
 8000792:	fa05 f50c 	lsl.w	r5, r5, ip
 8000796:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000798:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 800079a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800079c:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007a0:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 80007a2:	bf54      	ite	pl
 80007a4:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80007a6:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 80007aa:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 80007ac:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007ae:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 80007b0:	bf54      	ite	pl
 80007b2:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80007b4:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 80007b8:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 80007ba:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007bc:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 80007be:	bf54      	ite	pl
 80007c0:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80007c2:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 80007c6:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 80007c8:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007ca:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 80007cc:	bf54      	ite	pl
 80007ce:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80007d0:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 80007d4:	60e5      	str	r5, [r4, #12]
    position++;
 80007d6:	3301      	adds	r3, #1
 80007d8:	e73f      	b.n	800065a <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80007da:	2500      	movs	r5, #0
 80007dc:	e7d9      	b.n	8000792 <HAL_GPIO_Init+0x14a>
 80007de:	2501      	movs	r5, #1
 80007e0:	e7d7      	b.n	8000792 <HAL_GPIO_Init+0x14a>
 80007e2:	2502      	movs	r5, #2
 80007e4:	e7d5      	b.n	8000792 <HAL_GPIO_Init+0x14a>
 80007e6:	2503      	movs	r5, #3
 80007e8:	e7d3      	b.n	8000792 <HAL_GPIO_Init+0x14a>
 80007ea:	2504      	movs	r5, #4
 80007ec:	e7d1      	b.n	8000792 <HAL_GPIO_Init+0x14a>
 80007ee:	2505      	movs	r5, #5
 80007f0:	e7cf      	b.n	8000792 <HAL_GPIO_Init+0x14a>
 80007f2:	bf00      	nop
 80007f4:	40010400 	.word	0x40010400
 80007f8:	48000400 	.word	0x48000400
 80007fc:	40021000 	.word	0x40021000

08000800 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000800:	b10a      	cbz	r2, 8000806 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000802:	6181      	str	r1, [r0, #24]
 8000804:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000806:	6281      	str	r1, [r0, #40]	; 0x28
 8000808:	4770      	bx	lr

0800080a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800080a:	6943      	ldr	r3, [r0, #20]
 800080c:	4059      	eors	r1, r3
 800080e:	6141      	str	r1, [r0, #20]
 8000810:	4770      	bx	lr

08000812 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000812:	6803      	ldr	r3, [r0, #0]
 8000814:	699a      	ldr	r2, [r3, #24]
 8000816:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8000818:	bf44      	itt	mi
 800081a:	2200      	movmi	r2, #0
 800081c:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800081e:	699a      	ldr	r2, [r3, #24]
 8000820:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000822:	bf5e      	ittt	pl
 8000824:	699a      	ldrpl	r2, [r3, #24]
 8000826:	f042 0201 	orrpl.w	r2, r2, #1
 800082a:	619a      	strpl	r2, [r3, #24]
 800082c:	4770      	bx	lr

0800082e <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800082e:	b530      	push	{r4, r5, lr}
 8000830:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000832:	6805      	ldr	r5, [r0, #0]
 8000834:	4323      	orrs	r3, r4
 8000836:	0d64      	lsrs	r4, r4, #21
 8000838:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 800083c:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8000840:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8000844:	6868      	ldr	r0, [r5, #4]
 8000846:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800084a:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 800084e:	4319      	orrs	r1, r3
 8000850:	f044 0403 	orr.w	r4, r4, #3
 8000854:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000858:	ea20 0404 	bic.w	r4, r0, r4
 800085c:	4321      	orrs	r1, r4
 800085e:	6069      	str	r1, [r5, #4]
 8000860:	bd30      	pop	{r4, r5, pc}

08000862 <I2C_WaitOnFlagUntilTimeout>:
{
 8000862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000866:	9f06      	ldr	r7, [sp, #24]
 8000868:	4604      	mov	r4, r0
 800086a:	4688      	mov	r8, r1
 800086c:	4616      	mov	r6, r2
 800086e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000870:	6822      	ldr	r2, [r4, #0]
 8000872:	6993      	ldr	r3, [r2, #24]
 8000874:	ea38 0303 	bics.w	r3, r8, r3
 8000878:	bf0c      	ite	eq
 800087a:	2301      	moveq	r3, #1
 800087c:	2300      	movne	r3, #0
 800087e:	42b3      	cmp	r3, r6
 8000880:	d002      	beq.n	8000888 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8000882:	2000      	movs	r0, #0
}
 8000884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000888:	1c6b      	adds	r3, r5, #1
 800088a:	d0f2      	beq.n	8000872 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800088c:	f7ff fe5a 	bl	8000544 <HAL_GetTick>
 8000890:	1bc0      	subs	r0, r0, r7
 8000892:	4285      	cmp	r5, r0
 8000894:	d301      	bcc.n	800089a <I2C_WaitOnFlagUntilTimeout+0x38>
 8000896:	2d00      	cmp	r5, #0
 8000898:	d1ea      	bne.n	8000870 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800089a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800089c:	f043 0320 	orr.w	r3, r3, #32
 80008a0:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80008a2:	2320      	movs	r3, #32
 80008a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80008ae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80008b2:	2001      	movs	r0, #1
 80008b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080008b8 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80008b8:	6803      	ldr	r3, [r0, #0]
{
 80008ba:	b570      	push	{r4, r5, r6, lr}
 80008bc:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80008be:	6998      	ldr	r0, [r3, #24]
 80008c0:	f010 0010 	ands.w	r0, r0, #16
{
 80008c4:	460d      	mov	r5, r1
 80008c6:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80008c8:	d116      	bne.n	80008f8 <I2C_IsAcknowledgeFailed+0x40>
 80008ca:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 80008cc:	1c69      	adds	r1, r5, #1
 80008ce:	d014      	beq.n	80008fa <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80008d0:	f7ff fe38 	bl	8000544 <HAL_GetTick>
 80008d4:	1b80      	subs	r0, r0, r6
 80008d6:	4285      	cmp	r5, r0
 80008d8:	d300      	bcc.n	80008dc <I2C_IsAcknowledgeFailed+0x24>
 80008da:	b96d      	cbnz	r5, 80008f8 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80008dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80008de:	f043 0320 	orr.w	r3, r3, #32
 80008e2:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80008e4:	2320      	movs	r3, #32
 80008e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80008f0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80008f4:	2001      	movs	r0, #1
}
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80008f8:	6823      	ldr	r3, [r4, #0]
 80008fa:	6999      	ldr	r1, [r3, #24]
 80008fc:	068a      	lsls	r2, r1, #26
 80008fe:	d5e5      	bpl.n	80008cc <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000900:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000902:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000904:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000906:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000908:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800090a:	f7ff ff82 	bl	8000812 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800090e:	6822      	ldr	r2, [r4, #0]
 8000910:	6853      	ldr	r3, [r2, #4]
 8000912:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000916:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800091a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800091e:	f023 0301 	bic.w	r3, r3, #1
 8000922:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000924:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000926:	f043 0304 	orr.w	r3, r3, #4
 800092a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800092c:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8000930:	e7db      	b.n	80008ea <I2C_IsAcknowledgeFailed+0x32>

08000932 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000932:	b570      	push	{r4, r5, r6, lr}
 8000934:	4604      	mov	r4, r0
 8000936:	460d      	mov	r5, r1
 8000938:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800093a:	6823      	ldr	r3, [r4, #0]
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	079b      	lsls	r3, r3, #30
 8000940:	d501      	bpl.n	8000946 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8000942:	2000      	movs	r0, #0
 8000944:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000946:	4632      	mov	r2, r6
 8000948:	4629      	mov	r1, r5
 800094a:	4620      	mov	r0, r4
 800094c:	f7ff ffb4 	bl	80008b8 <I2C_IsAcknowledgeFailed>
 8000950:	b9a0      	cbnz	r0, 800097c <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8000952:	1c6a      	adds	r2, r5, #1
 8000954:	d0f1      	beq.n	800093a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000956:	f7ff fdf5 	bl	8000544 <HAL_GetTick>
 800095a:	1b80      	subs	r0, r0, r6
 800095c:	4285      	cmp	r5, r0
 800095e:	d301      	bcc.n	8000964 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8000960:	2d00      	cmp	r5, #0
 8000962:	d1ea      	bne.n	800093a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000964:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000966:	f043 0320 	orr.w	r3, r3, #32
 800096a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800096c:	2320      	movs	r3, #32
 800096e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000972:	2300      	movs	r3, #0
 8000974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000978:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800097c:	2001      	movs	r0, #1
}
 800097e:	bd70      	pop	{r4, r5, r6, pc}

08000980 <I2C_RequestMemoryRead>:
{
 8000980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000982:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000984:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <I2C_RequestMemoryRead+0x60>)
 8000988:	9300      	str	r3, [sp, #0]
{
 800098a:	4605      	mov	r5, r0
 800098c:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800098e:	2300      	movs	r3, #0
 8000990:	b2fa      	uxtb	r2, r7
 8000992:	f7ff ff4c 	bl	800082e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000996:	4632      	mov	r2, r6
 8000998:	9908      	ldr	r1, [sp, #32]
 800099a:	4628      	mov	r0, r5
 800099c:	f7ff ffc9 	bl	8000932 <I2C_WaitOnTXISFlagUntilTimeout>
 80009a0:	b110      	cbz	r0, 80009a8 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 80009a2:	2001      	movs	r0, #1
}
 80009a4:	b003      	add	sp, #12
 80009a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80009a8:	2f01      	cmp	r7, #1
 80009aa:	682b      	ldr	r3, [r5, #0]
 80009ac:	d10c      	bne.n	80009c8 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80009ae:	b2e4      	uxtb	r4, r4
 80009b0:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80009b2:	9b08      	ldr	r3, [sp, #32]
 80009b4:	9600      	str	r6, [sp, #0]
 80009b6:	2200      	movs	r2, #0
 80009b8:	2140      	movs	r1, #64	; 0x40
 80009ba:	4628      	mov	r0, r5
 80009bc:	f7ff ff51 	bl	8000862 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 80009c0:	3000      	adds	r0, #0
 80009c2:	bf18      	it	ne
 80009c4:	2001      	movne	r0, #1
 80009c6:	e7ed      	b.n	80009a4 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80009c8:	0a22      	lsrs	r2, r4, #8
 80009ca:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80009cc:	9908      	ldr	r1, [sp, #32]
 80009ce:	4632      	mov	r2, r6
 80009d0:	4628      	mov	r0, r5
 80009d2:	f7ff ffae 	bl	8000932 <I2C_WaitOnTXISFlagUntilTimeout>
 80009d6:	2800      	cmp	r0, #0
 80009d8:	d1e3      	bne.n	80009a2 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80009da:	682b      	ldr	r3, [r5, #0]
 80009dc:	e7e7      	b.n	80009ae <I2C_RequestMemoryRead+0x2e>
 80009de:	bf00      	nop
 80009e0:	80002000 	.word	0x80002000

080009e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80009e4:	b570      	push	{r4, r5, r6, lr}
 80009e6:	4604      	mov	r4, r0
 80009e8:	460d      	mov	r5, r1
 80009ea:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80009ec:	6823      	ldr	r3, [r4, #0]
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	069b      	lsls	r3, r3, #26
 80009f2:	d501      	bpl.n	80009f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80009f4:	2000      	movs	r0, #0
 80009f6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80009f8:	4632      	mov	r2, r6
 80009fa:	4629      	mov	r1, r5
 80009fc:	4620      	mov	r0, r4
 80009fe:	f7ff ff5b 	bl	80008b8 <I2C_IsAcknowledgeFailed>
 8000a02:	b990      	cbnz	r0, 8000a2a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000a04:	f7ff fd9e 	bl	8000544 <HAL_GetTick>
 8000a08:	1b80      	subs	r0, r0, r6
 8000a0a:	4285      	cmp	r5, r0
 8000a0c:	d301      	bcc.n	8000a12 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8000a0e:	2d00      	cmp	r5, #0
 8000a10:	d1ec      	bne.n	80009ec <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000a12:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a14:	f043 0320 	orr.w	r3, r3, #32
 8000a18:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000a1a:	2320      	movs	r3, #32
 8000a1c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000a26:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000a2a:	2001      	movs	r0, #1
}
 8000a2c:	bd70      	pop	{r4, r5, r6, pc}

08000a2e <HAL_I2C_Init>:
{
 8000a2e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8000a30:	4604      	mov	r4, r0
 8000a32:	2800      	cmp	r0, #0
 8000a34:	d04a      	beq.n	8000acc <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000a36:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000a3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000a3e:	b91b      	cbnz	r3, 8000a48 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000a40:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000a44:	f001 fb8c 	bl	8002160 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000a48:	2324      	movs	r3, #36	; 0x24
 8000a4a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000a4e:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a50:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	f022 0201 	bic.w	r2, r2, #1
 8000a58:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000a5a:	6862      	ldr	r2, [r4, #4]
 8000a5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000a60:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000a62:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a64:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000a66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a6e:	d124      	bne.n	8000aba <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000a70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a74:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000a76:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000a78:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000a7a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a82:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000a84:	68da      	ldr	r2, [r3, #12]
 8000a86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000a8a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000a8c:	6922      	ldr	r2, [r4, #16]
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	69a1      	ldr	r1, [r4, #24]
 8000a92:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000a96:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000a98:	6a21      	ldr	r1, [r4, #32]
 8000a9a:	69e2      	ldr	r2, [r4, #28]
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	f042 0201 	orr.w	r2, r2, #1
 8000aa6:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000aa8:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000aaa:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000aac:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000aae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ab2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ab4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8000ab8:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000aba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000abe:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000ac0:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000ac2:	bf04      	itt	eq
 8000ac4:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000ac8:	605a      	streq	r2, [r3, #4]
 8000aca:	e7d4      	b.n	8000a76 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000acc:	2001      	movs	r0, #1
}
 8000ace:	bd10      	pop	{r4, pc}

08000ad0 <HAL_I2C_Mem_Read>:
{
 8000ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ad4:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ad6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8000ada:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000adc:	2b20      	cmp	r3, #32
{
 8000ade:	4604      	mov	r4, r0
 8000ae0:	460f      	mov	r7, r1
 8000ae2:	9203      	str	r2, [sp, #12]
 8000ae4:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8000ae8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000aec:	f040 80a9 	bne.w	8000c42 <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8000af0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000af2:	b113      	cbz	r3, 8000afa <HAL_I2C_Mem_Read+0x2a>
 8000af4:	f1ba 0f00 	cmp.w	sl, #0
 8000af8:	d106      	bne.n	8000b08 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000afa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000afe:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000b00:	2001      	movs	r0, #1
}
 8000b02:	b005      	add	sp, #20
 8000b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8000b08:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	f000 8098 	beq.w	8000c42 <HAL_I2C_Mem_Read+0x172>
 8000b12:	2501      	movs	r5, #1
 8000b14:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000b18:	f7ff fd14 	bl	8000544 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000b1c:	2319      	movs	r3, #25
 8000b1e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8000b20:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000b22:	462a      	mov	r2, r5
 8000b24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b28:	4620      	mov	r0, r4
 8000b2a:	f7ff fe9a 	bl	8000862 <I2C_WaitOnFlagUntilTimeout>
 8000b2e:	4681      	mov	r9, r0
 8000b30:	2800      	cmp	r0, #0
 8000b32:	d1e5      	bne.n	8000b00 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000b34:	2322      	movs	r3, #34	; 0x22
 8000b36:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000b3a:	2340      	movs	r3, #64	; 0x40
 8000b3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8000b40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b42:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000b44:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8000b46:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000b48:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000b4c:	9601      	str	r6, [sp, #4]
 8000b4e:	f8cd 8000 	str.w	r8, [sp]
 8000b52:	465b      	mov	r3, fp
 8000b54:	9a03      	ldr	r2, [sp, #12]
 8000b56:	4639      	mov	r1, r7
 8000b58:	4620      	mov	r0, r4
 8000b5a:	f7ff ff11 	bl	8000980 <I2C_RequestMemoryRead>
 8000b5e:	b110      	cbz	r0, 8000b66 <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 8000b60:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8000b64:	e7cc      	b.n	8000b00 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000b66:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	2bff      	cmp	r3, #255	; 0xff
 8000b6c:	4b36      	ldr	r3, [pc, #216]	; (8000c48 <HAL_I2C_Mem_Read+0x178>)
 8000b6e:	d958      	bls.n	8000c22 <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000b70:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000b72:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000b74:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000b76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000b7a:	4639      	mov	r1, r7
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	f7ff fe56 	bl	800082e <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8000b82:	9600      	str	r6, [sp, #0]
 8000b84:	4643      	mov	r3, r8
 8000b86:	2200      	movs	r2, #0
 8000b88:	2104      	movs	r1, #4
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	f7ff fe69 	bl	8000862 <I2C_WaitOnFlagUntilTimeout>
 8000b90:	2800      	cmp	r0, #0
 8000b92:	d1b5      	bne.n	8000b00 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000b94:	6822      	ldr	r2, [r4, #0]
 8000b96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000b9a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8000b9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8000b9e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000ba4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000bac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000bae:	3a01      	subs	r2, #1
 8000bb0:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000bb2:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000bb4:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000bb6:	b1ab      	cbz	r3, 8000be4 <HAL_I2C_Mem_Read+0x114>
 8000bb8:	b9a2      	cbnz	r2, 8000be4 <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000bba:	9600      	str	r6, [sp, #0]
 8000bbc:	4643      	mov	r3, r8
 8000bbe:	2180      	movs	r1, #128	; 0x80
 8000bc0:	4620      	mov	r0, r4
 8000bc2:	f7ff fe4e 	bl	8000862 <I2C_WaitOnFlagUntilTimeout>
 8000bc6:	2800      	cmp	r0, #0
 8000bc8:	d19a      	bne.n	8000b00 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000bca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	2bff      	cmp	r3, #255	; 0xff
 8000bd0:	d92f      	bls.n	8000c32 <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000bd2:	22ff      	movs	r2, #255	; 0xff
 8000bd4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000bd6:	9000      	str	r0, [sp, #0]
 8000bd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000bdc:	4639      	mov	r1, r7
 8000bde:	4620      	mov	r0, r4
 8000be0:	f7ff fe25 	bl	800082e <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8000be4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d1ca      	bne.n	8000b82 <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000bec:	4632      	mov	r2, r6
 8000bee:	4641      	mov	r1, r8
 8000bf0:	4620      	mov	r0, r4
 8000bf2:	f7ff fef7 	bl	80009e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000bf6:	2800      	cmp	r0, #0
 8000bf8:	d182      	bne.n	8000b00 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000bfa:	6823      	ldr	r3, [r4, #0]
 8000bfc:	2120      	movs	r1, #32
 8000bfe:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000c06:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000c0a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000c0e:	f022 0201 	bic.w	r2, r2, #1
 8000c12:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000c14:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000c18:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000c1c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000c20:	e76f      	b.n	8000b02 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8000c22:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000c24:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000c26:	b292      	uxth	r2, r2
 8000c28:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000c2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	e7a3      	b.n	8000b7a <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8000c32:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000c34:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000c36:	b292      	uxth	r2, r2
 8000c38:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000c3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	e7cc      	b.n	8000bdc <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 8000c42:	2002      	movs	r0, #2
 8000c44:	e75d      	b.n	8000b02 <HAL_I2C_Mem_Read+0x32>
 8000c46:	bf00      	nop
 8000c48:	80002400 	.word	0x80002400

08000c4c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c4c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000c50:	b2d2      	uxtb	r2, r2
 8000c52:	2a20      	cmp	r2, #32
{
 8000c54:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c56:	d11d      	bne.n	8000c94 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c58:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d019      	beq.n	8000c94 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000c60:	2324      	movs	r3, #36	; 0x24
 8000c62:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000c66:	6803      	ldr	r3, [r0, #0]
 8000c68:	681c      	ldr	r4, [r3, #0]
 8000c6a:	f024 0401 	bic.w	r4, r4, #1
 8000c6e:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000c70:	681c      	ldr	r4, [r3, #0]
 8000c72:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8000c76:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000c78:	681c      	ldr	r4, [r3, #0]
 8000c7a:	4321      	orrs	r1, r4
 8000c7c:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000c7e:	6819      	ldr	r1, [r3, #0]
 8000c80:	f041 0101 	orr.w	r1, r1, #1
 8000c84:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000c86:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000c88:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000c8c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000c90:	4618      	mov	r0, r3
 8000c92:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000c94:	2002      	movs	r0, #2
  }
}
 8000c96:	bd10      	pop	{r4, pc}

08000c98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000c98:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c9a:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8000c9e:	b2e4      	uxtb	r4, r4
 8000ca0:	2c20      	cmp	r4, #32
 8000ca2:	d11c      	bne.n	8000cde <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ca4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d018      	beq.n	8000cde <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000cac:	2324      	movs	r3, #36	; 0x24
 8000cae:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000cb2:	6803      	ldr	r3, [r0, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	f022 0201 	bic.w	r2, r2, #1
 8000cba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000cbc:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000cbe:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000cc2:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000cc6:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	f042 0201 	orr.w	r2, r2, #1
 8000cce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000cd0:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000cd2:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000cd6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000cda:	4618      	mov	r0, r3
 8000cdc:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000cde:	2002      	movs	r0, #2
  }
}
 8000ce0:	bd10      	pop	{r4, pc}
	...

08000ce4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ce4:	4b02      	ldr	r3, [pc, #8]	; (8000cf0 <HAL_PWREx_GetVoltageRange+0xc>)
 8000ce6:	6818      	ldr	r0, [r3, #0]
#endif
}
 8000ce8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40007000 	.word	0x40007000

08000cf4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000cf4:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cf6:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cf8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cfc:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d00:	d11c      	bne.n	8000d3c <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d02:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000d06:	d015      	beq.n	8000d34 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d12:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d14:	4a10      	ldr	r2, [pc, #64]	; (8000d58 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8000d16:	6811      	ldr	r1, [r2, #0]
 8000d18:	2232      	movs	r2, #50	; 0x32
 8000d1a:	434a      	muls	r2, r1
 8000d1c:	490f      	ldr	r1, [pc, #60]	; (8000d5c <HAL_PWREx_ControlVoltageScaling+0x68>)
 8000d1e:	fbb2 f2f1 	udiv	r2, r2, r1
 8000d22:	4619      	mov	r1, r3
 8000d24:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d26:	6958      	ldr	r0, [r3, #20]
 8000d28:	0540      	lsls	r0, r0, #21
 8000d2a:	d500      	bpl.n	8000d2e <HAL_PWREx_ControlVoltageScaling+0x3a>
 8000d2c:	b922      	cbnz	r2, 8000d38 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d2e:	694b      	ldr	r3, [r1, #20]
 8000d30:	055b      	lsls	r3, r3, #21
 8000d32:	d40d      	bmi.n	8000d50 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d34:	2000      	movs	r0, #0
 8000d36:	4770      	bx	lr
        wait_loop_index--;
 8000d38:	3a01      	subs	r2, #1
 8000d3a:	e7f4      	b.n	8000d26 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d3c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d40:	bf1f      	itttt	ne
 8000d42:	681a      	ldrne	r2, [r3, #0]
 8000d44:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8000d48:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8000d4c:	601a      	strne	r2, [r3, #0]
 8000d4e:	e7f1      	b.n	8000d34 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8000d50:	2003      	movs	r0, #3
}
 8000d52:	4770      	bx	lr
 8000d54:	40007000 	.word	0x40007000
 8000d58:	20000018 	.word	0x20000018
 8000d5c:	000f4240 	.word	0x000f4240

08000d60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000d62:	4d1e      	ldr	r5, [pc, #120]	; (8000ddc <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000d64:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000d66:	00da      	lsls	r2, r3, #3
{
 8000d68:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000d6a:	d518      	bpl.n	8000d9e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000d6c:	f7ff ffba 	bl	8000ce4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d70:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000d74:	d123      	bne.n	8000dbe <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000d76:	2c80      	cmp	r4, #128	; 0x80
 8000d78:	d929      	bls.n	8000dce <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000d7a:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000d7c:	bf8c      	ite	hi
 8000d7e:	2002      	movhi	r0, #2
 8000d80:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000d82:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8000d84:	6813      	ldr	r3, [r2, #0]
 8000d86:	f023 0307 	bic.w	r3, r3, #7
 8000d8a:	4303      	orrs	r3, r0
 8000d8c:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000d8e:	6813      	ldr	r3, [r2, #0]
 8000d90:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000d94:	1a18      	subs	r0, r3, r0
 8000d96:	bf18      	it	ne
 8000d98:	2001      	movne	r0, #1
 8000d9a:	b003      	add	sp, #12
 8000d9c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da4:	65ab      	str	r3, [r5, #88]	; 0x58
 8000da6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dac:	9301      	str	r3, [sp, #4]
 8000dae:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000db0:	f7ff ff98 	bl	8000ce4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000db4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000db6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000dba:	65ab      	str	r3, [r5, #88]	; 0x58
 8000dbc:	e7d8      	b.n	8000d70 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8000dbe:	2c80      	cmp	r4, #128	; 0x80
 8000dc0:	d807      	bhi.n	8000dd2 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8000dc2:	d008      	beq.n	8000dd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8000dc4:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8000dc8:	4258      	negs	r0, r3
 8000dca:	4158      	adcs	r0, r3
 8000dcc:	e7d9      	b.n	8000d82 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000dce:	2000      	movs	r0, #0
 8000dd0:	e7d7      	b.n	8000d82 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8000dd2:	2003      	movs	r0, #3
 8000dd4:	e7d5      	b.n	8000d82 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	e7d3      	b.n	8000d82 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8000dda:	bf00      	nop
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40022000 	.word	0x40022000

08000de4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000de4:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <HAL_RCC_GetSysClockFreq+0x98>)
 8000de6:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000de8:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000dea:	f012 020c 	ands.w	r2, r2, #12
 8000dee:	d005      	beq.n	8000dfc <HAL_RCC_GetSysClockFreq+0x18>
 8000df0:	2a0c      	cmp	r2, #12
 8000df2:	d115      	bne.n	8000e20 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000df4:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000df8:	2901      	cmp	r1, #1
 8000dfa:	d118      	bne.n	8000e2e <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000dfc:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8000dfe:	4820      	ldr	r0, [pc, #128]	; (8000e80 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000e00:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000e02:	bf55      	itete	pl
 8000e04:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000e08:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000e0a:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000e0e:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8000e12:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e16:	b382      	cbz	r2, 8000e7a <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000e18:	2a0c      	cmp	r2, #12
 8000e1a:	d009      	beq.n	8000e30 <HAL_RCC_GetSysClockFreq+0x4c>
 8000e1c:	2000      	movs	r0, #0
  return sysclockfreq;
 8000e1e:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000e20:	2a04      	cmp	r2, #4
 8000e22:	d029      	beq.n	8000e78 <HAL_RCC_GetSysClockFreq+0x94>
 8000e24:	2a08      	cmp	r2, #8
 8000e26:	4817      	ldr	r0, [pc, #92]	; (8000e84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000e28:	bf18      	it	ne
 8000e2a:	2000      	movne	r0, #0
 8000e2c:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000e2e:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000e30:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000e32:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000e34:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000e38:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8000e3c:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000e3e:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8000e42:	d005      	beq.n	8000e50 <HAL_RCC_GetSysClockFreq+0x6c>
 8000e44:	2903      	cmp	r1, #3
 8000e46:	d012      	beq.n	8000e6e <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000e48:	68d9      	ldr	r1, [r3, #12]
 8000e4a:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000e4e:	e003      	b.n	8000e58 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000e50:	68d9      	ldr	r1, [r3, #12]
 8000e52:	480d      	ldr	r0, [pc, #52]	; (8000e88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000e54:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000e58:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000e5a:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000e5e:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8000e62:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000e64:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000e66:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8000e68:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e6c:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000e6e:	68d9      	ldr	r1, [r3, #12]
 8000e70:	4804      	ldr	r0, [pc, #16]	; (8000e84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000e72:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000e76:	e7ef      	b.n	8000e58 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8000e78:	4803      	ldr	r0, [pc, #12]	; (8000e88 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8000e7a:	4770      	bx	lr
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	08002d60 	.word	0x08002d60
 8000e84:	007a1200 	.word	0x007a1200
 8000e88:	00f42400 	.word	0x00f42400

08000e8c <HAL_RCC_OscConfig>:
{
 8000e8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8000e90:	4605      	mov	r5, r0
 8000e92:	b918      	cbnz	r0, 8000e9c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8000e94:	2001      	movs	r0, #1
}
 8000e96:	b003      	add	sp, #12
 8000e98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e9c:	4ca5      	ldr	r4, [pc, #660]	; (8001134 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e9e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ea0:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ea2:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ea4:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ea6:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000eaa:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000eae:	d53c      	bpl.n	8000f2a <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000eb0:	b11e      	cbz	r6, 8000eba <HAL_RCC_OscConfig+0x2e>
 8000eb2:	2e0c      	cmp	r6, #12
 8000eb4:	d163      	bne.n	8000f7e <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000eb6:	2f01      	cmp	r7, #1
 8000eb8:	d161      	bne.n	8000f7e <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000eba:	6823      	ldr	r3, [r4, #0]
 8000ebc:	0798      	lsls	r0, r3, #30
 8000ebe:	d502      	bpl.n	8000ec6 <HAL_RCC_OscConfig+0x3a>
 8000ec0:	69ab      	ldr	r3, [r5, #24]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d0e6      	beq.n	8000e94 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ec6:	6823      	ldr	r3, [r4, #0]
 8000ec8:	6a28      	ldr	r0, [r5, #32]
 8000eca:	0719      	lsls	r1, r3, #28
 8000ecc:	bf56      	itet	pl
 8000ece:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8000ed2:	6823      	ldrmi	r3, [r4, #0]
 8000ed4:	091b      	lsrpl	r3, r3, #4
 8000ed6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000eda:	4283      	cmp	r3, r0
 8000edc:	d23a      	bcs.n	8000f54 <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ede:	f7ff ff3f 	bl	8000d60 <RCC_SetFlashLatencyFromMSIRange>
 8000ee2:	2800      	cmp	r0, #0
 8000ee4:	d1d6      	bne.n	8000e94 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ee6:	6823      	ldr	r3, [r4, #0]
 8000ee8:	f043 0308 	orr.w	r3, r3, #8
 8000eec:	6023      	str	r3, [r4, #0]
 8000eee:	6823      	ldr	r3, [r4, #0]
 8000ef0:	6a2a      	ldr	r2, [r5, #32]
 8000ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000efa:	6863      	ldr	r3, [r4, #4]
 8000efc:	69ea      	ldr	r2, [r5, #28]
 8000efe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000f02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000f06:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f08:	f7ff ff6c 	bl	8000de4 <HAL_RCC_GetSysClockFreq>
 8000f0c:	68a3      	ldr	r3, [r4, #8]
 8000f0e:	4a8a      	ldr	r2, [pc, #552]	; (8001138 <HAL_RCC_OscConfig+0x2ac>)
 8000f10:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f14:	5cd3      	ldrb	r3, [r2, r3]
 8000f16:	f003 031f 	and.w	r3, r3, #31
 8000f1a:	40d8      	lsrs	r0, r3
 8000f1c:	4b87      	ldr	r3, [pc, #540]	; (800113c <HAL_RCC_OscConfig+0x2b0>)
 8000f1e:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff fad9 	bl	80004d8 <HAL_InitTick>
        if(status != HAL_OK)
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d1b5      	bne.n	8000e96 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f2a:	682b      	ldr	r3, [r5, #0]
 8000f2c:	07d8      	lsls	r0, r3, #31
 8000f2e:	d45d      	bmi.n	8000fec <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f30:	682b      	ldr	r3, [r5, #0]
 8000f32:	0799      	lsls	r1, r3, #30
 8000f34:	f100 809c 	bmi.w	8001070 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f38:	682b      	ldr	r3, [r5, #0]
 8000f3a:	0718      	lsls	r0, r3, #28
 8000f3c:	f100 80d0 	bmi.w	80010e0 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f40:	682b      	ldr	r3, [r5, #0]
 8000f42:	0759      	lsls	r1, r3, #29
 8000f44:	f100 80fc 	bmi.w	8001140 <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000f48:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f040 8165 	bne.w	800121a <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 8000f50:	2000      	movs	r0, #0
 8000f52:	e7a0      	b.n	8000e96 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f54:	6823      	ldr	r3, [r4, #0]
 8000f56:	f043 0308 	orr.w	r3, r3, #8
 8000f5a:	6023      	str	r3, [r4, #0]
 8000f5c:	6823      	ldr	r3, [r4, #0]
 8000f5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f62:	4303      	orrs	r3, r0
 8000f64:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f66:	6863      	ldr	r3, [r4, #4]
 8000f68:	69ea      	ldr	r2, [r5, #28]
 8000f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000f6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000f72:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f74:	f7ff fef4 	bl	8000d60 <RCC_SetFlashLatencyFromMSIRange>
 8000f78:	2800      	cmp	r0, #0
 8000f7a:	d0c5      	beq.n	8000f08 <HAL_RCC_OscConfig+0x7c>
 8000f7c:	e78a      	b.n	8000e94 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f7e:	69ab      	ldr	r3, [r5, #24]
 8000f80:	b31b      	cbz	r3, 8000fca <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 8000f82:	6823      	ldr	r3, [r4, #0]
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f8a:	f7ff fadb 	bl	8000544 <HAL_GetTick>
 8000f8e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f90:	6823      	ldr	r3, [r4, #0]
 8000f92:	079a      	lsls	r2, r3, #30
 8000f94:	d511      	bpl.n	8000fba <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f96:	6823      	ldr	r3, [r4, #0]
 8000f98:	f043 0308 	orr.w	r3, r3, #8
 8000f9c:	6023      	str	r3, [r4, #0]
 8000f9e:	6823      	ldr	r3, [r4, #0]
 8000fa0:	6a2a      	ldr	r2, [r5, #32]
 8000fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000faa:	6863      	ldr	r3, [r4, #4]
 8000fac:	69ea      	ldr	r2, [r5, #28]
 8000fae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000fb2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000fb6:	6063      	str	r3, [r4, #4]
 8000fb8:	e7b7      	b.n	8000f2a <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fba:	f7ff fac3 	bl	8000544 <HAL_GetTick>
 8000fbe:	eba0 0008 	sub.w	r0, r0, r8
 8000fc2:	2802      	cmp	r0, #2
 8000fc4:	d9e4      	bls.n	8000f90 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8000fc6:	2003      	movs	r0, #3
 8000fc8:	e765      	b.n	8000e96 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8000fca:	6823      	ldr	r3, [r4, #0]
 8000fcc:	f023 0301 	bic.w	r3, r3, #1
 8000fd0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000fd2:	f7ff fab7 	bl	8000544 <HAL_GetTick>
 8000fd6:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fd8:	6823      	ldr	r3, [r4, #0]
 8000fda:	079b      	lsls	r3, r3, #30
 8000fdc:	d5a5      	bpl.n	8000f2a <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fde:	f7ff fab1 	bl	8000544 <HAL_GetTick>
 8000fe2:	eba0 0008 	sub.w	r0, r0, r8
 8000fe6:	2802      	cmp	r0, #2
 8000fe8:	d9f6      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x14c>
 8000fea:	e7ec      	b.n	8000fc6 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000fec:	2e08      	cmp	r6, #8
 8000fee:	d003      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x16c>
 8000ff0:	2e0c      	cmp	r6, #12
 8000ff2:	d108      	bne.n	8001006 <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8000ff4:	2f03      	cmp	r7, #3
 8000ff6:	d106      	bne.n	8001006 <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff8:	6823      	ldr	r3, [r4, #0]
 8000ffa:	039a      	lsls	r2, r3, #14
 8000ffc:	d598      	bpl.n	8000f30 <HAL_RCC_OscConfig+0xa4>
 8000ffe:	686b      	ldr	r3, [r5, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d195      	bne.n	8000f30 <HAL_RCC_OscConfig+0xa4>
 8001004:	e746      	b.n	8000e94 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001006:	686b      	ldr	r3, [r5, #4]
 8001008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800100c:	d110      	bne.n	8001030 <HAL_RCC_OscConfig+0x1a4>
 800100e:	6823      	ldr	r3, [r4, #0]
 8001010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001014:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001016:	f7ff fa95 	bl	8000544 <HAL_GetTick>
 800101a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800101c:	6823      	ldr	r3, [r4, #0]
 800101e:	039b      	lsls	r3, r3, #14
 8001020:	d486      	bmi.n	8000f30 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001022:	f7ff fa8f 	bl	8000544 <HAL_GetTick>
 8001026:	eba0 0008 	sub.w	r0, r0, r8
 800102a:	2864      	cmp	r0, #100	; 0x64
 800102c:	d9f6      	bls.n	800101c <HAL_RCC_OscConfig+0x190>
 800102e:	e7ca      	b.n	8000fc6 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001034:	d104      	bne.n	8001040 <HAL_RCC_OscConfig+0x1b4>
 8001036:	6823      	ldr	r3, [r4, #0]
 8001038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800103c:	6023      	str	r3, [r4, #0]
 800103e:	e7e6      	b.n	800100e <HAL_RCC_OscConfig+0x182>
 8001040:	6822      	ldr	r2, [r4, #0]
 8001042:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001046:	6022      	str	r2, [r4, #0]
 8001048:	6822      	ldr	r2, [r4, #0]
 800104a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800104e:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1e0      	bne.n	8001016 <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 8001054:	f7ff fa76 	bl	8000544 <HAL_GetTick>
 8001058:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800105a:	6823      	ldr	r3, [r4, #0]
 800105c:	0398      	lsls	r0, r3, #14
 800105e:	f57f af67 	bpl.w	8000f30 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001062:	f7ff fa6f 	bl	8000544 <HAL_GetTick>
 8001066:	eba0 0008 	sub.w	r0, r0, r8
 800106a:	2864      	cmp	r0, #100	; 0x64
 800106c:	d9f5      	bls.n	800105a <HAL_RCC_OscConfig+0x1ce>
 800106e:	e7aa      	b.n	8000fc6 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001070:	2e04      	cmp	r6, #4
 8001072:	d003      	beq.n	800107c <HAL_RCC_OscConfig+0x1f0>
 8001074:	2e0c      	cmp	r6, #12
 8001076:	d110      	bne.n	800109a <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8001078:	2f02      	cmp	r7, #2
 800107a:	d10e      	bne.n	800109a <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800107c:	6823      	ldr	r3, [r4, #0]
 800107e:	0559      	lsls	r1, r3, #21
 8001080:	d503      	bpl.n	800108a <HAL_RCC_OscConfig+0x1fe>
 8001082:	68eb      	ldr	r3, [r5, #12]
 8001084:	2b00      	cmp	r3, #0
 8001086:	f43f af05 	beq.w	8000e94 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108a:	6863      	ldr	r3, [r4, #4]
 800108c:	692a      	ldr	r2, [r5, #16]
 800108e:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001092:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001096:	6063      	str	r3, [r4, #4]
 8001098:	e74e      	b.n	8000f38 <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800109a:	68eb      	ldr	r3, [r5, #12]
 800109c:	b17b      	cbz	r3, 80010be <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 800109e:	6823      	ldr	r3, [r4, #0]
 80010a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010a6:	f7ff fa4d 	bl	8000544 <HAL_GetTick>
 80010aa:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010ac:	6823      	ldr	r3, [r4, #0]
 80010ae:	055a      	lsls	r2, r3, #21
 80010b0:	d4eb      	bmi.n	800108a <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010b2:	f7ff fa47 	bl	8000544 <HAL_GetTick>
 80010b6:	1bc0      	subs	r0, r0, r7
 80010b8:	2802      	cmp	r0, #2
 80010ba:	d9f7      	bls.n	80010ac <HAL_RCC_OscConfig+0x220>
 80010bc:	e783      	b.n	8000fc6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 80010be:	6823      	ldr	r3, [r4, #0]
 80010c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010c4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010c6:	f7ff fa3d 	bl	8000544 <HAL_GetTick>
 80010ca:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010cc:	6823      	ldr	r3, [r4, #0]
 80010ce:	055b      	lsls	r3, r3, #21
 80010d0:	f57f af32 	bpl.w	8000f38 <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d4:	f7ff fa36 	bl	8000544 <HAL_GetTick>
 80010d8:	1bc0      	subs	r0, r0, r7
 80010da:	2802      	cmp	r0, #2
 80010dc:	d9f6      	bls.n	80010cc <HAL_RCC_OscConfig+0x240>
 80010de:	e772      	b.n	8000fc6 <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010e0:	696b      	ldr	r3, [r5, #20]
 80010e2:	b19b      	cbz	r3, 800110c <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 80010e4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80010f0:	f7ff fa28 	bl	8000544 <HAL_GetTick>
 80010f4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010f6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80010fa:	079a      	lsls	r2, r3, #30
 80010fc:	f53f af20 	bmi.w	8000f40 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001100:	f7ff fa20 	bl	8000544 <HAL_GetTick>
 8001104:	1bc0      	subs	r0, r0, r7
 8001106:	2802      	cmp	r0, #2
 8001108:	d9f5      	bls.n	80010f6 <HAL_RCC_OscConfig+0x26a>
 800110a:	e75c      	b.n	8000fc6 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 800110c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001110:	f023 0301 	bic.w	r3, r3, #1
 8001114:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001118:	f7ff fa14 	bl	8000544 <HAL_GetTick>
 800111c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800111e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001122:	079b      	lsls	r3, r3, #30
 8001124:	f57f af0c 	bpl.w	8000f40 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001128:	f7ff fa0c 	bl	8000544 <HAL_GetTick>
 800112c:	1bc0      	subs	r0, r0, r7
 800112e:	2802      	cmp	r0, #2
 8001130:	d9f5      	bls.n	800111e <HAL_RCC_OscConfig+0x292>
 8001132:	e748      	b.n	8000fc6 <HAL_RCC_OscConfig+0x13a>
 8001134:	40021000 	.word	0x40021000
 8001138:	08002d48 	.word	0x08002d48
 800113c:	20000018 	.word	0x20000018
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001140:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001142:	00d8      	lsls	r0, r3, #3
 8001144:	d429      	bmi.n	800119a <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001146:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114c:	65a3      	str	r3, [r4, #88]	; 0x58
 800114e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001158:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800115c:	4f5d      	ldr	r7, [pc, #372]	; (80012d4 <HAL_RCC_OscConfig+0x448>)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	05d9      	lsls	r1, r3, #23
 8001162:	d51d      	bpl.n	80011a0 <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001164:	68ab      	ldr	r3, [r5, #8]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d12b      	bne.n	80011c2 <HAL_RCC_OscConfig+0x336>
 800116a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001176:	f7ff f9e5 	bl	8000544 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800117a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800117e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001180:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001184:	079b      	lsls	r3, r3, #30
 8001186:	d542      	bpl.n	800120e <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 8001188:	f1b8 0f00 	cmp.w	r8, #0
 800118c:	f43f aedc 	beq.w	8000f48 <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001190:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001196:	65a3      	str	r3, [r4, #88]	; 0x58
 8001198:	e6d6      	b.n	8000f48 <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 800119a:	f04f 0800 	mov.w	r8, #0
 800119e:	e7dd      	b.n	800115c <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80011a8:	f7ff f9cc 	bl	8000544 <HAL_GetTick>
 80011ac:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	05da      	lsls	r2, r3, #23
 80011b2:	d4d7      	bmi.n	8001164 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011b4:	f7ff f9c6 	bl	8000544 <HAL_GetTick>
 80011b8:	eba0 0009 	sub.w	r0, r0, r9
 80011bc:	2802      	cmp	r0, #2
 80011be:	d9f6      	bls.n	80011ae <HAL_RCC_OscConfig+0x322>
 80011c0:	e701      	b.n	8000fc6 <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011c2:	2b05      	cmp	r3, #5
 80011c4:	d106      	bne.n	80011d4 <HAL_RCC_OscConfig+0x348>
 80011c6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80011d2:	e7ca      	b.n	800116a <HAL_RCC_OscConfig+0x2de>
 80011d4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80011d8:	f022 0201 	bic.w	r2, r2, #1
 80011dc:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80011e0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80011e4:	f022 0204 	bic.w	r2, r2, #4
 80011e8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1c2      	bne.n	8001176 <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 80011f0:	f7ff f9a8 	bl	8000544 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011f4:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80011f8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011fa:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80011fe:	0798      	lsls	r0, r3, #30
 8001200:	d5c2      	bpl.n	8001188 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001202:	f7ff f99f 	bl	8000544 <HAL_GetTick>
 8001206:	1bc0      	subs	r0, r0, r7
 8001208:	4548      	cmp	r0, r9
 800120a:	d9f6      	bls.n	80011fa <HAL_RCC_OscConfig+0x36e>
 800120c:	e6db      	b.n	8000fc6 <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800120e:	f7ff f999 	bl	8000544 <HAL_GetTick>
 8001212:	1bc0      	subs	r0, r0, r7
 8001214:	4548      	cmp	r0, r9
 8001216:	d9b3      	bls.n	8001180 <HAL_RCC_OscConfig+0x2f4>
 8001218:	e6d5      	b.n	8000fc6 <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800121a:	2e0c      	cmp	r6, #12
 800121c:	f43f ae3a 	beq.w	8000e94 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001220:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8001222:	6823      	ldr	r3, [r4, #0]
 8001224:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001228:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800122a:	d137      	bne.n	800129c <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 800122c:	f7ff f98a 	bl	8000544 <HAL_GetTick>
 8001230:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001232:	6823      	ldr	r3, [r4, #0]
 8001234:	0199      	lsls	r1, r3, #6
 8001236:	d42b      	bmi.n	8001290 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001238:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800123a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800123c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001240:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001242:	3a01      	subs	r2, #1
 8001244:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001248:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800124a:	0912      	lsrs	r2, r2, #4
 800124c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001250:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001252:	0852      	lsrs	r2, r2, #1
 8001254:	3a01      	subs	r2, #1
 8001256:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800125a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800125c:	0852      	lsrs	r2, r2, #1
 800125e:	3a01      	subs	r2, #1
 8001260:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001264:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001266:	6823      	ldr	r3, [r4, #0]
 8001268:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800126c:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800126e:	68e3      	ldr	r3, [r4, #12]
 8001270:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001274:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001276:	f7ff f965 	bl	8000544 <HAL_GetTick>
 800127a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800127c:	6823      	ldr	r3, [r4, #0]
 800127e:	019a      	lsls	r2, r3, #6
 8001280:	f53f ae66 	bmi.w	8000f50 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001284:	f7ff f95e 	bl	8000544 <HAL_GetTick>
 8001288:	1b40      	subs	r0, r0, r5
 800128a:	2802      	cmp	r0, #2
 800128c:	d9f6      	bls.n	800127c <HAL_RCC_OscConfig+0x3f0>
 800128e:	e69a      	b.n	8000fc6 <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001290:	f7ff f958 	bl	8000544 <HAL_GetTick>
 8001294:	1b80      	subs	r0, r0, r6
 8001296:	2802      	cmp	r0, #2
 8001298:	d9cb      	bls.n	8001232 <HAL_RCC_OscConfig+0x3a6>
 800129a:	e694      	b.n	8000fc6 <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800129c:	6823      	ldr	r3, [r4, #0]
 800129e:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80012a2:	bf02      	ittt	eq
 80012a4:	68e3      	ldreq	r3, [r4, #12]
 80012a6:	f023 0303 	biceq.w	r3, r3, #3
 80012aa:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80012ac:	68e3      	ldr	r3, [r4, #12]
 80012ae:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80012b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b6:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80012b8:	f7ff f944 	bl	8000544 <HAL_GetTick>
 80012bc:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012be:	6823      	ldr	r3, [r4, #0]
 80012c0:	019b      	lsls	r3, r3, #6
 80012c2:	f57f ae45 	bpl.w	8000f50 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012c6:	f7ff f93d 	bl	8000544 <HAL_GetTick>
 80012ca:	1b40      	subs	r0, r0, r5
 80012cc:	2802      	cmp	r0, #2
 80012ce:	d9f6      	bls.n	80012be <HAL_RCC_OscConfig+0x432>
 80012d0:	e679      	b.n	8000fc6 <HAL_RCC_OscConfig+0x13a>
 80012d2:	bf00      	nop
 80012d4:	40007000 	.word	0x40007000

080012d8 <HAL_RCC_ClockConfig>:
{
 80012d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012dc:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80012de:	4604      	mov	r4, r0
 80012e0:	b910      	cbnz	r0, 80012e8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80012e2:	2001      	movs	r0, #1
 80012e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012e8:	4a40      	ldr	r2, [pc, #256]	; (80013ec <HAL_RCC_ClockConfig+0x114>)
 80012ea:	6813      	ldr	r3, [r2, #0]
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	428b      	cmp	r3, r1
 80012f2:	d329      	bcc.n	8001348 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012f4:	6823      	ldr	r3, [r4, #0]
 80012f6:	07d9      	lsls	r1, r3, #31
 80012f8:	d431      	bmi.n	800135e <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012fa:	6821      	ldr	r1, [r4, #0]
 80012fc:	078a      	lsls	r2, r1, #30
 80012fe:	d45b      	bmi.n	80013b8 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001300:	4a3a      	ldr	r2, [pc, #232]	; (80013ec <HAL_RCC_ClockConfig+0x114>)
 8001302:	6813      	ldr	r3, [r2, #0]
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	429e      	cmp	r6, r3
 800130a:	d35d      	bcc.n	80013c8 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800130c:	f011 0f04 	tst.w	r1, #4
 8001310:	4d37      	ldr	r5, [pc, #220]	; (80013f0 <HAL_RCC_ClockConfig+0x118>)
 8001312:	d164      	bne.n	80013de <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001314:	070b      	lsls	r3, r1, #28
 8001316:	d506      	bpl.n	8001326 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001318:	68ab      	ldr	r3, [r5, #8]
 800131a:	6922      	ldr	r2, [r4, #16]
 800131c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001320:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001324:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001326:	f7ff fd5d 	bl	8000de4 <HAL_RCC_GetSysClockFreq>
 800132a:	68ab      	ldr	r3, [r5, #8]
 800132c:	4a31      	ldr	r2, [pc, #196]	; (80013f4 <HAL_RCC_ClockConfig+0x11c>)
 800132e:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8001332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001336:	5cd3      	ldrb	r3, [r2, r3]
 8001338:	f003 031f 	and.w	r3, r3, #31
 800133c:	40d8      	lsrs	r0, r3
 800133e:	4b2e      	ldr	r3, [pc, #184]	; (80013f8 <HAL_RCC_ClockConfig+0x120>)
 8001340:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8001342:	2000      	movs	r0, #0
 8001344:	f7ff b8c8 	b.w	80004d8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001348:	6813      	ldr	r3, [r2, #0]
 800134a:	f023 0307 	bic.w	r3, r3, #7
 800134e:	430b      	orrs	r3, r1
 8001350:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001352:	6813      	ldr	r3, [r2, #0]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	4299      	cmp	r1, r3
 800135a:	d1c2      	bne.n	80012e2 <HAL_RCC_ClockConfig+0xa>
 800135c:	e7ca      	b.n	80012f4 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800135e:	6862      	ldr	r2, [r4, #4]
 8001360:	4d23      	ldr	r5, [pc, #140]	; (80013f0 <HAL_RCC_ClockConfig+0x118>)
 8001362:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001364:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001366:	d11b      	bne.n	80013a0 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001368:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800136c:	d0b9      	beq.n	80012e2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800136e:	68ab      	ldr	r3, [r5, #8]
 8001370:	f023 0303 	bic.w	r3, r3, #3
 8001374:	4313      	orrs	r3, r2
 8001376:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8001378:	f7ff f8e4 	bl	8000544 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800137c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001380:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001382:	68ab      	ldr	r3, [r5, #8]
 8001384:	6862      	ldr	r2, [r4, #4]
 8001386:	f003 030c 	and.w	r3, r3, #12
 800138a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800138e:	d0b4      	beq.n	80012fa <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001390:	f7ff f8d8 	bl	8000544 <HAL_GetTick>
 8001394:	1bc0      	subs	r0, r0, r7
 8001396:	4540      	cmp	r0, r8
 8001398:	d9f3      	bls.n	8001382 <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 800139a:	2003      	movs	r0, #3
}
 800139c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013a0:	2a02      	cmp	r2, #2
 80013a2:	d102      	bne.n	80013aa <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013a4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80013a8:	e7e0      	b.n	800136c <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80013aa:	b912      	cbnz	r2, 80013b2 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013ac:	f013 0f02 	tst.w	r3, #2
 80013b0:	e7dc      	b.n	800136c <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013b2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80013b6:	e7d9      	b.n	800136c <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013b8:	4a0d      	ldr	r2, [pc, #52]	; (80013f0 <HAL_RCC_ClockConfig+0x118>)
 80013ba:	68a0      	ldr	r0, [r4, #8]
 80013bc:	6893      	ldr	r3, [r2, #8]
 80013be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013c2:	4303      	orrs	r3, r0
 80013c4:	6093      	str	r3, [r2, #8]
 80013c6:	e79b      	b.n	8001300 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c8:	6813      	ldr	r3, [r2, #0]
 80013ca:	f023 0307 	bic.w	r3, r3, #7
 80013ce:	4333      	orrs	r3, r6
 80013d0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d2:	6813      	ldr	r3, [r2, #0]
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	429e      	cmp	r6, r3
 80013da:	d182      	bne.n	80012e2 <HAL_RCC_ClockConfig+0xa>
 80013dc:	e796      	b.n	800130c <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013de:	68ab      	ldr	r3, [r5, #8]
 80013e0:	68e2      	ldr	r2, [r4, #12]
 80013e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013e6:	4313      	orrs	r3, r2
 80013e8:	60ab      	str	r3, [r5, #8]
 80013ea:	e793      	b.n	8001314 <HAL_RCC_ClockConfig+0x3c>
 80013ec:	40022000 	.word	0x40022000
 80013f0:	40021000 	.word	0x40021000
 80013f4:	08002d48 	.word	0x08002d48
 80013f8:	20000018 	.word	0x20000018

080013fc <HAL_RCC_GetHCLKFreq>:
}
 80013fc:	4b01      	ldr	r3, [pc, #4]	; (8001404 <HAL_RCC_GetHCLKFreq+0x8>)
 80013fe:	6818      	ldr	r0, [r3, #0]
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000018 	.word	0x20000018

08001408 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <HAL_RCC_GetPCLK1Freq+0x18>)
 800140a:	4a06      	ldr	r2, [pc, #24]	; (8001424 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001412:	5cd3      	ldrb	r3, [r2, r3]
 8001414:	4a04      	ldr	r2, [pc, #16]	; (8001428 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001416:	6810      	ldr	r0, [r2, #0]
 8001418:	f003 031f 	and.w	r3, r3, #31
}
 800141c:	40d8      	lsrs	r0, r3
 800141e:	4770      	bx	lr
 8001420:	40021000 	.word	0x40021000
 8001424:	08002d58 	.word	0x08002d58
 8001428:	20000018 	.word	0x20000018

0800142c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_RCC_GetPCLK2Freq+0x18>)
 800142e:	4a06      	ldr	r2, [pc, #24]	; (8001448 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001436:	5cd3      	ldrb	r3, [r2, r3]
 8001438:	4a04      	ldr	r2, [pc, #16]	; (800144c <HAL_RCC_GetPCLK2Freq+0x20>)
 800143a:	6810      	ldr	r0, [r2, #0]
 800143c:	f003 031f 	and.w	r3, r3, #31
}
 8001440:	40d8      	lsrs	r0, r3
 8001442:	4770      	bx	lr
 8001444:	40021000 	.word	0x40021000
 8001448:	08002d58 	.word	0x08002d58
 800144c:	20000018 	.word	0x20000018

08001450 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001452:	4b45      	ldr	r3, [pc, #276]	; (8001568 <RCCEx_PLLSAI1_Config+0x118>)
 8001454:	68da      	ldr	r2, [r3, #12]
 8001456:	f012 0f03 	tst.w	r2, #3
{
 800145a:	4605      	mov	r5, r0
 800145c:	460e      	mov	r6, r1
 800145e:	461c      	mov	r4, r3
 8001460:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001462:	d02a      	beq.n	80014ba <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001464:	68da      	ldr	r2, [r3, #12]
 8001466:	f002 0203 	and.w	r2, r2, #3
 800146a:	4282      	cmp	r2, r0
 800146c:	d13c      	bne.n	80014e8 <RCCEx_PLLSAI1_Config+0x98>
       ||
 800146e:	2a00      	cmp	r2, #0
 8001470:	d03a      	beq.n	80014e8 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001472:	68db      	ldr	r3, [r3, #12]
       ||
 8001474:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001476:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800147a:	3301      	adds	r3, #1
       ||
 800147c:	4293      	cmp	r3, r2
 800147e:	d133      	bne.n	80014e8 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001480:	6823      	ldr	r3, [r4, #0]
 8001482:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001486:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001488:	f7ff f85c 	bl	8000544 <HAL_GetTick>
 800148c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800148e:	6823      	ldr	r3, [r4, #0]
 8001490:	011a      	lsls	r2, r3, #4
 8001492:	d432      	bmi.n	80014fa <RCCEx_PLLSAI1_Config+0xaa>
 8001494:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001496:	2e00      	cmp	r6, #0
 8001498:	d036      	beq.n	8001508 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800149a:	2e01      	cmp	r6, #1
 800149c:	d150      	bne.n	8001540 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800149e:	6922      	ldr	r2, [r4, #16]
 80014a0:	6928      	ldr	r0, [r5, #16]
 80014a2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80014a6:	0840      	lsrs	r0, r0, #1
 80014a8:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80014ac:	3801      	subs	r0, #1
 80014ae:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80014b2:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 80014b6:	6122      	str	r2, [r4, #16]
 80014b8:	e032      	b.n	8001520 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 80014ba:	2802      	cmp	r0, #2
 80014bc:	d010      	beq.n	80014e0 <RCCEx_PLLSAI1_Config+0x90>
 80014be:	2803      	cmp	r0, #3
 80014c0:	d014      	beq.n	80014ec <RCCEx_PLLSAI1_Config+0x9c>
 80014c2:	2801      	cmp	r0, #1
 80014c4:	d110      	bne.n	80014e8 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	079f      	lsls	r7, r3, #30
 80014ca:	d538      	bpl.n	800153e <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80014cc:	68e3      	ldr	r3, [r4, #12]
 80014ce:	686a      	ldr	r2, [r5, #4]
 80014d0:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80014d4:	3a01      	subs	r2, #1
 80014d6:	4318      	orrs	r0, r3
 80014d8:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80014dc:	60e0      	str	r0, [r4, #12]
 80014de:	e7cf      	b.n	8001480 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80014e6:	d1f1      	bne.n	80014cc <RCCEx_PLLSAI1_Config+0x7c>
 80014e8:	2001      	movs	r0, #1
 80014ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	0391      	lsls	r1, r2, #14
 80014f0:	d4ec      	bmi.n	80014cc <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80014f8:	e7f5      	b.n	80014e6 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80014fa:	f7ff f823 	bl	8000544 <HAL_GetTick>
 80014fe:	1bc0      	subs	r0, r0, r7
 8001500:	2802      	cmp	r0, #2
 8001502:	d9c4      	bls.n	800148e <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001504:	2003      	movs	r0, #3
 8001506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001508:	6921      	ldr	r1, [r4, #16]
 800150a:	68eb      	ldr	r3, [r5, #12]
 800150c:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8001510:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001514:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8001518:	091b      	lsrs	r3, r3, #4
 800151a:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 800151e:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001520:	6823      	ldr	r3, [r4, #0]
 8001522:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001526:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001528:	f7ff f80c 	bl	8000544 <HAL_GetTick>
 800152c:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800152e:	6823      	ldr	r3, [r4, #0]
 8001530:	011b      	lsls	r3, r3, #4
 8001532:	d513      	bpl.n	800155c <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001534:	6923      	ldr	r3, [r4, #16]
 8001536:	69aa      	ldr	r2, [r5, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	6123      	str	r3, [r4, #16]
 800153c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800153e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001540:	6923      	ldr	r3, [r4, #16]
 8001542:	6968      	ldr	r0, [r5, #20]
 8001544:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001548:	0840      	lsrs	r0, r0, #1
 800154a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800154e:	3801      	subs	r0, #1
 8001550:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001554:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001558:	6123      	str	r3, [r4, #16]
 800155a:	e7e1      	b.n	8001520 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800155c:	f7fe fff2 	bl	8000544 <HAL_GetTick>
 8001560:	1b80      	subs	r0, r0, r6
 8001562:	2802      	cmp	r0, #2
 8001564:	d9e3      	bls.n	800152e <RCCEx_PLLSAI1_Config+0xde>
 8001566:	e7cd      	b.n	8001504 <RCCEx_PLLSAI1_Config+0xb4>
 8001568:	40021000 	.word	0x40021000

0800156c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800156c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800156e:	4b3d      	ldr	r3, [pc, #244]	; (8001664 <RCCEx_PLLSAI2_Config+0xf8>)
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	f012 0f03 	tst.w	r2, #3
{
 8001576:	4605      	mov	r5, r0
 8001578:	460e      	mov	r6, r1
 800157a:	461c      	mov	r4, r3
 800157c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800157e:	d028      	beq.n	80015d2 <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	f002 0203 	and.w	r2, r2, #3
 8001586:	4282      	cmp	r2, r0
 8001588:	d13a      	bne.n	8001600 <RCCEx_PLLSAI2_Config+0x94>
       ||
 800158a:	2a00      	cmp	r2, #0
 800158c:	d038      	beq.n	8001600 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800158e:	68db      	ldr	r3, [r3, #12]
       ||
 8001590:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001592:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001596:	3301      	adds	r3, #1
       ||
 8001598:	4293      	cmp	r3, r2
 800159a:	d131      	bne.n	8001600 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800159c:	6823      	ldr	r3, [r4, #0]
 800159e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015a2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015a4:	f7fe ffce 	bl	8000544 <HAL_GetTick>
 80015a8:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80015aa:	6823      	ldr	r3, [r4, #0]
 80015ac:	009a      	lsls	r2, r3, #2
 80015ae:	d430      	bmi.n	8001612 <RCCEx_PLLSAI2_Config+0xa6>
 80015b0:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80015b2:	2e00      	cmp	r6, #0
 80015b4:	d034      	beq.n	8001620 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80015b6:	6963      	ldr	r3, [r4, #20]
 80015b8:	6929      	ldr	r1, [r5, #16]
 80015ba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80015be:	0849      	lsrs	r1, r1, #1
 80015c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80015c4:	3901      	subs	r1, #1
 80015c6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80015ca:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80015ce:	6163      	str	r3, [r4, #20]
 80015d0:	e032      	b.n	8001638 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 80015d2:	2802      	cmp	r0, #2
 80015d4:	d010      	beq.n	80015f8 <RCCEx_PLLSAI2_Config+0x8c>
 80015d6:	2803      	cmp	r0, #3
 80015d8:	d014      	beq.n	8001604 <RCCEx_PLLSAI2_Config+0x98>
 80015da:	2801      	cmp	r0, #1
 80015dc:	d110      	bne.n	8001600 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	079f      	lsls	r7, r3, #30
 80015e2:	d538      	bpl.n	8001656 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80015e4:	68e3      	ldr	r3, [r4, #12]
 80015e6:	686a      	ldr	r2, [r5, #4]
 80015e8:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80015ec:	3a01      	subs	r2, #1
 80015ee:	4318      	orrs	r0, r3
 80015f0:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80015f4:	60e0      	str	r0, [r4, #12]
 80015f6:	e7d1      	b.n	800159c <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80015fe:	d1f1      	bne.n	80015e4 <RCCEx_PLLSAI2_Config+0x78>
 8001600:	2001      	movs	r0, #1
 8001602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	0391      	lsls	r1, r2, #14
 8001608:	d4ec      	bmi.n	80015e4 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001610:	e7f5      	b.n	80015fe <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001612:	f7fe ff97 	bl	8000544 <HAL_GetTick>
 8001616:	1bc0      	subs	r0, r0, r7
 8001618:	2802      	cmp	r0, #2
 800161a:	d9c6      	bls.n	80015aa <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 800161c:	2003      	movs	r0, #3
 800161e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001620:	6962      	ldr	r2, [r4, #20]
 8001622:	68eb      	ldr	r3, [r5, #12]
 8001624:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8001628:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800162c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001630:	091b      	lsrs	r3, r3, #4
 8001632:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8001636:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8001638:	6823      	ldr	r3, [r4, #0]
 800163a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001640:	f7fe ff80 	bl	8000544 <HAL_GetTick>
 8001644:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8001646:	6823      	ldr	r3, [r4, #0]
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	d505      	bpl.n	8001658 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800164c:	6963      	ldr	r3, [r4, #20]
 800164e:	696a      	ldr	r2, [r5, #20]
 8001650:	4313      	orrs	r3, r2
 8001652:	6163      	str	r3, [r4, #20]
 8001654:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001658:	f7fe ff74 	bl	8000544 <HAL_GetTick>
 800165c:	1b80      	subs	r0, r0, r6
 800165e:	2802      	cmp	r0, #2
 8001660:	d9f1      	bls.n	8001646 <RCCEx_PLLSAI2_Config+0xda>
 8001662:	e7db      	b.n	800161c <RCCEx_PLLSAI2_Config+0xb0>
 8001664:	40021000 	.word	0x40021000

08001668 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001668:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800166c:	6806      	ldr	r6, [r0, #0]
 800166e:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8001672:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001674:	d024      	beq.n	80016c0 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001676:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8001678:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800167c:	d02c      	beq.n	80016d8 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800167e:	d802      	bhi.n	8001686 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001680:	b1c1      	cbz	r1, 80016b4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8001682:	2601      	movs	r6, #1
 8001684:	e01c      	b.n	80016c0 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001686:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800168a:	d00d      	beq.n	80016a8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800168c:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001690:	d1f7      	bne.n	8001682 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001692:	4a4d      	ldr	r2, [pc, #308]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001694:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001696:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800169a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800169e:	430b      	orrs	r3, r1
 80016a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80016a4:	2600      	movs	r6, #0
 80016a6:	e00b      	b.n	80016c0 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80016a8:	4a47      	ldr	r2, [pc, #284]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016aa:	68d3      	ldr	r3, [r2, #12]
 80016ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b0:	60d3      	str	r3, [r2, #12]
      break;
 80016b2:	e7ee      	b.n	8001692 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80016b4:	3004      	adds	r0, #4
 80016b6:	f7ff fecb 	bl	8001450 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80016ba:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80016bc:	2800      	cmp	r0, #0
 80016be:	d0e8      	beq.n	8001692 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80016c0:	6823      	ldr	r3, [r4, #0]
 80016c2:	04d8      	lsls	r0, r3, #19
 80016c4:	d506      	bpl.n	80016d4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80016c6:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80016c8:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80016cc:	d074      	beq.n	80017b8 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80016ce:	d808      	bhi.n	80016e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80016d0:	b1a9      	cbz	r1, 80016fe <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 80016d2:	2601      	movs	r6, #1
 80016d4:	4635      	mov	r5, r6
 80016d6:	e021      	b.n	800171c <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80016d8:	2100      	movs	r1, #0
 80016da:	3020      	adds	r0, #32
 80016dc:	f7ff ff46 	bl	800156c <RCCEx_PLLSAI2_Config>
 80016e0:	e7eb      	b.n	80016ba <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 80016e2:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80016e6:	d004      	beq.n	80016f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80016e8:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80016ec:	d1f1      	bne.n	80016d2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80016ee:	4635      	mov	r5, r6
 80016f0:	e009      	b.n	8001706 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80016f2:	4a35      	ldr	r2, [pc, #212]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016f4:	68d3      	ldr	r3, [r2, #12]
 80016f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016fa:	60d3      	str	r3, [r2, #12]
 80016fc:	e7f7      	b.n	80016ee <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80016fe:	1d20      	adds	r0, r4, #4
 8001700:	f7ff fea6 	bl	8001450 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001704:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001706:	2d00      	cmp	r5, #0
 8001708:	d15c      	bne.n	80017c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800170a:	4a2f      	ldr	r2, [pc, #188]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800170c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800170e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001712:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001716:	430b      	orrs	r3, r1
 8001718:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800171c:	6823      	ldr	r3, [r4, #0]
 800171e:	0399      	lsls	r1, r3, #14
 8001720:	f140 814f 	bpl.w	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001724:	4f28      	ldr	r7, [pc, #160]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001726:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001728:	00da      	lsls	r2, r3, #3
 800172a:	f140 8176 	bpl.w	8001a1a <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 800172e:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001732:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80017cc <HAL_RCCEx_PeriphCLKConfig+0x164>
 8001736:	f8d9 3000 	ldr.w	r3, [r9]
 800173a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173e:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8001742:	f7fe feff 	bl	8000544 <HAL_GetTick>
 8001746:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001748:	f8d9 3000 	ldr.w	r3, [r9]
 800174c:	05db      	lsls	r3, r3, #23
 800174e:	d53f      	bpl.n	80017d0 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8001750:	2d00      	cmp	r5, #0
 8001752:	d144      	bne.n	80017de <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001754:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001758:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800175c:	d015      	beq.n	800178a <HAL_RCCEx_PeriphCLKConfig+0x122>
 800175e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001762:	4293      	cmp	r3, r2
 8001764:	d011      	beq.n	800178a <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001766:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800176a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800176e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001772:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001776:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800177a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800177e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001782:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001786:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800178a:	07d8      	lsls	r0, r3, #31
 800178c:	d509      	bpl.n	80017a2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 800178e:	f7fe fed9 	bl	8000544 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001792:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001796:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001798:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800179c:	0799      	lsls	r1, r3, #30
 800179e:	f140 8109 	bpl.w	80019b4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017a6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80017aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017ae:	4313      	orrs	r3, r2
 80017b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80017b4:	4635      	mov	r5, r6
 80017b6:	e012      	b.n	80017de <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80017b8:	2100      	movs	r1, #0
 80017ba:	f104 0020 	add.w	r0, r4, #32
 80017be:	f7ff fed5 	bl	800156c <RCCEx_PLLSAI2_Config>
 80017c2:	e79f      	b.n	8001704 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80017c4:	462e      	mov	r6, r5
 80017c6:	e7a9      	b.n	800171c <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d0:	f7fe feb8 	bl	8000544 <HAL_GetTick>
 80017d4:	eba0 000a 	sub.w	r0, r0, sl
 80017d8:	2802      	cmp	r0, #2
 80017da:	d9b5      	bls.n	8001748 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 80017dc:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80017de:	f1b8 0f00 	cmp.w	r8, #0
 80017e2:	d003      	beq.n	80017ec <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ea:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017ec:	6823      	ldr	r3, [r4, #0]
 80017ee:	07da      	lsls	r2, r3, #31
 80017f0:	d508      	bpl.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017f2:	4990      	ldr	r1, [pc, #576]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80017f4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80017f6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80017fa:	f022 0203 	bic.w	r2, r2, #3
 80017fe:	4302      	orrs	r2, r0
 8001800:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001804:	079f      	lsls	r7, r3, #30
 8001806:	d508      	bpl.n	800181a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001808:	498a      	ldr	r1, [pc, #552]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800180a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800180c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001810:	f022 020c 	bic.w	r2, r2, #12
 8001814:	4302      	orrs	r2, r0
 8001816:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800181a:	075e      	lsls	r6, r3, #29
 800181c:	d508      	bpl.n	8001830 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800181e:	4985      	ldr	r1, [pc, #532]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001820:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001822:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001826:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800182a:	4302      	orrs	r2, r0
 800182c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001830:	0718      	lsls	r0, r3, #28
 8001832:	d508      	bpl.n	8001846 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001834:	497f      	ldr	r1, [pc, #508]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001836:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001838:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800183c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001840:	4302      	orrs	r2, r0
 8001842:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001846:	06d9      	lsls	r1, r3, #27
 8001848:	d508      	bpl.n	800185c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800184a:	497a      	ldr	r1, [pc, #488]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800184c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800184e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001852:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001856:	4302      	orrs	r2, r0
 8001858:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800185c:	069a      	lsls	r2, r3, #26
 800185e:	d508      	bpl.n	8001872 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001860:	4974      	ldr	r1, [pc, #464]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001862:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001864:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001868:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800186c:	4302      	orrs	r2, r0
 800186e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001872:	059f      	lsls	r7, r3, #22
 8001874:	d508      	bpl.n	8001888 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001876:	496f      	ldr	r1, [pc, #444]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001878:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800187a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800187e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001882:	4302      	orrs	r2, r0
 8001884:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001888:	055e      	lsls	r6, r3, #21
 800188a:	d508      	bpl.n	800189e <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800188c:	4969      	ldr	r1, [pc, #420]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800188e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001890:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001894:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001898:	4302      	orrs	r2, r0
 800189a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800189e:	0658      	lsls	r0, r3, #25
 80018a0:	d508      	bpl.n	80018b4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80018a2:	4964      	ldr	r1, [pc, #400]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80018a4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80018a6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80018aa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80018ae:	4302      	orrs	r2, r0
 80018b0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80018b4:	0619      	lsls	r1, r3, #24
 80018b6:	d508      	bpl.n	80018ca <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80018b8:	495e      	ldr	r1, [pc, #376]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80018ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80018bc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80018c0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80018c4:	4302      	orrs	r2, r0
 80018c6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80018ca:	05da      	lsls	r2, r3, #23
 80018cc:	d508      	bpl.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80018ce:	4959      	ldr	r1, [pc, #356]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80018d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80018d2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80018d6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80018da:	4302      	orrs	r2, r0
 80018dc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80018e0:	049b      	lsls	r3, r3, #18
 80018e2:	d50f      	bpl.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80018e4:	4a53      	ldr	r2, [pc, #332]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80018e6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80018e8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80018ec:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80018f0:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80018f2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80018f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80018fa:	d164      	bne.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80018fc:	68d3      	ldr	r3, [r2, #12]
 80018fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001902:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001904:	6823      	ldr	r3, [r4, #0]
 8001906:	031f      	lsls	r7, r3, #12
 8001908:	d50f      	bpl.n	800192a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800190a:	4a4a      	ldr	r2, [pc, #296]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800190c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800190e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001912:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001916:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001918:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800191c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001920:	d15c      	bne.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001922:	68d3      	ldr	r3, [r2, #12]
 8001924:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001928:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800192a:	6823      	ldr	r3, [r4, #0]
 800192c:	035e      	lsls	r6, r3, #13
 800192e:	d50f      	bpl.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001930:	4a40      	ldr	r2, [pc, #256]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001932:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001934:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001938:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800193c:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800193e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001942:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001946:	d154      	bne.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001948:	68d3      	ldr	r3, [r2, #12]
 800194a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800194e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001950:	6823      	ldr	r3, [r4, #0]
 8001952:	0458      	lsls	r0, r3, #17
 8001954:	d512      	bpl.n	800197c <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001956:	4937      	ldr	r1, [pc, #220]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001958:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800195a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800195e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001962:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001964:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800196c:	d14c      	bne.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800196e:	2102      	movs	r1, #2
 8001970:	1d20      	adds	r0, r4, #4
 8001972:	f7ff fd6d 	bl	8001450 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001976:	2800      	cmp	r0, #0
 8001978:	bf18      	it	ne
 800197a:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800197c:	6822      	ldr	r2, [r4, #0]
 800197e:	0411      	lsls	r1, r2, #16
 8001980:	d508      	bpl.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001982:	492c      	ldr	r1, [pc, #176]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001984:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001986:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800198a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800198e:	4303      	orrs	r3, r0
 8001990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001994:	03d3      	lsls	r3, r2, #15
 8001996:	d509      	bpl.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001998:	4a26      	ldr	r2, [pc, #152]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800199a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800199e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80019a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019a6:	430b      	orrs	r3, r1
 80019a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80019ac:	4628      	mov	r0, r5
 80019ae:	b002      	add	sp, #8
 80019b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b4:	f7fe fdc6 	bl	8000544 <HAL_GetTick>
 80019b8:	1b40      	subs	r0, r0, r5
 80019ba:	4548      	cmp	r0, r9
 80019bc:	f67f aeec 	bls.w	8001798 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80019c0:	e70c      	b.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0x174>
 80019c2:	4635      	mov	r5, r6
 80019c4:	e712      	b.n	80017ec <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80019c6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80019ca:	d19b      	bne.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80019cc:	2101      	movs	r1, #1
 80019ce:	1d20      	adds	r0, r4, #4
 80019d0:	f7ff fd3e 	bl	8001450 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80019d4:	2800      	cmp	r0, #0
 80019d6:	bf18      	it	ne
 80019d8:	4605      	movne	r5, r0
 80019da:	e793      	b.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80019dc:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80019e0:	d1a3      	bne.n	800192a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80019e2:	2101      	movs	r1, #1
 80019e4:	1d20      	adds	r0, r4, #4
 80019e6:	f7ff fd33 	bl	8001450 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80019ea:	2800      	cmp	r0, #0
 80019ec:	bf18      	it	ne
 80019ee:	4605      	movne	r5, r0
 80019f0:	e79b      	b.n	800192a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80019f2:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80019f6:	d1ab      	bne.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80019f8:	2101      	movs	r1, #1
 80019fa:	1d20      	adds	r0, r4, #4
 80019fc:	f7ff fd28 	bl	8001450 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001a00:	2800      	cmp	r0, #0
 8001a02:	bf18      	it	ne
 8001a04:	4605      	movne	r5, r0
 8001a06:	e7a3      	b.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001a08:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8001a0c:	d1b6      	bne.n	800197c <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001a0e:	2102      	movs	r1, #2
 8001a10:	f104 0020 	add.w	r0, r4, #32
 8001a14:	f7ff fdaa 	bl	800156c <RCCEx_PLLSAI2_Config>
 8001a18:	e7ad      	b.n	8001976 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a20:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a2c:	f04f 0801 	mov.w	r8, #1
 8001a30:	e67f      	b.n	8001732 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000

08001a38 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8001a38:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a3a:	69c1      	ldr	r1, [r0, #28]
{
 8001a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a3e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a40:	6883      	ldr	r3, [r0, #8]
 8001a42:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001a44:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a46:	4303      	orrs	r3, r0
 8001a48:	6960      	ldr	r0, [r4, #20]
 8001a4a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001a4c:	48ba      	ldr	r0, [pc, #744]	; (8001d38 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a4e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001a50:	4028      	ands	r0, r5
 8001a52:	4303      	orrs	r3, r0
 8001a54:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a56:	6853      	ldr	r3, [r2, #4]
 8001a58:	68e0      	ldr	r0, [r4, #12]
 8001a5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a5e:	4303      	orrs	r3, r0
 8001a60:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001a62:	4bb6      	ldr	r3, [pc, #728]	; (8001d3c <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001a64:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001a66:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001a68:	bf1c      	itt	ne
 8001a6a:	6a23      	ldrne	r3, [r4, #32]
 8001a6c:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001a6e:	6893      	ldr	r3, [r2, #8]
 8001a70:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001a74:	4303      	orrs	r3, r0
 8001a76:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a78:	4bb1      	ldr	r3, [pc, #708]	; (8001d40 <UART_SetConfig+0x308>)
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d119      	bne.n	8001ab2 <UART_SetConfig+0x7a>
 8001a7e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001a82:	4ab0      	ldr	r2, [pc, #704]	; (8001d44 <UART_SetConfig+0x30c>)
 8001a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a88:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a8c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001a90:	5cd3      	ldrb	r3, [r2, r3]
 8001a92:	f040 8138 	bne.w	8001d06 <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 8001a96:	2b08      	cmp	r3, #8
 8001a98:	f200 808f 	bhi.w	8001bba <UART_SetConfig+0x182>
 8001a9c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001aa0:	00ca011a 	.word	0x00ca011a
 8001aa4:	008d00f9 	.word	0x008d00f9
 8001aa8:	008d0114 	.word	0x008d0114
 8001aac:	008d008d 	.word	0x008d008d
 8001ab0:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ab2:	4ba5      	ldr	r3, [pc, #660]	; (8001d48 <UART_SetConfig+0x310>)
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d107      	bne.n	8001ac8 <UART_SetConfig+0x90>
 8001ab8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001abc:	4aa3      	ldr	r2, [pc, #652]	; (8001d4c <UART_SetConfig+0x314>)
 8001abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	e7e1      	b.n	8001a8c <UART_SetConfig+0x54>
 8001ac8:	4ba1      	ldr	r3, [pc, #644]	; (8001d50 <UART_SetConfig+0x318>)
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d123      	bne.n	8001b16 <UART_SetConfig+0xde>
 8001ace:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001ada:	2b10      	cmp	r3, #16
 8001adc:	f000 80f1 	beq.w	8001cc2 <UART_SetConfig+0x28a>
 8001ae0:	d80b      	bhi.n	8001afa <UART_SetConfig+0xc2>
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 80f3 	beq.w	8001cce <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ae8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001aec:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001af0:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001af4:	f000 80f8 	beq.w	8001ce8 <UART_SetConfig+0x2b0>
 8001af8:	e0a8      	b.n	8001c4c <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001afa:	2b20      	cmp	r3, #32
 8001afc:	f000 80c6 	beq.w	8001c8c <UART_SetConfig+0x254>
 8001b00:	2b30      	cmp	r3, #48	; 0x30
 8001b02:	d1f1      	bne.n	8001ae8 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b04:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001b08:	f040 80b8 	bne.w	8001c7c <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001b0c:	6860      	ldr	r0, [r4, #4]
 8001b0e:	0843      	lsrs	r3, r0, #1
 8001b10:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001b14:	e0c3      	b.n	8001c9e <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b16:	4b8f      	ldr	r3, [pc, #572]	; (8001d54 <UART_SetConfig+0x31c>)
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d11e      	bne.n	8001b5a <UART_SetConfig+0x122>
 8001b1c:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8001b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b24:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001b28:	2b40      	cmp	r3, #64	; 0x40
 8001b2a:	f000 80bb 	beq.w	8001ca4 <UART_SetConfig+0x26c>
 8001b2e:	d80a      	bhi.n	8001b46 <UART_SetConfig+0x10e>
 8001b30:	b97b      	cbnz	r3, 8001b52 <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001b32:	4b82      	ldr	r3, [pc, #520]	; (8001d3c <UART_SetConfig+0x304>)
 8001b34:	429a      	cmp	r2, r3
 8001b36:	f040 80ca 	bne.w	8001cce <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001b3a:	f7ff fc65 	bl	8001408 <HAL_RCC_GetPCLK1Freq>
        break;
 8001b3e:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8001b40:	bbb0      	cbnz	r0, 8001bb0 <UART_SetConfig+0x178>
 8001b42:	4602      	mov	r2, r0
 8001b44:	e03a      	b.n	8001bbc <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b46:	2b80      	cmp	r3, #128	; 0x80
 8001b48:	f000 809d 	beq.w	8001c86 <UART_SetConfig+0x24e>
 8001b4c:	2bc0      	cmp	r3, #192	; 0xc0
 8001b4e:	f000 80b0 	beq.w	8001cb2 <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001b52:	4b7a      	ldr	r3, [pc, #488]	; (8001d3c <UART_SetConfig+0x304>)
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d1c7      	bne.n	8001ae8 <UART_SetConfig+0xb0>
 8001b58:	e02f      	b.n	8001bba <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b5a:	4b7f      	ldr	r3, [pc, #508]	; (8001d58 <UART_SetConfig+0x320>)
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d111      	bne.n	8001b84 <UART_SetConfig+0x14c>
 8001b60:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8001b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b70:	f000 8098 	beq.w	8001ca4 <UART_SetConfig+0x26c>
 8001b74:	d9dc      	bls.n	8001b30 <UART_SetConfig+0xf8>
 8001b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b7a:	f000 8084 	beq.w	8001c86 <UART_SetConfig+0x24e>
 8001b7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b82:	e7e4      	b.n	8001b4e <UART_SetConfig+0x116>
 8001b84:	4b6d      	ldr	r3, [pc, #436]	; (8001d3c <UART_SetConfig+0x304>)
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d1ae      	bne.n	8001ae8 <UART_SetConfig+0xb0>
 8001b8a:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8001b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b92:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b9a:	f000 8083 	beq.w	8001ca4 <UART_SetConfig+0x26c>
 8001b9e:	d9c7      	bls.n	8001b30 <UART_SetConfig+0xf8>
 8001ba0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ba4:	d06f      	beq.n	8001c86 <UART_SetConfig+0x24e>
 8001ba6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001baa:	e7d0      	b.n	8001b4e <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001bac:	486b      	ldr	r0, [pc, #428]	; (8001d5c <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8001bae:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8001bb0:	6862      	ldr	r2, [r4, #4]
 8001bb2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8001bb6:	4281      	cmp	r1, r0
 8001bb8:	d905      	bls.n	8001bc6 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8001bba:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001bc0:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8001bc6:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8001bca:	d8f6      	bhi.n	8001bba <UART_SetConfig+0x182>
        switch (clocksource)
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d82e      	bhi.n	8001c2e <UART_SetConfig+0x1f6>
 8001bd0:	e8df f003 	tbb	[pc, r3]
 8001bd4:	2d1c2d05 	.word	0x2d1c2d05
 8001bd8:	2d2d2d24 	.word	0x2d2d2d24
 8001bdc:	27          	.byte	0x27
 8001bdd:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001bde:	f7ff fc13 	bl	8001408 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001be2:	6862      	ldr	r2, [r4, #4]
 8001be4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001be8:	0856      	lsrs	r6, r2, #1
 8001bea:	2700      	movs	r7, #0
 8001bec:	fbe1 6700 	umlal	r6, r7, r1, r0
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	4630      	mov	r0, r6
 8001bf4:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001bf6:	f7fe fae7 	bl	80001c8 <__aeabi_uldivmod>
            break;
 8001bfa:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001bfc:	4b58      	ldr	r3, [pc, #352]	; (8001d60 <UART_SetConfig+0x328>)
 8001bfe:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8001c02:	4299      	cmp	r1, r3
 8001c04:	d8d9      	bhi.n	8001bba <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8001c06:	6823      	ldr	r3, [r4, #0]
 8001c08:	60d8      	str	r0, [r3, #12]
 8001c0a:	e7d7      	b.n	8001bbc <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8001c0c:	4855      	ldr	r0, [pc, #340]	; (8001d64 <UART_SetConfig+0x32c>)
 8001c0e:	0855      	lsrs	r5, r2, #1
 8001c10:	2300      	movs	r3, #0
 8001c12:	2100      	movs	r1, #0
 8001c14:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001c16:	f141 0100 	adc.w	r1, r1, #0
 8001c1a:	e7ec      	b.n	8001bf6 <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c1c:	f7ff f8e2 	bl	8000de4 <HAL_RCC_GetSysClockFreq>
 8001c20:	e7df      	b.n	8001be2 <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001c22:	0850      	lsrs	r0, r2, #1
 8001c24:	2100      	movs	r1, #0
 8001c26:	2300      	movs	r3, #0
 8001c28:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8001c2c:	e7f3      	b.n	8001c16 <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8001c2e:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001c30:	2000      	movs	r0, #0
 8001c32:	e7e3      	b.n	8001bfc <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001c34:	f7ff fbfa 	bl	800142c <HAL_RCC_GetPCLK2Freq>
 8001c38:	e04e      	b.n	8001cd8 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001c3a:	f7ff fbe5 	bl	8001408 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c3e:	6862      	ldr	r2, [r4, #4]
 8001c40:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001c44:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c48:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c4a:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001c4c:	f1a3 0010 	sub.w	r0, r3, #16
 8001c50:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001c54:	4288      	cmp	r0, r1
 8001c56:	d8b0      	bhi.n	8001bba <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8001c58:	6821      	ldr	r1, [r4, #0]
 8001c5a:	60cb      	str	r3, [r1, #12]
 8001c5c:	e7ae      	b.n	8001bbc <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001c5e:	f7ff fbe5 	bl	800142c <HAL_RCC_GetPCLK2Freq>
 8001c62:	e7ec      	b.n	8001c3e <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001c64:	6860      	ldr	r0, [r4, #4]
 8001c66:	0843      	lsrs	r3, r0, #1
 8001c68:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001c6c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001c70:	fbb3 f3f0 	udiv	r3, r3, r0
 8001c74:	e7e8      	b.n	8001c48 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c76:	f7ff f8b5 	bl	8000de4 <HAL_RCC_GetSysClockFreq>
 8001c7a:	e7e0      	b.n	8001c3e <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001c7c:	6860      	ldr	r0, [r4, #4]
 8001c7e:	0843      	lsrs	r3, r0, #1
 8001c80:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c84:	e7f4      	b.n	8001c70 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001c86:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <UART_SetConfig+0x304>)
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d08f      	beq.n	8001bac <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c8c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001c90:	d1e8      	bne.n	8001c64 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001c92:	6860      	ldr	r0, [r4, #4]
 8001c94:	0843      	lsrs	r3, r0, #1
 8001c96:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001c9a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001c9e:	fbb3 f3f0 	udiv	r3, r3, r0
 8001ca2:	e01f      	b.n	8001ce4 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001ca4:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <UART_SetConfig+0x304>)
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d10b      	bne.n	8001cc2 <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001caa:	f7ff f89b 	bl	8000de4 <HAL_RCC_GetSysClockFreq>
        break;
 8001cae:	2304      	movs	r3, #4
 8001cb0:	e746      	b.n	8001b40 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001cb2:	4b22      	ldr	r3, [pc, #136]	; (8001d3c <UART_SetConfig+0x304>)
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	f47f af25 	bne.w	8001b04 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001cba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8001cbe:	2308      	movs	r3, #8
 8001cc0:	e776      	b.n	8001bb0 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cc2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001cc6:	d1d6      	bne.n	8001c76 <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001cc8:	f7ff f88c 	bl	8000de4 <HAL_RCC_GetSysClockFreq>
 8001ccc:	e004      	b.n	8001cd8 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cce:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001cd2:	d1b2      	bne.n	8001c3a <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001cd4:	f7ff fb98 	bl	8001408 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001cd8:	6861      	ldr	r1, [r4, #4]
 8001cda:	084a      	lsrs	r2, r1, #1
 8001cdc:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001ce0:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ce4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ce6:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001ce8:	f1a3 0010 	sub.w	r0, r3, #16
 8001cec:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001cf0:	4288      	cmp	r0, r1
 8001cf2:	f63f af62 	bhi.w	8001bba <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 8001cf6:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8001cfa:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001cfc:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001d00:	430b      	orrs	r3, r1
 8001d02:	60c3      	str	r3, [r0, #12]
 8001d04:	e75a      	b.n	8001bbc <UART_SetConfig+0x184>
    switch (clocksource)
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	f63f af57 	bhi.w	8001bba <UART_SetConfig+0x182>
 8001d0c:	a201      	add	r2, pc, #4	; (adr r2, 8001d14 <UART_SetConfig+0x2dc>)
 8001d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d12:	bf00      	nop
 8001d14:	08001c3b 	.word	0x08001c3b
 8001d18:	08001c5f 	.word	0x08001c5f
 8001d1c:	08001c65 	.word	0x08001c65
 8001d20:	08001bbb 	.word	0x08001bbb
 8001d24:	08001c77 	.word	0x08001c77
 8001d28:	08001bbb 	.word	0x08001bbb
 8001d2c:	08001bbb 	.word	0x08001bbb
 8001d30:	08001bbb 	.word	0x08001bbb
 8001d34:	08001c7d 	.word	0x08001c7d
 8001d38:	efff69f3 	.word	0xefff69f3
 8001d3c:	40008000 	.word	0x40008000
 8001d40:	40013800 	.word	0x40013800
 8001d44:	08002d08 	.word	0x08002d08
 8001d48:	40004400 	.word	0x40004400
 8001d4c:	08002d0c 	.word	0x08002d0c
 8001d50:	40004800 	.word	0x40004800
 8001d54:	40004c00 	.word	0x40004c00
 8001d58:	40005000 	.word	0x40005000
 8001d5c:	00f42400 	.word	0x00f42400
 8001d60:	000ffcff 	.word	0x000ffcff
 8001d64:	f4240000 	.word	0xf4240000

08001d68 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001d68:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d6a:	07da      	lsls	r2, r3, #31
{
 8001d6c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001d6e:	d506      	bpl.n	8001d7e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001d70:	6801      	ldr	r1, [r0, #0]
 8001d72:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001d74:	684a      	ldr	r2, [r1, #4]
 8001d76:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001d7a:	4322      	orrs	r2, r4
 8001d7c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001d7e:	079c      	lsls	r4, r3, #30
 8001d80:	d506      	bpl.n	8001d90 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001d82:	6801      	ldr	r1, [r0, #0]
 8001d84:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001d86:	684a      	ldr	r2, [r1, #4]
 8001d88:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d8c:	4322      	orrs	r2, r4
 8001d8e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001d90:	0759      	lsls	r1, r3, #29
 8001d92:	d506      	bpl.n	8001da2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001d94:	6801      	ldr	r1, [r0, #0]
 8001d96:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001d98:	684a      	ldr	r2, [r1, #4]
 8001d9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d9e:	4322      	orrs	r2, r4
 8001da0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001da2:	071a      	lsls	r2, r3, #28
 8001da4:	d506      	bpl.n	8001db4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001da6:	6801      	ldr	r1, [r0, #0]
 8001da8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001daa:	684a      	ldr	r2, [r1, #4]
 8001dac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001db0:	4322      	orrs	r2, r4
 8001db2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001db4:	06dc      	lsls	r4, r3, #27
 8001db6:	d506      	bpl.n	8001dc6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001db8:	6801      	ldr	r1, [r0, #0]
 8001dba:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001dbc:	688a      	ldr	r2, [r1, #8]
 8001dbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001dc2:	4322      	orrs	r2, r4
 8001dc4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001dc6:	0699      	lsls	r1, r3, #26
 8001dc8:	d506      	bpl.n	8001dd8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001dca:	6801      	ldr	r1, [r0, #0]
 8001dcc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001dce:	688a      	ldr	r2, [r1, #8]
 8001dd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dd4:	4322      	orrs	r2, r4
 8001dd6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001dd8:	065a      	lsls	r2, r3, #25
 8001dda:	d50f      	bpl.n	8001dfc <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001ddc:	6801      	ldr	r1, [r0, #0]
 8001dde:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001de0:	684a      	ldr	r2, [r1, #4]
 8001de2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001de6:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001de8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001dec:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001dee:	d105      	bne.n	8001dfc <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001df0:	684a      	ldr	r2, [r1, #4]
 8001df2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001df4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001df8:	4322      	orrs	r2, r4
 8001dfa:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001dfc:	061b      	lsls	r3, r3, #24
 8001dfe:	d506      	bpl.n	8001e0e <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001e00:	6802      	ldr	r2, [r0, #0]
 8001e02:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001e04:	6853      	ldr	r3, [r2, #4]
 8001e06:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001e0a:	430b      	orrs	r3, r1
 8001e0c:	6053      	str	r3, [r2, #4]
 8001e0e:	bd10      	pop	{r4, pc}

08001e10 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e14:	9d06      	ldr	r5, [sp, #24]
 8001e16:	4604      	mov	r4, r0
 8001e18:	460f      	mov	r7, r1
 8001e1a:	4616      	mov	r6, r2
 8001e1c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e1e:	6821      	ldr	r1, [r4, #0]
 8001e20:	69ca      	ldr	r2, [r1, #28]
 8001e22:	ea37 0302 	bics.w	r3, r7, r2
 8001e26:	bf0c      	ite	eq
 8001e28:	2201      	moveq	r2, #1
 8001e2a:	2200      	movne	r2, #0
 8001e2c:	42b2      	cmp	r2, r6
 8001e2e:	d002      	beq.n	8001e36 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001e30:	2000      	movs	r0, #0
}
 8001e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001e36:	1c6b      	adds	r3, r5, #1
 8001e38:	d0f2      	beq.n	8001e20 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e3a:	b99d      	cbnz	r5, 8001e64 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e3c:	6823      	ldr	r3, [r4, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e44:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	f022 0201 	bic.w	r2, r2, #1
 8001e4c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001e4e:	2320      	movs	r3, #32
 8001e50:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8001e54:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8001e5e:	2003      	movs	r0, #3
 8001e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e64:	f7fe fb6e 	bl	8000544 <HAL_GetTick>
 8001e68:	eba0 0008 	sub.w	r0, r0, r8
 8001e6c:	4285      	cmp	r5, r0
 8001e6e:	d2d6      	bcs.n	8001e1e <UART_WaitOnFlagUntilTimeout+0xe>
 8001e70:	e7e4      	b.n	8001e3c <UART_WaitOnFlagUntilTimeout+0x2c>

08001e72 <HAL_UART_Transmit>:
{
 8001e72:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001e76:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001e78:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8001e7c:	2b20      	cmp	r3, #32
{
 8001e7e:	4604      	mov	r4, r0
 8001e80:	460d      	mov	r5, r1
 8001e82:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001e84:	d14a      	bne.n	8001f1c <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8001e86:	2900      	cmp	r1, #0
 8001e88:	d046      	beq.n	8001f18 <HAL_UART_Transmit+0xa6>
 8001e8a:	2a00      	cmp	r2, #0
 8001e8c:	d044      	beq.n	8001f18 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8001e8e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d042      	beq.n	8001f1c <HAL_UART_Transmit+0xaa>
 8001e96:	2301      	movs	r3, #1
 8001e98:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ea0:	2321      	movs	r3, #33	; 0x21
 8001ea2:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8001ea6:	f7fe fb4d 	bl	8000544 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8001eaa:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8001eae:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001eb0:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8001eb4:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001eb8:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 8001eba:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ebc:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 8001ebe:	b952      	cbnz	r2, 8001ed6 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ec0:	2140      	movs	r1, #64	; 0x40
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	f7ff ffa4 	bl	8001e10 <UART_WaitOnFlagUntilTimeout>
 8001ec8:	b958      	cbnz	r0, 8001ee2 <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8001eca:	2320      	movs	r3, #32
 8001ecc:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8001ed0:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8001ed4:	e006      	b.n	8001ee4 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2180      	movs	r1, #128	; 0x80
 8001eda:	4620      	mov	r0, r4
 8001edc:	f7ff ff98 	bl	8001e10 <UART_WaitOnFlagUntilTimeout>
 8001ee0:	b118      	cbz	r0, 8001eea <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 8001ee2:	2003      	movs	r0, #3
}
 8001ee4:	b002      	add	sp, #8
 8001ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001eea:	68a3      	ldr	r3, [r4, #8]
 8001eec:	6822      	ldr	r2, [r4, #0]
 8001eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ef2:	d10d      	bne.n	8001f10 <HAL_UART_Transmit+0x9e>
 8001ef4:	6923      	ldr	r3, [r4, #16]
 8001ef6:	b95b      	cbnz	r3, 8001f10 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001ef8:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f00:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001f02:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8001f0e:	e7d1      	b.n	8001eb4 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001f10:	782b      	ldrb	r3, [r5, #0]
 8001f12:	8513      	strh	r3, [r2, #40]	; 0x28
 8001f14:	3501      	adds	r5, #1
 8001f16:	e7f4      	b.n	8001f02 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8001f18:	2001      	movs	r0, #1
 8001f1a:	e7e3      	b.n	8001ee4 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8001f1c:	2002      	movs	r0, #2
 8001f1e:	e7e1      	b.n	8001ee4 <HAL_UART_Transmit+0x72>

08001f20 <HAL_UART_Receive>:
{
 8001f20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001f24:	4698      	mov	r8, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f26:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 8001f2a:	2b20      	cmp	r3, #32
{
 8001f2c:	4604      	mov	r4, r0
 8001f2e:	460d      	mov	r5, r1
 8001f30:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f32:	d160      	bne.n	8001ff6 <HAL_UART_Receive+0xd6>
    if ((pData == NULL) || (Size == 0U))
 8001f34:	2900      	cmp	r1, #0
 8001f36:	d05c      	beq.n	8001ff2 <HAL_UART_Receive+0xd2>
 8001f38:	2a00      	cmp	r2, #0
 8001f3a:	d05a      	beq.n	8001ff2 <HAL_UART_Receive+0xd2>
    __HAL_LOCK(huart);
 8001f3c:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d058      	beq.n	8001ff6 <HAL_UART_Receive+0xd6>
 8001f44:	2301      	movs	r3, #1
 8001f46:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	6743      	str	r3, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f4e:	2322      	movs	r3, #34	; 0x22
 8001f50:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
    tickstart = HAL_GetTick();
 8001f54:	f7fe faf6 	bl	8000544 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8001f58:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 8001f5a:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8001f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8001f62:	4607      	mov	r7, r0
    huart->RxXferCount = Size;
 8001f64:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001f68:	d115      	bne.n	8001f96 <HAL_UART_Receive+0x76>
 8001f6a:	6923      	ldr	r3, [r4, #16]
 8001f6c:	b98b      	cbnz	r3, 8001f92 <HAL_UART_Receive+0x72>
 8001f6e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001f72:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8001f76:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
    while (huart->RxXferCount > 0U)
 8001f7a:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8001f7e:	b280      	uxth	r0, r0
 8001f80:	b9b8      	cbnz	r0, 8001fb2 <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 8001f82:	2320      	movs	r3, #32
 8001f84:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    __HAL_UNLOCK(huart);
 8001f88:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8001f8c:	b002      	add	sp, #8
 8001f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8001f92:	23ff      	movs	r3, #255	; 0xff
 8001f94:	e7ed      	b.n	8001f72 <HAL_UART_Receive+0x52>
 8001f96:	b923      	cbnz	r3, 8001fa2 <HAL_UART_Receive+0x82>
 8001f98:	6923      	ldr	r3, [r4, #16]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f9      	beq.n	8001f92 <HAL_UART_Receive+0x72>
 8001f9e:	237f      	movs	r3, #127	; 0x7f
 8001fa0:	e7e7      	b.n	8001f72 <HAL_UART_Receive+0x52>
 8001fa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fa6:	d1e6      	bne.n	8001f76 <HAL_UART_Receive+0x56>
 8001fa8:	6923      	ldr	r3, [r4, #16]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f7      	beq.n	8001f9e <HAL_UART_Receive+0x7e>
 8001fae:	233f      	movs	r3, #63	; 0x3f
 8001fb0:	e7df      	b.n	8001f72 <HAL_UART_Receive+0x52>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001fb2:	f8cd 8000 	str.w	r8, [sp]
 8001fb6:	463b      	mov	r3, r7
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2120      	movs	r1, #32
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	f7ff ff27 	bl	8001e10 <UART_WaitOnFlagUntilTimeout>
 8001fc2:	b9d0      	cbnz	r0, 8001ffa <HAL_UART_Receive+0xda>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fc4:	68a3      	ldr	r3, [r4, #8]
 8001fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fca:	6823      	ldr	r3, [r4, #0]
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_UART_Receive+0xc8>
 8001fce:	6922      	ldr	r2, [r4, #16]
 8001fd0:	b952      	cbnz	r2, 8001fe8 <HAL_UART_Receive+0xc8>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001fd2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001fd4:	4033      	ands	r3, r6
 8001fd6:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 8001fda:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8001fe6:	e7c8      	b.n	8001f7a <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001fe8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001fea:	4033      	ands	r3, r6
 8001fec:	702b      	strb	r3, [r5, #0]
 8001fee:	3501      	adds	r5, #1
 8001ff0:	e7f3      	b.n	8001fda <HAL_UART_Receive+0xba>
      return  HAL_ERROR;
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	e7ca      	b.n	8001f8c <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 8001ff6:	2002      	movs	r0, #2
 8001ff8:	e7c8      	b.n	8001f8c <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 8001ffa:	2003      	movs	r0, #3
 8001ffc:	e7c6      	b.n	8001f8c <HAL_UART_Receive+0x6c>

08001ffe <UART_CheckIdleState>:
{
 8001ffe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002000:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002002:	2600      	movs	r6, #0
 8002004:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8002006:	f7fe fa9d 	bl	8000544 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800200a:	6823      	ldr	r3, [r4, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002010:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002012:	d417      	bmi.n	8002044 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002014:	6823      	ldr	r3, [r4, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	075b      	lsls	r3, r3, #29
 800201a:	d50a      	bpl.n	8002032 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800201c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	2200      	movs	r2, #0
 8002024:	462b      	mov	r3, r5
 8002026:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800202a:	4620      	mov	r0, r4
 800202c:	f7ff fef0 	bl	8001e10 <UART_WaitOnFlagUntilTimeout>
 8002030:	b9a0      	cbnz	r0, 800205c <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8002032:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002034:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002036:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 800203a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800203e:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8002042:	e00c      	b.n	800205e <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002044:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	4632      	mov	r2, r6
 800204c:	4603      	mov	r3, r0
 800204e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002052:	4620      	mov	r0, r4
 8002054:	f7ff fedc 	bl	8001e10 <UART_WaitOnFlagUntilTimeout>
 8002058:	2800      	cmp	r0, #0
 800205a:	d0db      	beq.n	8002014 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800205c:	2003      	movs	r0, #3
}
 800205e:	b002      	add	sp, #8
 8002060:	bd70      	pop	{r4, r5, r6, pc}

08002062 <HAL_UART_Init>:
{
 8002062:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002064:	4604      	mov	r4, r0
 8002066:	b360      	cbz	r0, 80020c2 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002068:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800206c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002070:	b91b      	cbnz	r3, 800207a <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002072:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002076:	f000 fd37 	bl	8002ae8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800207a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800207c:	2324      	movs	r3, #36	; 0x24
 800207e:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8002082:	6813      	ldr	r3, [r2, #0]
 8002084:	f023 0301 	bic.w	r3, r3, #1
 8002088:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800208a:	4620      	mov	r0, r4
 800208c:	f7ff fcd4 	bl	8001a38 <UART_SetConfig>
 8002090:	2801      	cmp	r0, #1
 8002092:	d016      	beq.n	80020c2 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002094:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002096:	b113      	cbz	r3, 800209e <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002098:	4620      	mov	r0, r4
 800209a:	f7ff fe65 	bl	8001d68 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800209e:	6823      	ldr	r3, [r4, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020ae:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80020b6:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80020b8:	601a      	str	r2, [r3, #0]
}
 80020ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80020be:	f7ff bf9e 	b.w	8001ffe <UART_CheckIdleState>
}
 80020c2:	2001      	movs	r0, #1
 80020c4:	bd10      	pop	{r4, pc}
	...

080020c8 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c8:	4b22      	ldr	r3, [pc, #136]	; (8002154 <MX_GPIO_Init+0x8c>)
{
 80020ca:	b510      	push	{r4, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020ce:	f042 0204 	orr.w	r2, r2, #4
 80020d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80020d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 80020d6:	b08a      	sub	sp, #40	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d8:	f002 0204 	and.w	r2, r2, #4
 80020dc:	9201      	str	r2, [sp, #4]
 80020de:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80020e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020ea:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80020ee:	9202      	str	r2, [sp, #8]
 80020f0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020f4:	f042 0201 	orr.w	r2, r2, #1
 80020f8:	64da      	str	r2, [r3, #76]	; 0x4c
 80020fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020fc:	f002 0201 	and.w	r2, r2, #1
 8002100:	9203      	str	r2, [sp, #12]
 8002102:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002104:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002106:	f042 0202 	orr.w	r2, r2, #2
 800210a:	64da      	str	r2, [r3, #76]	; 0x4c
 800210c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210e:	f003 0302 	and.w	r3, r3, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002112:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002114:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002116:	2120      	movs	r1, #32
 8002118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800211c:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800211e:	f7fe fb6f 	bl	8000800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002122:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 8002128:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800212a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800212c:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <MX_GPIO_Init+0x90>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800212e:	480b      	ldr	r0, [pc, #44]	; (800215c <MX_GPIO_Init+0x94>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002130:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002134:	f7fe fa88 	bl	8000648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002138:	2320      	movs	r3, #32
 800213a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800213c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213e:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002144:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002148:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800214a:	f7fe fa7d 	bl	8000648 <HAL_GPIO_Init>

}
 800214e:	b00a      	add	sp, #40	; 0x28
 8002150:	bd10      	pop	{r4, pc}
 8002152:	bf00      	nop
 8002154:	40021000 	.word	0x40021000
 8002158:	10210000 	.word	0x10210000
 800215c:	48000800 	.word	0x48000800

08002160 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002160:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8002162:	6802      	ldr	r2, [r0, #0]
 8002164:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <HAL_I2C_MspInit+0x44>)
 8002166:	429a      	cmp	r2, r3
 8002168:	d119      	bne.n	800219e <HAL_I2C_MspInit+0x3e>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800216a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800216e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002170:	2312      	movs	r3, #18
 8002172:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002174:	2301      	movs	r3, #1
 8002176:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002178:	2303      	movs	r3, #3
 800217a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800217c:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217e:	eb0d 0103 	add.w	r1, sp, r3
 8002182:	4809      	ldr	r0, [pc, #36]	; (80021a8 <HAL_I2C_MspInit+0x48>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002184:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002186:	f7fe fa5f 	bl	8000648 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800218a:	4b08      	ldr	r3, [pc, #32]	; (80021ac <HAL_I2C_MspInit+0x4c>)
 800218c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800218e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002192:	659a      	str	r2, [r3, #88]	; 0x58
 8002194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002196:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800219e:	b007      	add	sp, #28
 80021a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80021a4:	40005400 	.word	0x40005400
 80021a8:	48000400 	.word	0x48000400
 80021ac:	40021000 	.word	0x40021000

080021b0 <UART_EndRxTransfer.constprop.0>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021b0:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <UART_EndRxTransfer.constprop.0+0x20>)
 80021b2:	6813      	ldr	r3, [r2, #0]
 80021b4:	6819      	ldr	r1, [r3, #0]
 80021b6:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 80021ba:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021bc:	6899      	ldr	r1, [r3, #8]
 80021be:	f021 0101 	bic.w	r1, r1, #1
 80021c2:	6099      	str	r1, [r3, #8]
#endif

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021c4:	2320      	movs	r3, #32
 80021c6:	f882 3072 	strb.w	r3, [r2, #114]	; 0x72

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	6613      	str	r3, [r2, #96]	; 0x60
 80021ce:	4770      	bx	lr
 80021d0:	200000d4 	.word	0x200000d4

080021d4 <UART_EndTxTransfer.constprop.1>:
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80021d4:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <UART_EndTxTransfer.constprop.1+0x14>)
 80021d6:	6811      	ldr	r1, [r2, #0]
 80021d8:	680b      	ldr	r3, [r1, #0]
 80021da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80021de:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 80021e0:	2320      	movs	r3, #32
 80021e2:	f882 3071 	strb.w	r3, [r2, #113]	; 0x71
 80021e6:	4770      	bx	lr
 80021e8:	200000d4 	.word	0x200000d4

080021ec <get_TEMP>:
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void get_TEMP(void)
{
 80021ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_degC_x8[0], 1, T0_degC_x8, 1, I2C_TIMEOUT);
 80021f0:	4b66      	ldr	r3, [pc, #408]	; (800238c <get_TEMP+0x1a0>)
 80021f2:	4d67      	ldr	r5, [pc, #412]	; (8002390 <get_TEMP+0x1a4>)
 80021f4:	781a      	ldrb	r2, [r3, #0]
 80021f6:	4b67      	ldr	r3, [pc, #412]	; (8002394 <get_TEMP+0x1a8>)
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T1_degC_x8[0], 1, T1_degC_x8, 1, I2C_TIMEOUT);
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_T1_msb[0], 1, T0_T1_msb, 1, I2C_TIMEOUT);
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_H[0], 1, T0_H, 1, I2C_TIMEOUT);
 80021f8:	4f67      	ldr	r7, [pc, #412]	; (8002398 <get_TEMP+0x1ac>)
 80021fa:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 80023f0 <get_TEMP+0x204>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_H[0], 1, T0_H, 1, I2C_TIMEOUT);
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_L[0], 1, T0_L, 1, I2C_TIMEOUT);
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T1_H[0], 1, T1_H, 1, I2C_TIMEOUT);
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T1_L[0], 1, T1_L, 1, I2C_TIMEOUT);
 80021fe:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 80023f4 <get_TEMP+0x208>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T_OUT_H[0], 1, T_OUT_H, 1, I2C_TIMEOUT);
 8002202:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 80023f8 <get_TEMP+0x20c>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T_OUT_L[0], 1, T_OUT_L, 1, I2C_TIMEOUT);
 8002206:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 80023fc <get_TEMP+0x210>
{
 800220a:	b085      	sub	sp, #20
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_degC_x8[0], 1, T0_degC_x8, 1, I2C_TIMEOUT);
 800220c:	2401      	movs	r4, #1
 800220e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8002212:	9602      	str	r6, [sp, #8]
 8002214:	9401      	str	r4, [sp, #4]
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	21bf      	movs	r1, #191	; 0xbf
 800221a:	4623      	mov	r3, r4
 800221c:	4628      	mov	r0, r5
 800221e:	f7fe fc57 	bl	8000ad0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T1_degC_x8[0], 1, T1_degC_x8, 1, I2C_TIMEOUT);
 8002222:	4b5e      	ldr	r3, [pc, #376]	; (800239c <get_TEMP+0x1b0>)
 8002224:	781a      	ldrb	r2, [r3, #0]
 8002226:	4b5e      	ldr	r3, [pc, #376]	; (80023a0 <get_TEMP+0x1b4>)
 8002228:	9602      	str	r6, [sp, #8]
 800222a:	9401      	str	r4, [sp, #4]
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	21bf      	movs	r1, #191	; 0xbf
 8002230:	4623      	mov	r3, r4
 8002232:	4628      	mov	r0, r5
 8002234:	f7fe fc4c 	bl	8000ad0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_T1_msb[0], 1, T0_T1_msb, 1, I2C_TIMEOUT);
 8002238:	4b5a      	ldr	r3, [pc, #360]	; (80023a4 <get_TEMP+0x1b8>)
 800223a:	781a      	ldrb	r2, [r3, #0]
 800223c:	4b5a      	ldr	r3, [pc, #360]	; (80023a8 <get_TEMP+0x1bc>)
 800223e:	9602      	str	r6, [sp, #8]
 8002240:	9401      	str	r4, [sp, #4]
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	21bf      	movs	r1, #191	; 0xbf
 8002246:	4623      	mov	r3, r4
 8002248:	4628      	mov	r0, r5
 800224a:	f7fe fc41 	bl	8000ad0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_H[0], 1, T0_H, 1, I2C_TIMEOUT);
 800224e:	783a      	ldrb	r2, [r7, #0]
 8002250:	9602      	str	r6, [sp, #8]
 8002252:	9401      	str	r4, [sp, #4]
 8002254:	4623      	mov	r3, r4
 8002256:	f8cd 8000 	str.w	r8, [sp]
 800225a:	21bf      	movs	r1, #191	; 0xbf
 800225c:	4628      	mov	r0, r5
 800225e:	f7fe fc37 	bl	8000ad0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_H[0], 1, T0_H, 1, I2C_TIMEOUT);
 8002262:	783a      	ldrb	r2, [r7, #0]
 8002264:	9602      	str	r6, [sp, #8]
 8002266:	9401      	str	r4, [sp, #4]
 8002268:	4623      	mov	r3, r4
 800226a:	f8cd 8000 	str.w	r8, [sp]
 800226e:	21bf      	movs	r1, #191	; 0xbf
 8002270:	4628      	mov	r0, r5
 8002272:	f7fe fc2d 	bl	8000ad0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_L[0], 1, T0_L, 1, I2C_TIMEOUT);
 8002276:	4b4d      	ldr	r3, [pc, #308]	; (80023ac <get_TEMP+0x1c0>)
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T_OUT_L[0], 1, T_OUT_L, 1, I2C_TIMEOUT);
 8002278:	4f4d      	ldr	r7, [pc, #308]	; (80023b0 <get_TEMP+0x1c4>)
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_L[0], 1, T0_L, 1, I2C_TIMEOUT);
 800227a:	781a      	ldrb	r2, [r3, #0]
 800227c:	4b4d      	ldr	r3, [pc, #308]	; (80023b4 <get_TEMP+0x1c8>)
 800227e:	9602      	str	r6, [sp, #8]
 8002280:	9401      	str	r4, [sp, #4]
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	21bf      	movs	r1, #191	; 0xbf
 8002286:	4623      	mov	r3, r4
 8002288:	4628      	mov	r0, r5
 800228a:	f7fe fc21 	bl	8000ad0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T1_H[0], 1, T1_H, 1, I2C_TIMEOUT);
 800228e:	4b4a      	ldr	r3, [pc, #296]	; (80023b8 <get_TEMP+0x1cc>)
 8002290:	781a      	ldrb	r2, [r3, #0]
 8002292:	4b4a      	ldr	r3, [pc, #296]	; (80023bc <get_TEMP+0x1d0>)
 8002294:	9602      	str	r6, [sp, #8]
 8002296:	9401      	str	r4, [sp, #4]
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	21bf      	movs	r1, #191	; 0xbf
 800229c:	4623      	mov	r3, r4
 800229e:	4628      	mov	r0, r5
 80022a0:	f7fe fc16 	bl	8000ad0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T1_L[0], 1, T1_L, 1, I2C_TIMEOUT);
 80022a4:	4b46      	ldr	r3, [pc, #280]	; (80023c0 <get_TEMP+0x1d4>)
 80022a6:	21bf      	movs	r1, #191	; 0xbf
 80022a8:	781a      	ldrb	r2, [r3, #0]
 80022aa:	9602      	str	r6, [sp, #8]
 80022ac:	9401      	str	r4, [sp, #4]
 80022ae:	4623      	mov	r3, r4
 80022b0:	f8cd a000 	str.w	sl, [sp]
 80022b4:	4628      	mov	r0, r5
 80022b6:	f7fe fc0b 	bl	8000ad0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T_OUT_H[0], 1, T_OUT_H, 1, I2C_TIMEOUT);
 80022ba:	4b42      	ldr	r3, [pc, #264]	; (80023c4 <get_TEMP+0x1d8>)
 80022bc:	21bf      	movs	r1, #191	; 0xbf
 80022be:	781a      	ldrb	r2, [r3, #0]
 80022c0:	9602      	str	r6, [sp, #8]
 80022c2:	9401      	str	r4, [sp, #4]
 80022c4:	4623      	mov	r3, r4
 80022c6:	f8cd 9000 	str.w	r9, [sp]
 80022ca:	4628      	mov	r0, r5
 80022cc:	f7fe fc00 	bl	8000ad0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T_OUT_L[0], 1, T_OUT_L, 1, I2C_TIMEOUT);
 80022d0:	f89b 2000 	ldrb.w	r2, [fp]
 80022d4:	9602      	str	r6, [sp, #8]
 80022d6:	9401      	str	r4, [sp, #4]
 80022d8:	4623      	mov	r3, r4
 80022da:	9700      	str	r7, [sp, #0]
 80022dc:	21bf      	movs	r1, #191	; 0xbf
 80022de:	4628      	mov	r0, r5
 80022e0:	f7fe fbf6 	bl	8000ad0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T_OUT_L[0], 1, T_OUT_L, 1, I2C_TIMEOUT);
 80022e4:	f89b 2000 	ldrb.w	r2, [fp]
 80022e8:	9602      	str	r6, [sp, #8]
 80022ea:	9401      	str	r4, [sp, #4]
 80022ec:	4623      	mov	r3, r4
 80022ee:	9700      	str	r7, [sp, #0]
 80022f0:	21bf      	movs	r1, #191	; 0xbf
 80022f2:	4628      	mov	r0, r5
 80022f4:	f7fe fbec 	bl	8000ad0 <HAL_I2C_Mem_Read>

	//CONCATENATION
	T0_OUT[0]	= (T0_H[0]<<8) + T0_L[0];
 80022f8:	4a2e      	ldr	r2, [pc, #184]	; (80023b4 <get_TEMP+0x1c8>)
 80022fa:	f898 3000 	ldrb.w	r3, [r8]
 80022fe:	7811      	ldrb	r1, [r2, #0]
	T1_OUT[0]	= (T1_H[0]<<8) + T1_L[0];
 8002300:	f89a 0000 	ldrb.w	r0, [sl]
	T_OUT[0]	= (T_OUT_H[0]<<8) + T_OUT_L[0];
 8002304:	783a      	ldrb	r2, [r7, #0]
	est_negatif(T0_OUT[0]);
	est_negatif(T1_OUT[0]);
	est_negatif(T_OUT[0]);

	//CALCUL DES T0_degC ET T1_degC FINALES
	T0_msb[0]		= T0_T1_msb[0] & 0x3;
 8002306:	4c30      	ldr	r4, [pc, #192]	; (80023c8 <get_TEMP+0x1dc>)
	T0_OUT[0]	= (T0_H[0]<<8) + T0_L[0];
 8002308:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800230c:	4b2f      	ldr	r3, [pc, #188]	; (80023cc <get_TEMP+0x1e0>)
 800230e:	b289      	uxth	r1, r1
 8002310:	8019      	strh	r1, [r3, #0]
	T1_OUT[0]	= (T1_H[0]<<8) + T1_L[0];
 8002312:	4b2a      	ldr	r3, [pc, #168]	; (80023bc <get_TEMP+0x1d0>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800231a:	4b2d      	ldr	r3, [pc, #180]	; (80023d0 <get_TEMP+0x1e4>)
 800231c:	b280      	uxth	r0, r0
 800231e:	8018      	strh	r0, [r3, #0]
	T_OUT[0]	= (T_OUT_H[0]<<8) + T_OUT_L[0];
 8002320:	f899 3000 	ldrb.w	r3, [r9]
 8002324:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8002328:	4b2a      	ldr	r3, [pc, #168]	; (80023d4 <get_TEMP+0x1e8>)
 800232a:	b292      	uxth	r2, r2
 800232c:	801a      	strh	r2, [r3, #0]
	T0_msb[0]		= T0_T1_msb[0] & 0x3;
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <get_TEMP+0x1bc>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	f003 0603 	and.w	r6, r3, #3
	T1_msb[0]		= (T0_T1_msb[0] & 0xC)>>2;
 8002336:	f3c3 0581 	ubfx	r5, r3, #2, #2
 800233a:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <get_TEMP+0x1ec>)
	T0_msb[0]		= T0_T1_msb[0] & 0x3;
 800233c:	7026      	strb	r6, [r4, #0]
	T1_msb[0]		= (T0_T1_msb[0] & 0xC)>>2;
 800233e:	701d      	strb	r5, [r3, #0]
	T0_degC[0] 		= (T0_msb[0]<<8) + T0_degC_x8[0];
 8002340:	4b14      	ldr	r3, [pc, #80]	; (8002394 <get_TEMP+0x1a8>)
 8002342:	781c      	ldrb	r4, [r3, #0]
 8002344:	4b25      	ldr	r3, [pc, #148]	; (80023dc <get_TEMP+0x1f0>)
 8002346:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 800234a:	801c      	strh	r4, [r3, #0]
	T1_degC[0] 		= (T1_msb[0]<<8) + T1_degC_x8[0];
 800234c:	4b14      	ldr	r3, [pc, #80]	; (80023a0 <get_TEMP+0x1b4>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 8002354:	4d22      	ldr	r5, [pc, #136]	; (80023e0 <get_TEMP+0x1f4>)
 8002356:	802b      	strh	r3, [r5, #0]
	T0_degC_DIV8[0]	= T0_degC[0]>>3;
 8002358:	4d22      	ldr	r5, [pc, #136]	; (80023e4 <get_TEMP+0x1f8>)
 800235a:	08e4      	lsrs	r4, r4, #3
	T1_degC_DIV8[0]	= T1_degC[0]>>3;

	//CALCUL DE LA TEMPERATURE
	temp16[0] = ((int16_t)(T_OUT[0]-T0_OUT[0]))*10*((int16_t)(T1_degC_DIV8[0]-T0_degC_DIV8[0]))/((int16_t)(T1_OUT[0]-T0_OUT[0]))+(int16_t)(T0_degC_DIV8[0])*10;
 800235c:	1a52      	subs	r2, r2, r1
	T0_degC_DIV8[0]	= T0_degC[0]>>3;
 800235e:	802c      	strh	r4, [r5, #0]
	temp16[0] = ((int16_t)(T_OUT[0]-T0_OUT[0]))*10*((int16_t)(T1_degC_DIV8[0]-T0_degC_DIV8[0]))/((int16_t)(T1_OUT[0]-T0_OUT[0]))+(int16_t)(T0_degC_DIV8[0])*10;
 8002360:	b212      	sxth	r2, r2
	T1_degC_DIV8[0]	= T1_degC[0]>>3;
 8002362:	4d21      	ldr	r5, [pc, #132]	; (80023e8 <get_TEMP+0x1fc>)
 8002364:	08db      	lsrs	r3, r3, #3
	temp16[0] = ((int16_t)(T_OUT[0]-T0_OUT[0]))*10*((int16_t)(T1_degC_DIV8[0]-T0_degC_DIV8[0]))/((int16_t)(T1_OUT[0]-T0_OUT[0]))+(int16_t)(T0_degC_DIV8[0])*10;
 8002366:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	T1_degC_DIV8[0]	= T1_degC[0]>>3;
 800236a:	802b      	strh	r3, [r5, #0]
	temp16[0] = ((int16_t)(T_OUT[0]-T0_OUT[0]))*10*((int16_t)(T1_degC_DIV8[0]-T0_degC_DIV8[0]))/((int16_t)(T1_OUT[0]-T0_OUT[0]))+(int16_t)(T0_degC_DIV8[0])*10;
 800236c:	0052      	lsls	r2, r2, #1
 800236e:	1b1b      	subs	r3, r3, r4
 8002370:	4353      	muls	r3, r2
 8002372:	1a41      	subs	r1, r0, r1
 8002374:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002378:	4a1c      	ldr	r2, [pc, #112]	; (80023ec <get_TEMP+0x200>)
 800237a:	b209      	sxth	r1, r1
 800237c:	fb93 f3f1 	sdiv	r3, r3, r1
 8002380:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8002384:	8013      	strh	r3, [r2, #0]

}
 8002386:	b005      	add	sp, #20
 8002388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800238c:	20000011 	.word	0x20000011
 8002390:	2000003c 	.word	0x2000003c
 8002394:	200000a5 	.word	0x200000a5
 8002398:	2000000e 	.word	0x2000000e
 800239c:	20000014 	.word	0x20000014
 80023a0:	200000a4 	.word	0x200000a4
 80023a4:	20000010 	.word	0x20000010
 80023a8:	200000ae 	.word	0x200000ae
 80023ac:	2000000f 	.word	0x2000000f
 80023b0:	2000008e 	.word	0x2000008e
 80023b4:	2000008a 	.word	0x2000008a
 80023b8:	20000012 	.word	0x20000012
 80023bc:	2000008f 	.word	0x2000008f
 80023c0:	20000013 	.word	0x20000013
 80023c4:	20000015 	.word	0x20000015
 80023c8:	200000b2 	.word	0x200000b2
 80023cc:	200000ac 	.word	0x200000ac
 80023d0:	200000bc 	.word	0x200000bc
 80023d4:	200000c6 	.word	0x200000c6
 80023d8:	20000088 	.word	0x20000088
 80023dc:	200000a2 	.word	0x200000a2
 80023e0:	200000aa 	.word	0x200000aa
 80023e4:	200000c2 	.word	0x200000c2
 80023e8:	20000096 	.word	0x20000096
 80023ec:	200000b0 	.word	0x200000b0
 80023f0:	200000a7 	.word	0x200000a7
 80023f4:	200000a1 	.word	0x200000a1
 80023f8:	200000ba 	.word	0x200000ba
 80023fc:	20000016 	.word	0x20000016

08002400 <get_HUM>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void get_HUM(void)
{
 8002400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_HUM_H[0], 1, HUM_H, 1, I2C_TIMEOUT);
 8002404:	4b4a      	ldr	r3, [pc, #296]	; (8002530 <get_HUM+0x130>)
 8002406:	4d4b      	ldr	r5, [pc, #300]	; (8002534 <get_HUM+0x134>)
 8002408:	f8df 8170 	ldr.w	r8, [pc, #368]	; 800257c <get_HUM+0x17c>
 800240c:	781a      	ldrb	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_HUM_L[0], 1, HUM_L, 1, I2C_TIMEOUT);
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H0_rH_x2[0], 1, H0_rH_x2, 1, I2C_TIMEOUT);
 800240e:	4f4a      	ldr	r7, [pc, #296]	; (8002538 <get_HUM+0x138>)
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H1_rH_x2[0], 1, H0_rH_x2, 1, I2C_TIMEOUT);
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H0_T0_OUT_H[0], 1, H0_T0_OUT_H, 1, I2C_TIMEOUT);
 8002410:	f8df b16c 	ldr.w	fp, [pc, #364]	; 8002580 <get_HUM+0x180>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H0_T0_OUT_L[0], 1, H0_T0_OUT_L, 1, I2C_TIMEOUT);
 8002414:	f8df a16c 	ldr.w	sl, [pc, #364]	; 8002584 <get_HUM+0x184>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H1_T0_OUT_H[0], 1, H1_T0_OUT_H, 1, I2C_TIMEOUT);
 8002418:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8002588 <get_HUM+0x188>
{
 800241c:	b085      	sub	sp, #20
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_HUM_H[0], 1, HUM_H, 1, I2C_TIMEOUT);
 800241e:	2401      	movs	r4, #1
 8002420:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8002424:	9602      	str	r6, [sp, #8]
 8002426:	9401      	str	r4, [sp, #4]
 8002428:	4623      	mov	r3, r4
 800242a:	f8cd 8000 	str.w	r8, [sp]
 800242e:	21bf      	movs	r1, #191	; 0xbf
 8002430:	4628      	mov	r0, r5
 8002432:	f7fe fb4d 	bl	8000ad0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_HUM_L[0], 1, HUM_L, 1, I2C_TIMEOUT);
 8002436:	4b41      	ldr	r3, [pc, #260]	; (800253c <get_HUM+0x13c>)
 8002438:	781a      	ldrb	r2, [r3, #0]
 800243a:	4b41      	ldr	r3, [pc, #260]	; (8002540 <get_HUM+0x140>)
 800243c:	9602      	str	r6, [sp, #8]
 800243e:	9401      	str	r4, [sp, #4]
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	21bf      	movs	r1, #191	; 0xbf
 8002444:	4623      	mov	r3, r4
 8002446:	4628      	mov	r0, r5
 8002448:	f7fe fb42 	bl	8000ad0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H0_rH_x2[0], 1, H0_rH_x2, 1, I2C_TIMEOUT);
 800244c:	4b3d      	ldr	r3, [pc, #244]	; (8002544 <get_HUM+0x144>)
 800244e:	21bf      	movs	r1, #191	; 0xbf
 8002450:	781a      	ldrb	r2, [r3, #0]
 8002452:	9602      	str	r6, [sp, #8]
 8002454:	9401      	str	r4, [sp, #4]
 8002456:	4623      	mov	r3, r4
 8002458:	9700      	str	r7, [sp, #0]
 800245a:	4628      	mov	r0, r5
 800245c:	f7fe fb38 	bl	8000ad0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H1_rH_x2[0], 1, H0_rH_x2, 1, I2C_TIMEOUT);
 8002460:	4b39      	ldr	r3, [pc, #228]	; (8002548 <get_HUM+0x148>)
 8002462:	21bf      	movs	r1, #191	; 0xbf
 8002464:	781a      	ldrb	r2, [r3, #0]
 8002466:	9602      	str	r6, [sp, #8]
 8002468:	9401      	str	r4, [sp, #4]
 800246a:	4623      	mov	r3, r4
 800246c:	9700      	str	r7, [sp, #0]
 800246e:	4628      	mov	r0, r5
 8002470:	f7fe fb2e 	bl	8000ad0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H0_T0_OUT_H[0], 1, H0_T0_OUT_H, 1, I2C_TIMEOUT);
 8002474:	4b35      	ldr	r3, [pc, #212]	; (800254c <get_HUM+0x14c>)
 8002476:	21bf      	movs	r1, #191	; 0xbf
 8002478:	781a      	ldrb	r2, [r3, #0]
 800247a:	9602      	str	r6, [sp, #8]
 800247c:	9401      	str	r4, [sp, #4]
 800247e:	4623      	mov	r3, r4
 8002480:	f8cd b000 	str.w	fp, [sp]
 8002484:	4628      	mov	r0, r5
 8002486:	f7fe fb23 	bl	8000ad0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H0_T0_OUT_L[0], 1, H0_T0_OUT_L, 1, I2C_TIMEOUT);
 800248a:	4b31      	ldr	r3, [pc, #196]	; (8002550 <get_HUM+0x150>)
 800248c:	21bf      	movs	r1, #191	; 0xbf
 800248e:	781a      	ldrb	r2, [r3, #0]
 8002490:	9602      	str	r6, [sp, #8]
 8002492:	9401      	str	r4, [sp, #4]
 8002494:	4623      	mov	r3, r4
 8002496:	f8cd a000 	str.w	sl, [sp]
 800249a:	4628      	mov	r0, r5
 800249c:	f7fe fb18 	bl	8000ad0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H1_T0_OUT_H[0], 1, H1_T0_OUT_H, 1, I2C_TIMEOUT);
 80024a0:	4b2c      	ldr	r3, [pc, #176]	; (8002554 <get_HUM+0x154>)
 80024a2:	21bf      	movs	r1, #191	; 0xbf
 80024a4:	781a      	ldrb	r2, [r3, #0]
 80024a6:	9602      	str	r6, [sp, #8]
 80024a8:	9401      	str	r4, [sp, #4]
 80024aa:	4623      	mov	r3, r4
 80024ac:	f8cd 9000 	str.w	r9, [sp]
 80024b0:	4628      	mov	r0, r5
 80024b2:	f7fe fb0d 	bl	8000ad0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H1_T0_OUT_L[0], 1, H1_T0_OUT_L, 1, I2C_TIMEOUT);
 80024b6:	4b28      	ldr	r3, [pc, #160]	; (8002558 <get_HUM+0x158>)
 80024b8:	781a      	ldrb	r2, [r3, #0]
 80024ba:	9602      	str	r6, [sp, #8]
 80024bc:	4e27      	ldr	r6, [pc, #156]	; (800255c <get_HUM+0x15c>)
 80024be:	9401      	str	r4, [sp, #4]
 80024c0:	4623      	mov	r3, r4
 80024c2:	9600      	str	r6, [sp, #0]
 80024c4:	21bf      	movs	r1, #191	; 0xbf
 80024c6:	4628      	mov	r0, r5
 80024c8:	f7fe fb02 	bl	8000ad0 <HAL_I2C_Mem_Read>

	H0_rH[0]	= H0_rH_x2[0]>>1;
 80024cc:	7838      	ldrb	r0, [r7, #0]
 80024ce:	4b24      	ldr	r3, [pc, #144]	; (8002560 <get_HUM+0x160>)
	H1_rH[0]	= H1_rH_x2[0]>>1;
 80024d0:	4a24      	ldr	r2, [pc, #144]	; (8002564 <get_HUM+0x164>)

	H0[0]		= (H0_T0_OUT_H[0]<<8) + H0_T0_OUT_L[0];
	H1[0]		= (H1_T0_OUT_H[0]<<8) + H1_T0_OUT_L[0];
 80024d2:	f899 1000 	ldrb.w	r1, [r9]
	H_OUT[0]	= (HUM_H[0]<<8) + HUM_L[0];
 80024d6:	f898 5000 	ldrb.w	r5, [r8]
	H0_rH[0]	= H0_rH_x2[0]>>1;
 80024da:	40e0      	lsrs	r0, r4
 80024dc:	8018      	strh	r0, [r3, #0]
	H1_rH[0]	= H1_rH_x2[0]>>1;
 80024de:	4b22      	ldr	r3, [pc, #136]	; (8002568 <get_HUM+0x168>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	40e3      	lsrs	r3, r4
 80024e4:	8013      	strh	r3, [r2, #0]
	H0[0]		= (H0_T0_OUT_H[0]<<8) + H0_T0_OUT_L[0];
 80024e6:	f89b 4000 	ldrb.w	r4, [fp]
 80024ea:	f89a 2000 	ldrb.w	r2, [sl]
 80024ee:	eb02 2204 	add.w	r2, r2, r4, lsl #8
 80024f2:	b294      	uxth	r4, r2
 80024f4:	4a1d      	ldr	r2, [pc, #116]	; (800256c <get_HUM+0x16c>)
 80024f6:	8014      	strh	r4, [r2, #0]
	H1[0]		= (H1_T0_OUT_H[0]<<8) + H1_T0_OUT_L[0];
 80024f8:	7832      	ldrb	r2, [r6, #0]
 80024fa:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 80024fe:	491c      	ldr	r1, [pc, #112]	; (8002570 <get_HUM+0x170>)
 8002500:	b292      	uxth	r2, r2
 8002502:	800a      	strh	r2, [r1, #0]
	H_OUT[0]	= (HUM_H[0]<<8) + HUM_L[0];
 8002504:	490e      	ldr	r1, [pc, #56]	; (8002540 <get_HUM+0x140>)
 8002506:	7809      	ldrb	r1, [r1, #0]
 8002508:	eb01 2105 	add.w	r1, r1, r5, lsl #8
 800250c:	4d19      	ldr	r5, [pc, #100]	; (8002574 <get_HUM+0x174>)
 800250e:	b289      	uxth	r1, r1
 8002510:	8029      	strh	r1, [r5, #0]

	//CALCUL DE L'HUMIDITE
	hum16[0] = ((int16_t)(H1_rH[0]-H0_rH[0]))*((int16_t)(H_OUT[0]-H0[0]))/((int16_t)(H1[0]-H0[0]))+(int16_t)(H0_rH[0]);
 8002512:	1a1b      	subs	r3, r3, r0
 8002514:	1b09      	subs	r1, r1, r4
 8002516:	1b12      	subs	r2, r2, r4
 8002518:	fb13 f301 	smulbb	r3, r3, r1
 800251c:	b212      	sxth	r2, r2
 800251e:	fb93 f3f2 	sdiv	r3, r3, r2
 8002522:	4a15      	ldr	r2, [pc, #84]	; (8002578 <get_HUM+0x178>)
 8002524:	4403      	add	r3, r0
 8002526:	8013      	strh	r3, [r2, #0]
}
 8002528:	b005      	add	sp, #20
 800252a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800252e:	bf00      	nop
 8002530:	20000006 	.word	0x20000006
 8002534:	2000003c 	.word	0x2000003c
 8002538:	200000c4 	.word	0x200000c4
 800253c:	20000007 	.word	0x20000007
 8002540:	200000d0 	.word	0x200000d0
 8002544:	20000002 	.word	0x20000002
 8002548:	20000005 	.word	0x20000005
 800254c:	20000000 	.word	0x20000000
 8002550:	20000001 	.word	0x20000001
 8002554:	20000003 	.word	0x20000003
 8002558:	20000004 	.word	0x20000004
 800255c:	20000089 	.word	0x20000089
 8002560:	20000098 	.word	0x20000098
 8002564:	2000008c 	.word	0x2000008c
 8002568:	200000be 	.word	0x200000be
 800256c:	200000b8 	.word	0x200000b8
 8002570:	200000d2 	.word	0x200000d2
 8002574:	20000092 	.word	0x20000092
 8002578:	200000c8 	.word	0x200000c8
 800257c:	200000bf 	.word	0x200000bf
 8002580:	200000c0 	.word	0x200000c0
 8002584:	20000094 	.word	0x20000094
 8002588:	20000090 	.word	0x20000090

0800258c <get_PRES>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void get_PRES(void)
{
 800258c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_REF_P_XL[0], 1, REF_P_XL, 1, I2C_TIMEOUT);
 8002590:	4b37      	ldr	r3, [pc, #220]	; (8002670 <get_PRES+0xe4>)
 8002592:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80026a0 <get_PRES+0x114>
 8002596:	4d37      	ldr	r5, [pc, #220]	; (8002674 <get_PRES+0xe8>)
 8002598:	781a      	ldrb	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_REF_P_L[0], 1, REF_P_L, 1, I2C_TIMEOUT);
 800259a:	4e37      	ldr	r6, [pc, #220]	; (8002678 <get_PRES+0xec>)
	HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_REF_P_H[0], 1, REF_P_H, 1, I2C_TIMEOUT);
 800259c:	4f37      	ldr	r7, [pc, #220]	; (800267c <get_PRES+0xf0>)
	HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_PRES_OUT_XL[0], 1, PRES_OUT_XL, 1, I2C_TIMEOUT);
 800259e:	f8df 8104 	ldr.w	r8, [pc, #260]	; 80026a4 <get_PRES+0x118>
	HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_PRES_OUT_L[0], 1, PRES_OUT_L, 1, I2C_TIMEOUT);
 80025a2:	f8df b104 	ldr.w	fp, [pc, #260]	; 80026a8 <get_PRES+0x11c>
{
 80025a6:	b085      	sub	sp, #20
	HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_REF_P_XL[0], 1, REF_P_XL, 1, I2C_TIMEOUT);
 80025a8:	2401      	movs	r4, #1
 80025aa:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 80025ae:	f8cd a008 	str.w	sl, [sp, #8]
 80025b2:	4623      	mov	r3, r4
 80025b4:	9401      	str	r4, [sp, #4]
 80025b6:	9500      	str	r5, [sp, #0]
 80025b8:	21bb      	movs	r1, #187	; 0xbb
 80025ba:	4648      	mov	r0, r9
 80025bc:	f7fe fa88 	bl	8000ad0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_REF_P_L[0], 1, REF_P_L, 1, I2C_TIMEOUT);
 80025c0:	4b2f      	ldr	r3, [pc, #188]	; (8002680 <get_PRES+0xf4>)
 80025c2:	21bb      	movs	r1, #187	; 0xbb
 80025c4:	781a      	ldrb	r2, [r3, #0]
 80025c6:	f8cd a008 	str.w	sl, [sp, #8]
 80025ca:	4623      	mov	r3, r4
 80025cc:	9401      	str	r4, [sp, #4]
 80025ce:	9600      	str	r6, [sp, #0]
 80025d0:	4648      	mov	r0, r9
 80025d2:	f7fe fa7d 	bl	8000ad0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_REF_P_H[0], 1, REF_P_H, 1, I2C_TIMEOUT);
 80025d6:	4b2b      	ldr	r3, [pc, #172]	; (8002684 <get_PRES+0xf8>)
 80025d8:	21bb      	movs	r1, #187	; 0xbb
 80025da:	781a      	ldrb	r2, [r3, #0]
 80025dc:	f8cd a008 	str.w	sl, [sp, #8]
 80025e0:	4623      	mov	r3, r4
 80025e2:	9401      	str	r4, [sp, #4]
 80025e4:	9700      	str	r7, [sp, #0]
 80025e6:	4648      	mov	r0, r9
 80025e8:	f7fe fa72 	bl	8000ad0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_PRES_OUT_XL[0], 1, PRES_OUT_XL, 1, I2C_TIMEOUT);
 80025ec:	4b26      	ldr	r3, [pc, #152]	; (8002688 <get_PRES+0xfc>)
 80025ee:	21bb      	movs	r1, #187	; 0xbb
 80025f0:	781a      	ldrb	r2, [r3, #0]
 80025f2:	f8cd a008 	str.w	sl, [sp, #8]
 80025f6:	4623      	mov	r3, r4
 80025f8:	9401      	str	r4, [sp, #4]
 80025fa:	f8cd 8000 	str.w	r8, [sp]
 80025fe:	4648      	mov	r0, r9
 8002600:	f7fe fa66 	bl	8000ad0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_PRES_OUT_L[0], 1, PRES_OUT_L, 1, I2C_TIMEOUT);
 8002604:	4b21      	ldr	r3, [pc, #132]	; (800268c <get_PRES+0x100>)
 8002606:	21bb      	movs	r1, #187	; 0xbb
 8002608:	781a      	ldrb	r2, [r3, #0]
 800260a:	f8cd a008 	str.w	sl, [sp, #8]
 800260e:	4623      	mov	r3, r4
 8002610:	9401      	str	r4, [sp, #4]
 8002612:	f8cd b000 	str.w	fp, [sp]
 8002616:	4648      	mov	r0, r9
 8002618:	f7fe fa5a 	bl	8000ad0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_PRES_OUT_H[0], 1, PRES_OUT_H, 1, I2C_TIMEOUT);
 800261c:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <get_PRES+0x104>)
 800261e:	781a      	ldrb	r2, [r3, #0]
 8002620:	f8cd a008 	str.w	sl, [sp, #8]
 8002624:	f8df a084 	ldr.w	sl, [pc, #132]	; 80026ac <get_PRES+0x120>
 8002628:	9401      	str	r4, [sp, #4]
 800262a:	4623      	mov	r3, r4
 800262c:	f8cd a000 	str.w	sl, [sp]
 8002630:	21bb      	movs	r1, #187	; 0xbb
 8002632:	4648      	mov	r0, r9
 8002634:	f7fe fa4c 	bl	8000ad0 <HAL_I2C_Mem_Read>

	//CONCATENATION

	PRES_x4096[0]	= (PRES_OUT_H[0]<<16) + (PRES_OUT_L[0]<<8) + PRES_OUT_XL[0];
 8002638:	f89b 3000 	ldrb.w	r3, [fp]
 800263c:	f89a 2000 	ldrb.w	r2, [sl]
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8002646:	f898 2000 	ldrb.w	r2, [r8]
 800264a:	4413      	add	r3, r2
 800264c:	4a11      	ldr	r2, [pc, #68]	; (8002694 <get_PRES+0x108>)
 800264e:	6013      	str	r3, [r2, #0]
	REF_P_x4096[0]	= (REF_P_H[0]<<16) + (REF_P_L[0]<<8) + REF_P_XL[0];
 8002650:	7833      	ldrb	r3, [r6, #0]
 8002652:	783a      	ldrb	r2, [r7, #0]
 8002654:	021b      	lsls	r3, r3, #8
 8002656:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 800265a:	782a      	ldrb	r2, [r5, #0]
 800265c:	4413      	add	r3, r2
 800265e:	4a0e      	ldr	r2, [pc, #56]	; (8002698 <get_PRES+0x10c>)
 8002660:	6013      	str	r3, [r2, #0]

	//CALCUL DE LA PRESSION
	pres32[0] = (REF_P_x4096[0])>>12;
 8002662:	4a0e      	ldr	r2, [pc, #56]	; (800269c <get_PRES+0x110>)
 8002664:	0b1b      	lsrs	r3, r3, #12
 8002666:	6013      	str	r3, [r2, #0]
}
 8002668:	b005      	add	sp, #20
 800266a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800266e:	bf00      	nop
 8002670:	2000000d 	.word	0x2000000d
 8002674:	2000009a 	.word	0x2000009a
 8002678:	200000a8 	.word	0x200000a8
 800267c:	200000a0 	.word	0x200000a0
 8002680:	2000000c 	.word	0x2000000c
 8002684:	2000000b 	.word	0x2000000b
 8002688:	2000000a 	.word	0x2000000a
 800268c:	20000009 	.word	0x20000009
 8002690:	20000008 	.word	0x20000008
 8002694:	200000b4 	.word	0x200000b4
 8002698:	200000cc 	.word	0x200000cc
 800269c:	2000009c 	.word	0x2000009c
 80026a0:	2000003c 	.word	0x2000003c
 80026a4:	200000d1 	.word	0x200000d1
 80026a8:	200000a6 	.word	0x200000a6
 80026ac:	200000c5 	.word	0x200000c5

080026b0 <LORA_AT_APPEUI_SET>:

}



void LORA_AT_APPEUI_SET( const char* DATA,uint8_t DATA_SIZE,uint8_t RX_BUFF_SIZE){
 80026b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026b4:	4615      	mov	r5, r2
 80026b6:	b085      	sub	sp, #20
uint8_t comm[]={"AT+APPEUI="};
 80026b8:	4a29      	ldr	r2, [pc, #164]	; (8002760 <LORA_AT_APPEUI_SET+0xb0>)
	     strcpy(src2,  "\r\n");
	     strcpy(out,comm );
	     strcat(out, src1);
	     strcat(out, src2);
uint8_t in_set[RX_BUFF_SIZE];
    	while(HAL_UART_Transmit(&hlpuart1, (uint8_t *)out, sizeof(out)-1, HAL_TIMEOUT) != HAL_OK);
 80026ba:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8002768 <LORA_AT_APPEUI_SET+0xb8>
void LORA_AT_APPEUI_SET( const char* DATA,uint8_t DATA_SIZE,uint8_t RX_BUFF_SIZE){
 80026be:	4686      	mov	lr, r0
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	460c      	mov	r4, r1
uint8_t comm[]={"AT+APPEUI="};
 80026c4:	6810      	ldr	r0, [r2, #0]
 80026c6:	6851      	ldr	r1, [r2, #4]
 80026c8:	1d3b      	adds	r3, r7, #4
 80026ca:	c303      	stmia	r3!, {r0, r1}
 80026cc:	8911      	ldrh	r1, [r2, #8]
 80026ce:	7a92      	ldrb	r2, [r2, #10]
 80026d0:	709a      	strb	r2, [r3, #2]
 80026d2:	8019      	strh	r1, [r3, #0]
	   char src1[DATA_SIZE],src2[2], out[COMMAND_SIZE+DATA_SIZE+2];
 80026d4:	1de3      	adds	r3, r4, #7
 80026d6:	f023 0307 	bic.w	r3, r3, #7
 80026da:	ebad 0d03 	sub.w	sp, sp, r3
 80026de:	f104 0314 	add.w	r3, r4, #20
 80026e2:	f023 0307 	bic.w	r3, r3, #7
 80026e6:	46e8      	mov	r8, sp
	     strcpy(src1,  DATA);
 80026e8:	4671      	mov	r1, lr
	   char src1[DATA_SIZE],src2[2], out[COMMAND_SIZE+DATA_SIZE+2];
 80026ea:	ebad 0d03 	sub.w	sp, sp, r3
	     strcpy(src1,  DATA);
 80026ee:	4640      	mov	r0, r8
 80026f0:	f000 fab5 	bl	8002c5e <strcpy>
	     strcpy(src2,  "\r\n");
 80026f4:	491b      	ldr	r1, [pc, #108]	; (8002764 <LORA_AT_APPEUI_SET+0xb4>)
 80026f6:	4638      	mov	r0, r7
 80026f8:	f000 fab1 	bl	8002c5e <strcpy>
	     strcpy(out,comm );
 80026fc:	1d39      	adds	r1, r7, #4
 80026fe:	4668      	mov	r0, sp
 8002700:	f000 faad 	bl	8002c5e <strcpy>
	     strcat(out, src1);
 8002704:	4641      	mov	r1, r8
 8002706:	4668      	mov	r0, sp
 8002708:	f000 fa9a 	bl	8002c40 <strcat>
	     strcat(out, src2);
 800270c:	4668      	mov	r0, sp
 800270e:	4639      	mov	r1, r7
 8002710:	f000 fa96 	bl	8002c40 <strcat>
uint8_t in_set[RX_BUFF_SIZE];
 8002714:	1deb      	adds	r3, r5, #7
 8002716:	f023 0307 	bic.w	r3, r3, #7
	   char src1[DATA_SIZE],src2[2], out[COMMAND_SIZE+DATA_SIZE+2];
 800271a:	466e      	mov	r6, sp
uint8_t in_set[RX_BUFF_SIZE];
 800271c:	ebad 0d03 	sub.w	sp, sp, r3
 8002720:	46e8      	mov	r8, sp
    	while(HAL_UART_Transmit(&hlpuart1, (uint8_t *)out, sizeof(out)-1, HAL_TIMEOUT) != HAL_OK);
 8002722:	340c      	adds	r4, #12
 8002724:	2303      	movs	r3, #3
 8002726:	4622      	mov	r2, r4
 8002728:	4631      	mov	r1, r6
 800272a:	4648      	mov	r0, r9
 800272c:	f7ff fba1 	bl	8001e72 <HAL_UART_Transmit>
 8002730:	2800      	cmp	r0, #0
 8002732:	d1f7      	bne.n	8002724 <LORA_AT_APPEUI_SET+0x74>
     	UART_EndTxTransfer(&hlpuart1);
 8002734:	f7ff fd4e 	bl	80021d4 <UART_EndTxTransfer.constprop.1>

      	while(HAL_UART_Receive(&hlpuart1, (uint8_t *)in_set, RX_BUFF_SIZE, 100) != HAL_OK);
 8002738:	4c0b      	ldr	r4, [pc, #44]	; (8002768 <LORA_AT_APPEUI_SET+0xb8>)
 800273a:	b2ad      	uxth	r5, r5
 800273c:	2364      	movs	r3, #100	; 0x64
 800273e:	462a      	mov	r2, r5
 8002740:	4641      	mov	r1, r8
 8002742:	4620      	mov	r0, r4
 8002744:	f7ff fbec 	bl	8001f20 <HAL_UART_Receive>
 8002748:	2800      	cmp	r0, #0
 800274a:	d1f7      	bne.n	800273c <LORA_AT_APPEUI_SET+0x8c>
    	UART_EndRxTransfer(&hlpuart1);
 800274c:	f7ff fd30 	bl	80021b0 <UART_EndRxTransfer.constprop.0>


HAL_Delay(100);
 8002750:	2064      	movs	r0, #100	; 0x64
 8002752:	f7fd fefd 	bl	8000550 <HAL_Delay>

}
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800275e:	bf00      	nop
 8002760:	08002d23 	.word	0x08002d23
 8002764:	08002d19 	.word	0x08002d19
 8002768:	200000d4 	.word	0x200000d4

0800276c <LORA_AT_SEND>:
HAL_Delay(100);

}


void LORA_AT_SEND( const uint8_t* DATA,uint8_t DATA_SIZE,uint8_t RX_BUFF_SIZE){
 800276c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002770:	4614      	mov	r4, r2
 8002772:	b087      	sub	sp, #28
uint8_t comm[]={"AT+SEND="};
 8002774:	4a28      	ldr	r2, [pc, #160]	; (8002818 <LORA_AT_SEND+0xac>)
	     strcpy(out,comm );
	   //  strcat(out, src1);
	     strcat(out, src2);
	     strcat(out, src3);
uint8_t in_set[RX_BUFF_SIZE];
    	while(HAL_UART_Transmit(&hlpuart1, (uint8_t *)out, sizeof(out)-1, HAL_TIMEOUT) != HAL_OK);
 8002776:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002820 <LORA_AT_SEND+0xb4>
void LORA_AT_SEND( const uint8_t* DATA,uint8_t DATA_SIZE,uint8_t RX_BUFF_SIZE){
 800277a:	4606      	mov	r6, r0
 800277c:	af00      	add	r7, sp, #0
uint8_t comm[]={"AT+SEND="};
 800277e:	6810      	ldr	r0, [r2, #0]
void LORA_AT_SEND( const uint8_t* DATA,uint8_t DATA_SIZE,uint8_t RX_BUFF_SIZE){
 8002780:	460d      	mov	r5, r1
uint8_t comm[]={"AT+SEND="};
 8002782:	6851      	ldr	r1, [r2, #4]
 8002784:	7a12      	ldrb	r2, [r2, #8]
 8002786:	f107 030c 	add.w	r3, r7, #12
 800278a:	c303      	stmia	r3!, {r0, r1}
 800278c:	701a      	strb	r2, [r3, #0]
	   char src1[1],src2[4],src3[2], out[COMMAND_SIZE+DATA_SIZE+2];
 800278e:	f105 0312 	add.w	r3, r5, #18
 8002792:	f023 0307 	bic.w	r3, r3, #7
 8002796:	ebad 0d03 	sub.w	sp, sp, r3
	     strcpy(src2,DATA);
 800279a:	4631      	mov	r1, r6
 800279c:	f107 0008 	add.w	r0, r7, #8
 80027a0:	f000 fa5d 	bl	8002c5e <strcpy>
	     strcpy(src3,  "\r\n");
 80027a4:	491d      	ldr	r1, [pc, #116]	; (800281c <LORA_AT_SEND+0xb0>)
 80027a6:	1d38      	adds	r0, r7, #4
 80027a8:	f000 fa59 	bl	8002c5e <strcpy>
	     strcpy(out,comm );
 80027ac:	f107 010c 	add.w	r1, r7, #12
 80027b0:	4668      	mov	r0, sp
 80027b2:	f000 fa54 	bl	8002c5e <strcpy>
	     strcat(out, src2);
 80027b6:	f107 0108 	add.w	r1, r7, #8
 80027ba:	4668      	mov	r0, sp
 80027bc:	f000 fa40 	bl	8002c40 <strcat>
	     strcat(out, src3);
 80027c0:	4668      	mov	r0, sp
 80027c2:	1d39      	adds	r1, r7, #4
 80027c4:	f000 fa3c 	bl	8002c40 <strcat>
uint8_t in_set[RX_BUFF_SIZE];
 80027c8:	1de3      	adds	r3, r4, #7
 80027ca:	f023 0307 	bic.w	r3, r3, #7
	   char src1[1],src2[4],src3[2], out[COMMAND_SIZE+DATA_SIZE+2];
 80027ce:	46e8      	mov	r8, sp
uint8_t in_set[RX_BUFF_SIZE];
 80027d0:	ebad 0d03 	sub.w	sp, sp, r3
 80027d4:	466e      	mov	r6, sp
    	while(HAL_UART_Transmit(&hlpuart1, (uint8_t *)out, sizeof(out)-1, HAL_TIMEOUT) != HAL_OK);
 80027d6:	350a      	adds	r5, #10
 80027d8:	2303      	movs	r3, #3
 80027da:	462a      	mov	r2, r5
 80027dc:	4641      	mov	r1, r8
 80027de:	4648      	mov	r0, r9
 80027e0:	f7ff fb47 	bl	8001e72 <HAL_UART_Transmit>
 80027e4:	2800      	cmp	r0, #0
 80027e6:	d1f7      	bne.n	80027d8 <LORA_AT_SEND+0x6c>
     	UART_EndTxTransfer(&hlpuart1);
 80027e8:	f7ff fcf4 	bl	80021d4 <UART_EndTxTransfer.constprop.1>

      	while(HAL_UART_Receive(&hlpuart1, (uint8_t *)in_set, RX_BUFF_SIZE, 600000) != HAL_OK);
 80027ec:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8002824 <LORA_AT_SEND+0xb8>
 80027f0:	4d0b      	ldr	r5, [pc, #44]	; (8002820 <LORA_AT_SEND+0xb4>)
 80027f2:	b2a4      	uxth	r4, r4
 80027f4:	4643      	mov	r3, r8
 80027f6:	4622      	mov	r2, r4
 80027f8:	4631      	mov	r1, r6
 80027fa:	4628      	mov	r0, r5
 80027fc:	f7ff fb90 	bl	8001f20 <HAL_UART_Receive>
 8002800:	2800      	cmp	r0, #0
 8002802:	d1f7      	bne.n	80027f4 <LORA_AT_SEND+0x88>
    	UART_EndRxTransfer(&hlpuart1);
 8002804:	f7ff fcd4 	bl	80021b0 <UART_EndRxTransfer.constprop.0>


HAL_Delay(100);
 8002808:	2064      	movs	r0, #100	; 0x64
 800280a:	f7fd fea1 	bl	8000550 <HAL_Delay>

}
 800280e:	371c      	adds	r7, #28
 8002810:	46bd      	mov	sp, r7
 8002812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002816:	bf00      	nop
 8002818:	08002d2e 	.word	0x08002d2e
 800281c:	08002d19 	.word	0x08002d19
 8002820:	200000d4 	.word	0x200000d4
 8002824:	000927c0 	.word	0x000927c0

08002828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002828:	b510      	push	{r4, lr}
 800282a:	b0b8      	sub	sp, #224	; 0xe0
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800282c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002830:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002832:	2210      	movs	r2, #16
 8002834:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002836:	2201      	movs	r2, #1
 8002838:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800283a:	220a      	movs	r2, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800283c:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 800283e:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002840:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002842:	2207      	movs	r2, #7
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002844:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002846:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002848:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800284a:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800284c:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800284e:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002850:	f7fe fb1c 	bl	8000e8c <HAL_RCC_OscConfig>
 8002854:	b100      	cbz	r0, 8002858 <SystemClock_Config+0x30>
 8002856:	e7fe      	b.n	8002856 <SystemClock_Config+0x2e>

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002858:	220f      	movs	r2, #15
 800285a:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800285c:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800285e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002860:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002862:	2104      	movs	r1, #4
 8002864:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002866:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800286a:	f7fe fd35 	bl	80012d8 <HAL_RCC_ClockConfig>
 800286e:	b100      	cbz	r0, 8002872 <SystemClock_Config+0x4a>
 8002870:	e7fe      	b.n	8002870 <SystemClock_Config+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1;
 8002872:	2322      	movs	r3, #34	; 0x22
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002874:	9025      	str	r0, [sp, #148]	; 0x94
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002876:	9029      	str	r0, [sp, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002878:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1;
 800287a:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800287c:	f7fe fef4 	bl	8001668 <HAL_RCCEx_PeriphCLKConfig>
 8002880:	b100      	cbz	r0, 8002884 <SystemClock_Config+0x5c>
 8002882:	e7fe      	b.n	8002882 <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002884:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002888:	f7fe fa34 	bl	8000cf4 <HAL_PWREx_ControlVoltageScaling>
 800288c:	4604      	mov	r4, r0
 800288e:	b100      	cbz	r0, 8002892 <SystemClock_Config+0x6a>
 8002890:	e7fe      	b.n	8002890 <SystemClock_Config+0x68>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002892:	f7fe fdb3 	bl	80013fc <HAL_RCC_GetHCLKFreq>
 8002896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800289a:	fbb0 f0f3 	udiv	r0, r0, r3
 800289e:	f7fd feab 	bl	80005f8 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80028a2:	2004      	movs	r0, #4
 80028a4:	f7fd febe 	bl	8000624 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80028a8:	4622      	mov	r2, r4
 80028aa:	4621      	mov	r1, r4
 80028ac:	f04f 30ff 	mov.w	r0, #4294967295
 80028b0:	f7fd fe6e 	bl	8000590 <HAL_NVIC_SetPriority>
}
 80028b4:	b038      	add	sp, #224	; 0xe0
 80028b6:	bd10      	pop	{r4, pc}

080028b8 <main>:
{
 80028b8:	b507      	push	{r0, r1, r2, lr}
   hi2c1.Instance = I2C1;
 80028ba:	4c27      	ldr	r4, [pc, #156]	; (8002958 <main+0xa0>)
  HAL_Init();
 80028bc:	f7fd fe24 	bl	8000508 <HAL_Init>
  SystemClock_Config();
 80028c0:	f7ff ffb2 	bl	8002828 <SystemClock_Config>
  MX_GPIO_Init();
 80028c4:	f7ff fc00 	bl	80020c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80028c8:	f000 f8ec 	bl	8002aa4 <MX_USART2_UART_Init>
  MX_LPUART1_UART_Init();
 80028cc:	f000 f8ca 	bl	8002a64 <MX_LPUART1_UART_Init>
   hi2c1.Init.Timing = 0x10909CEC;
 80028d0:	4a22      	ldr	r2, [pc, #136]	; (800295c <main+0xa4>)
 80028d2:	4b23      	ldr	r3, [pc, #140]	; (8002960 <main+0xa8>)
   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028d4:	4620      	mov	r0, r4
   hi2c1.Init.Timing = 0x10909CEC;
 80028d6:	e884 000c 	stmia.w	r4, {r2, r3}
   hi2c1.Init.OwnAddress1 = 0;
 80028da:	2300      	movs	r3, #0
   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028dc:	2201      	movs	r2, #1
   hi2c1.Init.OwnAddress1 = 0;
 80028de:	60a3      	str	r3, [r4, #8]
   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028e0:	60e2      	str	r2, [r4, #12]
   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028e2:	6123      	str	r3, [r4, #16]
   hi2c1.Init.OwnAddress2 = 0;
 80028e4:	6163      	str	r3, [r4, #20]
   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028e6:	61a3      	str	r3, [r4, #24]
   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028e8:	61e3      	str	r3, [r4, #28]
   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028ea:	6223      	str	r3, [r4, #32]
   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028ec:	f7fe f89f 	bl	8000a2e <HAL_I2C_Init>
 80028f0:	4601      	mov	r1, r0
 80028f2:	b100      	cbz	r0, 80028f6 <main+0x3e>
 80028f4:	e7fe      	b.n	80028f4 <main+0x3c>
   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80028f6:	4620      	mov	r0, r4
 80028f8:	f7fe f9a8 	bl	8000c4c <HAL_I2CEx_ConfigAnalogFilter>
 80028fc:	4601      	mov	r1, r0
 80028fe:	b100      	cbz	r0, 8002902 <main+0x4a>
 8002900:	e7fe      	b.n	8002900 <main+0x48>
   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002902:	4620      	mov	r0, r4
 8002904:	f7fe f9c8 	bl	8000c98 <HAL_I2CEx_ConfigDigitalFilter>
 8002908:	b100      	cbz	r0, 800290c <main+0x54>
 800290a:	e7fe      	b.n	800290a <main+0x52>
 HAL_Delay(100);
 800290c:	2064      	movs	r0, #100	; 0x64
 800290e:	f7fd fe1f 	bl	8000550 <HAL_Delay>
LORA_AT_APPEUI_SET("900dcafe00000001",16,4);//001
 8002912:	2204      	movs	r2, #4
 8002914:	2110      	movs	r1, #16
 8002916:	4813      	ldr	r0, [pc, #76]	; (8002964 <main+0xac>)
 8002918:	f7ff feca 	bl	80026b0 <LORA_AT_APPEUI_SET>
MX_LPUART1_UART_Init();
 800291c:	f000 f8a2 	bl	8002a64 <MX_LPUART1_UART_Init>
		 get_TEMP();
 8002920:	f7ff fc64 	bl	80021ec <get_TEMP>
		 get_HUM();
 8002924:	f7ff fd6c 	bl	8002400 <get_HUM>
		 get_PRES();
 8002928:	f7ff fe30 	bl	800258c <get_PRES>


uint8_t * TEMP_CHAR(uint16_t val, uint8_t * tab){


	itoa(val,tab,16);
 800292c:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <main+0xb0>)
 800292e:	2210      	movs	r2, #16
 8002930:	a901      	add	r1, sp, #4
 8002932:	8818      	ldrh	r0, [r3, #0]
 8002934:	f000 f982 	bl	8002c3c <itoa>
LORA_AT_SEND(TEMP_CHAR(temp16[0],dest),4,5);
 8002938:	2104      	movs	r1, #4
 800293a:	2205      	movs	r2, #5
 800293c:	eb0d 0001 	add.w	r0, sp, r1
 8002940:	f7ff ff14 	bl	800276c <LORA_AT_SEND>
      		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002944:	2120      	movs	r1, #32
 8002946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800294a:	f7fd ff5e 	bl	800080a <HAL_GPIO_TogglePin>
      		HAL_Delay(100);
 800294e:	2064      	movs	r0, #100	; 0x64
 8002950:	f7fd fdfe 	bl	8000550 <HAL_Delay>
 8002954:	e7f6      	b.n	8002944 <main+0x8c>
 8002956:	bf00      	nop
 8002958:	2000003c 	.word	0x2000003c
 800295c:	40005400 	.word	0x40005400
 8002960:	10909cec 	.word	0x10909cec
 8002964:	08002d37 	.word	0x08002d37
 8002968:	200000b0 	.word	0x200000b0

0800296c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800296c:	e7fe      	b.n	800296c <_Error_Handler>
	...

08002970 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002970:	4b21      	ldr	r3, [pc, #132]	; (80029f8 <HAL_MspInit+0x88>)
{
 8002972:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002974:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002976:	f042 0201 	orr.w	r2, r2, #1
 800297a:	661a      	str	r2, [r3, #96]	; 0x60
 800297c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800297e:	f002 0201 	and.w	r2, r2, #1
 8002982:	9200      	str	r2, [sp, #0]
 8002984:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002986:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002988:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800298c:	659a      	str	r2, [r3, #88]	; 0x58
 800298e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002994:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002996:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8002998:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800299a:	f7fd fde7 	bl	800056c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800299e:	2200      	movs	r2, #0
 80029a0:	4611      	mov	r1, r2
 80029a2:	f06f 000b 	mvn.w	r0, #11
 80029a6:	f7fd fdf3 	bl	8000590 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80029aa:	2200      	movs	r2, #0
 80029ac:	4611      	mov	r1, r2
 80029ae:	f06f 000a 	mvn.w	r0, #10
 80029b2:	f7fd fded 	bl	8000590 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	4611      	mov	r1, r2
 80029ba:	f06f 0009 	mvn.w	r0, #9
 80029be:	f7fd fde7 	bl	8000590 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80029c2:	2200      	movs	r2, #0
 80029c4:	4611      	mov	r1, r2
 80029c6:	f06f 0004 	mvn.w	r0, #4
 80029ca:	f7fd fde1 	bl	8000590 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80029ce:	2200      	movs	r2, #0
 80029d0:	4611      	mov	r1, r2
 80029d2:	f06f 0003 	mvn.w	r0, #3
 80029d6:	f7fd fddb 	bl	8000590 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80029da:	2200      	movs	r2, #0
 80029dc:	4611      	mov	r1, r2
 80029de:	f06f 0001 	mvn.w	r0, #1
 80029e2:	f7fd fdd5 	bl	8000590 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80029e6:	2200      	movs	r2, #0
 80029e8:	4611      	mov	r1, r2
 80029ea:	f04f 30ff 	mov.w	r0, #4294967295
 80029ee:	f7fd fdcf 	bl	8000590 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029f2:	b003      	add	sp, #12
 80029f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80029f8:	40021000 	.word	0x40021000

080029fc <NMI_Handler>:
 80029fc:	4770      	bx	lr

080029fe <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80029fe:	e7fe      	b.n	80029fe <HardFault_Handler>

08002a00 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002a00:	e7fe      	b.n	8002a00 <MemManage_Handler>

08002a02 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002a02:	e7fe      	b.n	8002a02 <BusFault_Handler>

08002a04 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002a04:	e7fe      	b.n	8002a04 <UsageFault_Handler>

08002a06 <SVC_Handler>:
 8002a06:	4770      	bx	lr

08002a08 <DebugMon_Handler>:
 8002a08:	4770      	bx	lr

08002a0a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002a0a:	4770      	bx	lr

08002a0c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002a0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a0e:	f7fd fd91 	bl	8000534 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002a16:	f7fd be12 	b.w	800063e <HAL_SYSTICK_IRQHandler>
	...

08002a1c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a1c:	490f      	ldr	r1, [pc, #60]	; (8002a5c <SystemInit+0x40>)
 8002a1e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002a22:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002a2a:	4b0d      	ldr	r3, [pc, #52]	; (8002a60 <SystemInit+0x44>)
 8002a2c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002a2e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8002a30:	f042 0201 	orr.w	r2, r2, #1
 8002a34:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8002a36:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8002a3e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8002a42:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002a44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a48:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a50:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002a52:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002a58:	608b      	str	r3, [r1, #8]
 8002a5a:	4770      	bx	lr
 8002a5c:	e000ed00 	.word	0xe000ed00
 8002a60:	40021000 	.word	0x40021000

08002a64 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002a64:	b508      	push	{r3, lr}

  hlpuart1.Instance = LPUART1;
 8002a66:	480c      	ldr	r0, [pc, #48]	; (8002a98 <MX_LPUART1_UART_Init+0x34>)
  hlpuart1.Init.BaudRate = 115200;
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <MX_LPUART1_UART_Init+0x38>)
 8002a6a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8002a6e:	e880 4008 	stmia.w	r0, {r3, lr}
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002a72:	220c      	movs	r2, #12
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a74:	2300      	movs	r3, #0
 8002a76:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002a78:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002a7a:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002a7c:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a7e:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a80:	6203      	str	r3, [r0, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a82:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002a84:	f7ff faed 	bl	8002062 <HAL_UART_Init>
 8002a88:	b128      	cbz	r0, 8002a96 <MX_LPUART1_UART_Init+0x32>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002a8a:	2144      	movs	r1, #68	; 0x44
 8002a8c:	4804      	ldr	r0, [pc, #16]	; (8002aa0 <MX_LPUART1_UART_Init+0x3c>)
  }

}
 8002a8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002a92:	f7ff bf6b 	b.w	800296c <_Error_Handler>
 8002a96:	bd08      	pop	{r3, pc}
 8002a98:	200000d4 	.word	0x200000d4
 8002a9c:	40008000 	.word	0x40008000
 8002aa0:	08002d90 	.word	0x08002d90

08002aa4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002aa4:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8002aa6:	480d      	ldr	r0, [pc, #52]	; (8002adc <MX_USART2_UART_Init+0x38>)
  huart2.Init.BaudRate = 115200;
 8002aa8:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <MX_USART2_UART_Init+0x3c>)
 8002aaa:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8002aae:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ab2:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ab8:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002aba:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002abc:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002abe:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ac0:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ac2:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ac4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ac6:	f7ff facc 	bl	8002062 <HAL_UART_Init>
 8002aca:	b128      	cbz	r0, 8002ad8 <MX_USART2_UART_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002acc:	2159      	movs	r1, #89	; 0x59
 8002ace:	4805      	ldr	r0, [pc, #20]	; (8002ae4 <MX_USART2_UART_Init+0x40>)
  }

}
 8002ad0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002ad4:	f7ff bf4a 	b.w	800296c <_Error_Handler>
 8002ad8:	bd08      	pop	{r3, pc}
 8002ada:	bf00      	nop
 8002adc:	2000014c 	.word	0x2000014c
 8002ae0:	40004400 	.word	0x40004400
 8002ae4:	08002d90 	.word	0x08002d90

08002ae8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ae8:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==LPUART1)
 8002aea:	6803      	ldr	r3, [r0, #0]
 8002aec:	4a1c      	ldr	r2, [pc, #112]	; (8002b60 <HAL_UART_MspInit+0x78>)
 8002aee:	4293      	cmp	r3, r2
{
 8002af0:	b089      	sub	sp, #36	; 0x24
  if(uartHandle->Instance==LPUART1)
 8002af2:	d119      	bne.n	8002b28 <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002af4:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <HAL_UART_MspInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002af6:	481c      	ldr	r0, [pc, #112]	; (8002b68 <HAL_UART_MspInit+0x80>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002af8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002afa:	f042 0201 	orr.w	r2, r2, #1
 8002afe:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b08:	2202      	movs	r2, #2
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002b0a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0c:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2200      	movs	r2, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b14:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002b16:	2308      	movs	r3, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b18:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002b1a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b1c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b1e:	f7fd fd93 	bl	8000648 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002b22:	b009      	add	sp, #36	; 0x24
 8002b24:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(uartHandle->Instance==USART2)
 8002b28:	4a10      	ldr	r2, [pc, #64]	; (8002b6c <HAL_UART_MspInit+0x84>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d1f9      	bne.n	8002b22 <HAL_UART_MspInit+0x3a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <HAL_UART_MspInit+0x7c>)
 8002b30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b32:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002b36:	659a      	str	r2, [r3, #88]	; 0x58
 8002b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3e:	9302      	str	r3, [sp, #8]
 8002b40:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b42:	230c      	movs	r3, #12
 8002b44:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b46:	2302      	movs	r3, #2
 8002b48:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b52:	2307      	movs	r3, #7
 8002b54:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b56:	a903      	add	r1, sp, #12
 8002b58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b5c:	e7df      	b.n	8002b1e <HAL_UART_MspInit+0x36>
 8002b5e:	bf00      	nop
 8002b60:	40008000 	.word	0x40008000
 8002b64:	40021000 	.word	0x40021000
 8002b68:	48000800 	.word	0x48000800
 8002b6c:	40004400 	.word	0x40004400

08002b70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002b70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ba8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002b74:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002b76:	e003      	b.n	8002b80 <LoopCopyDataInit>

08002b78 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002b78:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002b7a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002b7c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002b7e:	3104      	adds	r1, #4

08002b80 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002b80:	480b      	ldr	r0, [pc, #44]	; (8002bb0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002b82:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002b84:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002b86:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002b88:	d3f6      	bcc.n	8002b78 <CopyDataInit>
	ldr	r2, =_sbss
 8002b8a:	4a0b      	ldr	r2, [pc, #44]	; (8002bb8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002b8c:	e002      	b.n	8002b94 <LoopFillZerobss>

08002b8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002b8e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002b90:	f842 3b04 	str.w	r3, [r2], #4

08002b94 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002b94:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <LoopForever+0x16>)
	cmp	r2, r3
 8002b96:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002b98:	d3f9      	bcc.n	8002b8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b9a:	f7ff ff3f 	bl	8002a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b9e:	f000 f811 	bl	8002bc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ba2:	f7ff fe89 	bl	80028b8 <main>

08002ba6 <LoopForever>:

LoopForever:
    b LoopForever
 8002ba6:	e7fe      	b.n	8002ba6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ba8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002bac:	08002dd4 	.word	0x08002dd4
	ldr	r0, =_sdata
 8002bb0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002bb4:	2000001c 	.word	0x2000001c
	ldr	r2, =_sbss
 8002bb8:	2000001c 	.word	0x2000001c
	ldr	r3, = _ebss
 8002bbc:	200001c4 	.word	0x200001c4

08002bc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002bc0:	e7fe      	b.n	8002bc0 <ADC1_2_IRQHandler>
	...

08002bc4 <__libc_init_array>:
 8002bc4:	b570      	push	{r4, r5, r6, lr}
 8002bc6:	4e0d      	ldr	r6, [pc, #52]	; (8002bfc <__libc_init_array+0x38>)
 8002bc8:	4c0d      	ldr	r4, [pc, #52]	; (8002c00 <__libc_init_array+0x3c>)
 8002bca:	1ba4      	subs	r4, r4, r6
 8002bcc:	10a4      	asrs	r4, r4, #2
 8002bce:	2500      	movs	r5, #0
 8002bd0:	42a5      	cmp	r5, r4
 8002bd2:	d109      	bne.n	8002be8 <__libc_init_array+0x24>
 8002bd4:	4e0b      	ldr	r6, [pc, #44]	; (8002c04 <__libc_init_array+0x40>)
 8002bd6:	4c0c      	ldr	r4, [pc, #48]	; (8002c08 <__libc_init_array+0x44>)
 8002bd8:	f000 f88a 	bl	8002cf0 <_init>
 8002bdc:	1ba4      	subs	r4, r4, r6
 8002bde:	10a4      	asrs	r4, r4, #2
 8002be0:	2500      	movs	r5, #0
 8002be2:	42a5      	cmp	r5, r4
 8002be4:	d105      	bne.n	8002bf2 <__libc_init_array+0x2e>
 8002be6:	bd70      	pop	{r4, r5, r6, pc}
 8002be8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bec:	4798      	blx	r3
 8002bee:	3501      	adds	r5, #1
 8002bf0:	e7ee      	b.n	8002bd0 <__libc_init_array+0xc>
 8002bf2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bf6:	4798      	blx	r3
 8002bf8:	3501      	adds	r5, #1
 8002bfa:	e7f2      	b.n	8002be2 <__libc_init_array+0x1e>
 8002bfc:	08002dcc 	.word	0x08002dcc
 8002c00:	08002dcc 	.word	0x08002dcc
 8002c04:	08002dcc 	.word	0x08002dcc
 8002c08:	08002dd0 	.word	0x08002dd0

08002c0c <__itoa>:
 8002c0c:	1e93      	subs	r3, r2, #2
 8002c0e:	2b22      	cmp	r3, #34	; 0x22
 8002c10:	b510      	push	{r4, lr}
 8002c12:	460c      	mov	r4, r1
 8002c14:	d904      	bls.n	8002c20 <__itoa+0x14>
 8002c16:	2300      	movs	r3, #0
 8002c18:	700b      	strb	r3, [r1, #0]
 8002c1a:	461c      	mov	r4, r3
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	bd10      	pop	{r4, pc}
 8002c20:	2a0a      	cmp	r2, #10
 8002c22:	d109      	bne.n	8002c38 <__itoa+0x2c>
 8002c24:	2800      	cmp	r0, #0
 8002c26:	da07      	bge.n	8002c38 <__itoa+0x2c>
 8002c28:	232d      	movs	r3, #45	; 0x2d
 8002c2a:	700b      	strb	r3, [r1, #0]
 8002c2c:	4240      	negs	r0, r0
 8002c2e:	2101      	movs	r1, #1
 8002c30:	4421      	add	r1, r4
 8002c32:	f000 f81d 	bl	8002c70 <__utoa>
 8002c36:	e7f1      	b.n	8002c1c <__itoa+0x10>
 8002c38:	2100      	movs	r1, #0
 8002c3a:	e7f9      	b.n	8002c30 <__itoa+0x24>

08002c3c <itoa>:
 8002c3c:	f7ff bfe6 	b.w	8002c0c <__itoa>

08002c40 <strcat>:
 8002c40:	b510      	push	{r4, lr}
 8002c42:	4602      	mov	r2, r0
 8002c44:	4613      	mov	r3, r2
 8002c46:	3201      	adds	r2, #1
 8002c48:	781c      	ldrb	r4, [r3, #0]
 8002c4a:	2c00      	cmp	r4, #0
 8002c4c:	d1fa      	bne.n	8002c44 <strcat+0x4>
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c54:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002c58:	2a00      	cmp	r2, #0
 8002c5a:	d1f9      	bne.n	8002c50 <strcat+0x10>
 8002c5c:	bd10      	pop	{r4, pc}

08002c5e <strcpy>:
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c64:	f803 2b01 	strb.w	r2, [r3], #1
 8002c68:	2a00      	cmp	r2, #0
 8002c6a:	d1f9      	bne.n	8002c60 <strcpy+0x2>
 8002c6c:	4770      	bx	lr
	...

08002c70 <__utoa>:
 8002c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c72:	4c1e      	ldr	r4, [pc, #120]	; (8002cec <__utoa+0x7c>)
 8002c74:	b08b      	sub	sp, #44	; 0x2c
 8002c76:	4603      	mov	r3, r0
 8002c78:	460f      	mov	r7, r1
 8002c7a:	466d      	mov	r5, sp
 8002c7c:	f104 0e20 	add.w	lr, r4, #32
 8002c80:	6820      	ldr	r0, [r4, #0]
 8002c82:	6861      	ldr	r1, [r4, #4]
 8002c84:	462e      	mov	r6, r5
 8002c86:	c603      	stmia	r6!, {r0, r1}
 8002c88:	3408      	adds	r4, #8
 8002c8a:	4574      	cmp	r4, lr
 8002c8c:	4635      	mov	r5, r6
 8002c8e:	d1f7      	bne.n	8002c80 <__utoa+0x10>
 8002c90:	7921      	ldrb	r1, [r4, #4]
 8002c92:	7131      	strb	r1, [r6, #4]
 8002c94:	1e91      	subs	r1, r2, #2
 8002c96:	6820      	ldr	r0, [r4, #0]
 8002c98:	6030      	str	r0, [r6, #0]
 8002c9a:	2922      	cmp	r1, #34	; 0x22
 8002c9c:	f04f 0100 	mov.w	r1, #0
 8002ca0:	d904      	bls.n	8002cac <__utoa+0x3c>
 8002ca2:	7039      	strb	r1, [r7, #0]
 8002ca4:	460f      	mov	r7, r1
 8002ca6:	4638      	mov	r0, r7
 8002ca8:	b00b      	add	sp, #44	; 0x2c
 8002caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cac:	1e78      	subs	r0, r7, #1
 8002cae:	4606      	mov	r6, r0
 8002cb0:	fbb3 f5f2 	udiv	r5, r3, r2
 8002cb4:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8002cb8:	fb02 3315 	mls	r3, r2, r5, r3
 8002cbc:	4473      	add	r3, lr
 8002cbe:	1c4c      	adds	r4, r1, #1
 8002cc0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002cc4:	f806 3f01 	strb.w	r3, [r6, #1]!
 8002cc8:	462b      	mov	r3, r5
 8002cca:	b965      	cbnz	r5, 8002ce6 <__utoa+0x76>
 8002ccc:	553d      	strb	r5, [r7, r4]
 8002cce:	187a      	adds	r2, r7, r1
 8002cd0:	1acc      	subs	r4, r1, r3
 8002cd2:	42a3      	cmp	r3, r4
 8002cd4:	dae7      	bge.n	8002ca6 <__utoa+0x36>
 8002cd6:	7844      	ldrb	r4, [r0, #1]
 8002cd8:	7815      	ldrb	r5, [r2, #0]
 8002cda:	f800 5f01 	strb.w	r5, [r0, #1]!
 8002cde:	3301      	adds	r3, #1
 8002ce0:	f802 4901 	strb.w	r4, [r2], #-1
 8002ce4:	e7f4      	b.n	8002cd0 <__utoa+0x60>
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	e7e2      	b.n	8002cb0 <__utoa+0x40>
 8002cea:	bf00      	nop
 8002cec:	08002d9f 	.word	0x08002d9f

08002cf0 <_init>:
 8002cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf2:	bf00      	nop
 8002cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cf6:	bc08      	pop	{r3}
 8002cf8:	469e      	mov	lr, r3
 8002cfa:	4770      	bx	lr

08002cfc <_fini>:
 8002cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfe:	bf00      	nop
 8002d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d02:	bc08      	pop	{r3}
 8002d04:	469e      	mov	lr, r3
 8002d06:	4770      	bx	lr
