
I2C_SENSORS_L476RG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002850  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080029d8  080029d8  000129d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002a34  08002a34  00012a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002a3c  08002a3c  00012a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002a40  08002a40  00012a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000024  20000000  08002a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000130  20000024  08002a68  00020024  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000154  08002a68  00020154  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e228  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001d0d  00000000  00000000  0002e27c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007936  00000000  00000000  0002ff89  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000009d8  00000000  00000000  000378c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b40  00000000  00000000  00038298  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005568  00000000  00000000  00038dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003b3f  00000000  00000000  0003e340  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00041e7f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001c30  00000000  00000000  00041efc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080029c0 	.word	0x080029c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	080029c0 	.word	0x080029c0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80004da:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <HAL_InitTick+0x2c>)
{
 80004dc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80004de:	6818      	ldr	r0, [r3, #0]
 80004e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80004e8:	f000 f878 	bl	80005dc <HAL_SYSTICK_Config>
 80004ec:	4604      	mov	r4, r0
 80004ee:	b938      	cbnz	r0, 8000500 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80004f0:	4602      	mov	r2, r0
 80004f2:	4629      	mov	r1, r5
 80004f4:	f04f 30ff 	mov.w	r0, #4294967295
 80004f8:	f000 f83c 	bl	8000574 <HAL_NVIC_SetPriority>
 80004fc:	4620      	mov	r0, r4
 80004fe:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8000500:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000502:	bd38      	pop	{r3, r4, r5, pc}
 8000504:	20000020 	.word	0x20000020

08000508 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000508:	4a09      	ldr	r2, [pc, #36]	; (8000530 <HAL_Init+0x28>)
 800050a:	6813      	ldr	r3, [r2, #0]
 800050c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8000510:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000512:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000514:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000516:	f000 f81b 	bl	8000550 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800051a:	2000      	movs	r0, #0
 800051c:	f7ff ffdc 	bl	80004d8 <HAL_InitTick>
 8000520:	4604      	mov	r4, r0
 8000522:	b918      	cbnz	r0, 800052c <HAL_Init+0x24>
    HAL_MspInit();
 8000524:	f002 f948 	bl	80027b8 <HAL_MspInit>
}
 8000528:	4620      	mov	r0, r4
 800052a:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800052c:	2401      	movs	r4, #1
 800052e:	e7fb      	b.n	8000528 <HAL_Init+0x20>
 8000530:	40022000 	.word	0x40022000

08000534 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000534:	4a02      	ldr	r2, [pc, #8]	; (8000540 <HAL_IncTick+0xc>)
 8000536:	6813      	ldr	r3, [r2, #0]
 8000538:	3301      	adds	r3, #1
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000040 	.word	0x20000040

08000544 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000544:	4b01      	ldr	r3, [pc, #4]	; (800054c <HAL_GetTick+0x8>)
 8000546:	6818      	ldr	r0, [r3, #0]
}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000040 	.word	0x20000040

08000550 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000550:	4a07      	ldr	r2, [pc, #28]	; (8000570 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000552:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000554:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000558:	041b      	lsls	r3, r3, #16
 800055a:	0c1b      	lsrs	r3, r3, #16
 800055c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000560:	0200      	lsls	r0, r0, #8
 8000562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000566:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800056a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800056c:	60d3      	str	r3, [r2, #12]
 800056e:	4770      	bx	lr
 8000570:	e000ed00 	.word	0xe000ed00

08000574 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000574:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	68dc      	ldr	r4, [r3, #12]
 800057a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800057e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000582:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000584:	2b04      	cmp	r3, #4
 8000586:	bf28      	it	cs
 8000588:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800058a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800058c:	f04f 0501 	mov.w	r5, #1
 8000590:	fa05 f303 	lsl.w	r3, r5, r3
 8000594:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000598:	bf8c      	ite	hi
 800059a:	3c03      	subhi	r4, #3
 800059c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800059e:	4019      	ands	r1, r3
 80005a0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005a2:	fa05 f404 	lsl.w	r4, r5, r4
 80005a6:	3c01      	subs	r4, #1
 80005a8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005aa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ac:	ea42 0201 	orr.w	r2, r2, r1
 80005b0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b4:	bfaf      	iteee	ge
 80005b6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ba:	f000 000f 	andlt.w	r0, r0, #15
 80005be:	4b06      	ldrlt	r3, [pc, #24]	; (80005d8 <HAL_NVIC_SetPriority+0x64>)
 80005c0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c2:	bfa5      	ittet	ge
 80005c4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005c8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ca:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005cc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	bf00      	nop
 80005d4:	e000ed00 	.word	0xe000ed00
 80005d8:	e000ed14 	.word	0xe000ed14

080005dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005dc:	3801      	subs	r0, #1
 80005de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005e2:	d20a      	bcs.n	80005fa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e6:	4a07      	ldr	r2, [pc, #28]	; (8000604 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005e8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ea:	21f0      	movs	r1, #240	; 0xf0
 80005ec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005f0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005f2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005f4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80005fa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000e010 	.word	0xe000e010
 8000604:	e000ed00 	.word	0xe000ed00

08000608 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800060c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800060e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000610:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80007bc <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000614:	4c67      	ldr	r4, [pc, #412]	; (80007b4 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000616:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8000618:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800061a:	9a01      	ldr	r2, [sp, #4]
 800061c:	40da      	lsrs	r2, r3
 800061e:	d102      	bne.n	8000626 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8000620:	b005      	add	sp, #20
 8000622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000626:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8000628:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800062a:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 800062c:	ea12 0e06 	ands.w	lr, r2, r6
 8000630:	f000 80b1 	beq.w	8000796 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000634:	684a      	ldr	r2, [r1, #4]
 8000636:	f022 0710 	bic.w	r7, r2, #16
 800063a:	2f02      	cmp	r7, #2
 800063c:	d116      	bne.n	800066c <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 800063e:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8000642:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000646:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800064a:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800064e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000652:	f04f 0c0f 	mov.w	ip, #15
 8000656:	fa0c fc0a 	lsl.w	ip, ip, sl
 800065a:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800065e:	690d      	ldr	r5, [r1, #16]
 8000660:	fa05 f50a 	lsl.w	r5, r5, sl
 8000664:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8000668:	f8c9 5020 	str.w	r5, [r9, #32]
 800066c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000670:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000672:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000676:	fa05 f50c 	lsl.w	r5, r5, ip
 800067a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800067c:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000680:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000684:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000688:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800068a:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800068e:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000690:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000694:	d811      	bhi.n	80006ba <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000696:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000698:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 800069c:	68cf      	ldr	r7, [r1, #12]
 800069e:	fa07 f70c 	lsl.w	r7, r7, ip
 80006a2:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 80006a6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80006a8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80006aa:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80006ae:	f3c2 1700 	ubfx	r7, r2, #4, #1
 80006b2:	409f      	lsls	r7, r3
 80006b4:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 80006b8:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80006ba:	f1ba 0f03 	cmp.w	sl, #3
 80006be:	d107      	bne.n	80006d0 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 80006c0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80006c2:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80006c6:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 80006ca:	409f      	lsls	r7, r3
 80006cc:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 80006ce:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 80006d0:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80006d2:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80006d4:	688e      	ldr	r6, [r1, #8]
 80006d6:	fa06 f60c 	lsl.w	r6, r6, ip
 80006da:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 80006dc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006de:	00d5      	lsls	r5, r2, #3
 80006e0:	d559      	bpl.n	8000796 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e2:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80006e6:	f045 0501 	orr.w	r5, r5, #1
 80006ea:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 80006ee:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80006f2:	f023 0603 	bic.w	r6, r3, #3
 80006f6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80006fa:	f005 0501 	and.w	r5, r5, #1
 80006fe:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000702:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000704:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000708:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 800070a:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800070c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000710:	270f      	movs	r7, #15
 8000712:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000716:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800071a:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800071e:	d03c      	beq.n	800079a <HAL_GPIO_Init+0x192>
 8000720:	4d25      	ldr	r5, [pc, #148]	; (80007b8 <HAL_GPIO_Init+0x1b0>)
 8000722:	42a8      	cmp	r0, r5
 8000724:	d03b      	beq.n	800079e <HAL_GPIO_Init+0x196>
 8000726:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800072a:	42a8      	cmp	r0, r5
 800072c:	d039      	beq.n	80007a2 <HAL_GPIO_Init+0x19a>
 800072e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000732:	42a8      	cmp	r0, r5
 8000734:	d037      	beq.n	80007a6 <HAL_GPIO_Init+0x19e>
 8000736:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800073a:	42a8      	cmp	r0, r5
 800073c:	d035      	beq.n	80007aa <HAL_GPIO_Init+0x1a2>
 800073e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000742:	42a8      	cmp	r0, r5
 8000744:	d033      	beq.n	80007ae <HAL_GPIO_Init+0x1a6>
 8000746:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800074a:	42a8      	cmp	r0, r5
 800074c:	bf14      	ite	ne
 800074e:	2507      	movne	r5, #7
 8000750:	2506      	moveq	r5, #6
 8000752:	fa05 f50c 	lsl.w	r5, r5, ip
 8000756:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000758:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 800075a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800075c:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000760:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8000762:	bf54      	ite	pl
 8000764:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000766:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 800076a:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 800076c:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800076e:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8000770:	bf54      	ite	pl
 8000772:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000774:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8000778:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 800077a:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800077c:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 800077e:	bf54      	ite	pl
 8000780:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000782:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8000786:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8000788:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800078a:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 800078c:	bf54      	ite	pl
 800078e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000790:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8000794:	60e5      	str	r5, [r4, #12]
    position++;
 8000796:	3301      	adds	r3, #1
 8000798:	e73f      	b.n	800061a <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800079a:	2500      	movs	r5, #0
 800079c:	e7d9      	b.n	8000752 <HAL_GPIO_Init+0x14a>
 800079e:	2501      	movs	r5, #1
 80007a0:	e7d7      	b.n	8000752 <HAL_GPIO_Init+0x14a>
 80007a2:	2502      	movs	r5, #2
 80007a4:	e7d5      	b.n	8000752 <HAL_GPIO_Init+0x14a>
 80007a6:	2503      	movs	r5, #3
 80007a8:	e7d3      	b.n	8000752 <HAL_GPIO_Init+0x14a>
 80007aa:	2504      	movs	r5, #4
 80007ac:	e7d1      	b.n	8000752 <HAL_GPIO_Init+0x14a>
 80007ae:	2505      	movs	r5, #5
 80007b0:	e7cf      	b.n	8000752 <HAL_GPIO_Init+0x14a>
 80007b2:	bf00      	nop
 80007b4:	40010400 	.word	0x40010400
 80007b8:	48000400 	.word	0x48000400
 80007bc:	40021000 	.word	0x40021000

080007c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007c0:	b10a      	cbz	r2, 80007c6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007c2:	6181      	str	r1, [r0, #24]
 80007c4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007c6:	6281      	str	r1, [r0, #40]	; 0x28
 80007c8:	4770      	bx	lr

080007ca <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80007ca:	6803      	ldr	r3, [r0, #0]
 80007cc:	699a      	ldr	r2, [r3, #24]
 80007ce:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 80007d0:	bf44      	itt	mi
 80007d2:	2200      	movmi	r2, #0
 80007d4:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80007d6:	699a      	ldr	r2, [r3, #24]
 80007d8:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80007da:	bf5e      	ittt	pl
 80007dc:	699a      	ldrpl	r2, [r3, #24]
 80007de:	f042 0201 	orrpl.w	r2, r2, #1
 80007e2:	619a      	strpl	r2, [r3, #24]
 80007e4:	4770      	bx	lr

080007e6 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80007e6:	b530      	push	{r4, r5, lr}
 80007e8:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80007ea:	6805      	ldr	r5, [r0, #0]
 80007ec:	4323      	orrs	r3, r4
 80007ee:	0d64      	lsrs	r4, r4, #21
 80007f0:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80007f4:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80007f8:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80007fc:	6868      	ldr	r0, [r5, #4]
 80007fe:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000802:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8000806:	4319      	orrs	r1, r3
 8000808:	f044 0403 	orr.w	r4, r4, #3
 800080c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000810:	ea20 0404 	bic.w	r4, r0, r4
 8000814:	4321      	orrs	r1, r4
 8000816:	6069      	str	r1, [r5, #4]
 8000818:	bd30      	pop	{r4, r5, pc}

0800081a <I2C_WaitOnFlagUntilTimeout>:
{
 800081a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800081e:	9f06      	ldr	r7, [sp, #24]
 8000820:	4604      	mov	r4, r0
 8000822:	4688      	mov	r8, r1
 8000824:	4616      	mov	r6, r2
 8000826:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000828:	6822      	ldr	r2, [r4, #0]
 800082a:	6993      	ldr	r3, [r2, #24]
 800082c:	ea38 0303 	bics.w	r3, r8, r3
 8000830:	bf0c      	ite	eq
 8000832:	2301      	moveq	r3, #1
 8000834:	2300      	movne	r3, #0
 8000836:	42b3      	cmp	r3, r6
 8000838:	d002      	beq.n	8000840 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800083a:	2000      	movs	r0, #0
}
 800083c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000840:	1c6b      	adds	r3, r5, #1
 8000842:	d0f2      	beq.n	800082a <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000844:	f7ff fe7e 	bl	8000544 <HAL_GetTick>
 8000848:	1bc0      	subs	r0, r0, r7
 800084a:	4285      	cmp	r5, r0
 800084c:	d301      	bcc.n	8000852 <I2C_WaitOnFlagUntilTimeout+0x38>
 800084e:	2d00      	cmp	r5, #0
 8000850:	d1ea      	bne.n	8000828 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000852:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000854:	f043 0320 	orr.w	r3, r3, #32
 8000858:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800085a:	2320      	movs	r3, #32
 800085c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000860:	2300      	movs	r3, #0
 8000862:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000866:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800086a:	2001      	movs	r0, #1
 800086c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000870 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000870:	6803      	ldr	r3, [r0, #0]
{
 8000872:	b570      	push	{r4, r5, r6, lr}
 8000874:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000876:	6998      	ldr	r0, [r3, #24]
 8000878:	f010 0010 	ands.w	r0, r0, #16
{
 800087c:	460d      	mov	r5, r1
 800087e:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000880:	d116      	bne.n	80008b0 <I2C_IsAcknowledgeFailed+0x40>
 8000882:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000884:	1c69      	adds	r1, r5, #1
 8000886:	d014      	beq.n	80008b2 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000888:	f7ff fe5c 	bl	8000544 <HAL_GetTick>
 800088c:	1b80      	subs	r0, r0, r6
 800088e:	4285      	cmp	r5, r0
 8000890:	d300      	bcc.n	8000894 <I2C_IsAcknowledgeFailed+0x24>
 8000892:	b96d      	cbnz	r5, 80008b0 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000894:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000896:	f043 0320 	orr.w	r3, r3, #32
 800089a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800089c:	2320      	movs	r3, #32
 800089e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80008a8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80008ac:	2001      	movs	r0, #1
}
 80008ae:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80008b0:	6823      	ldr	r3, [r4, #0]
 80008b2:	6999      	ldr	r1, [r3, #24]
 80008b4:	068a      	lsls	r2, r1, #26
 80008b6:	d5e5      	bpl.n	8000884 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80008b8:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80008ba:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80008bc:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80008be:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80008c0:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80008c2:	f7ff ff82 	bl	80007ca <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80008c6:	6822      	ldr	r2, [r4, #0]
 80008c8:	6853      	ldr	r3, [r2, #4]
 80008ca:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80008ce:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80008d2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80008d6:	f023 0301 	bic.w	r3, r3, #1
 80008da:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80008dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80008de:	f043 0304 	orr.w	r3, r3, #4
 80008e2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80008e4:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 80008e8:	e7db      	b.n	80008a2 <I2C_IsAcknowledgeFailed+0x32>

080008ea <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80008ea:	b570      	push	{r4, r5, r6, lr}
 80008ec:	4604      	mov	r4, r0
 80008ee:	460d      	mov	r5, r1
 80008f0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80008f2:	6823      	ldr	r3, [r4, #0]
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	079b      	lsls	r3, r3, #30
 80008f8:	d501      	bpl.n	80008fe <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80008fa:	2000      	movs	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80008fe:	4632      	mov	r2, r6
 8000900:	4629      	mov	r1, r5
 8000902:	4620      	mov	r0, r4
 8000904:	f7ff ffb4 	bl	8000870 <I2C_IsAcknowledgeFailed>
 8000908:	b9a0      	cbnz	r0, 8000934 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800090a:	1c6a      	adds	r2, r5, #1
 800090c:	d0f1      	beq.n	80008f2 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800090e:	f7ff fe19 	bl	8000544 <HAL_GetTick>
 8000912:	1b80      	subs	r0, r0, r6
 8000914:	4285      	cmp	r5, r0
 8000916:	d301      	bcc.n	800091c <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8000918:	2d00      	cmp	r5, #0
 800091a:	d1ea      	bne.n	80008f2 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800091c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800091e:	f043 0320 	orr.w	r3, r3, #32
 8000922:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000924:	2320      	movs	r3, #32
 8000926:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800092a:	2300      	movs	r3, #0
 800092c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000930:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000934:	2001      	movs	r0, #1
}
 8000936:	bd70      	pop	{r4, r5, r6, pc}

08000938 <I2C_RequestMemoryWrite>:
{
 8000938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800093a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800093c:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <I2C_RequestMemoryWrite+0x60>)
 8000940:	9300      	str	r3, [sp, #0]
{
 8000942:	4605      	mov	r5, r0
 8000944:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000946:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800094a:	b2fa      	uxtb	r2, r7
 800094c:	f7ff ff4b 	bl	80007e6 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000950:	4632      	mov	r2, r6
 8000952:	9908      	ldr	r1, [sp, #32]
 8000954:	4628      	mov	r0, r5
 8000956:	f7ff ffc8 	bl	80008ea <I2C_WaitOnTXISFlagUntilTimeout>
 800095a:	b110      	cbz	r0, 8000962 <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 800095c:	2001      	movs	r0, #1
}
 800095e:	b003      	add	sp, #12
 8000960:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000962:	2f01      	cmp	r7, #1
 8000964:	682b      	ldr	r3, [r5, #0]
 8000966:	d10c      	bne.n	8000982 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000968:	b2e4      	uxtb	r4, r4
 800096a:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800096c:	9b08      	ldr	r3, [sp, #32]
 800096e:	9600      	str	r6, [sp, #0]
 8000970:	2200      	movs	r2, #0
 8000972:	2180      	movs	r1, #128	; 0x80
 8000974:	4628      	mov	r0, r5
 8000976:	f7ff ff50 	bl	800081a <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 800097a:	3000      	adds	r0, #0
 800097c:	bf18      	it	ne
 800097e:	2001      	movne	r0, #1
 8000980:	e7ed      	b.n	800095e <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000982:	0a22      	lsrs	r2, r4, #8
 8000984:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000986:	9908      	ldr	r1, [sp, #32]
 8000988:	4632      	mov	r2, r6
 800098a:	4628      	mov	r0, r5
 800098c:	f7ff ffad 	bl	80008ea <I2C_WaitOnTXISFlagUntilTimeout>
 8000990:	2800      	cmp	r0, #0
 8000992:	d1e3      	bne.n	800095c <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000994:	682b      	ldr	r3, [r5, #0]
 8000996:	e7e7      	b.n	8000968 <I2C_RequestMemoryWrite+0x30>
 8000998:	80002000 	.word	0x80002000

0800099c <I2C_RequestMemoryRead>:
{
 800099c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800099e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80009a0:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <I2C_RequestMemoryRead+0x60>)
 80009a4:	9300      	str	r3, [sp, #0]
{
 80009a6:	4605      	mov	r5, r0
 80009a8:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80009aa:	2300      	movs	r3, #0
 80009ac:	b2fa      	uxtb	r2, r7
 80009ae:	f7ff ff1a 	bl	80007e6 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80009b2:	4632      	mov	r2, r6
 80009b4:	9908      	ldr	r1, [sp, #32]
 80009b6:	4628      	mov	r0, r5
 80009b8:	f7ff ff97 	bl	80008ea <I2C_WaitOnTXISFlagUntilTimeout>
 80009bc:	b110      	cbz	r0, 80009c4 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 80009be:	2001      	movs	r0, #1
}
 80009c0:	b003      	add	sp, #12
 80009c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80009c4:	2f01      	cmp	r7, #1
 80009c6:	682b      	ldr	r3, [r5, #0]
 80009c8:	d10c      	bne.n	80009e4 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80009ca:	b2e4      	uxtb	r4, r4
 80009cc:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80009ce:	9b08      	ldr	r3, [sp, #32]
 80009d0:	9600      	str	r6, [sp, #0]
 80009d2:	2200      	movs	r2, #0
 80009d4:	2140      	movs	r1, #64	; 0x40
 80009d6:	4628      	mov	r0, r5
 80009d8:	f7ff ff1f 	bl	800081a <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 80009dc:	3000      	adds	r0, #0
 80009de:	bf18      	it	ne
 80009e0:	2001      	movne	r0, #1
 80009e2:	e7ed      	b.n	80009c0 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80009e4:	0a22      	lsrs	r2, r4, #8
 80009e6:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80009e8:	9908      	ldr	r1, [sp, #32]
 80009ea:	4632      	mov	r2, r6
 80009ec:	4628      	mov	r0, r5
 80009ee:	f7ff ff7c 	bl	80008ea <I2C_WaitOnTXISFlagUntilTimeout>
 80009f2:	2800      	cmp	r0, #0
 80009f4:	d1e3      	bne.n	80009be <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80009f6:	682b      	ldr	r3, [r5, #0]
 80009f8:	e7e7      	b.n	80009ca <I2C_RequestMemoryRead+0x2e>
 80009fa:	bf00      	nop
 80009fc:	80002000 	.word	0x80002000

08000a00 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000a00:	b570      	push	{r4, r5, r6, lr}
 8000a02:	4604      	mov	r4, r0
 8000a04:	460d      	mov	r5, r1
 8000a06:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000a08:	6823      	ldr	r3, [r4, #0]
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	069b      	lsls	r3, r3, #26
 8000a0e:	d501      	bpl.n	8000a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8000a10:	2000      	movs	r0, #0
 8000a12:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000a14:	4632      	mov	r2, r6
 8000a16:	4629      	mov	r1, r5
 8000a18:	4620      	mov	r0, r4
 8000a1a:	f7ff ff29 	bl	8000870 <I2C_IsAcknowledgeFailed>
 8000a1e:	b990      	cbnz	r0, 8000a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000a20:	f7ff fd90 	bl	8000544 <HAL_GetTick>
 8000a24:	1b80      	subs	r0, r0, r6
 8000a26:	4285      	cmp	r5, r0
 8000a28:	d301      	bcc.n	8000a2e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8000a2a:	2d00      	cmp	r5, #0
 8000a2c:	d1ec      	bne.n	8000a08 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000a2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a30:	f043 0320 	orr.w	r3, r3, #32
 8000a34:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000a36:	2320      	movs	r3, #32
 8000a38:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000a42:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000a46:	2001      	movs	r0, #1
}
 8000a48:	bd70      	pop	{r4, r5, r6, pc}

08000a4a <HAL_I2C_Init>:
{
 8000a4a:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8000a4c:	4604      	mov	r4, r0
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	d04a      	beq.n	8000ae8 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000a52:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000a56:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000a5a:	b91b      	cbnz	r3, 8000a64 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000a5c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000a60:	f001 fec2 	bl	80027e8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000a64:	2324      	movs	r3, #36	; 0x24
 8000a66:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000a6a:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a6c:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	f022 0201 	bic.w	r2, r2, #1
 8000a74:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000a76:	6862      	ldr	r2, [r4, #4]
 8000a78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000a7c:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000a7e:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a80:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000a82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a8a:	d124      	bne.n	8000ad6 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000a8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a90:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000a92:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000a94:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000a96:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000a9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a9e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000aa0:	68da      	ldr	r2, [r3, #12]
 8000aa2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000aa6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000aa8:	6922      	ldr	r2, [r4, #16]
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	69a1      	ldr	r1, [r4, #24]
 8000aae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000ab2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ab4:	6a21      	ldr	r1, [r4, #32]
 8000ab6:	69e2      	ldr	r2, [r4, #28]
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	f042 0201 	orr.w	r2, r2, #1
 8000ac2:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ac4:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000ac6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ac8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000aca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ace:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ad0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8000ad4:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000ad6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ada:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000adc:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000ade:	bf04      	itt	eq
 8000ae0:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000ae4:	605a      	streq	r2, [r3, #4]
 8000ae6:	e7d4      	b.n	8000a92 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000ae8:	2001      	movs	r0, #1
}
 8000aea:	bd10      	pop	{r4, pc}

08000aec <HAL_I2C_Mem_Write>:
{
 8000aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000af0:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000af2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8000af6:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000af8:	2b20      	cmp	r3, #32
{
 8000afa:	4604      	mov	r4, r0
 8000afc:	460f      	mov	r7, r1
 8000afe:	9203      	str	r2, [sp, #12]
 8000b00:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8000b04:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000b08:	f040 80a5 	bne.w	8000c56 <HAL_I2C_Mem_Write+0x16a>
    if ((pData == NULL) || (Size == 0U))
 8000b0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000b0e:	b113      	cbz	r3, 8000b16 <HAL_I2C_Mem_Write+0x2a>
 8000b10:	f1ba 0f00 	cmp.w	sl, #0
 8000b14:	d106      	bne.n	8000b24 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000b16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b1a:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000b1c:	2001      	movs	r0, #1
}
 8000b1e:	b005      	add	sp, #20
 8000b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8000b24:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	f000 8094 	beq.w	8000c56 <HAL_I2C_Mem_Write+0x16a>
 8000b2e:	2501      	movs	r5, #1
 8000b30:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000b34:	f7ff fd06 	bl	8000544 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000b38:	2319      	movs	r3, #25
 8000b3a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8000b3c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000b3e:	462a      	mov	r2, r5
 8000b40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b44:	4620      	mov	r0, r4
 8000b46:	f7ff fe68 	bl	800081a <I2C_WaitOnFlagUntilTimeout>
 8000b4a:	4681      	mov	r9, r0
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	d1e5      	bne.n	8000b1c <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000b50:	2321      	movs	r3, #33	; 0x21
 8000b52:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000b56:	2340      	movs	r3, #64	; 0x40
 8000b58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8000b5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b5e:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000b60:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8000b62:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000b64:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000b68:	9601      	str	r6, [sp, #4]
 8000b6a:	f8cd 8000 	str.w	r8, [sp]
 8000b6e:	465b      	mov	r3, fp
 8000b70:	9a03      	ldr	r2, [sp, #12]
 8000b72:	4639      	mov	r1, r7
 8000b74:	4620      	mov	r0, r4
 8000b76:	f7ff fedf 	bl	8000938 <I2C_RequestMemoryWrite>
 8000b7a:	b110      	cbz	r0, 8000b82 <HAL_I2C_Mem_Write+0x96>
      __HAL_UNLOCK(hi2c);
 8000b7c:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8000b80:	e7cc      	b.n	8000b1c <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000b82:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	2bff      	cmp	r3, #255	; 0xff
 8000b88:	d955      	bls.n	8000c36 <HAL_I2C_Mem_Write+0x14a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000b8a:	22ff      	movs	r2, #255	; 0xff
 8000b8c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000b8e:	9000      	str	r0, [sp, #0]
 8000b90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000b94:	4639      	mov	r1, r7
 8000b96:	4620      	mov	r0, r4
 8000b98:	f7ff fe25 	bl	80007e6 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b9c:	4632      	mov	r2, r6
 8000b9e:	4641      	mov	r1, r8
 8000ba0:	4620      	mov	r0, r4
 8000ba2:	f7ff fea2 	bl	80008ea <I2C_WaitOnTXISFlagUntilTimeout>
 8000ba6:	2800      	cmp	r0, #0
 8000ba8:	d1b8      	bne.n	8000b1c <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000baa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000bac:	6822      	ldr	r2, [r4, #0]
 8000bae:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000bb2:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000bb4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000bb6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000bb8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000bc0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000bc2:	3a01      	subs	r2, #1
 8000bc4:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000bc6:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000bc8:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000bca:	b1ab      	cbz	r3, 8000bf8 <HAL_I2C_Mem_Write+0x10c>
 8000bcc:	b9a2      	cbnz	r2, 8000bf8 <HAL_I2C_Mem_Write+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000bce:	9600      	str	r6, [sp, #0]
 8000bd0:	4643      	mov	r3, r8
 8000bd2:	2180      	movs	r1, #128	; 0x80
 8000bd4:	4620      	mov	r0, r4
 8000bd6:	f7ff fe20 	bl	800081a <I2C_WaitOnFlagUntilTimeout>
 8000bda:	2800      	cmp	r0, #0
 8000bdc:	d19e      	bne.n	8000b1c <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000bde:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	2bff      	cmp	r3, #255	; 0xff
 8000be4:	d92f      	bls.n	8000c46 <HAL_I2C_Mem_Write+0x15a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000be6:	22ff      	movs	r2, #255	; 0xff
 8000be8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000bea:	9000      	str	r0, [sp, #0]
 8000bec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000bf0:	4639      	mov	r1, r7
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	f7ff fdf7 	bl	80007e6 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8000bf8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d1cd      	bne.n	8000b9c <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c00:	4632      	mov	r2, r6
 8000c02:	4641      	mov	r1, r8
 8000c04:	4620      	mov	r0, r4
 8000c06:	f7ff fefb 	bl	8000a00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000c0a:	2800      	cmp	r0, #0
 8000c0c:	d186      	bne.n	8000b1c <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c0e:	6823      	ldr	r3, [r4, #0]
 8000c10:	2120      	movs	r1, #32
 8000c12:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000c1a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000c1e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000c22:	f022 0201 	bic.w	r2, r2, #1
 8000c26:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000c28:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000c2c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000c30:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000c34:	e773      	b.n	8000b1e <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8000c36:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000c38:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000c3a:	b292      	uxth	r2, r2
 8000c3c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000c3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	e7a6      	b.n	8000b94 <HAL_I2C_Mem_Write+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8000c46:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000c48:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000c4a:	b292      	uxth	r2, r2
 8000c4c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000c4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	e7cc      	b.n	8000bf0 <HAL_I2C_Mem_Write+0x104>
    return HAL_BUSY;
 8000c56:	2002      	movs	r0, #2
 8000c58:	e761      	b.n	8000b1e <HAL_I2C_Mem_Write+0x32>
	...

08000c5c <HAL_I2C_Mem_Read>:
{
 8000c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c60:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c62:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8000c66:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c68:	2b20      	cmp	r3, #32
{
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	460f      	mov	r7, r1
 8000c6e:	9203      	str	r2, [sp, #12]
 8000c70:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8000c74:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c78:	f040 80a9 	bne.w	8000dce <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8000c7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000c7e:	b113      	cbz	r3, 8000c86 <HAL_I2C_Mem_Read+0x2a>
 8000c80:	f1ba 0f00 	cmp.w	sl, #0
 8000c84:	d106      	bne.n	8000c94 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c8a:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000c8c:	2001      	movs	r0, #1
}
 8000c8e:	b005      	add	sp, #20
 8000c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8000c94:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	f000 8098 	beq.w	8000dce <HAL_I2C_Mem_Read+0x172>
 8000c9e:	2501      	movs	r5, #1
 8000ca0:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000ca4:	f7ff fc4e 	bl	8000544 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000ca8:	2319      	movs	r3, #25
 8000caa:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8000cac:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000cae:	462a      	mov	r2, r5
 8000cb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f7ff fdb0 	bl	800081a <I2C_WaitOnFlagUntilTimeout>
 8000cba:	4681      	mov	r9, r0
 8000cbc:	2800      	cmp	r0, #0
 8000cbe:	d1e5      	bne.n	8000c8c <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000cc0:	2322      	movs	r3, #34	; 0x22
 8000cc2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000cc6:	2340      	movs	r3, #64	; 0x40
 8000cc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8000ccc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cce:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000cd0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8000cd2:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000cd4:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000cd8:	9601      	str	r6, [sp, #4]
 8000cda:	f8cd 8000 	str.w	r8, [sp]
 8000cde:	465b      	mov	r3, fp
 8000ce0:	9a03      	ldr	r2, [sp, #12]
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f7ff fe59 	bl	800099c <I2C_RequestMemoryRead>
 8000cea:	b110      	cbz	r0, 8000cf2 <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 8000cec:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8000cf0:	e7cc      	b.n	8000c8c <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000cf2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	2bff      	cmp	r3, #255	; 0xff
 8000cf8:	4b36      	ldr	r3, [pc, #216]	; (8000dd4 <HAL_I2C_Mem_Read+0x178>)
 8000cfa:	d958      	bls.n	8000dae <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000cfc:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000cfe:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000d00:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000d02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000d06:	4639      	mov	r1, r7
 8000d08:	4620      	mov	r0, r4
 8000d0a:	f7ff fd6c 	bl	80007e6 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8000d0e:	9600      	str	r6, [sp, #0]
 8000d10:	4643      	mov	r3, r8
 8000d12:	2200      	movs	r2, #0
 8000d14:	2104      	movs	r1, #4
 8000d16:	4620      	mov	r0, r4
 8000d18:	f7ff fd7f 	bl	800081a <I2C_WaitOnFlagUntilTimeout>
 8000d1c:	2800      	cmp	r0, #0
 8000d1e:	d1b5      	bne.n	8000c8c <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000d20:	6822      	ldr	r2, [r4, #0]
 8000d22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000d26:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8000d28:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8000d2a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000d30:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000d32:	3b01      	subs	r3, #1
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000d38:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000d3a:	3a01      	subs	r2, #1
 8000d3c:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000d3e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000d40:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000d42:	b1ab      	cbz	r3, 8000d70 <HAL_I2C_Mem_Read+0x114>
 8000d44:	b9a2      	cbnz	r2, 8000d70 <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000d46:	9600      	str	r6, [sp, #0]
 8000d48:	4643      	mov	r3, r8
 8000d4a:	2180      	movs	r1, #128	; 0x80
 8000d4c:	4620      	mov	r0, r4
 8000d4e:	f7ff fd64 	bl	800081a <I2C_WaitOnFlagUntilTimeout>
 8000d52:	2800      	cmp	r0, #0
 8000d54:	d19a      	bne.n	8000c8c <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d56:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	2bff      	cmp	r3, #255	; 0xff
 8000d5c:	d92f      	bls.n	8000dbe <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000d5e:	22ff      	movs	r2, #255	; 0xff
 8000d60:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000d62:	9000      	str	r0, [sp, #0]
 8000d64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000d68:	4639      	mov	r1, r7
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	f7ff fd3b 	bl	80007e6 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8000d70:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d1ca      	bne.n	8000d0e <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d78:	4632      	mov	r2, r6
 8000d7a:	4641      	mov	r1, r8
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	f7ff fe3f 	bl	8000a00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d182      	bne.n	8000c8c <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000d86:	6823      	ldr	r3, [r4, #0]
 8000d88:	2120      	movs	r1, #32
 8000d8a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000d92:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000d96:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000d9a:	f022 0201 	bic.w	r2, r2, #1
 8000d9e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000da0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000da4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000da8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000dac:	e76f      	b.n	8000c8e <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8000dae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000db0:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000db2:	b292      	uxth	r2, r2
 8000db4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000db6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	e7a3      	b.n	8000d06 <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8000dbe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000dc0:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000dc2:	b292      	uxth	r2, r2
 8000dc4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000dc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	e7cc      	b.n	8000d68 <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 8000dce:	2002      	movs	r0, #2
 8000dd0:	e75d      	b.n	8000c8e <HAL_I2C_Mem_Read+0x32>
 8000dd2:	bf00      	nop
 8000dd4:	80002400 	.word	0x80002400

08000dd8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dd8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	2a20      	cmp	r2, #32
{
 8000de0:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000de2:	d11d      	bne.n	8000e20 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000de4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d019      	beq.n	8000e20 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000dec:	2324      	movs	r3, #36	; 0x24
 8000dee:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000df2:	6803      	ldr	r3, [r0, #0]
 8000df4:	681c      	ldr	r4, [r3, #0]
 8000df6:	f024 0401 	bic.w	r4, r4, #1
 8000dfa:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000dfc:	681c      	ldr	r4, [r3, #0]
 8000dfe:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8000e02:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000e04:	681c      	ldr	r4, [r3, #0]
 8000e06:	4321      	orrs	r1, r4
 8000e08:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000e0a:	6819      	ldr	r1, [r3, #0]
 8000e0c:	f041 0101 	orr.w	r1, r1, #1
 8000e10:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e12:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000e14:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000e18:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000e20:	2002      	movs	r0, #2
  }
}
 8000e22:	bd10      	pop	{r4, pc}

08000e24 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000e24:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e26:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8000e2a:	b2e4      	uxtb	r4, r4
 8000e2c:	2c20      	cmp	r4, #32
 8000e2e:	d11c      	bne.n	8000e6a <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e30:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d018      	beq.n	8000e6a <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e38:	2324      	movs	r3, #36	; 0x24
 8000e3a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000e3e:	6803      	ldr	r3, [r0, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	f022 0201 	bic.w	r2, r2, #1
 8000e46:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000e48:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000e4a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000e4e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000e52:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	f042 0201 	orr.w	r2, r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e5c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000e5e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000e62:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000e66:	4618      	mov	r0, r3
 8000e68:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000e6a:	2002      	movs	r0, #2
  }
}
 8000e6c:	bd10      	pop	{r4, pc}
	...

08000e70 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e70:	4b02      	ldr	r3, [pc, #8]	; (8000e7c <HAL_PWREx_GetVoltageRange+0xc>)
 8000e72:	6818      	ldr	r0, [r3, #0]
#endif
}
 8000e74:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40007000 	.word	0x40007000

08000e80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e80:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e82:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e84:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e88:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e8c:	d11c      	bne.n	8000ec8 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e8e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000e92:	d015      	beq.n	8000ec0 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e9e:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ea0:	4a10      	ldr	r2, [pc, #64]	; (8000ee4 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8000ea2:	6811      	ldr	r1, [r2, #0]
 8000ea4:	2232      	movs	r2, #50	; 0x32
 8000ea6:	434a      	muls	r2, r1
 8000ea8:	490f      	ldr	r1, [pc, #60]	; (8000ee8 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8000eaa:	fbb2 f2f1 	udiv	r2, r2, r1
 8000eae:	4619      	mov	r1, r3
 8000eb0:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eb2:	6958      	ldr	r0, [r3, #20]
 8000eb4:	0540      	lsls	r0, r0, #21
 8000eb6:	d500      	bpl.n	8000eba <HAL_PWREx_ControlVoltageScaling+0x3a>
 8000eb8:	b922      	cbnz	r2, 8000ec4 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000eba:	694b      	ldr	r3, [r1, #20]
 8000ebc:	055b      	lsls	r3, r3, #21
 8000ebe:	d40d      	bmi.n	8000edc <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	4770      	bx	lr
        wait_loop_index--;
 8000ec4:	3a01      	subs	r2, #1
 8000ec6:	e7f4      	b.n	8000eb2 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ec8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ecc:	bf1f      	itttt	ne
 8000ece:	681a      	ldrne	r2, [r3, #0]
 8000ed0:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8000ed4:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8000ed8:	601a      	strne	r2, [r3, #0]
 8000eda:	e7f1      	b.n	8000ec0 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8000edc:	2003      	movs	r0, #3
}
 8000ede:	4770      	bx	lr
 8000ee0:	40007000 	.word	0x40007000
 8000ee4:	20000020 	.word	0x20000020
 8000ee8:	000f4240 	.word	0x000f4240

08000eec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000eec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000eee:	4d1e      	ldr	r5, [pc, #120]	; (8000f68 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000ef0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000ef2:	00da      	lsls	r2, r3, #3
{
 8000ef4:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000ef6:	d518      	bpl.n	8000f2a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000ef8:	f7ff ffba 	bl	8000e70 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000efc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000f00:	d123      	bne.n	8000f4a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000f02:	2c80      	cmp	r4, #128	; 0x80
 8000f04:	d929      	bls.n	8000f5a <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000f06:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000f08:	bf8c      	ite	hi
 8000f0a:	2002      	movhi	r0, #2
 8000f0c:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000f0e:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8000f10:	6813      	ldr	r3, [r2, #0]
 8000f12:	f023 0307 	bic.w	r3, r3, #7
 8000f16:	4303      	orrs	r3, r0
 8000f18:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000f1a:	6813      	ldr	r3, [r2, #0]
 8000f1c:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000f20:	1a18      	subs	r0, r3, r0
 8000f22:	bf18      	it	ne
 8000f24:	2001      	movne	r0, #1
 8000f26:	b003      	add	sp, #12
 8000f28:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8000f2a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f30:	65ab      	str	r3, [r5, #88]	; 0x58
 8000f32:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f38:	9301      	str	r3, [sp, #4]
 8000f3a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000f3c:	f7ff ff98 	bl	8000e70 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000f40:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f46:	65ab      	str	r3, [r5, #88]	; 0x58
 8000f48:	e7d8      	b.n	8000efc <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8000f4a:	2c80      	cmp	r4, #128	; 0x80
 8000f4c:	d807      	bhi.n	8000f5e <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8000f4e:	d008      	beq.n	8000f62 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8000f50:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8000f54:	4258      	negs	r0, r3
 8000f56:	4158      	adcs	r0, r3
 8000f58:	e7d9      	b.n	8000f0e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	e7d7      	b.n	8000f0e <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8000f5e:	2003      	movs	r0, #3
 8000f60:	e7d5      	b.n	8000f0e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8000f62:	2002      	movs	r0, #2
 8000f64:	e7d3      	b.n	8000f0e <RCC_SetFlashLatencyFromMSIRange+0x22>
 8000f66:	bf00      	nop
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	40022000 	.word	0x40022000

08000f70 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f70:	4b25      	ldr	r3, [pc, #148]	; (8001008 <HAL_RCC_GetSysClockFreq+0x98>)
 8000f72:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f74:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f76:	f012 020c 	ands.w	r2, r2, #12
 8000f7a:	d005      	beq.n	8000f88 <HAL_RCC_GetSysClockFreq+0x18>
 8000f7c:	2a0c      	cmp	r2, #12
 8000f7e:	d115      	bne.n	8000fac <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f80:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000f84:	2901      	cmp	r1, #1
 8000f86:	d118      	bne.n	8000fba <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000f88:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8000f8a:	4820      	ldr	r0, [pc, #128]	; (800100c <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000f8c:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000f8e:	bf55      	itete	pl
 8000f90:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000f94:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000f96:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000f9a:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8000f9e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000fa2:	b382      	cbz	r2, 8001006 <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000fa4:	2a0c      	cmp	r2, #12
 8000fa6:	d009      	beq.n	8000fbc <HAL_RCC_GetSysClockFreq+0x4c>
 8000fa8:	2000      	movs	r0, #0
  return sysclockfreq;
 8000faa:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000fac:	2a04      	cmp	r2, #4
 8000fae:	d029      	beq.n	8001004 <HAL_RCC_GetSysClockFreq+0x94>
 8000fb0:	2a08      	cmp	r2, #8
 8000fb2:	4817      	ldr	r0, [pc, #92]	; (8001010 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000fb4:	bf18      	it	ne
 8000fb6:	2000      	movne	r0, #0
 8000fb8:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000fba:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000fbc:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000fbe:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000fc0:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000fc4:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8000fc8:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000fca:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8000fce:	d005      	beq.n	8000fdc <HAL_RCC_GetSysClockFreq+0x6c>
 8000fd0:	2903      	cmp	r1, #3
 8000fd2:	d012      	beq.n	8000ffa <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000fd4:	68d9      	ldr	r1, [r3, #12]
 8000fd6:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000fda:	e003      	b.n	8000fe4 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000fdc:	68d9      	ldr	r1, [r3, #12]
 8000fde:	480d      	ldr	r0, [pc, #52]	; (8001014 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000fe0:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000fe4:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000fe6:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000fea:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8000fee:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000ff0:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000ff2:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8000ff4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ff8:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000ffa:	68d9      	ldr	r1, [r3, #12]
 8000ffc:	4804      	ldr	r0, [pc, #16]	; (8001010 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000ffe:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8001002:	e7ef      	b.n	8000fe4 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8001004:	4803      	ldr	r0, [pc, #12]	; (8001014 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8001006:	4770      	bx	lr
 8001008:	40021000 	.word	0x40021000
 800100c:	08002a04 	.word	0x08002a04
 8001010:	007a1200 	.word	0x007a1200
 8001014:	00f42400 	.word	0x00f42400

08001018 <HAL_RCC_OscConfig>:
{
 8001018:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 800101c:	4605      	mov	r5, r0
 800101e:	b918      	cbnz	r0, 8001028 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001020:	2001      	movs	r0, #1
}
 8001022:	b003      	add	sp, #12
 8001024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001028:	4ca5      	ldr	r4, [pc, #660]	; (80012c0 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800102a:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800102c:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800102e:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001030:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001032:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001036:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800103a:	d53c      	bpl.n	80010b6 <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800103c:	b11e      	cbz	r6, 8001046 <HAL_RCC_OscConfig+0x2e>
 800103e:	2e0c      	cmp	r6, #12
 8001040:	d163      	bne.n	800110a <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001042:	2f01      	cmp	r7, #1
 8001044:	d161      	bne.n	800110a <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001046:	6823      	ldr	r3, [r4, #0]
 8001048:	0798      	lsls	r0, r3, #30
 800104a:	d502      	bpl.n	8001052 <HAL_RCC_OscConfig+0x3a>
 800104c:	69ab      	ldr	r3, [r5, #24]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0e6      	beq.n	8001020 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001052:	6823      	ldr	r3, [r4, #0]
 8001054:	6a28      	ldr	r0, [r5, #32]
 8001056:	0719      	lsls	r1, r3, #28
 8001058:	bf56      	itet	pl
 800105a:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 800105e:	6823      	ldrmi	r3, [r4, #0]
 8001060:	091b      	lsrpl	r3, r3, #4
 8001062:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001066:	4283      	cmp	r3, r0
 8001068:	d23a      	bcs.n	80010e0 <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800106a:	f7ff ff3f 	bl	8000eec <RCC_SetFlashLatencyFromMSIRange>
 800106e:	2800      	cmp	r0, #0
 8001070:	d1d6      	bne.n	8001020 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001072:	6823      	ldr	r3, [r4, #0]
 8001074:	f043 0308 	orr.w	r3, r3, #8
 8001078:	6023      	str	r3, [r4, #0]
 800107a:	6823      	ldr	r3, [r4, #0]
 800107c:	6a2a      	ldr	r2, [r5, #32]
 800107e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001082:	4313      	orrs	r3, r2
 8001084:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001086:	6863      	ldr	r3, [r4, #4]
 8001088:	69ea      	ldr	r2, [r5, #28]
 800108a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800108e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001092:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001094:	f7ff ff6c 	bl	8000f70 <HAL_RCC_GetSysClockFreq>
 8001098:	68a3      	ldr	r3, [r4, #8]
 800109a:	4a8a      	ldr	r2, [pc, #552]	; (80012c4 <HAL_RCC_OscConfig+0x2ac>)
 800109c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010a0:	5cd3      	ldrb	r3, [r2, r3]
 80010a2:	f003 031f 	and.w	r3, r3, #31
 80010a6:	40d8      	lsrs	r0, r3
 80010a8:	4b87      	ldr	r3, [pc, #540]	; (80012c8 <HAL_RCC_OscConfig+0x2b0>)
 80010aa:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80010ac:	2000      	movs	r0, #0
 80010ae:	f7ff fa13 	bl	80004d8 <HAL_InitTick>
        if(status != HAL_OK)
 80010b2:	2800      	cmp	r0, #0
 80010b4:	d1b5      	bne.n	8001022 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b6:	682b      	ldr	r3, [r5, #0]
 80010b8:	07d8      	lsls	r0, r3, #31
 80010ba:	d45d      	bmi.n	8001178 <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010bc:	682b      	ldr	r3, [r5, #0]
 80010be:	0799      	lsls	r1, r3, #30
 80010c0:	f100 809c 	bmi.w	80011fc <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010c4:	682b      	ldr	r3, [r5, #0]
 80010c6:	0718      	lsls	r0, r3, #28
 80010c8:	f100 80d0 	bmi.w	800126c <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010cc:	682b      	ldr	r3, [r5, #0]
 80010ce:	0759      	lsls	r1, r3, #29
 80010d0:	f100 80fc 	bmi.w	80012cc <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80010d4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f040 8165 	bne.w	80013a6 <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 80010dc:	2000      	movs	r0, #0
 80010de:	e7a0      	b.n	8001022 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010e0:	6823      	ldr	r3, [r4, #0]
 80010e2:	f043 0308 	orr.w	r3, r3, #8
 80010e6:	6023      	str	r3, [r4, #0]
 80010e8:	6823      	ldr	r3, [r4, #0]
 80010ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010ee:	4303      	orrs	r3, r0
 80010f0:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010f2:	6863      	ldr	r3, [r4, #4]
 80010f4:	69ea      	ldr	r2, [r5, #28]
 80010f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80010fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80010fe:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001100:	f7ff fef4 	bl	8000eec <RCC_SetFlashLatencyFromMSIRange>
 8001104:	2800      	cmp	r0, #0
 8001106:	d0c5      	beq.n	8001094 <HAL_RCC_OscConfig+0x7c>
 8001108:	e78a      	b.n	8001020 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800110a:	69ab      	ldr	r3, [r5, #24]
 800110c:	b31b      	cbz	r3, 8001156 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 800110e:	6823      	ldr	r3, [r4, #0]
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001116:	f7ff fa15 	bl	8000544 <HAL_GetTick>
 800111a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800111c:	6823      	ldr	r3, [r4, #0]
 800111e:	079a      	lsls	r2, r3, #30
 8001120:	d511      	bpl.n	8001146 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001122:	6823      	ldr	r3, [r4, #0]
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	6023      	str	r3, [r4, #0]
 800112a:	6823      	ldr	r3, [r4, #0]
 800112c:	6a2a      	ldr	r2, [r5, #32]
 800112e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001132:	4313      	orrs	r3, r2
 8001134:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001136:	6863      	ldr	r3, [r4, #4]
 8001138:	69ea      	ldr	r2, [r5, #28]
 800113a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800113e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001142:	6063      	str	r3, [r4, #4]
 8001144:	e7b7      	b.n	80010b6 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001146:	f7ff f9fd 	bl	8000544 <HAL_GetTick>
 800114a:	eba0 0008 	sub.w	r0, r0, r8
 800114e:	2802      	cmp	r0, #2
 8001150:	d9e4      	bls.n	800111c <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8001152:	2003      	movs	r0, #3
 8001154:	e765      	b.n	8001022 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	f023 0301 	bic.w	r3, r3, #1
 800115c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800115e:	f7ff f9f1 	bl	8000544 <HAL_GetTick>
 8001162:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001164:	6823      	ldr	r3, [r4, #0]
 8001166:	079b      	lsls	r3, r3, #30
 8001168:	d5a5      	bpl.n	80010b6 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800116a:	f7ff f9eb 	bl	8000544 <HAL_GetTick>
 800116e:	eba0 0008 	sub.w	r0, r0, r8
 8001172:	2802      	cmp	r0, #2
 8001174:	d9f6      	bls.n	8001164 <HAL_RCC_OscConfig+0x14c>
 8001176:	e7ec      	b.n	8001152 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001178:	2e08      	cmp	r6, #8
 800117a:	d003      	beq.n	8001184 <HAL_RCC_OscConfig+0x16c>
 800117c:	2e0c      	cmp	r6, #12
 800117e:	d108      	bne.n	8001192 <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8001180:	2f03      	cmp	r7, #3
 8001182:	d106      	bne.n	8001192 <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001184:	6823      	ldr	r3, [r4, #0]
 8001186:	039a      	lsls	r2, r3, #14
 8001188:	d598      	bpl.n	80010bc <HAL_RCC_OscConfig+0xa4>
 800118a:	686b      	ldr	r3, [r5, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d195      	bne.n	80010bc <HAL_RCC_OscConfig+0xa4>
 8001190:	e746      	b.n	8001020 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001192:	686b      	ldr	r3, [r5, #4]
 8001194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001198:	d110      	bne.n	80011bc <HAL_RCC_OscConfig+0x1a4>
 800119a:	6823      	ldr	r3, [r4, #0]
 800119c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80011a2:	f7ff f9cf 	bl	8000544 <HAL_GetTick>
 80011a6:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011a8:	6823      	ldr	r3, [r4, #0]
 80011aa:	039b      	lsls	r3, r3, #14
 80011ac:	d486      	bmi.n	80010bc <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ae:	f7ff f9c9 	bl	8000544 <HAL_GetTick>
 80011b2:	eba0 0008 	sub.w	r0, r0, r8
 80011b6:	2864      	cmp	r0, #100	; 0x64
 80011b8:	d9f6      	bls.n	80011a8 <HAL_RCC_OscConfig+0x190>
 80011ba:	e7ca      	b.n	8001152 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011c0:	d104      	bne.n	80011cc <HAL_RCC_OscConfig+0x1b4>
 80011c2:	6823      	ldr	r3, [r4, #0]
 80011c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c8:	6023      	str	r3, [r4, #0]
 80011ca:	e7e6      	b.n	800119a <HAL_RCC_OscConfig+0x182>
 80011cc:	6822      	ldr	r2, [r4, #0]
 80011ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011d2:	6022      	str	r2, [r4, #0]
 80011d4:	6822      	ldr	r2, [r4, #0]
 80011d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011da:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1e0      	bne.n	80011a2 <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 80011e0:	f7ff f9b0 	bl	8000544 <HAL_GetTick>
 80011e4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011e6:	6823      	ldr	r3, [r4, #0]
 80011e8:	0398      	lsls	r0, r3, #14
 80011ea:	f57f af67 	bpl.w	80010bc <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ee:	f7ff f9a9 	bl	8000544 <HAL_GetTick>
 80011f2:	eba0 0008 	sub.w	r0, r0, r8
 80011f6:	2864      	cmp	r0, #100	; 0x64
 80011f8:	d9f5      	bls.n	80011e6 <HAL_RCC_OscConfig+0x1ce>
 80011fa:	e7aa      	b.n	8001152 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80011fc:	2e04      	cmp	r6, #4
 80011fe:	d003      	beq.n	8001208 <HAL_RCC_OscConfig+0x1f0>
 8001200:	2e0c      	cmp	r6, #12
 8001202:	d110      	bne.n	8001226 <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8001204:	2f02      	cmp	r7, #2
 8001206:	d10e      	bne.n	8001226 <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001208:	6823      	ldr	r3, [r4, #0]
 800120a:	0559      	lsls	r1, r3, #21
 800120c:	d503      	bpl.n	8001216 <HAL_RCC_OscConfig+0x1fe>
 800120e:	68eb      	ldr	r3, [r5, #12]
 8001210:	2b00      	cmp	r3, #0
 8001212:	f43f af05 	beq.w	8001020 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001216:	6863      	ldr	r3, [r4, #4]
 8001218:	692a      	ldr	r2, [r5, #16]
 800121a:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800121e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001222:	6063      	str	r3, [r4, #4]
 8001224:	e74e      	b.n	80010c4 <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001226:	68eb      	ldr	r3, [r5, #12]
 8001228:	b17b      	cbz	r3, 800124a <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 800122a:	6823      	ldr	r3, [r4, #0]
 800122c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001230:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001232:	f7ff f987 	bl	8000544 <HAL_GetTick>
 8001236:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001238:	6823      	ldr	r3, [r4, #0]
 800123a:	055a      	lsls	r2, r3, #21
 800123c:	d4eb      	bmi.n	8001216 <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800123e:	f7ff f981 	bl	8000544 <HAL_GetTick>
 8001242:	1bc0      	subs	r0, r0, r7
 8001244:	2802      	cmp	r0, #2
 8001246:	d9f7      	bls.n	8001238 <HAL_RCC_OscConfig+0x220>
 8001248:	e783      	b.n	8001152 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 800124a:	6823      	ldr	r3, [r4, #0]
 800124c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001250:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001252:	f7ff f977 	bl	8000544 <HAL_GetTick>
 8001256:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001258:	6823      	ldr	r3, [r4, #0]
 800125a:	055b      	lsls	r3, r3, #21
 800125c:	f57f af32 	bpl.w	80010c4 <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001260:	f7ff f970 	bl	8000544 <HAL_GetTick>
 8001264:	1bc0      	subs	r0, r0, r7
 8001266:	2802      	cmp	r0, #2
 8001268:	d9f6      	bls.n	8001258 <HAL_RCC_OscConfig+0x240>
 800126a:	e772      	b.n	8001152 <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800126c:	696b      	ldr	r3, [r5, #20]
 800126e:	b19b      	cbz	r3, 8001298 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8001270:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800127c:	f7ff f962 	bl	8000544 <HAL_GetTick>
 8001280:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001282:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001286:	079a      	lsls	r2, r3, #30
 8001288:	f53f af20 	bmi.w	80010cc <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800128c:	f7ff f95a 	bl	8000544 <HAL_GetTick>
 8001290:	1bc0      	subs	r0, r0, r7
 8001292:	2802      	cmp	r0, #2
 8001294:	d9f5      	bls.n	8001282 <HAL_RCC_OscConfig+0x26a>
 8001296:	e75c      	b.n	8001152 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 8001298:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800129c:	f023 0301 	bic.w	r3, r3, #1
 80012a0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80012a4:	f7ff f94e 	bl	8000544 <HAL_GetTick>
 80012a8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012aa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80012ae:	079b      	lsls	r3, r3, #30
 80012b0:	f57f af0c 	bpl.w	80010cc <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012b4:	f7ff f946 	bl	8000544 <HAL_GetTick>
 80012b8:	1bc0      	subs	r0, r0, r7
 80012ba:	2802      	cmp	r0, #2
 80012bc:	d9f5      	bls.n	80012aa <HAL_RCC_OscConfig+0x292>
 80012be:	e748      	b.n	8001152 <HAL_RCC_OscConfig+0x13a>
 80012c0:	40021000 	.word	0x40021000
 80012c4:	080029e9 	.word	0x080029e9
 80012c8:	20000020 	.word	0x20000020
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80012ce:	00d8      	lsls	r0, r3, #3
 80012d0:	d429      	bmi.n	8001326 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80012d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d8:	65a3      	str	r3, [r4, #88]	; 0x58
 80012da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80012dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80012e4:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012e8:	4f5d      	ldr	r7, [pc, #372]	; (8001460 <HAL_RCC_OscConfig+0x448>)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	05d9      	lsls	r1, r3, #23
 80012ee:	d51d      	bpl.n	800132c <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012f0:	68ab      	ldr	r3, [r5, #8]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d12b      	bne.n	800134e <HAL_RCC_OscConfig+0x336>
 80012f6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001302:	f7ff f91f 	bl	8000544 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001306:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800130a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800130c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001310:	079b      	lsls	r3, r3, #30
 8001312:	d542      	bpl.n	800139a <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 8001314:	f1b8 0f00 	cmp.w	r8, #0
 8001318:	f43f aedc 	beq.w	80010d4 <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 800131c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800131e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001322:	65a3      	str	r3, [r4, #88]	; 0x58
 8001324:	e6d6      	b.n	80010d4 <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 8001326:	f04f 0800 	mov.w	r8, #0
 800132a:	e7dd      	b.n	80012e8 <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001332:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001334:	f7ff f906 	bl	8000544 <HAL_GetTick>
 8001338:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	05da      	lsls	r2, r3, #23
 800133e:	d4d7      	bmi.n	80012f0 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001340:	f7ff f900 	bl	8000544 <HAL_GetTick>
 8001344:	eba0 0009 	sub.w	r0, r0, r9
 8001348:	2802      	cmp	r0, #2
 800134a:	d9f6      	bls.n	800133a <HAL_RCC_OscConfig+0x322>
 800134c:	e701      	b.n	8001152 <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800134e:	2b05      	cmp	r3, #5
 8001350:	d106      	bne.n	8001360 <HAL_RCC_OscConfig+0x348>
 8001352:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001356:	f043 0304 	orr.w	r3, r3, #4
 800135a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800135e:	e7ca      	b.n	80012f6 <HAL_RCC_OscConfig+0x2de>
 8001360:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001364:	f022 0201 	bic.w	r2, r2, #1
 8001368:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800136c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001370:	f022 0204 	bic.w	r2, r2, #4
 8001374:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1c2      	bne.n	8001302 <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 800137c:	f7ff f8e2 	bl	8000544 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001380:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001384:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001386:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800138a:	0798      	lsls	r0, r3, #30
 800138c:	d5c2      	bpl.n	8001314 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800138e:	f7ff f8d9 	bl	8000544 <HAL_GetTick>
 8001392:	1bc0      	subs	r0, r0, r7
 8001394:	4548      	cmp	r0, r9
 8001396:	d9f6      	bls.n	8001386 <HAL_RCC_OscConfig+0x36e>
 8001398:	e6db      	b.n	8001152 <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800139a:	f7ff f8d3 	bl	8000544 <HAL_GetTick>
 800139e:	1bc0      	subs	r0, r0, r7
 80013a0:	4548      	cmp	r0, r9
 80013a2:	d9b3      	bls.n	800130c <HAL_RCC_OscConfig+0x2f4>
 80013a4:	e6d5      	b.n	8001152 <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013a6:	2e0c      	cmp	r6, #12
 80013a8:	f43f ae3a 	beq.w	8001020 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013ac:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 80013ae:	6823      	ldr	r3, [r4, #0]
 80013b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013b4:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013b6:	d137      	bne.n	8001428 <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 80013b8:	f7ff f8c4 	bl	8000544 <HAL_GetTick>
 80013bc:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013be:	6823      	ldr	r3, [r4, #0]
 80013c0:	0199      	lsls	r1, r3, #6
 80013c2:	d42b      	bmi.n	800141c <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013c4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80013c6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80013c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80013cc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80013ce:	3a01      	subs	r2, #1
 80013d0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80013d4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80013d6:	0912      	lsrs	r2, r2, #4
 80013d8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80013dc:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80013de:	0852      	lsrs	r2, r2, #1
 80013e0:	3a01      	subs	r2, #1
 80013e2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80013e6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80013e8:	0852      	lsrs	r2, r2, #1
 80013ea:	3a01      	subs	r2, #1
 80013ec:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80013f0:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80013f2:	6823      	ldr	r3, [r4, #0]
 80013f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013f8:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013fa:	68e3      	ldr	r3, [r4, #12]
 80013fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001400:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001402:	f7ff f89f 	bl	8000544 <HAL_GetTick>
 8001406:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001408:	6823      	ldr	r3, [r4, #0]
 800140a:	019a      	lsls	r2, r3, #6
 800140c:	f53f ae66 	bmi.w	80010dc <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001410:	f7ff f898 	bl	8000544 <HAL_GetTick>
 8001414:	1b40      	subs	r0, r0, r5
 8001416:	2802      	cmp	r0, #2
 8001418:	d9f6      	bls.n	8001408 <HAL_RCC_OscConfig+0x3f0>
 800141a:	e69a      	b.n	8001152 <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141c:	f7ff f892 	bl	8000544 <HAL_GetTick>
 8001420:	1b80      	subs	r0, r0, r6
 8001422:	2802      	cmp	r0, #2
 8001424:	d9cb      	bls.n	80013be <HAL_RCC_OscConfig+0x3a6>
 8001426:	e694      	b.n	8001152 <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001428:	6823      	ldr	r3, [r4, #0]
 800142a:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800142e:	bf02      	ittt	eq
 8001430:	68e3      	ldreq	r3, [r4, #12]
 8001432:	f023 0303 	biceq.w	r3, r3, #3
 8001436:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001438:	68e3      	ldr	r3, [r4, #12]
 800143a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800143e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001442:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001444:	f7ff f87e 	bl	8000544 <HAL_GetTick>
 8001448:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800144a:	6823      	ldr	r3, [r4, #0]
 800144c:	019b      	lsls	r3, r3, #6
 800144e:	f57f ae45 	bpl.w	80010dc <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001452:	f7ff f877 	bl	8000544 <HAL_GetTick>
 8001456:	1b40      	subs	r0, r0, r5
 8001458:	2802      	cmp	r0, #2
 800145a:	d9f6      	bls.n	800144a <HAL_RCC_OscConfig+0x432>
 800145c:	e679      	b.n	8001152 <HAL_RCC_OscConfig+0x13a>
 800145e:	bf00      	nop
 8001460:	40007000 	.word	0x40007000

08001464 <HAL_RCC_ClockConfig>:
{
 8001464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001468:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 800146a:	4604      	mov	r4, r0
 800146c:	b910      	cbnz	r0, 8001474 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800146e:	2001      	movs	r0, #1
 8001470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001474:	4a40      	ldr	r2, [pc, #256]	; (8001578 <HAL_RCC_ClockConfig+0x114>)
 8001476:	6813      	ldr	r3, [r2, #0]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	428b      	cmp	r3, r1
 800147e:	d329      	bcc.n	80014d4 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001480:	6823      	ldr	r3, [r4, #0]
 8001482:	07d9      	lsls	r1, r3, #31
 8001484:	d431      	bmi.n	80014ea <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001486:	6821      	ldr	r1, [r4, #0]
 8001488:	078a      	lsls	r2, r1, #30
 800148a:	d45b      	bmi.n	8001544 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800148c:	4a3a      	ldr	r2, [pc, #232]	; (8001578 <HAL_RCC_ClockConfig+0x114>)
 800148e:	6813      	ldr	r3, [r2, #0]
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	429e      	cmp	r6, r3
 8001496:	d35d      	bcc.n	8001554 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001498:	f011 0f04 	tst.w	r1, #4
 800149c:	4d37      	ldr	r5, [pc, #220]	; (800157c <HAL_RCC_ClockConfig+0x118>)
 800149e:	d164      	bne.n	800156a <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014a0:	070b      	lsls	r3, r1, #28
 80014a2:	d506      	bpl.n	80014b2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014a4:	68ab      	ldr	r3, [r5, #8]
 80014a6:	6922      	ldr	r2, [r4, #16]
 80014a8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80014ac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80014b0:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014b2:	f7ff fd5d 	bl	8000f70 <HAL_RCC_GetSysClockFreq>
 80014b6:	68ab      	ldr	r3, [r5, #8]
 80014b8:	4a31      	ldr	r2, [pc, #196]	; (8001580 <HAL_RCC_ClockConfig+0x11c>)
 80014ba:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 80014be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014c2:	5cd3      	ldrb	r3, [r2, r3]
 80014c4:	f003 031f 	and.w	r3, r3, #31
 80014c8:	40d8      	lsrs	r0, r3
 80014ca:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <HAL_RCC_ClockConfig+0x120>)
 80014cc:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 80014ce:	2000      	movs	r0, #0
 80014d0:	f7ff b802 	b.w	80004d8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d4:	6813      	ldr	r3, [r2, #0]
 80014d6:	f023 0307 	bic.w	r3, r3, #7
 80014da:	430b      	orrs	r3, r1
 80014dc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014de:	6813      	ldr	r3, [r2, #0]
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	4299      	cmp	r1, r3
 80014e6:	d1c2      	bne.n	800146e <HAL_RCC_ClockConfig+0xa>
 80014e8:	e7ca      	b.n	8001480 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ea:	6862      	ldr	r2, [r4, #4]
 80014ec:	4d23      	ldr	r5, [pc, #140]	; (800157c <HAL_RCC_ClockConfig+0x118>)
 80014ee:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014f0:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014f2:	d11b      	bne.n	800152c <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014f4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014f8:	d0b9      	beq.n	800146e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80014fa:	68ab      	ldr	r3, [r5, #8]
 80014fc:	f023 0303 	bic.w	r3, r3, #3
 8001500:	4313      	orrs	r3, r2
 8001502:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8001504:	f7ff f81e 	bl	8000544 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001508:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800150c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150e:	68ab      	ldr	r3, [r5, #8]
 8001510:	6862      	ldr	r2, [r4, #4]
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800151a:	d0b4      	beq.n	8001486 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800151c:	f7ff f812 	bl	8000544 <HAL_GetTick>
 8001520:	1bc0      	subs	r0, r0, r7
 8001522:	4540      	cmp	r0, r8
 8001524:	d9f3      	bls.n	800150e <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 8001526:	2003      	movs	r0, #3
}
 8001528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800152c:	2a02      	cmp	r2, #2
 800152e:	d102      	bne.n	8001536 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001530:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001534:	e7e0      	b.n	80014f8 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001536:	b912      	cbnz	r2, 800153e <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001538:	f013 0f02 	tst.w	r3, #2
 800153c:	e7dc      	b.n	80014f8 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800153e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001542:	e7d9      	b.n	80014f8 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001544:	4a0d      	ldr	r2, [pc, #52]	; (800157c <HAL_RCC_ClockConfig+0x118>)
 8001546:	68a0      	ldr	r0, [r4, #8]
 8001548:	6893      	ldr	r3, [r2, #8]
 800154a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800154e:	4303      	orrs	r3, r0
 8001550:	6093      	str	r3, [r2, #8]
 8001552:	e79b      	b.n	800148c <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001554:	6813      	ldr	r3, [r2, #0]
 8001556:	f023 0307 	bic.w	r3, r3, #7
 800155a:	4333      	orrs	r3, r6
 800155c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800155e:	6813      	ldr	r3, [r2, #0]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	429e      	cmp	r6, r3
 8001566:	d182      	bne.n	800146e <HAL_RCC_ClockConfig+0xa>
 8001568:	e796      	b.n	8001498 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800156a:	68ab      	ldr	r3, [r5, #8]
 800156c:	68e2      	ldr	r2, [r4, #12]
 800156e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001572:	4313      	orrs	r3, r2
 8001574:	60ab      	str	r3, [r5, #8]
 8001576:	e793      	b.n	80014a0 <HAL_RCC_ClockConfig+0x3c>
 8001578:	40022000 	.word	0x40022000
 800157c:	40021000 	.word	0x40021000
 8001580:	080029e9 	.word	0x080029e9
 8001584:	20000020 	.word	0x20000020

08001588 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800158a:	4a06      	ldr	r2, [pc, #24]	; (80015a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001592:	5cd3      	ldrb	r3, [r2, r3]
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001596:	6810      	ldr	r0, [r2, #0]
 8001598:	f003 031f 	and.w	r3, r3, #31
}
 800159c:	40d8      	lsrs	r0, r3
 800159e:	4770      	bx	lr
 80015a0:	40021000 	.word	0x40021000
 80015a4:	080029f9 	.word	0x080029f9
 80015a8:	20000020 	.word	0x20000020

080015ac <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80015ae:	4a06      	ldr	r2, [pc, #24]	; (80015c8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80015b6:	5cd3      	ldrb	r3, [r2, r3]
 80015b8:	4a04      	ldr	r2, [pc, #16]	; (80015cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80015ba:	6810      	ldr	r0, [r2, #0]
 80015bc:	f003 031f 	and.w	r3, r3, #31
}
 80015c0:	40d8      	lsrs	r0, r3
 80015c2:	4770      	bx	lr
 80015c4:	40021000 	.word	0x40021000
 80015c8:	080029f9 	.word	0x080029f9
 80015cc:	20000020 	.word	0x20000020

080015d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80015d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80015d2:	4b45      	ldr	r3, [pc, #276]	; (80016e8 <RCCEx_PLLSAI1_Config+0x118>)
 80015d4:	68da      	ldr	r2, [r3, #12]
 80015d6:	f012 0f03 	tst.w	r2, #3
{
 80015da:	4605      	mov	r5, r0
 80015dc:	460e      	mov	r6, r1
 80015de:	461c      	mov	r4, r3
 80015e0:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80015e2:	d02a      	beq.n	800163a <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	f002 0203 	and.w	r2, r2, #3
 80015ea:	4282      	cmp	r2, r0
 80015ec:	d13c      	bne.n	8001668 <RCCEx_PLLSAI1_Config+0x98>
       ||
 80015ee:	2a00      	cmp	r2, #0
 80015f0:	d03a      	beq.n	8001668 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80015f2:	68db      	ldr	r3, [r3, #12]
       ||
 80015f4:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80015f6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80015fa:	3301      	adds	r3, #1
       ||
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d133      	bne.n	8001668 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001600:	6823      	ldr	r3, [r4, #0]
 8001602:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001606:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001608:	f7fe ff9c 	bl	8000544 <HAL_GetTick>
 800160c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800160e:	6823      	ldr	r3, [r4, #0]
 8001610:	011a      	lsls	r2, r3, #4
 8001612:	d432      	bmi.n	800167a <RCCEx_PLLSAI1_Config+0xaa>
 8001614:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001616:	2e00      	cmp	r6, #0
 8001618:	d036      	beq.n	8001688 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800161a:	2e01      	cmp	r6, #1
 800161c:	d150      	bne.n	80016c0 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800161e:	6922      	ldr	r2, [r4, #16]
 8001620:	6928      	ldr	r0, [r5, #16]
 8001622:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001626:	0840      	lsrs	r0, r0, #1
 8001628:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800162c:	3801      	subs	r0, #1
 800162e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001632:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001636:	6122      	str	r2, [r4, #16]
 8001638:	e032      	b.n	80016a0 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 800163a:	2802      	cmp	r0, #2
 800163c:	d010      	beq.n	8001660 <RCCEx_PLLSAI1_Config+0x90>
 800163e:	2803      	cmp	r0, #3
 8001640:	d014      	beq.n	800166c <RCCEx_PLLSAI1_Config+0x9c>
 8001642:	2801      	cmp	r0, #1
 8001644:	d110      	bne.n	8001668 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	079f      	lsls	r7, r3, #30
 800164a:	d538      	bpl.n	80016be <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800164c:	68e3      	ldr	r3, [r4, #12]
 800164e:	686a      	ldr	r2, [r5, #4]
 8001650:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001654:	3a01      	subs	r2, #1
 8001656:	4318      	orrs	r0, r3
 8001658:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800165c:	60e0      	str	r0, [r4, #12]
 800165e:	e7cf      	b.n	8001600 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001666:	d1f1      	bne.n	800164c <RCCEx_PLLSAI1_Config+0x7c>
 8001668:	2001      	movs	r0, #1
 800166a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	0391      	lsls	r1, r2, #14
 8001670:	d4ec      	bmi.n	800164c <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001678:	e7f5      	b.n	8001666 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800167a:	f7fe ff63 	bl	8000544 <HAL_GetTick>
 800167e:	1bc0      	subs	r0, r0, r7
 8001680:	2802      	cmp	r0, #2
 8001682:	d9c4      	bls.n	800160e <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001684:	2003      	movs	r0, #3
 8001686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001688:	6921      	ldr	r1, [r4, #16]
 800168a:	68eb      	ldr	r3, [r5, #12]
 800168c:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8001690:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001694:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8001698:	091b      	lsrs	r3, r3, #4
 800169a:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 800169e:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80016a0:	6823      	ldr	r3, [r4, #0]
 80016a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016a6:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a8:	f7fe ff4c 	bl	8000544 <HAL_GetTick>
 80016ac:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80016ae:	6823      	ldr	r3, [r4, #0]
 80016b0:	011b      	lsls	r3, r3, #4
 80016b2:	d513      	bpl.n	80016dc <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80016b4:	6923      	ldr	r3, [r4, #16]
 80016b6:	69aa      	ldr	r2, [r5, #24]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	6123      	str	r3, [r4, #16]
 80016bc:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80016be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80016c0:	6923      	ldr	r3, [r4, #16]
 80016c2:	6968      	ldr	r0, [r5, #20]
 80016c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80016c8:	0840      	lsrs	r0, r0, #1
 80016ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80016ce:	3801      	subs	r0, #1
 80016d0:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80016d4:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80016d8:	6123      	str	r3, [r4, #16]
 80016da:	e7e1      	b.n	80016a0 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80016dc:	f7fe ff32 	bl	8000544 <HAL_GetTick>
 80016e0:	1b80      	subs	r0, r0, r6
 80016e2:	2802      	cmp	r0, #2
 80016e4:	d9e3      	bls.n	80016ae <RCCEx_PLLSAI1_Config+0xde>
 80016e6:	e7cd      	b.n	8001684 <RCCEx_PLLSAI1_Config+0xb4>
 80016e8:	40021000 	.word	0x40021000

080016ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80016ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80016ee:	4b3d      	ldr	r3, [pc, #244]	; (80017e4 <RCCEx_PLLSAI2_Config+0xf8>)
 80016f0:	68da      	ldr	r2, [r3, #12]
 80016f2:	f012 0f03 	tst.w	r2, #3
{
 80016f6:	4605      	mov	r5, r0
 80016f8:	460e      	mov	r6, r1
 80016fa:	461c      	mov	r4, r3
 80016fc:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80016fe:	d028      	beq.n	8001752 <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001700:	68da      	ldr	r2, [r3, #12]
 8001702:	f002 0203 	and.w	r2, r2, #3
 8001706:	4282      	cmp	r2, r0
 8001708:	d13a      	bne.n	8001780 <RCCEx_PLLSAI2_Config+0x94>
       ||
 800170a:	2a00      	cmp	r2, #0
 800170c:	d038      	beq.n	8001780 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800170e:	68db      	ldr	r3, [r3, #12]
       ||
 8001710:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001712:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001716:	3301      	adds	r3, #1
       ||
 8001718:	4293      	cmp	r3, r2
 800171a:	d131      	bne.n	8001780 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800171c:	6823      	ldr	r3, [r4, #0]
 800171e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001722:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001724:	f7fe ff0e 	bl	8000544 <HAL_GetTick>
 8001728:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800172a:	6823      	ldr	r3, [r4, #0]
 800172c:	009a      	lsls	r2, r3, #2
 800172e:	d430      	bmi.n	8001792 <RCCEx_PLLSAI2_Config+0xa6>
 8001730:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001732:	2e00      	cmp	r6, #0
 8001734:	d034      	beq.n	80017a0 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001736:	6963      	ldr	r3, [r4, #20]
 8001738:	6929      	ldr	r1, [r5, #16]
 800173a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800173e:	0849      	lsrs	r1, r1, #1
 8001740:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001744:	3901      	subs	r1, #1
 8001746:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800174a:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800174e:	6163      	str	r3, [r4, #20]
 8001750:	e032      	b.n	80017b8 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 8001752:	2802      	cmp	r0, #2
 8001754:	d010      	beq.n	8001778 <RCCEx_PLLSAI2_Config+0x8c>
 8001756:	2803      	cmp	r0, #3
 8001758:	d014      	beq.n	8001784 <RCCEx_PLLSAI2_Config+0x98>
 800175a:	2801      	cmp	r0, #1
 800175c:	d110      	bne.n	8001780 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	079f      	lsls	r7, r3, #30
 8001762:	d538      	bpl.n	80017d6 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001764:	68e3      	ldr	r3, [r4, #12]
 8001766:	686a      	ldr	r2, [r5, #4]
 8001768:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800176c:	3a01      	subs	r2, #1
 800176e:	4318      	orrs	r0, r3
 8001770:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001774:	60e0      	str	r0, [r4, #12]
 8001776:	e7d1      	b.n	800171c <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800177e:	d1f1      	bne.n	8001764 <RCCEx_PLLSAI2_Config+0x78>
 8001780:	2001      	movs	r0, #1
 8001782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	0391      	lsls	r1, r2, #14
 8001788:	d4ec      	bmi.n	8001764 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001790:	e7f5      	b.n	800177e <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001792:	f7fe fed7 	bl	8000544 <HAL_GetTick>
 8001796:	1bc0      	subs	r0, r0, r7
 8001798:	2802      	cmp	r0, #2
 800179a:	d9c6      	bls.n	800172a <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 800179c:	2003      	movs	r0, #3
 800179e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80017a0:	6962      	ldr	r2, [r4, #20]
 80017a2:	68eb      	ldr	r3, [r5, #12]
 80017a4:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 80017a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80017ac:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 80017b6:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80017b8:	6823      	ldr	r3, [r4, #0]
 80017ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017be:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c0:	f7fe fec0 	bl	8000544 <HAL_GetTick>
 80017c4:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80017c6:	6823      	ldr	r3, [r4, #0]
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	d505      	bpl.n	80017d8 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80017cc:	6963      	ldr	r3, [r4, #20]
 80017ce:	696a      	ldr	r2, [r5, #20]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	6163      	str	r3, [r4, #20]
 80017d4:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80017d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80017d8:	f7fe feb4 	bl	8000544 <HAL_GetTick>
 80017dc:	1b80      	subs	r0, r0, r6
 80017de:	2802      	cmp	r0, #2
 80017e0:	d9f1      	bls.n	80017c6 <RCCEx_PLLSAI2_Config+0xda>
 80017e2:	e7db      	b.n	800179c <RCCEx_PLLSAI2_Config+0xb0>
 80017e4:	40021000 	.word	0x40021000

080017e8 <HAL_RCCEx_PeriphCLKConfig>:
{
 80017e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80017ec:	6806      	ldr	r6, [r0, #0]
 80017ee:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 80017f2:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80017f4:	d024      	beq.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80017f6:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80017f8:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80017fc:	d02c      	beq.n	8001858 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80017fe:	d802      	bhi.n	8001806 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001800:	b1c1      	cbz	r1, 8001834 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8001802:	2601      	movs	r6, #1
 8001804:	e01c      	b.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001806:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800180a:	d00d      	beq.n	8001828 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800180c:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001810:	d1f7      	bne.n	8001802 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001812:	4a4d      	ldr	r2, [pc, #308]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001814:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001816:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800181a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800181e:	430b      	orrs	r3, r1
 8001820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001824:	2600      	movs	r6, #0
 8001826:	e00b      	b.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001828:	4a47      	ldr	r2, [pc, #284]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800182a:	68d3      	ldr	r3, [r2, #12]
 800182c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001830:	60d3      	str	r3, [r2, #12]
      break;
 8001832:	e7ee      	b.n	8001812 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001834:	3004      	adds	r0, #4
 8001836:	f7ff fecb 	bl	80015d0 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800183a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800183c:	2800      	cmp	r0, #0
 800183e:	d0e8      	beq.n	8001812 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001840:	6823      	ldr	r3, [r4, #0]
 8001842:	04d8      	lsls	r0, r3, #19
 8001844:	d506      	bpl.n	8001854 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001846:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001848:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800184c:	d074      	beq.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800184e:	d808      	bhi.n	8001862 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001850:	b1a9      	cbz	r1, 800187e <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8001852:	2601      	movs	r6, #1
 8001854:	4635      	mov	r5, r6
 8001856:	e021      	b.n	800189c <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001858:	2100      	movs	r1, #0
 800185a:	3020      	adds	r0, #32
 800185c:	f7ff ff46 	bl	80016ec <RCCEx_PLLSAI2_Config>
 8001860:	e7eb      	b.n	800183a <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001862:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8001866:	d004      	beq.n	8001872 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8001868:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800186c:	d1f1      	bne.n	8001852 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800186e:	4635      	mov	r5, r6
 8001870:	e009      	b.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001872:	4a35      	ldr	r2, [pc, #212]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001874:	68d3      	ldr	r3, [r2, #12]
 8001876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187a:	60d3      	str	r3, [r2, #12]
 800187c:	e7f7      	b.n	800186e <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800187e:	1d20      	adds	r0, r4, #4
 8001880:	f7ff fea6 	bl	80015d0 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001884:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001886:	2d00      	cmp	r5, #0
 8001888:	d15c      	bne.n	8001944 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800188a:	4a2f      	ldr	r2, [pc, #188]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800188c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800188e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001892:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001896:	430b      	orrs	r3, r1
 8001898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800189c:	6823      	ldr	r3, [r4, #0]
 800189e:	0399      	lsls	r1, r3, #14
 80018a0:	f140 814f 	bpl.w	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018a4:	4f28      	ldr	r7, [pc, #160]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018a8:	00da      	lsls	r2, r3, #3
 80018aa:	f140 8176 	bpl.w	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 80018ae:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018b2:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800194c <HAL_RCCEx_PeriphCLKConfig+0x164>
 80018b6:	f8d9 3000 	ldr.w	r3, [r9]
 80018ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018be:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 80018c2:	f7fe fe3f 	bl	8000544 <HAL_GetTick>
 80018c6:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80018c8:	f8d9 3000 	ldr.w	r3, [r9]
 80018cc:	05db      	lsls	r3, r3, #23
 80018ce:	d53f      	bpl.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 80018d0:	2d00      	cmp	r5, #0
 80018d2:	d144      	bne.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80018d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80018d8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80018dc:	d015      	beq.n	800190a <HAL_RCCEx_PeriphCLKConfig+0x122>
 80018de:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d011      	beq.n	800190a <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80018e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80018ea:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80018ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80018f2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80018f6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80018fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80018fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001902:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001906:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800190a:	07d8      	lsls	r0, r3, #31
 800190c:	d509      	bpl.n	8001922 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 800190e:	f7fe fe19 	bl	8000544 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001912:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001916:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001918:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800191c:	0799      	lsls	r1, r3, #30
 800191e:	f140 8109 	bpl.w	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001922:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001926:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800192a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800192e:	4313      	orrs	r3, r2
 8001930:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001934:	4635      	mov	r5, r6
 8001936:	e012      	b.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001938:	2100      	movs	r1, #0
 800193a:	f104 0020 	add.w	r0, r4, #32
 800193e:	f7ff fed5 	bl	80016ec <RCCEx_PLLSAI2_Config>
 8001942:	e79f      	b.n	8001884 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8001944:	462e      	mov	r6, r5
 8001946:	e7a9      	b.n	800189c <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8001948:	40021000 	.word	0x40021000
 800194c:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001950:	f7fe fdf8 	bl	8000544 <HAL_GetTick>
 8001954:	eba0 000a 	sub.w	r0, r0, sl
 8001958:	2802      	cmp	r0, #2
 800195a:	d9b5      	bls.n	80018c8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 800195c:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800195e:	f1b8 0f00 	cmp.w	r8, #0
 8001962:	d003      	beq.n	800196c <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001964:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001966:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800196a:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800196c:	6823      	ldr	r3, [r4, #0]
 800196e:	07da      	lsls	r2, r3, #31
 8001970:	d508      	bpl.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001972:	4990      	ldr	r1, [pc, #576]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001974:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001976:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800197a:	f022 0203 	bic.w	r2, r2, #3
 800197e:	4302      	orrs	r2, r0
 8001980:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001984:	079f      	lsls	r7, r3, #30
 8001986:	d508      	bpl.n	800199a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001988:	498a      	ldr	r1, [pc, #552]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800198a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800198c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001990:	f022 020c 	bic.w	r2, r2, #12
 8001994:	4302      	orrs	r2, r0
 8001996:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800199a:	075e      	lsls	r6, r3, #29
 800199c:	d508      	bpl.n	80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800199e:	4985      	ldr	r1, [pc, #532]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80019a0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80019a2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80019a6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80019aa:	4302      	orrs	r2, r0
 80019ac:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80019b0:	0718      	lsls	r0, r3, #28
 80019b2:	d508      	bpl.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80019b4:	497f      	ldr	r1, [pc, #508]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80019b6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80019b8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80019bc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80019c0:	4302      	orrs	r2, r0
 80019c2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80019c6:	06d9      	lsls	r1, r3, #27
 80019c8:	d508      	bpl.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80019ca:	497a      	ldr	r1, [pc, #488]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80019cc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80019ce:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80019d2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80019d6:	4302      	orrs	r2, r0
 80019d8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80019dc:	069a      	lsls	r2, r3, #26
 80019de:	d508      	bpl.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80019e0:	4974      	ldr	r1, [pc, #464]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80019e2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80019e4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80019e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80019ec:	4302      	orrs	r2, r0
 80019ee:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80019f2:	059f      	lsls	r7, r3, #22
 80019f4:	d508      	bpl.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80019f6:	496f      	ldr	r1, [pc, #444]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80019f8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80019fa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80019fe:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001a02:	4302      	orrs	r2, r0
 8001a04:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001a08:	055e      	lsls	r6, r3, #21
 8001a0a:	d508      	bpl.n	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001a0c:	4969      	ldr	r1, [pc, #420]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001a0e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001a10:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001a14:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001a18:	4302      	orrs	r2, r0
 8001a1a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a1e:	0658      	lsls	r0, r3, #25
 8001a20:	d508      	bpl.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a22:	4964      	ldr	r1, [pc, #400]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001a24:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001a26:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001a2a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001a2e:	4302      	orrs	r2, r0
 8001a30:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001a34:	0619      	lsls	r1, r3, #24
 8001a36:	d508      	bpl.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001a38:	495e      	ldr	r1, [pc, #376]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001a3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001a3c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001a40:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001a44:	4302      	orrs	r2, r0
 8001a46:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001a4a:	05da      	lsls	r2, r3, #23
 8001a4c:	d508      	bpl.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001a4e:	4959      	ldr	r1, [pc, #356]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a52:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001a56:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001a5a:	4302      	orrs	r2, r0
 8001a5c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001a60:	049b      	lsls	r3, r3, #18
 8001a62:	d50f      	bpl.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001a64:	4a53      	ldr	r2, [pc, #332]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001a66:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001a68:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001a6c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001a70:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001a72:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001a76:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001a7a:	d164      	bne.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001a7c:	68d3      	ldr	r3, [r2, #12]
 8001a7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a82:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001a84:	6823      	ldr	r3, [r4, #0]
 8001a86:	031f      	lsls	r7, r3, #12
 8001a88:	d50f      	bpl.n	8001aaa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001a8a:	4a4a      	ldr	r2, [pc, #296]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001a8c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8001a8e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001a92:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001a96:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001a98:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001aa0:	d15c      	bne.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001aa2:	68d3      	ldr	r3, [r2, #12]
 8001aa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001aa8:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001aaa:	6823      	ldr	r3, [r4, #0]
 8001aac:	035e      	lsls	r6, r3, #13
 8001aae:	d50f      	bpl.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001ab0:	4a40      	ldr	r2, [pc, #256]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001ab2:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001ab4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ab8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001abc:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001abe:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001ac2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001ac6:	d154      	bne.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ac8:	68d3      	ldr	r3, [r2, #12]
 8001aca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ace:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ad0:	6823      	ldr	r3, [r4, #0]
 8001ad2:	0458      	lsls	r0, r3, #17
 8001ad4:	d512      	bpl.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ad6:	4937      	ldr	r1, [pc, #220]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001ad8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8001ada:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001ade:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001ae2:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001ae4:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001aec:	d14c      	bne.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001aee:	2102      	movs	r1, #2
 8001af0:	1d20      	adds	r0, r4, #4
 8001af2:	f7ff fd6d 	bl	80015d0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001af6:	2800      	cmp	r0, #0
 8001af8:	bf18      	it	ne
 8001afa:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001afc:	6822      	ldr	r2, [r4, #0]
 8001afe:	0411      	lsls	r1, r2, #16
 8001b00:	d508      	bpl.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001b02:	492c      	ldr	r1, [pc, #176]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001b04:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001b06:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001b0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001b0e:	4303      	orrs	r3, r0
 8001b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001b14:	03d3      	lsls	r3, r2, #15
 8001b16:	d509      	bpl.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001b18:	4a26      	ldr	r2, [pc, #152]	; (8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001b1a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8001b1e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001b22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b26:	430b      	orrs	r3, r1
 8001b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001b2c:	4628      	mov	r0, r5
 8001b2e:	b002      	add	sp, #8
 8001b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b34:	f7fe fd06 	bl	8000544 <HAL_GetTick>
 8001b38:	1b40      	subs	r0, r0, r5
 8001b3a:	4548      	cmp	r0, r9
 8001b3c:	f67f aeec 	bls.w	8001918 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8001b40:	e70c      	b.n	800195c <HAL_RCCEx_PeriphCLKConfig+0x174>
 8001b42:	4635      	mov	r5, r6
 8001b44:	e712      	b.n	800196c <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001b46:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001b4a:	d19b      	bne.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	1d20      	adds	r0, r4, #4
 8001b50:	f7ff fd3e 	bl	80015d0 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8001b54:	2800      	cmp	r0, #0
 8001b56:	bf18      	it	ne
 8001b58:	4605      	movne	r5, r0
 8001b5a:	e793      	b.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001b5c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001b60:	d1a3      	bne.n	8001aaa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001b62:	2101      	movs	r1, #1
 8001b64:	1d20      	adds	r0, r4, #4
 8001b66:	f7ff fd33 	bl	80015d0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001b6a:	2800      	cmp	r0, #0
 8001b6c:	bf18      	it	ne
 8001b6e:	4605      	movne	r5, r0
 8001b70:	e79b      	b.n	8001aaa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001b72:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001b76:	d1ab      	bne.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001b78:	2101      	movs	r1, #1
 8001b7a:	1d20      	adds	r0, r4, #4
 8001b7c:	f7ff fd28 	bl	80015d0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001b80:	2800      	cmp	r0, #0
 8001b82:	bf18      	it	ne
 8001b84:	4605      	movne	r5, r0
 8001b86:	e7a3      	b.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001b88:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8001b8c:	d1b6      	bne.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001b8e:	2102      	movs	r1, #2
 8001b90:	f104 0020 	add.w	r0, r4, #32
 8001b94:	f7ff fdaa 	bl	80016ec <RCCEx_PLLSAI2_Config>
 8001b98:	e7ad      	b.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	65bb      	str	r3, [r7, #88]	; 0x58
 8001ba2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001bac:	f04f 0801 	mov.w	r8, #1
 8001bb0:	e67f      	b.n	80018b2 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8001bb8:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001bba:	69c1      	ldr	r1, [r0, #28]
{
 8001bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bbe:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001bc0:	6883      	ldr	r3, [r0, #8]
 8001bc2:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001bc4:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001bc6:	4303      	orrs	r3, r0
 8001bc8:	6960      	ldr	r0, [r4, #20]
 8001bca:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001bcc:	48ba      	ldr	r0, [pc, #744]	; (8001eb8 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001bce:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001bd0:	4028      	ands	r0, r5
 8001bd2:	4303      	orrs	r3, r0
 8001bd4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bd6:	6853      	ldr	r3, [r2, #4]
 8001bd8:	68e0      	ldr	r0, [r4, #12]
 8001bda:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bde:	4303      	orrs	r3, r0
 8001be0:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001be2:	4bb6      	ldr	r3, [pc, #728]	; (8001ebc <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001be4:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001be6:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001be8:	bf1c      	itt	ne
 8001bea:	6a23      	ldrne	r3, [r4, #32]
 8001bec:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001bee:	6893      	ldr	r3, [r2, #8]
 8001bf0:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001bf4:	4303      	orrs	r3, r0
 8001bf6:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001bf8:	4bb1      	ldr	r3, [pc, #708]	; (8001ec0 <UART_SetConfig+0x308>)
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d119      	bne.n	8001c32 <UART_SetConfig+0x7a>
 8001bfe:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001c02:	4ab0      	ldr	r2, [pc, #704]	; (8001ec4 <UART_SetConfig+0x30c>)
 8001c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c08:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c0c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001c10:	5cd3      	ldrb	r3, [r2, r3]
 8001c12:	f040 8138 	bne.w	8001e86 <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	f200 808f 	bhi.w	8001d3a <UART_SetConfig+0x182>
 8001c1c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001c20:	00ca011a 	.word	0x00ca011a
 8001c24:	008d00f9 	.word	0x008d00f9
 8001c28:	008d0114 	.word	0x008d0114
 8001c2c:	008d008d 	.word	0x008d008d
 8001c30:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c32:	4ba5      	ldr	r3, [pc, #660]	; (8001ec8 <UART_SetConfig+0x310>)
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d107      	bne.n	8001c48 <UART_SetConfig+0x90>
 8001c38:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001c3c:	4aa3      	ldr	r2, [pc, #652]	; (8001ecc <UART_SetConfig+0x314>)
 8001c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	e7e1      	b.n	8001c0c <UART_SetConfig+0x54>
 8001c48:	4ba1      	ldr	r3, [pc, #644]	; (8001ed0 <UART_SetConfig+0x318>)
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d123      	bne.n	8001c96 <UART_SetConfig+0xde>
 8001c4e:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c56:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001c5a:	2b10      	cmp	r3, #16
 8001c5c:	f000 80f1 	beq.w	8001e42 <UART_SetConfig+0x28a>
 8001c60:	d80b      	bhi.n	8001c7a <UART_SetConfig+0xc2>
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 80f3 	beq.w	8001e4e <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c68:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001c6c:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001c70:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c74:	f000 80f8 	beq.w	8001e68 <UART_SetConfig+0x2b0>
 8001c78:	e0a8      	b.n	8001dcc <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c7a:	2b20      	cmp	r3, #32
 8001c7c:	f000 80c6 	beq.w	8001e0c <UART_SetConfig+0x254>
 8001c80:	2b30      	cmp	r3, #48	; 0x30
 8001c82:	d1f1      	bne.n	8001c68 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c84:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001c88:	f040 80b8 	bne.w	8001dfc <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001c8c:	6860      	ldr	r0, [r4, #4]
 8001c8e:	0843      	lsrs	r3, r0, #1
 8001c90:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001c94:	e0c3      	b.n	8001e1e <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c96:	4b8f      	ldr	r3, [pc, #572]	; (8001ed4 <UART_SetConfig+0x31c>)
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d11e      	bne.n	8001cda <UART_SetConfig+0x122>
 8001c9c:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8001ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001ca8:	2b40      	cmp	r3, #64	; 0x40
 8001caa:	f000 80bb 	beq.w	8001e24 <UART_SetConfig+0x26c>
 8001cae:	d80a      	bhi.n	8001cc6 <UART_SetConfig+0x10e>
 8001cb0:	b97b      	cbnz	r3, 8001cd2 <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001cb2:	4b82      	ldr	r3, [pc, #520]	; (8001ebc <UART_SetConfig+0x304>)
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	f040 80ca 	bne.w	8001e4e <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001cba:	f7ff fc65 	bl	8001588 <HAL_RCC_GetPCLK1Freq>
        break;
 8001cbe:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8001cc0:	bbb0      	cbnz	r0, 8001d30 <UART_SetConfig+0x178>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	e03a      	b.n	8001d3c <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001cc6:	2b80      	cmp	r3, #128	; 0x80
 8001cc8:	f000 809d 	beq.w	8001e06 <UART_SetConfig+0x24e>
 8001ccc:	2bc0      	cmp	r3, #192	; 0xc0
 8001cce:	f000 80b0 	beq.w	8001e32 <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001cd2:	4b7a      	ldr	r3, [pc, #488]	; (8001ebc <UART_SetConfig+0x304>)
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d1c7      	bne.n	8001c68 <UART_SetConfig+0xb0>
 8001cd8:	e02f      	b.n	8001d3a <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001cda:	4b7f      	ldr	r3, [pc, #508]	; (8001ed8 <UART_SetConfig+0x320>)
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d111      	bne.n	8001d04 <UART_SetConfig+0x14c>
 8001ce0:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8001ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cf0:	f000 8098 	beq.w	8001e24 <UART_SetConfig+0x26c>
 8001cf4:	d9dc      	bls.n	8001cb0 <UART_SetConfig+0xf8>
 8001cf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cfa:	f000 8084 	beq.w	8001e06 <UART_SetConfig+0x24e>
 8001cfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d02:	e7e4      	b.n	8001cce <UART_SetConfig+0x116>
 8001d04:	4b6d      	ldr	r3, [pc, #436]	; (8001ebc <UART_SetConfig+0x304>)
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d1ae      	bne.n	8001c68 <UART_SetConfig+0xb0>
 8001d0a:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8001d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d12:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d1a:	f000 8083 	beq.w	8001e24 <UART_SetConfig+0x26c>
 8001d1e:	d9c7      	bls.n	8001cb0 <UART_SetConfig+0xf8>
 8001d20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d24:	d06f      	beq.n	8001e06 <UART_SetConfig+0x24e>
 8001d26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001d2a:	e7d0      	b.n	8001cce <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001d2c:	486b      	ldr	r0, [pc, #428]	; (8001edc <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8001d2e:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8001d30:	6862      	ldr	r2, [r4, #4]
 8001d32:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8001d36:	4281      	cmp	r1, r0
 8001d38:	d905      	bls.n	8001d46 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8001d3a:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001d40:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001d42:	4610      	mov	r0, r2
 8001d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8001d46:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8001d4a:	d8f6      	bhi.n	8001d3a <UART_SetConfig+0x182>
        switch (clocksource)
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d82e      	bhi.n	8001dae <UART_SetConfig+0x1f6>
 8001d50:	e8df f003 	tbb	[pc, r3]
 8001d54:	2d1c2d05 	.word	0x2d1c2d05
 8001d58:	2d2d2d24 	.word	0x2d2d2d24
 8001d5c:	27          	.byte	0x27
 8001d5d:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001d5e:	f7ff fc13 	bl	8001588 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d62:	6862      	ldr	r2, [r4, #4]
 8001d64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d68:	0856      	lsrs	r6, r2, #1
 8001d6a:	2700      	movs	r7, #0
 8001d6c:	fbe1 6700 	umlal	r6, r7, r1, r0
 8001d70:	2300      	movs	r3, #0
 8001d72:	4630      	mov	r0, r6
 8001d74:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001d76:	f7fe fa27 	bl	80001c8 <__aeabi_uldivmod>
            break;
 8001d7a:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001d7c:	4b58      	ldr	r3, [pc, #352]	; (8001ee0 <UART_SetConfig+0x328>)
 8001d7e:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8001d82:	4299      	cmp	r1, r3
 8001d84:	d8d9      	bhi.n	8001d3a <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8001d86:	6823      	ldr	r3, [r4, #0]
 8001d88:	60d8      	str	r0, [r3, #12]
 8001d8a:	e7d7      	b.n	8001d3c <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8001d8c:	4855      	ldr	r0, [pc, #340]	; (8001ee4 <UART_SetConfig+0x32c>)
 8001d8e:	0855      	lsrs	r5, r2, #1
 8001d90:	2300      	movs	r3, #0
 8001d92:	2100      	movs	r1, #0
 8001d94:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001d96:	f141 0100 	adc.w	r1, r1, #0
 8001d9a:	e7ec      	b.n	8001d76 <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d9c:	f7ff f8e8 	bl	8000f70 <HAL_RCC_GetSysClockFreq>
 8001da0:	e7df      	b.n	8001d62 <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001da2:	0850      	lsrs	r0, r2, #1
 8001da4:	2100      	movs	r1, #0
 8001da6:	2300      	movs	r3, #0
 8001da8:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8001dac:	e7f3      	b.n	8001d96 <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8001dae:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001db0:	2000      	movs	r0, #0
 8001db2:	e7e3      	b.n	8001d7c <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001db4:	f7ff fbfa 	bl	80015ac <HAL_RCC_GetPCLK2Freq>
 8001db8:	e04e      	b.n	8001e58 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001dba:	f7ff fbe5 	bl	8001588 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001dbe:	6862      	ldr	r2, [r4, #4]
 8001dc0:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001dc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8001dc8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001dca:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001dcc:	f1a3 0010 	sub.w	r0, r3, #16
 8001dd0:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001dd4:	4288      	cmp	r0, r1
 8001dd6:	d8b0      	bhi.n	8001d3a <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8001dd8:	6821      	ldr	r1, [r4, #0]
 8001dda:	60cb      	str	r3, [r1, #12]
 8001ddc:	e7ae      	b.n	8001d3c <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001dde:	f7ff fbe5 	bl	80015ac <HAL_RCC_GetPCLK2Freq>
 8001de2:	e7ec      	b.n	8001dbe <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001de4:	6860      	ldr	r0, [r4, #4]
 8001de6:	0843      	lsrs	r3, r0, #1
 8001de8:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001dec:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001df0:	fbb3 f3f0 	udiv	r3, r3, r0
 8001df4:	e7e8      	b.n	8001dc8 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001df6:	f7ff f8bb 	bl	8000f70 <HAL_RCC_GetSysClockFreq>
 8001dfa:	e7e0      	b.n	8001dbe <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001dfc:	6860      	ldr	r0, [r4, #4]
 8001dfe:	0843      	lsrs	r3, r0, #1
 8001e00:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001e04:	e7f4      	b.n	8001df0 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001e06:	4b2d      	ldr	r3, [pc, #180]	; (8001ebc <UART_SetConfig+0x304>)
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d08f      	beq.n	8001d2c <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e0c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001e10:	d1e8      	bne.n	8001de4 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001e12:	6860      	ldr	r0, [r4, #4]
 8001e14:	0843      	lsrs	r3, r0, #1
 8001e16:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001e1a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001e1e:	fbb3 f3f0 	udiv	r3, r3, r0
 8001e22:	e01f      	b.n	8001e64 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001e24:	4b25      	ldr	r3, [pc, #148]	; (8001ebc <UART_SetConfig+0x304>)
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d10b      	bne.n	8001e42 <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001e2a:	f7ff f8a1 	bl	8000f70 <HAL_RCC_GetSysClockFreq>
        break;
 8001e2e:	2304      	movs	r3, #4
 8001e30:	e746      	b.n	8001cc0 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001e32:	4b22      	ldr	r3, [pc, #136]	; (8001ebc <UART_SetConfig+0x304>)
 8001e34:	429a      	cmp	r2, r3
 8001e36:	f47f af25 	bne.w	8001c84 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001e3a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8001e3e:	2308      	movs	r3, #8
 8001e40:	e776      	b.n	8001d30 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e42:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001e46:	d1d6      	bne.n	8001df6 <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001e48:	f7ff f892 	bl	8000f70 <HAL_RCC_GetSysClockFreq>
 8001e4c:	e004      	b.n	8001e58 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e4e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001e52:	d1b2      	bne.n	8001dba <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001e54:	f7ff fb98 	bl	8001588 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001e58:	6861      	ldr	r1, [r4, #4]
 8001e5a:	084a      	lsrs	r2, r1, #1
 8001e5c:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001e60:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e64:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e66:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e68:	f1a3 0010 	sub.w	r0, r3, #16
 8001e6c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001e70:	4288      	cmp	r0, r1
 8001e72:	f63f af62 	bhi.w	8001d3a <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 8001e76:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8001e7a:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001e7c:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001e80:	430b      	orrs	r3, r1
 8001e82:	60c3      	str	r3, [r0, #12]
 8001e84:	e75a      	b.n	8001d3c <UART_SetConfig+0x184>
    switch (clocksource)
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	f63f af57 	bhi.w	8001d3a <UART_SetConfig+0x182>
 8001e8c:	a201      	add	r2, pc, #4	; (adr r2, 8001e94 <UART_SetConfig+0x2dc>)
 8001e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e92:	bf00      	nop
 8001e94:	08001dbb 	.word	0x08001dbb
 8001e98:	08001ddf 	.word	0x08001ddf
 8001e9c:	08001de5 	.word	0x08001de5
 8001ea0:	08001d3b 	.word	0x08001d3b
 8001ea4:	08001df7 	.word	0x08001df7
 8001ea8:	08001d3b 	.word	0x08001d3b
 8001eac:	08001d3b 	.word	0x08001d3b
 8001eb0:	08001d3b 	.word	0x08001d3b
 8001eb4:	08001dfd 	.word	0x08001dfd
 8001eb8:	efff69f3 	.word	0xefff69f3
 8001ebc:	40008000 	.word	0x40008000
 8001ec0:	40013800 	.word	0x40013800
 8001ec4:	080029d8 	.word	0x080029d8
 8001ec8:	40004400 	.word	0x40004400
 8001ecc:	080029dc 	.word	0x080029dc
 8001ed0:	40004800 	.word	0x40004800
 8001ed4:	40004c00 	.word	0x40004c00
 8001ed8:	40005000 	.word	0x40005000
 8001edc:	00f42400 	.word	0x00f42400
 8001ee0:	000ffcff 	.word	0x000ffcff
 8001ee4:	f4240000 	.word	0xf4240000

08001ee8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ee8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001eea:	07da      	lsls	r2, r3, #31
{
 8001eec:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001eee:	d506      	bpl.n	8001efe <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001ef0:	6801      	ldr	r1, [r0, #0]
 8001ef2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001ef4:	684a      	ldr	r2, [r1, #4]
 8001ef6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001efa:	4322      	orrs	r2, r4
 8001efc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001efe:	079c      	lsls	r4, r3, #30
 8001f00:	d506      	bpl.n	8001f10 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001f02:	6801      	ldr	r1, [r0, #0]
 8001f04:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001f06:	684a      	ldr	r2, [r1, #4]
 8001f08:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f0c:	4322      	orrs	r2, r4
 8001f0e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001f10:	0759      	lsls	r1, r3, #29
 8001f12:	d506      	bpl.n	8001f22 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001f14:	6801      	ldr	r1, [r0, #0]
 8001f16:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001f18:	684a      	ldr	r2, [r1, #4]
 8001f1a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f1e:	4322      	orrs	r2, r4
 8001f20:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001f22:	071a      	lsls	r2, r3, #28
 8001f24:	d506      	bpl.n	8001f34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001f26:	6801      	ldr	r1, [r0, #0]
 8001f28:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001f2a:	684a      	ldr	r2, [r1, #4]
 8001f2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f30:	4322      	orrs	r2, r4
 8001f32:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f34:	06dc      	lsls	r4, r3, #27
 8001f36:	d506      	bpl.n	8001f46 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001f38:	6801      	ldr	r1, [r0, #0]
 8001f3a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001f3c:	688a      	ldr	r2, [r1, #8]
 8001f3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f42:	4322      	orrs	r2, r4
 8001f44:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001f46:	0699      	lsls	r1, r3, #26
 8001f48:	d506      	bpl.n	8001f58 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001f4a:	6801      	ldr	r1, [r0, #0]
 8001f4c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001f4e:	688a      	ldr	r2, [r1, #8]
 8001f50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f54:	4322      	orrs	r2, r4
 8001f56:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001f58:	065a      	lsls	r2, r3, #25
 8001f5a:	d50f      	bpl.n	8001f7c <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f5c:	6801      	ldr	r1, [r0, #0]
 8001f5e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001f60:	684a      	ldr	r2, [r1, #4]
 8001f62:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001f66:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f68:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f6c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f6e:	d105      	bne.n	8001f7c <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001f70:	684a      	ldr	r2, [r1, #4]
 8001f72:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001f74:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001f78:	4322      	orrs	r2, r4
 8001f7a:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001f7c:	061b      	lsls	r3, r3, #24
 8001f7e:	d506      	bpl.n	8001f8e <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001f80:	6802      	ldr	r2, [r0, #0]
 8001f82:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001f84:	6853      	ldr	r3, [r2, #4]
 8001f86:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001f8a:	430b      	orrs	r3, r1
 8001f8c:	6053      	str	r3, [r2, #4]
 8001f8e:	bd10      	pop	{r4, pc}

08001f90 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f94:	9d06      	ldr	r5, [sp, #24]
 8001f96:	4604      	mov	r4, r0
 8001f98:	460f      	mov	r7, r1
 8001f9a:	4616      	mov	r6, r2
 8001f9c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f9e:	6821      	ldr	r1, [r4, #0]
 8001fa0:	69ca      	ldr	r2, [r1, #28]
 8001fa2:	ea37 0302 	bics.w	r3, r7, r2
 8001fa6:	bf0c      	ite	eq
 8001fa8:	2201      	moveq	r2, #1
 8001faa:	2200      	movne	r2, #0
 8001fac:	42b2      	cmp	r2, r6
 8001fae:	d002      	beq.n	8001fb6 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001fb0:	2000      	movs	r0, #0
}
 8001fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001fb6:	1c6b      	adds	r3, r5, #1
 8001fb8:	d0f2      	beq.n	8001fa0 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001fba:	b99d      	cbnz	r5, 8001fe4 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fbc:	6823      	ldr	r3, [r4, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001fc4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	f022 0201 	bic.w	r2, r2, #1
 8001fcc:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001fce:	2320      	movs	r3, #32
 8001fd0:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8001fd4:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8001fde:	2003      	movs	r0, #3
 8001fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001fe4:	f7fe faae 	bl	8000544 <HAL_GetTick>
 8001fe8:	eba0 0008 	sub.w	r0, r0, r8
 8001fec:	4285      	cmp	r5, r0
 8001fee:	d2d6      	bcs.n	8001f9e <UART_WaitOnFlagUntilTimeout+0xe>
 8001ff0:	e7e4      	b.n	8001fbc <UART_WaitOnFlagUntilTimeout+0x2c>

08001ff2 <UART_CheckIdleState>:
{
 8001ff2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001ff4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ff6:	2600      	movs	r6, #0
 8001ff8:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8001ffa:	f7fe faa3 	bl	8000544 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001ffe:	6823      	ldr	r3, [r4, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002004:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002006:	d417      	bmi.n	8002038 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002008:	6823      	ldr	r3, [r4, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	075b      	lsls	r3, r3, #29
 800200e:	d50a      	bpl.n	8002026 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002010:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	2200      	movs	r2, #0
 8002018:	462b      	mov	r3, r5
 800201a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800201e:	4620      	mov	r0, r4
 8002020:	f7ff ffb6 	bl	8001f90 <UART_WaitOnFlagUntilTimeout>
 8002024:	b9a0      	cbnz	r0, 8002050 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8002026:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002028:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800202a:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 800202e:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8002032:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8002036:	e00c      	b.n	8002052 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002038:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	4632      	mov	r2, r6
 8002040:	4603      	mov	r3, r0
 8002042:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002046:	4620      	mov	r0, r4
 8002048:	f7ff ffa2 	bl	8001f90 <UART_WaitOnFlagUntilTimeout>
 800204c:	2800      	cmp	r0, #0
 800204e:	d0db      	beq.n	8002008 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002050:	2003      	movs	r0, #3
}
 8002052:	b002      	add	sp, #8
 8002054:	bd70      	pop	{r4, r5, r6, pc}

08002056 <HAL_UART_Init>:
{
 8002056:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002058:	4604      	mov	r4, r0
 800205a:	b360      	cbz	r0, 80020b6 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 800205c:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002060:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002064:	b91b      	cbnz	r3, 800206e <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002066:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800206a:	f000 fbf3 	bl	8002854 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800206e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002070:	2324      	movs	r3, #36	; 0x24
 8002072:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8002076:	6813      	ldr	r3, [r2, #0]
 8002078:	f023 0301 	bic.w	r3, r3, #1
 800207c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800207e:	4620      	mov	r0, r4
 8002080:	f7ff fd9a 	bl	8001bb8 <UART_SetConfig>
 8002084:	2801      	cmp	r0, #1
 8002086:	d016      	beq.n	80020b6 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002088:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800208a:	b113      	cbz	r3, 8002092 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 800208c:	4620      	mov	r0, r4
 800208e:	f7ff ff2b 	bl	8001ee8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002092:	6823      	ldr	r3, [r4, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800209a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020a2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80020aa:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80020ac:	601a      	str	r2, [r3, #0]
}
 80020ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80020b2:	f7ff bf9e 	b.w	8001ff2 <UART_CheckIdleState>
}
 80020b6:	2001      	movs	r0, #1
 80020b8:	bd10      	pop	{r4, pc}
	...

080020bc <TEMPandHUM_init>:
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void TEMPandHUM_init(void)
{
 80020bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Write(&hi2c1,0xBE, addr_CTRL_REG1_TEMP[0], 1, CTRL_REG1_TEMP, 1, I2C_TIMEOUT);
 80020be:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <TEMPandHUM_init+0x24>)
 80020c0:	4908      	ldr	r1, [pc, #32]	; (80020e4 <TEMPandHUM_init+0x28>)
 80020c2:	781a      	ldrb	r2, [r3, #0]
 80020c4:	4808      	ldr	r0, [pc, #32]	; (80020e8 <TEMPandHUM_init+0x2c>)
 80020c6:	9100      	str	r1, [sp, #0]
 80020c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020cc:	9302      	str	r3, [sp, #8]
 80020ce:	2301      	movs	r3, #1
 80020d0:	9301      	str	r3, [sp, #4]
 80020d2:	21be      	movs	r1, #190	; 0xbe
 80020d4:	f7fe fd0a 	bl	8000aec <HAL_I2C_Mem_Write>
}
 80020d8:	b005      	add	sp, #20
 80020da:	f85d fb04 	ldr.w	pc, [sp], #4
 80020de:	bf00      	nop
 80020e0:	20000005 	.word	0x20000005
 80020e4:	20000001 	.word	0x20000001
 80020e8:	20000054 	.word	0x20000054

080020ec <PRES_init>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void PRES_init(void)
{
 80020ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_I2C_Mem_Write(&hi2c1,0xBA, addr_CTRL_REG1_PRES[0], 1, CTRL_REG1_PRES, 1, I2C_TIMEOUT);
 80020ee:	4b13      	ldr	r3, [pc, #76]	; (800213c <PRES_init+0x50>)
 80020f0:	4d13      	ldr	r5, [pc, #76]	; (8002140 <PRES_init+0x54>)
 80020f2:	781a      	ldrb	r2, [r3, #0]
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <PRES_init+0x58>)
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	2401      	movs	r4, #1
 80020fa:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80020fe:	4623      	mov	r3, r4
 8002100:	9602      	str	r6, [sp, #8]
 8002102:	9401      	str	r4, [sp, #4]
 8002104:	21ba      	movs	r1, #186	; 0xba
 8002106:	4628      	mov	r0, r5
 8002108:	f7fe fcf0 	bl	8000aec <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1,0xBA, addr_CTRL_REG2_PRES[0], 1, CTRL_REG2_PRES, 1, I2C_TIMEOUT);
 800210c:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <PRES_init+0x5c>)
 800210e:	781a      	ldrb	r2, [r3, #0]
 8002110:	4b0e      	ldr	r3, [pc, #56]	; (800214c <PRES_init+0x60>)
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	9602      	str	r6, [sp, #8]
 8002116:	4623      	mov	r3, r4
 8002118:	9401      	str	r4, [sp, #4]
 800211a:	21ba      	movs	r1, #186	; 0xba
 800211c:	4628      	mov	r0, r5
 800211e:	f7fe fce5 	bl	8000aec <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1,0xBA, addr_INTERRUPT_CFG[0], 1, INTERRUPT_CFG, 1, I2C_TIMEOUT);
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <PRES_init+0x64>)
 8002124:	781a      	ldrb	r2, [r3, #0]
 8002126:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <PRES_init+0x68>)
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	9602      	str	r6, [sp, #8]
 800212c:	9401      	str	r4, [sp, #4]
 800212e:	4623      	mov	r3, r4
 8002130:	21ba      	movs	r1, #186	; 0xba
 8002132:	4628      	mov	r0, r5
 8002134:	f7fe fcda 	bl	8000aec <HAL_I2C_Mem_Write>
}
 8002138:	b004      	add	sp, #16
 800213a:	bd70      	pop	{r4, r5, r6, pc}
 800213c:	20000004 	.word	0x20000004
 8002140:	20000054 	.word	0x20000054
 8002144:	20000000 	.word	0x20000000
 8002148:	20000006 	.word	0x20000006
 800214c:	20000002 	.word	0x20000002
 8002150:	2000000f 	.word	0x2000000f
 8002154:	20000003 	.word	0x20000003

08002158 <get_TEMP>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void get_TEMP(void)
{
 8002158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_degC_x8[0], 1, T0_degC_x8, 1, I2C_TIMEOUT);
 800215c:	4b66      	ldr	r3, [pc, #408]	; (80022f8 <get_TEMP+0x1a0>)
 800215e:	4d67      	ldr	r5, [pc, #412]	; (80022fc <get_TEMP+0x1a4>)
 8002160:	781a      	ldrb	r2, [r3, #0]
 8002162:	4b67      	ldr	r3, [pc, #412]	; (8002300 <get_TEMP+0x1a8>)
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T1_degC_x8[0], 1, T1_degC_x8, 1, I2C_TIMEOUT);
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_T1_msb[0], 1, T0_T1_msb, 1, I2C_TIMEOUT);
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_H[0], 1, T0_H, 1, I2C_TIMEOUT);
 8002164:	4f67      	ldr	r7, [pc, #412]	; (8002304 <get_TEMP+0x1ac>)
 8002166:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 800235c <get_TEMP+0x204>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_H[0], 1, T0_H, 1, I2C_TIMEOUT);
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_L[0], 1, T0_L, 1, I2C_TIMEOUT);
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T1_H[0], 1, T1_H, 1, I2C_TIMEOUT);
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T1_L[0], 1, T1_L, 1, I2C_TIMEOUT);
 800216a:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 8002360 <get_TEMP+0x208>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T_OUT_H[0], 1, T_OUT_H, 1, I2C_TIMEOUT);
 800216e:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 8002364 <get_TEMP+0x20c>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T_OUT_L[0], 1, T_OUT_L, 1, I2C_TIMEOUT);
 8002172:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 8002368 <get_TEMP+0x210>
{
 8002176:	b085      	sub	sp, #20
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_degC_x8[0], 1, T0_degC_x8, 1, I2C_TIMEOUT);
 8002178:	2401      	movs	r4, #1
 800217a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800217e:	9602      	str	r6, [sp, #8]
 8002180:	9401      	str	r4, [sp, #4]
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	21bf      	movs	r1, #191	; 0xbf
 8002186:	4623      	mov	r3, r4
 8002188:	4628      	mov	r0, r5
 800218a:	f7fe fd67 	bl	8000c5c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T1_degC_x8[0], 1, T1_degC_x8, 1, I2C_TIMEOUT);
 800218e:	4b5e      	ldr	r3, [pc, #376]	; (8002308 <get_TEMP+0x1b0>)
 8002190:	781a      	ldrb	r2, [r3, #0]
 8002192:	4b5e      	ldr	r3, [pc, #376]	; (800230c <get_TEMP+0x1b4>)
 8002194:	9602      	str	r6, [sp, #8]
 8002196:	9401      	str	r4, [sp, #4]
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	21bf      	movs	r1, #191	; 0xbf
 800219c:	4623      	mov	r3, r4
 800219e:	4628      	mov	r0, r5
 80021a0:	f7fe fd5c 	bl	8000c5c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_T1_msb[0], 1, T0_T1_msb, 1, I2C_TIMEOUT);
 80021a4:	4b5a      	ldr	r3, [pc, #360]	; (8002310 <get_TEMP+0x1b8>)
 80021a6:	781a      	ldrb	r2, [r3, #0]
 80021a8:	4b5a      	ldr	r3, [pc, #360]	; (8002314 <get_TEMP+0x1bc>)
 80021aa:	9602      	str	r6, [sp, #8]
 80021ac:	9401      	str	r4, [sp, #4]
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	21bf      	movs	r1, #191	; 0xbf
 80021b2:	4623      	mov	r3, r4
 80021b4:	4628      	mov	r0, r5
 80021b6:	f7fe fd51 	bl	8000c5c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_H[0], 1, T0_H, 1, I2C_TIMEOUT);
 80021ba:	783a      	ldrb	r2, [r7, #0]
 80021bc:	9602      	str	r6, [sp, #8]
 80021be:	9401      	str	r4, [sp, #4]
 80021c0:	4623      	mov	r3, r4
 80021c2:	f8cd 8000 	str.w	r8, [sp]
 80021c6:	21bf      	movs	r1, #191	; 0xbf
 80021c8:	4628      	mov	r0, r5
 80021ca:	f7fe fd47 	bl	8000c5c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_H[0], 1, T0_H, 1, I2C_TIMEOUT);
 80021ce:	783a      	ldrb	r2, [r7, #0]
 80021d0:	9602      	str	r6, [sp, #8]
 80021d2:	9401      	str	r4, [sp, #4]
 80021d4:	4623      	mov	r3, r4
 80021d6:	f8cd 8000 	str.w	r8, [sp]
 80021da:	21bf      	movs	r1, #191	; 0xbf
 80021dc:	4628      	mov	r0, r5
 80021de:	f7fe fd3d 	bl	8000c5c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_L[0], 1, T0_L, 1, I2C_TIMEOUT);
 80021e2:	4b4d      	ldr	r3, [pc, #308]	; (8002318 <get_TEMP+0x1c0>)
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T_OUT_L[0], 1, T_OUT_L, 1, I2C_TIMEOUT);
 80021e4:	4f4d      	ldr	r7, [pc, #308]	; (800231c <get_TEMP+0x1c4>)
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_L[0], 1, T0_L, 1, I2C_TIMEOUT);
 80021e6:	781a      	ldrb	r2, [r3, #0]
 80021e8:	4b4d      	ldr	r3, [pc, #308]	; (8002320 <get_TEMP+0x1c8>)
 80021ea:	9602      	str	r6, [sp, #8]
 80021ec:	9401      	str	r4, [sp, #4]
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	21bf      	movs	r1, #191	; 0xbf
 80021f2:	4623      	mov	r3, r4
 80021f4:	4628      	mov	r0, r5
 80021f6:	f7fe fd31 	bl	8000c5c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T1_H[0], 1, T1_H, 1, I2C_TIMEOUT);
 80021fa:	4b4a      	ldr	r3, [pc, #296]	; (8002324 <get_TEMP+0x1cc>)
 80021fc:	781a      	ldrb	r2, [r3, #0]
 80021fe:	4b4a      	ldr	r3, [pc, #296]	; (8002328 <get_TEMP+0x1d0>)
 8002200:	9602      	str	r6, [sp, #8]
 8002202:	9401      	str	r4, [sp, #4]
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	21bf      	movs	r1, #191	; 0xbf
 8002208:	4623      	mov	r3, r4
 800220a:	4628      	mov	r0, r5
 800220c:	f7fe fd26 	bl	8000c5c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T1_L[0], 1, T1_L, 1, I2C_TIMEOUT);
 8002210:	4b46      	ldr	r3, [pc, #280]	; (800232c <get_TEMP+0x1d4>)
 8002212:	21bf      	movs	r1, #191	; 0xbf
 8002214:	781a      	ldrb	r2, [r3, #0]
 8002216:	9602      	str	r6, [sp, #8]
 8002218:	9401      	str	r4, [sp, #4]
 800221a:	4623      	mov	r3, r4
 800221c:	f8cd a000 	str.w	sl, [sp]
 8002220:	4628      	mov	r0, r5
 8002222:	f7fe fd1b 	bl	8000c5c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T_OUT_H[0], 1, T_OUT_H, 1, I2C_TIMEOUT);
 8002226:	4b42      	ldr	r3, [pc, #264]	; (8002330 <get_TEMP+0x1d8>)
 8002228:	21bf      	movs	r1, #191	; 0xbf
 800222a:	781a      	ldrb	r2, [r3, #0]
 800222c:	9602      	str	r6, [sp, #8]
 800222e:	9401      	str	r4, [sp, #4]
 8002230:	4623      	mov	r3, r4
 8002232:	f8cd 9000 	str.w	r9, [sp]
 8002236:	4628      	mov	r0, r5
 8002238:	f7fe fd10 	bl	8000c5c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T_OUT_L[0], 1, T_OUT_L, 1, I2C_TIMEOUT);
 800223c:	f89b 2000 	ldrb.w	r2, [fp]
 8002240:	9602      	str	r6, [sp, #8]
 8002242:	9401      	str	r4, [sp, #4]
 8002244:	4623      	mov	r3, r4
 8002246:	9700      	str	r7, [sp, #0]
 8002248:	21bf      	movs	r1, #191	; 0xbf
 800224a:	4628      	mov	r0, r5
 800224c:	f7fe fd06 	bl	8000c5c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T_OUT_L[0], 1, T_OUT_L, 1, I2C_TIMEOUT);
 8002250:	f89b 2000 	ldrb.w	r2, [fp]
 8002254:	9602      	str	r6, [sp, #8]
 8002256:	9401      	str	r4, [sp, #4]
 8002258:	4623      	mov	r3, r4
 800225a:	9700      	str	r7, [sp, #0]
 800225c:	21bf      	movs	r1, #191	; 0xbf
 800225e:	4628      	mov	r0, r5
 8002260:	f7fe fcfc 	bl	8000c5c <HAL_I2C_Mem_Read>

	//CONCATENATION
	T0_OUT[0]	= (T0_H[0]<<8) + T0_L[0];
 8002264:	4a2e      	ldr	r2, [pc, #184]	; (8002320 <get_TEMP+0x1c8>)
 8002266:	f898 3000 	ldrb.w	r3, [r8]
 800226a:	7811      	ldrb	r1, [r2, #0]
	T1_OUT[0]	= (T1_H[0]<<8) + T1_L[0];
 800226c:	f89a 0000 	ldrb.w	r0, [sl]
	T_OUT[0]	= (T_OUT_H[0]<<8) + T_OUT_L[0];
 8002270:	783a      	ldrb	r2, [r7, #0]
	est_negatif(T0_OUT[0]);
	est_negatif(T1_OUT[0]);
	est_negatif(T_OUT[0]);

	//CALCUL DES T0_degC ET T1_degC FINALES
	T0_msb[0]		= T0_T1_msb[0] & 0x3;
 8002272:	4c30      	ldr	r4, [pc, #192]	; (8002334 <get_TEMP+0x1dc>)
	T0_OUT[0]	= (T0_H[0]<<8) + T0_L[0];
 8002274:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8002278:	4b2f      	ldr	r3, [pc, #188]	; (8002338 <get_TEMP+0x1e0>)
 800227a:	b289      	uxth	r1, r1
 800227c:	8019      	strh	r1, [r3, #0]
	T1_OUT[0]	= (T1_H[0]<<8) + T1_L[0];
 800227e:	4b2a      	ldr	r3, [pc, #168]	; (8002328 <get_TEMP+0x1d0>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8002286:	4b2d      	ldr	r3, [pc, #180]	; (800233c <get_TEMP+0x1e4>)
 8002288:	b280      	uxth	r0, r0
 800228a:	8018      	strh	r0, [r3, #0]
	T_OUT[0]	= (T_OUT_H[0]<<8) + T_OUT_L[0];
 800228c:	f899 3000 	ldrb.w	r3, [r9]
 8002290:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8002294:	4b2a      	ldr	r3, [pc, #168]	; (8002340 <get_TEMP+0x1e8>)
 8002296:	b292      	uxth	r2, r2
 8002298:	801a      	strh	r2, [r3, #0]
	T0_msb[0]		= T0_T1_msb[0] & 0x3;
 800229a:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <get_TEMP+0x1bc>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	f003 0603 	and.w	r6, r3, #3
	T1_msb[0]		= (T0_T1_msb[0] & 0xC)>>2;
 80022a2:	f3c3 0581 	ubfx	r5, r3, #2, #2
 80022a6:	4b27      	ldr	r3, [pc, #156]	; (8002344 <get_TEMP+0x1ec>)
	T0_msb[0]		= T0_T1_msb[0] & 0x3;
 80022a8:	7026      	strb	r6, [r4, #0]
	T1_msb[0]		= (T0_T1_msb[0] & 0xC)>>2;
 80022aa:	701d      	strb	r5, [r3, #0]
	T0_degC[0] 		= (T0_msb[0]<<8) + T0_degC_x8[0];
 80022ac:	4b14      	ldr	r3, [pc, #80]	; (8002300 <get_TEMP+0x1a8>)
 80022ae:	781c      	ldrb	r4, [r3, #0]
 80022b0:	4b25      	ldr	r3, [pc, #148]	; (8002348 <get_TEMP+0x1f0>)
 80022b2:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 80022b6:	801c      	strh	r4, [r3, #0]
	T1_degC[0] 		= (T1_msb[0]<<8) + T1_degC_x8[0];
 80022b8:	4b14      	ldr	r3, [pc, #80]	; (800230c <get_TEMP+0x1b4>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 80022c0:	4d22      	ldr	r5, [pc, #136]	; (800234c <get_TEMP+0x1f4>)
 80022c2:	802b      	strh	r3, [r5, #0]
	T0_degC_DIV8[0]	= T0_degC[0]>>3;
 80022c4:	4d22      	ldr	r5, [pc, #136]	; (8002350 <get_TEMP+0x1f8>)
 80022c6:	08e4      	lsrs	r4, r4, #3
	T1_degC_DIV8[0]	= T1_degC[0]>>3;

	//CALCUL DE LA TEMPERATURE
	temp16[0] = ((int16_t)(T_OUT[0]-T0_OUT[0]))*10*((int16_t)(T1_degC_DIV8[0]-T0_degC_DIV8[0]))/((int16_t)(T1_OUT[0]-T0_OUT[0]))+(int16_t)(T0_degC_DIV8[0])*10;
 80022c8:	1a52      	subs	r2, r2, r1
	T0_degC_DIV8[0]	= T0_degC[0]>>3;
 80022ca:	802c      	strh	r4, [r5, #0]
	temp16[0] = ((int16_t)(T_OUT[0]-T0_OUT[0]))*10*((int16_t)(T1_degC_DIV8[0]-T0_degC_DIV8[0]))/((int16_t)(T1_OUT[0]-T0_OUT[0]))+(int16_t)(T0_degC_DIV8[0])*10;
 80022cc:	b212      	sxth	r2, r2
	T1_degC_DIV8[0]	= T1_degC[0]>>3;
 80022ce:	4d21      	ldr	r5, [pc, #132]	; (8002354 <get_TEMP+0x1fc>)
 80022d0:	08db      	lsrs	r3, r3, #3
	temp16[0] = ((int16_t)(T_OUT[0]-T0_OUT[0]))*10*((int16_t)(T1_degC_DIV8[0]-T0_degC_DIV8[0]))/((int16_t)(T1_OUT[0]-T0_OUT[0]))+(int16_t)(T0_degC_DIV8[0])*10;
 80022d2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	T1_degC_DIV8[0]	= T1_degC[0]>>3;
 80022d6:	802b      	strh	r3, [r5, #0]
	temp16[0] = ((int16_t)(T_OUT[0]-T0_OUT[0]))*10*((int16_t)(T1_degC_DIV8[0]-T0_degC_DIV8[0]))/((int16_t)(T1_OUT[0]-T0_OUT[0]))+(int16_t)(T0_degC_DIV8[0])*10;
 80022d8:	0052      	lsls	r2, r2, #1
 80022da:	1b1b      	subs	r3, r3, r4
 80022dc:	4353      	muls	r3, r2
 80022de:	1a41      	subs	r1, r0, r1
 80022e0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80022e4:	4a1c      	ldr	r2, [pc, #112]	; (8002358 <get_TEMP+0x200>)
 80022e6:	b209      	sxth	r1, r1
 80022e8:	fb93 f3f1 	sdiv	r3, r3, r1
 80022ec:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80022f0:	8013      	strh	r3, [r2, #0]

}
 80022f2:	b005      	add	sp, #20
 80022f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022f8:	20000019 	.word	0x20000019
 80022fc:	20000054 	.word	0x20000054
 8002300:	200000ad 	.word	0x200000ad
 8002304:	20000016 	.word	0x20000016
 8002308:	2000001c 	.word	0x2000001c
 800230c:	200000ac 	.word	0x200000ac
 8002310:	20000018 	.word	0x20000018
 8002314:	200000b6 	.word	0x200000b6
 8002318:	20000017 	.word	0x20000017
 800231c:	2000004a 	.word	0x2000004a
 8002320:	20000046 	.word	0x20000046
 8002324:	2000001a 	.word	0x2000001a
 8002328:	2000004b 	.word	0x2000004b
 800232c:	2000001b 	.word	0x2000001b
 8002330:	2000001d 	.word	0x2000001d
 8002334:	200000ba 	.word	0x200000ba
 8002338:	200000b4 	.word	0x200000b4
 800233c:	200000c4 	.word	0x200000c4
 8002340:	200000ce 	.word	0x200000ce
 8002344:	20000044 	.word	0x20000044
 8002348:	200000aa 	.word	0x200000aa
 800234c:	200000b2 	.word	0x200000b2
 8002350:	200000ca 	.word	0x200000ca
 8002354:	20000052 	.word	0x20000052
 8002358:	200000b8 	.word	0x200000b8
 800235c:	200000af 	.word	0x200000af
 8002360:	200000a9 	.word	0x200000a9
 8002364:	200000c2 	.word	0x200000c2
 8002368:	2000001e 	.word	0x2000001e

0800236c <get_HUM>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void get_HUM(void)
{
 800236c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_HUM_H[0], 1, HUM_H, 1, I2C_TIMEOUT);
 8002370:	4b4a      	ldr	r3, [pc, #296]	; (800249c <get_HUM+0x130>)
 8002372:	4d4b      	ldr	r5, [pc, #300]	; (80024a0 <get_HUM+0x134>)
 8002374:	f8df 8170 	ldr.w	r8, [pc, #368]	; 80024e8 <get_HUM+0x17c>
 8002378:	781a      	ldrb	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_HUM_L[0], 1, HUM_L, 1, I2C_TIMEOUT);
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H0_rH_x2[0], 1, H0_rH_x2, 1, I2C_TIMEOUT);
 800237a:	4f4a      	ldr	r7, [pc, #296]	; (80024a4 <get_HUM+0x138>)
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H1_rH_x2[0], 1, H0_rH_x2, 1, I2C_TIMEOUT);
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H0_T0_OUT_H[0], 1, H0_T0_OUT_H, 1, I2C_TIMEOUT);
 800237c:	f8df b16c 	ldr.w	fp, [pc, #364]	; 80024ec <get_HUM+0x180>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H0_T0_OUT_L[0], 1, H0_T0_OUT_L, 1, I2C_TIMEOUT);
 8002380:	f8df a16c 	ldr.w	sl, [pc, #364]	; 80024f0 <get_HUM+0x184>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H1_T0_OUT_H[0], 1, H1_T0_OUT_H, 1, I2C_TIMEOUT);
 8002384:	f8df 916c 	ldr.w	r9, [pc, #364]	; 80024f4 <get_HUM+0x188>
{
 8002388:	b085      	sub	sp, #20
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_HUM_H[0], 1, HUM_H, 1, I2C_TIMEOUT);
 800238a:	2401      	movs	r4, #1
 800238c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8002390:	9602      	str	r6, [sp, #8]
 8002392:	9401      	str	r4, [sp, #4]
 8002394:	4623      	mov	r3, r4
 8002396:	f8cd 8000 	str.w	r8, [sp]
 800239a:	21bf      	movs	r1, #191	; 0xbf
 800239c:	4628      	mov	r0, r5
 800239e:	f7fe fc5d 	bl	8000c5c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_HUM_L[0], 1, HUM_L, 1, I2C_TIMEOUT);
 80023a2:	4b41      	ldr	r3, [pc, #260]	; (80024a8 <get_HUM+0x13c>)
 80023a4:	781a      	ldrb	r2, [r3, #0]
 80023a6:	4b41      	ldr	r3, [pc, #260]	; (80024ac <get_HUM+0x140>)
 80023a8:	9602      	str	r6, [sp, #8]
 80023aa:	9401      	str	r4, [sp, #4]
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	21bf      	movs	r1, #191	; 0xbf
 80023b0:	4623      	mov	r3, r4
 80023b2:	4628      	mov	r0, r5
 80023b4:	f7fe fc52 	bl	8000c5c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H0_rH_x2[0], 1, H0_rH_x2, 1, I2C_TIMEOUT);
 80023b8:	4b3d      	ldr	r3, [pc, #244]	; (80024b0 <get_HUM+0x144>)
 80023ba:	21bf      	movs	r1, #191	; 0xbf
 80023bc:	781a      	ldrb	r2, [r3, #0]
 80023be:	9602      	str	r6, [sp, #8]
 80023c0:	9401      	str	r4, [sp, #4]
 80023c2:	4623      	mov	r3, r4
 80023c4:	9700      	str	r7, [sp, #0]
 80023c6:	4628      	mov	r0, r5
 80023c8:	f7fe fc48 	bl	8000c5c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H1_rH_x2[0], 1, H0_rH_x2, 1, I2C_TIMEOUT);
 80023cc:	4b39      	ldr	r3, [pc, #228]	; (80024b4 <get_HUM+0x148>)
 80023ce:	21bf      	movs	r1, #191	; 0xbf
 80023d0:	781a      	ldrb	r2, [r3, #0]
 80023d2:	9602      	str	r6, [sp, #8]
 80023d4:	9401      	str	r4, [sp, #4]
 80023d6:	4623      	mov	r3, r4
 80023d8:	9700      	str	r7, [sp, #0]
 80023da:	4628      	mov	r0, r5
 80023dc:	f7fe fc3e 	bl	8000c5c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H0_T0_OUT_H[0], 1, H0_T0_OUT_H, 1, I2C_TIMEOUT);
 80023e0:	4b35      	ldr	r3, [pc, #212]	; (80024b8 <get_HUM+0x14c>)
 80023e2:	21bf      	movs	r1, #191	; 0xbf
 80023e4:	781a      	ldrb	r2, [r3, #0]
 80023e6:	9602      	str	r6, [sp, #8]
 80023e8:	9401      	str	r4, [sp, #4]
 80023ea:	4623      	mov	r3, r4
 80023ec:	f8cd b000 	str.w	fp, [sp]
 80023f0:	4628      	mov	r0, r5
 80023f2:	f7fe fc33 	bl	8000c5c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H0_T0_OUT_L[0], 1, H0_T0_OUT_L, 1, I2C_TIMEOUT);
 80023f6:	4b31      	ldr	r3, [pc, #196]	; (80024bc <get_HUM+0x150>)
 80023f8:	21bf      	movs	r1, #191	; 0xbf
 80023fa:	781a      	ldrb	r2, [r3, #0]
 80023fc:	9602      	str	r6, [sp, #8]
 80023fe:	9401      	str	r4, [sp, #4]
 8002400:	4623      	mov	r3, r4
 8002402:	f8cd a000 	str.w	sl, [sp]
 8002406:	4628      	mov	r0, r5
 8002408:	f7fe fc28 	bl	8000c5c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H1_T0_OUT_H[0], 1, H1_T0_OUT_H, 1, I2C_TIMEOUT);
 800240c:	4b2c      	ldr	r3, [pc, #176]	; (80024c0 <get_HUM+0x154>)
 800240e:	21bf      	movs	r1, #191	; 0xbf
 8002410:	781a      	ldrb	r2, [r3, #0]
 8002412:	9602      	str	r6, [sp, #8]
 8002414:	9401      	str	r4, [sp, #4]
 8002416:	4623      	mov	r3, r4
 8002418:	f8cd 9000 	str.w	r9, [sp]
 800241c:	4628      	mov	r0, r5
 800241e:	f7fe fc1d 	bl	8000c5c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H1_T0_OUT_L[0], 1, H1_T0_OUT_L, 1, I2C_TIMEOUT);
 8002422:	4b28      	ldr	r3, [pc, #160]	; (80024c4 <get_HUM+0x158>)
 8002424:	781a      	ldrb	r2, [r3, #0]
 8002426:	9602      	str	r6, [sp, #8]
 8002428:	4e27      	ldr	r6, [pc, #156]	; (80024c8 <get_HUM+0x15c>)
 800242a:	9401      	str	r4, [sp, #4]
 800242c:	4623      	mov	r3, r4
 800242e:	9600      	str	r6, [sp, #0]
 8002430:	21bf      	movs	r1, #191	; 0xbf
 8002432:	4628      	mov	r0, r5
 8002434:	f7fe fc12 	bl	8000c5c <HAL_I2C_Mem_Read>

	H0_rH[0]	= H0_rH_x2[0]>>1;
 8002438:	7838      	ldrb	r0, [r7, #0]
 800243a:	4b24      	ldr	r3, [pc, #144]	; (80024cc <get_HUM+0x160>)
	H1_rH[0]	= H1_rH_x2[0]>>1;
 800243c:	4a24      	ldr	r2, [pc, #144]	; (80024d0 <get_HUM+0x164>)

	H0[0]		= (H0_T0_OUT_H[0]<<8) + H0_T0_OUT_L[0];
	H1[0]		= (H1_T0_OUT_H[0]<<8) + H1_T0_OUT_L[0];
 800243e:	f899 1000 	ldrb.w	r1, [r9]
	H_OUT[0]	= (HUM_H[0]<<8) + HUM_L[0];
 8002442:	f898 5000 	ldrb.w	r5, [r8]
	H0_rH[0]	= H0_rH_x2[0]>>1;
 8002446:	40e0      	lsrs	r0, r4
 8002448:	8018      	strh	r0, [r3, #0]
	H1_rH[0]	= H1_rH_x2[0]>>1;
 800244a:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <get_HUM+0x168>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	40e3      	lsrs	r3, r4
 8002450:	8013      	strh	r3, [r2, #0]
	H0[0]		= (H0_T0_OUT_H[0]<<8) + H0_T0_OUT_L[0];
 8002452:	f89b 4000 	ldrb.w	r4, [fp]
 8002456:	f89a 2000 	ldrb.w	r2, [sl]
 800245a:	eb02 2204 	add.w	r2, r2, r4, lsl #8
 800245e:	b294      	uxth	r4, r2
 8002460:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <get_HUM+0x16c>)
 8002462:	8014      	strh	r4, [r2, #0]
	H1[0]		= (H1_T0_OUT_H[0]<<8) + H1_T0_OUT_L[0];
 8002464:	7832      	ldrb	r2, [r6, #0]
 8002466:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800246a:	491c      	ldr	r1, [pc, #112]	; (80024dc <get_HUM+0x170>)
 800246c:	b292      	uxth	r2, r2
 800246e:	800a      	strh	r2, [r1, #0]
	H_OUT[0]	= (HUM_H[0]<<8) + HUM_L[0];
 8002470:	490e      	ldr	r1, [pc, #56]	; (80024ac <get_HUM+0x140>)
 8002472:	7809      	ldrb	r1, [r1, #0]
 8002474:	eb01 2105 	add.w	r1, r1, r5, lsl #8
 8002478:	4d19      	ldr	r5, [pc, #100]	; (80024e0 <get_HUM+0x174>)
 800247a:	b289      	uxth	r1, r1
 800247c:	8029      	strh	r1, [r5, #0]

	//CALCUL DE L'HUMIDITE
	hum16[0] = ((int16_t)(H1_rH[0]-H0_rH[0]))*((int16_t)(H_OUT[0]-H0[0]))/((int16_t)(H1[0]-H0[0]))+(int16_t)(H0_rH[0]);
 800247e:	1a1b      	subs	r3, r3, r0
 8002480:	1b09      	subs	r1, r1, r4
 8002482:	1b12      	subs	r2, r2, r4
 8002484:	fb13 f301 	smulbb	r3, r3, r1
 8002488:	b212      	sxth	r2, r2
 800248a:	fb93 f3f2 	sdiv	r3, r3, r2
 800248e:	4a15      	ldr	r2, [pc, #84]	; (80024e4 <get_HUM+0x178>)
 8002490:	4403      	add	r3, r0
 8002492:	8013      	strh	r3, [r2, #0]
}
 8002494:	b005      	add	sp, #20
 8002496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800249a:	bf00      	nop
 800249c:	2000000d 	.word	0x2000000d
 80024a0:	20000054 	.word	0x20000054
 80024a4:	200000cc 	.word	0x200000cc
 80024a8:	2000000e 	.word	0x2000000e
 80024ac:	20000150 	.word	0x20000150
 80024b0:	20000009 	.word	0x20000009
 80024b4:	2000000c 	.word	0x2000000c
 80024b8:	20000007 	.word	0x20000007
 80024bc:	20000008 	.word	0x20000008
 80024c0:	2000000a 	.word	0x2000000a
 80024c4:	2000000b 	.word	0x2000000b
 80024c8:	20000045 	.word	0x20000045
 80024cc:	200000a0 	.word	0x200000a0
 80024d0:	20000048 	.word	0x20000048
 80024d4:	200000c6 	.word	0x200000c6
 80024d8:	200000c0 	.word	0x200000c0
 80024dc:	20000152 	.word	0x20000152
 80024e0:	2000004e 	.word	0x2000004e
 80024e4:	200000d0 	.word	0x200000d0
 80024e8:	200000c7 	.word	0x200000c7
 80024ec:	200000c8 	.word	0x200000c8
 80024f0:	20000050 	.word	0x20000050
 80024f4:	2000004c 	.word	0x2000004c

080024f8 <get_PRES>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void get_PRES(void)
{
 80024f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_REF_P_XL[0], 1, REF_P_XL, 1, I2C_TIMEOUT);
 80024fc:	4b37      	ldr	r3, [pc, #220]	; (80025dc <get_PRES+0xe4>)
 80024fe:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800260c <get_PRES+0x114>
 8002502:	4d37      	ldr	r5, [pc, #220]	; (80025e0 <get_PRES+0xe8>)
 8002504:	781a      	ldrb	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_REF_P_L[0], 1, REF_P_L, 1, I2C_TIMEOUT);
 8002506:	4e37      	ldr	r6, [pc, #220]	; (80025e4 <get_PRES+0xec>)
	HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_REF_P_H[0], 1, REF_P_H, 1, I2C_TIMEOUT);
 8002508:	4f37      	ldr	r7, [pc, #220]	; (80025e8 <get_PRES+0xf0>)
	HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_PRES_OUT_XL[0], 1, PRES_OUT_XL, 1, I2C_TIMEOUT);
 800250a:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8002610 <get_PRES+0x118>
	HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_PRES_OUT_L[0], 1, PRES_OUT_L, 1, I2C_TIMEOUT);
 800250e:	f8df b104 	ldr.w	fp, [pc, #260]	; 8002614 <get_PRES+0x11c>
{
 8002512:	b085      	sub	sp, #20
	HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_REF_P_XL[0], 1, REF_P_XL, 1, I2C_TIMEOUT);
 8002514:	2401      	movs	r4, #1
 8002516:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 800251a:	f8cd a008 	str.w	sl, [sp, #8]
 800251e:	4623      	mov	r3, r4
 8002520:	9401      	str	r4, [sp, #4]
 8002522:	9500      	str	r5, [sp, #0]
 8002524:	21bb      	movs	r1, #187	; 0xbb
 8002526:	4648      	mov	r0, r9
 8002528:	f7fe fb98 	bl	8000c5c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_REF_P_L[0], 1, REF_P_L, 1, I2C_TIMEOUT);
 800252c:	4b2f      	ldr	r3, [pc, #188]	; (80025ec <get_PRES+0xf4>)
 800252e:	21bb      	movs	r1, #187	; 0xbb
 8002530:	781a      	ldrb	r2, [r3, #0]
 8002532:	f8cd a008 	str.w	sl, [sp, #8]
 8002536:	4623      	mov	r3, r4
 8002538:	9401      	str	r4, [sp, #4]
 800253a:	9600      	str	r6, [sp, #0]
 800253c:	4648      	mov	r0, r9
 800253e:	f7fe fb8d 	bl	8000c5c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_REF_P_H[0], 1, REF_P_H, 1, I2C_TIMEOUT);
 8002542:	4b2b      	ldr	r3, [pc, #172]	; (80025f0 <get_PRES+0xf8>)
 8002544:	21bb      	movs	r1, #187	; 0xbb
 8002546:	781a      	ldrb	r2, [r3, #0]
 8002548:	f8cd a008 	str.w	sl, [sp, #8]
 800254c:	4623      	mov	r3, r4
 800254e:	9401      	str	r4, [sp, #4]
 8002550:	9700      	str	r7, [sp, #0]
 8002552:	4648      	mov	r0, r9
 8002554:	f7fe fb82 	bl	8000c5c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_PRES_OUT_XL[0], 1, PRES_OUT_XL, 1, I2C_TIMEOUT);
 8002558:	4b26      	ldr	r3, [pc, #152]	; (80025f4 <get_PRES+0xfc>)
 800255a:	21bb      	movs	r1, #187	; 0xbb
 800255c:	781a      	ldrb	r2, [r3, #0]
 800255e:	f8cd a008 	str.w	sl, [sp, #8]
 8002562:	4623      	mov	r3, r4
 8002564:	9401      	str	r4, [sp, #4]
 8002566:	f8cd 8000 	str.w	r8, [sp]
 800256a:	4648      	mov	r0, r9
 800256c:	f7fe fb76 	bl	8000c5c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_PRES_OUT_L[0], 1, PRES_OUT_L, 1, I2C_TIMEOUT);
 8002570:	4b21      	ldr	r3, [pc, #132]	; (80025f8 <get_PRES+0x100>)
 8002572:	21bb      	movs	r1, #187	; 0xbb
 8002574:	781a      	ldrb	r2, [r3, #0]
 8002576:	f8cd a008 	str.w	sl, [sp, #8]
 800257a:	4623      	mov	r3, r4
 800257c:	9401      	str	r4, [sp, #4]
 800257e:	f8cd b000 	str.w	fp, [sp]
 8002582:	4648      	mov	r0, r9
 8002584:	f7fe fb6a 	bl	8000c5c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_PRES_OUT_H[0], 1, PRES_OUT_H, 1, I2C_TIMEOUT);
 8002588:	4b1c      	ldr	r3, [pc, #112]	; (80025fc <get_PRES+0x104>)
 800258a:	781a      	ldrb	r2, [r3, #0]
 800258c:	f8cd a008 	str.w	sl, [sp, #8]
 8002590:	f8df a084 	ldr.w	sl, [pc, #132]	; 8002618 <get_PRES+0x120>
 8002594:	9401      	str	r4, [sp, #4]
 8002596:	4623      	mov	r3, r4
 8002598:	f8cd a000 	str.w	sl, [sp]
 800259c:	21bb      	movs	r1, #187	; 0xbb
 800259e:	4648      	mov	r0, r9
 80025a0:	f7fe fb5c 	bl	8000c5c <HAL_I2C_Mem_Read>

	//CONCATENATION

	PRES_x4096[0]	= (PRES_OUT_H[0]<<16) + (PRES_OUT_L[0]<<8) + PRES_OUT_XL[0];
 80025a4:	f89b 3000 	ldrb.w	r3, [fp]
 80025a8:	f89a 2000 	ldrb.w	r2, [sl]
 80025ac:	021b      	lsls	r3, r3, #8
 80025ae:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 80025b2:	f898 2000 	ldrb.w	r2, [r8]
 80025b6:	4413      	add	r3, r2
 80025b8:	4a11      	ldr	r2, [pc, #68]	; (8002600 <get_PRES+0x108>)
 80025ba:	6013      	str	r3, [r2, #0]
	REF_P_x4096[0]	= (REF_P_H[0]<<16) + (REF_P_L[0]<<8) + REF_P_XL[0];
 80025bc:	7833      	ldrb	r3, [r6, #0]
 80025be:	783a      	ldrb	r2, [r7, #0]
 80025c0:	021b      	lsls	r3, r3, #8
 80025c2:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 80025c6:	782a      	ldrb	r2, [r5, #0]
 80025c8:	4413      	add	r3, r2
 80025ca:	4a0e      	ldr	r2, [pc, #56]	; (8002604 <get_PRES+0x10c>)
 80025cc:	6013      	str	r3, [r2, #0]

	//CALCUL DE LA PRESSION
	pres32[0] = (REF_P_x4096[0])>>12;
 80025ce:	4a0e      	ldr	r2, [pc, #56]	; (8002608 <get_PRES+0x110>)
 80025d0:	0b1b      	lsrs	r3, r3, #12
 80025d2:	6013      	str	r3, [r2, #0]
}
 80025d4:	b005      	add	sp, #20
 80025d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025da:	bf00      	nop
 80025dc:	20000015 	.word	0x20000015
 80025e0:	200000a2 	.word	0x200000a2
 80025e4:	200000b0 	.word	0x200000b0
 80025e8:	200000a8 	.word	0x200000a8
 80025ec:	20000014 	.word	0x20000014
 80025f0:	20000013 	.word	0x20000013
 80025f4:	20000012 	.word	0x20000012
 80025f8:	20000011 	.word	0x20000011
 80025fc:	20000010 	.word	0x20000010
 8002600:	200000bc 	.word	0x200000bc
 8002604:	2000014c 	.word	0x2000014c
 8002608:	200000a4 	.word	0x200000a4
 800260c:	20000054 	.word	0x20000054
 8002610:	20000151 	.word	0x20000151
 8002614:	200000ae 	.word	0x200000ae
 8002618:	200000cd 	.word	0x200000cd

0800261c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800261c:	b510      	push	{r4, lr}
 800261e:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002620:	2244      	movs	r2, #68	; 0x44
 8002622:	2100      	movs	r1, #0
 8002624:	a805      	add	r0, sp, #20
 8002626:	f000 f9c3 	bl	80029b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800262a:	2214      	movs	r2, #20
 800262c:	2100      	movs	r1, #0
 800262e:	4668      	mov	r0, sp
 8002630:	f000 f9be 	bl	80029b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002634:	2100      	movs	r1, #0
 8002636:	2288      	movs	r2, #136	; 0x88
 8002638:	a816      	add	r0, sp, #88	; 0x58
 800263a:	f000 f9b9 	bl	80029b0 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800263e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002642:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002644:	2210      	movs	r2, #16
 8002646:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002648:	2201      	movs	r2, #1
 800264a:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800264c:	220a      	movs	r2, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800264e:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002650:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002652:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002654:	2207      	movs	r2, #7
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002656:	2400      	movs	r4, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002658:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800265a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800265c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800265e:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002660:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002662:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002664:	f7fe fcd8 	bl	8001018 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002668:	220f      	movs	r2, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800266a:	2104      	movs	r1, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800266c:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800266e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002670:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002674:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002676:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002678:	f7fe fef4 	bl	8001464 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800267c:	2342      	movs	r3, #66	; 0x42
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800267e:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8002680:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002682:	9425      	str	r4, [sp, #148]	; 0x94
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002684:	942a      	str	r4, [sp, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002686:	f7ff f8af 	bl	80017e8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800268a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800268e:	f7fe fbf7 	bl	8000e80 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 8002692:	b038      	add	sp, #224	; 0xe0
 8002694:	bd10      	pop	{r4, pc}
	...

08002698 <main>:
{
 8002698:	b500      	push	{lr}
 800269a:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 800269c:	f7fd ff34 	bl	8000508 <HAL_Init>
  SystemClock_Config();
 80026a0:	f7ff ffbc 	bl	800261c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	2214      	movs	r2, #20
 80026a6:	2100      	movs	r1, #0
 80026a8:	eb0d 0002 	add.w	r0, sp, r2
 80026ac:	f000 f980 	bl	80029b0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026b0:	4b39      	ldr	r3, [pc, #228]	; (8002798 <main+0x100>)
  hi2c1.Instance = I2C1;
 80026b2:	4d3a      	ldr	r5, [pc, #232]	; (800279c <main+0x104>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026b6:	f042 0204 	orr.w	r2, r2, #4
 80026ba:	64da      	str	r2, [r3, #76]	; 0x4c
 80026bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026be:	f002 0204 	and.w	r2, r2, #4
 80026c2:	9201      	str	r2, [sp, #4]
 80026c4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026cc:	64da      	str	r2, [r3, #76]	; 0x4c
 80026ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026d0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80026d4:	9202      	str	r2, [sp, #8]
 80026d6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026da:	f042 0201 	orr.w	r2, r2, #1
 80026de:	64da      	str	r2, [r3, #76]	; 0x4c
 80026e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026e2:	f002 0201 	and.w	r2, r2, #1
 80026e6:	9203      	str	r2, [sp, #12]
 80026e8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026ec:	f042 0202 	orr.w	r2, r2, #2
 80026f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80026f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f4:	f003 0302 	and.w	r3, r3, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80026f8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fa:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80026fc:	2120      	movs	r1, #32
 80026fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002702:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002704:	f7fe f85c 	bl	80007c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002708:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 800270e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002710:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002712:	4b23      	ldr	r3, [pc, #140]	; (80027a0 <main+0x108>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002714:	4823      	ldr	r0, [pc, #140]	; (80027a4 <main+0x10c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002716:	9306      	str	r3, [sp, #24]

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002718:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800271c:	f7fd ff74 	bl	8000608 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8002720:	2320      	movs	r3, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002722:	a905      	add	r1, sp, #20
 8002724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LD2_Pin;
 8002728:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800272a:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002730:	f7fd ff6a 	bl	8000608 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8002734:	481c      	ldr	r0, [pc, #112]	; (80027a8 <main+0x110>)
  huart2.Init.BaudRate = 115200;
 8002736:	4a1d      	ldr	r2, [pc, #116]	; (80027ac <main+0x114>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002738:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 800273a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800273e:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002742:	230c      	movs	r3, #12
 8002744:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002746:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002748:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800274a:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800274c:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800274e:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002750:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002752:	f7ff fc80 	bl	8002056 <HAL_UART_Init>
  hi2c1.Init.Timing = 0x10909CEC;
 8002756:	4b16      	ldr	r3, [pc, #88]	; (80027b0 <main+0x118>)
 8002758:	4916      	ldr	r1, [pc, #88]	; (80027b4 <main+0x11c>)
  hi2c1.Init.OwnAddress1 = 0;
 800275a:	60ac      	str	r4, [r5, #8]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800275c:	4628      	mov	r0, r5
  hi2c1.Init.Timing = 0x10909CEC;
 800275e:	e885 000a 	stmia.w	r5, {r1, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002762:	60ee      	str	r6, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002764:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002766:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002768:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800276a:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800276c:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800276e:	f7fe f96c 	bl	8000a4a <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002772:	4621      	mov	r1, r4
 8002774:	4628      	mov	r0, r5
 8002776:	f7fe fb2f 	bl	8000dd8 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800277a:	4621      	mov	r1, r4
 800277c:	4628      	mov	r0, r5
 800277e:	f7fe fb51 	bl	8000e24 <HAL_I2CEx_ConfigDigitalFilter>
  TEMPandHUM_init();
 8002782:	f7ff fc9b 	bl	80020bc <TEMPandHUM_init>
  PRES_init();
 8002786:	f7ff fcb1 	bl	80020ec <PRES_init>
	  get_TEMP();
 800278a:	f7ff fce5 	bl	8002158 <get_TEMP>
	  get_HUM();
 800278e:	f7ff fded 	bl	800236c <get_HUM>
	  get_PRES();
 8002792:	f7ff feb1 	bl	80024f8 <get_PRES>
 8002796:	e7f8      	b.n	800278a <main+0xf2>
 8002798:	40021000 	.word	0x40021000
 800279c:	20000054 	.word	0x20000054
 80027a0:	10210000 	.word	0x10210000
 80027a4:	48000800 	.word	0x48000800
 80027a8:	200000d4 	.word	0x200000d4
 80027ac:	40004400 	.word	0x40004400
 80027b0:	10909cec 	.word	0x10909cec
 80027b4:	40005400 	.word	0x40005400

080027b8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b8:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <HAL_MspInit+0x2c>)
 80027ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027bc:	f042 0201 	orr.w	r2, r2, #1
 80027c0:	661a      	str	r2, [r3, #96]	; 0x60
 80027c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80027c4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c6:	f002 0201 	and.w	r2, r2, #1
 80027ca:	9200      	str	r2, [sp, #0]
 80027cc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027d4:	659a      	str	r2, [r3, #88]	; 0x58
 80027d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027dc:	9301      	str	r3, [sp, #4]
 80027de:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027e0:	b002      	add	sp, #8
 80027e2:	4770      	bx	lr
 80027e4:	40021000 	.word	0x40021000

080027e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027e8:	b510      	push	{r4, lr}
 80027ea:	4604      	mov	r4, r0
 80027ec:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ee:	2214      	movs	r2, #20
 80027f0:	2100      	movs	r1, #0
 80027f2:	a803      	add	r0, sp, #12
 80027f4:	f000 f8dc 	bl	80029b0 <memset>
  if(hi2c->Instance==I2C1)
 80027f8:	6822      	ldr	r2, [r4, #0]
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_I2C_MspInit+0x60>)
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d121      	bne.n	8002844 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002800:	4c12      	ldr	r4, [pc, #72]	; (800284c <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002802:	4813      	ldr	r0, [pc, #76]	; (8002850 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002804:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002806:	f043 0302 	orr.w	r3, r3, #2
 800280a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800280c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	9301      	str	r3, [sp, #4]
 8002814:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002816:	f44f 7340 	mov.w	r3, #768	; 0x300
 800281a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800281c:	2312      	movs	r3, #18
 800281e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002820:	2301      	movs	r3, #1
 8002822:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002824:	2303      	movs	r3, #3
 8002826:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002828:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800282a:	2304      	movs	r3, #4
 800282c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282e:	f7fd feeb 	bl	8000608 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002832:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002834:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002838:	65a3      	str	r3, [r4, #88]	; 0x58
 800283a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800283c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002840:	9302      	str	r3, [sp, #8]
 8002842:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002844:	b008      	add	sp, #32
 8002846:	bd10      	pop	{r4, pc}
 8002848:	40005400 	.word	0x40005400
 800284c:	40021000 	.word	0x40021000
 8002850:	48000400 	.word	0x48000400

08002854 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002854:	b510      	push	{r4, lr}
 8002856:	4604      	mov	r4, r0
 8002858:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285a:	2214      	movs	r2, #20
 800285c:	2100      	movs	r1, #0
 800285e:	a803      	add	r0, sp, #12
 8002860:	f000 f8a6 	bl	80029b0 <memset>
  if(huart->Instance==USART2)
 8002864:	6822      	ldr	r2, [r4, #0]
 8002866:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <HAL_UART_MspInit+0x60>)
 8002868:	429a      	cmp	r2, r3
 800286a:	d120      	bne.n	80028ae <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800286c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002870:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8002872:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002874:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002878:	659a      	str	r2, [r3, #88]	; 0x58
 800287a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800287c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002880:	9201      	str	r2, [sp, #4]
 8002882:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002884:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	64da      	str	r2, [r3, #76]	; 0x4c
 800288c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	9302      	str	r3, [sp, #8]
 8002894:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002896:	230c      	movs	r3, #12
 8002898:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289a:	2302      	movs	r3, #2
 800289c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289e:	2303      	movs	r3, #3
 80028a0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028a6:	2307      	movs	r3, #7
 80028a8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028aa:	f7fd fead 	bl	8000608 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028ae:	b008      	add	sp, #32
 80028b0:	bd10      	pop	{r4, pc}
 80028b2:	bf00      	nop
 80028b4:	40004400 	.word	0x40004400

080028b8 <NMI_Handler>:
 80028b8:	4770      	bx	lr

080028ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ba:	e7fe      	b.n	80028ba <HardFault_Handler>

080028bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028bc:	e7fe      	b.n	80028bc <MemManage_Handler>

080028be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028be:	e7fe      	b.n	80028be <BusFault_Handler>

080028c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028c0:	e7fe      	b.n	80028c0 <UsageFault_Handler>

080028c2 <SVC_Handler>:
 80028c2:	4770      	bx	lr

080028c4 <DebugMon_Handler>:
 80028c4:	4770      	bx	lr

080028c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028c6:	4770      	bx	lr

080028c8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028c8:	f7fd be34 	b.w	8000534 <HAL_IncTick>

080028cc <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028cc:	490f      	ldr	r1, [pc, #60]	; (800290c <SystemInit+0x40>)
 80028ce:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80028d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80028da:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <SystemInit+0x44>)
 80028dc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80028de:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80028e0:	f042 0201 	orr.w	r2, r2, #1
 80028e4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80028e6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80028ee:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80028f2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80028f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028f8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002900:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002902:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002904:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002908:	608b      	str	r3, [r1, #8]
 800290a:	4770      	bx	lr
 800290c:	e000ed00 	.word	0xe000ed00
 8002910:	40021000 	.word	0x40021000

08002914 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800294c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002918:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800291a:	e003      	b.n	8002924 <LoopCopyDataInit>

0800291c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800291c:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800291e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002920:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002922:	3104      	adds	r1, #4

08002924 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002924:	480b      	ldr	r0, [pc, #44]	; (8002954 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002926:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002928:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800292a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800292c:	d3f6      	bcc.n	800291c <CopyDataInit>
	ldr	r2, =_sbss
 800292e:	4a0b      	ldr	r2, [pc, #44]	; (800295c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002930:	e002      	b.n	8002938 <LoopFillZerobss>

08002932 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002932:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002934:	f842 3b04 	str.w	r3, [r2], #4

08002938 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002938:	4b09      	ldr	r3, [pc, #36]	; (8002960 <LoopForever+0x16>)
	cmp	r2, r3
 800293a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800293c:	d3f9      	bcc.n	8002932 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800293e:	f7ff ffc5 	bl	80028cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002942:	f000 f811 	bl	8002968 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002946:	f7ff fea7 	bl	8002698 <main>

0800294a <LoopForever>:

LoopForever:
    b LoopForever
 800294a:	e7fe      	b.n	800294a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800294c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002950:	08002a44 	.word	0x08002a44
	ldr	r0, =_sdata
 8002954:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002958:	20000024 	.word	0x20000024
	ldr	r2, =_sbss
 800295c:	20000024 	.word	0x20000024
	ldr	r3, = _ebss
 8002960:	20000154 	.word	0x20000154

08002964 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002964:	e7fe      	b.n	8002964 <ADC1_2_IRQHandler>
	...

08002968 <__libc_init_array>:
 8002968:	b570      	push	{r4, r5, r6, lr}
 800296a:	4e0d      	ldr	r6, [pc, #52]	; (80029a0 <__libc_init_array+0x38>)
 800296c:	4c0d      	ldr	r4, [pc, #52]	; (80029a4 <__libc_init_array+0x3c>)
 800296e:	1ba4      	subs	r4, r4, r6
 8002970:	10a4      	asrs	r4, r4, #2
 8002972:	2500      	movs	r5, #0
 8002974:	42a5      	cmp	r5, r4
 8002976:	d109      	bne.n	800298c <__libc_init_array+0x24>
 8002978:	4e0b      	ldr	r6, [pc, #44]	; (80029a8 <__libc_init_array+0x40>)
 800297a:	4c0c      	ldr	r4, [pc, #48]	; (80029ac <__libc_init_array+0x44>)
 800297c:	f000 f820 	bl	80029c0 <_init>
 8002980:	1ba4      	subs	r4, r4, r6
 8002982:	10a4      	asrs	r4, r4, #2
 8002984:	2500      	movs	r5, #0
 8002986:	42a5      	cmp	r5, r4
 8002988:	d105      	bne.n	8002996 <__libc_init_array+0x2e>
 800298a:	bd70      	pop	{r4, r5, r6, pc}
 800298c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002990:	4798      	blx	r3
 8002992:	3501      	adds	r5, #1
 8002994:	e7ee      	b.n	8002974 <__libc_init_array+0xc>
 8002996:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800299a:	4798      	blx	r3
 800299c:	3501      	adds	r5, #1
 800299e:	e7f2      	b.n	8002986 <__libc_init_array+0x1e>
 80029a0:	08002a3c 	.word	0x08002a3c
 80029a4:	08002a3c 	.word	0x08002a3c
 80029a8:	08002a3c 	.word	0x08002a3c
 80029ac:	08002a40 	.word	0x08002a40

080029b0 <memset>:
 80029b0:	4402      	add	r2, r0
 80029b2:	4603      	mov	r3, r0
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d100      	bne.n	80029ba <memset+0xa>
 80029b8:	4770      	bx	lr
 80029ba:	f803 1b01 	strb.w	r1, [r3], #1
 80029be:	e7f9      	b.n	80029b4 <memset+0x4>

080029c0 <_init>:
 80029c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c2:	bf00      	nop
 80029c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029c6:	bc08      	pop	{r3}
 80029c8:	469e      	mov	lr, r3
 80029ca:	4770      	bx	lr

080029cc <_fini>:
 80029cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ce:	bf00      	nop
 80029d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029d2:	bc08      	pop	{r3}
 80029d4:	469e      	mov	lr, r3
 80029d6:	4770      	bx	lr
