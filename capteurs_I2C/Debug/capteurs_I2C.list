
capteurs_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e10  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003fa4  08003fa4  00013fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003ffc  08003ffc  00013ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004004  08004004  00014004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004008  08004008  00014008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000000  0800400c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram2         00000000  10000000  10000000  00020080  2**0
                  CONTENTS
  8 .bss          0000018c  20000080  20000080  00020080  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  2000020c  2000020c  00020080  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000b615  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000188f  00000000  00000000  0002b6c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000b50  00000000  00000000  0002cf58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a78  00000000  00000000  0002daa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00020990  00000000  00000000  0002e520  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00007cd8  00000000  00000000  0004eeb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000c757c  00000000  00000000  00056b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0011e104  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002e78  00000000  00000000  0011e180  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000080 	.word	0x20000080
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003f8c 	.word	0x08003f8c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000084 	.word	0x20000084
 80001d0:	08003f8c 	.word	0x08003f8c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b97a 	b.w	80004e0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	9e08      	ldr	r6, [sp, #32]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d151      	bne.n	80002b8 <__udivmoddi4+0xb4>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d96d      	bls.n	80002f6 <__udivmoddi4+0xf2>
 800021a:	fab2 fe82 	clz	lr, r2
 800021e:	f1be 0f00 	cmp.w	lr, #0
 8000222:	d00b      	beq.n	800023c <__udivmoddi4+0x38>
 8000224:	f1ce 0c20 	rsb	ip, lr, #32
 8000228:	fa01 f50e 	lsl.w	r5, r1, lr
 800022c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000230:	fa02 f70e 	lsl.w	r7, r2, lr
 8000234:	ea4c 0c05 	orr.w	ip, ip, r5
 8000238:	fa00 f40e 	lsl.w	r4, r0, lr
 800023c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000240:	0c25      	lsrs	r5, r4, #16
 8000242:	fbbc f8fa 	udiv	r8, ip, sl
 8000246:	fa1f f987 	uxth.w	r9, r7
 800024a:	fb0a cc18 	mls	ip, sl, r8, ip
 800024e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000252:	fb08 f309 	mul.w	r3, r8, r9
 8000256:	42ab      	cmp	r3, r5
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x6c>
 800025a:	19ed      	adds	r5, r5, r7
 800025c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000260:	f080 8123 	bcs.w	80004aa <__udivmoddi4+0x2a6>
 8000264:	42ab      	cmp	r3, r5
 8000266:	f240 8120 	bls.w	80004aa <__udivmoddi4+0x2a6>
 800026a:	f1a8 0802 	sub.w	r8, r8, #2
 800026e:	443d      	add	r5, r7
 8000270:	1aed      	subs	r5, r5, r3
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb5 f0fa 	udiv	r0, r5, sl
 8000278:	fb0a 5510 	mls	r5, sl, r0, r5
 800027c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000280:	fb00 f909 	mul.w	r9, r0, r9
 8000284:	45a1      	cmp	r9, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x98>
 8000288:	19e4      	adds	r4, r4, r7
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 810a 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 8000292:	45a1      	cmp	r9, r4
 8000294:	f240 8107 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	eba4 0409 	sub.w	r4, r4, r9
 80002a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	d061      	beq.n	800036e <__udivmoddi4+0x16a>
 80002aa:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ae:	2300      	movs	r3, #0
 80002b0:	6034      	str	r4, [r6, #0]
 80002b2:	6073      	str	r3, [r6, #4]
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d907      	bls.n	80002cc <__udivmoddi4+0xc8>
 80002bc:	2e00      	cmp	r6, #0
 80002be:	d054      	beq.n	800036a <__udivmoddi4+0x166>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	f040 808e 	bne.w	80003f2 <__udivmoddi4+0x1ee>
 80002d6:	42ab      	cmp	r3, r5
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xdc>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2d0>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb65 0503 	sbc.w	r5, r5, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	46ac      	mov	ip, r5
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d03f      	beq.n	800036e <__udivmoddi4+0x16a>
 80002ee:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b912      	cbnz	r2, 80002fe <__udivmoddi4+0xfa>
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fe:	fab7 fe87 	clz	lr, r7
 8000302:	f1be 0f00 	cmp.w	lr, #0
 8000306:	d134      	bne.n	8000372 <__udivmoddi4+0x16e>
 8000308:	1beb      	subs	r3, r5, r7
 800030a:	0c3a      	lsrs	r2, r7, #16
 800030c:	fa1f fc87 	uxth.w	ip, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb3 f8f2 	udiv	r8, r3, r2
 8000316:	0c25      	lsrs	r5, r4, #16
 8000318:	fb02 3318 	mls	r3, r2, r8, r3
 800031c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000320:	fb0c f308 	mul.w	r3, ip, r8
 8000324:	42ab      	cmp	r3, r5
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x134>
 8000328:	19ed      	adds	r5, r5, r7
 800032a:	f108 30ff 	add.w	r0, r8, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x132>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f200 80d1 	bhi.w	80004d8 <__udivmoddi4+0x2d4>
 8000336:	4680      	mov	r8, r0
 8000338:	1aed      	subs	r5, r5, r3
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000340:	fb02 5510 	mls	r5, r2, r0, r5
 8000344:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000348:	fb0c fc00 	mul.w	ip, ip, r0
 800034c:	45a4      	cmp	ip, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x15c>
 8000350:	19e4      	adds	r4, r4, r7
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x15a>
 8000358:	45a4      	cmp	ip, r4
 800035a:	f200 80b8 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000368:	e79d      	b.n	80002a6 <__udivmoddi4+0xa2>
 800036a:	4631      	mov	r1, r6
 800036c:	4630      	mov	r0, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	f1ce 0420 	rsb	r4, lr, #32
 8000376:	fa05 f30e 	lsl.w	r3, r5, lr
 800037a:	fa07 f70e 	lsl.w	r7, r7, lr
 800037e:	fa20 f804 	lsr.w	r8, r0, r4
 8000382:	0c3a      	lsrs	r2, r7, #16
 8000384:	fa25 f404 	lsr.w	r4, r5, r4
 8000388:	ea48 0803 	orr.w	r8, r8, r3
 800038c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000390:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000394:	fb02 4411 	mls	r4, r2, r1, r4
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a0:	fb01 f30c 	mul.w	r3, r1, ip
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1bc>
 80003ac:	19ed      	adds	r5, r5, r7
 80003ae:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b2:	f080 808a 	bcs.w	80004ca <__udivmoddi4+0x2c6>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	f240 8087 	bls.w	80004ca <__udivmoddi4+0x2c6>
 80003bc:	3902      	subs	r1, #2
 80003be:	443d      	add	r5, r7
 80003c0:	1aeb      	subs	r3, r5, r3
 80003c2:	fa1f f588 	uxth.w	r5, r8
 80003c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ca:	fb02 3310 	mls	r3, r2, r0, r3
 80003ce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d2:	fb00 f30c 	mul.w	r3, r0, ip
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1e6>
 80003da:	19ed      	adds	r5, r5, r7
 80003dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e0:	d26f      	bcs.n	80004c2 <__udivmoddi4+0x2be>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d96d      	bls.n	80004c2 <__udivmoddi4+0x2be>
 80003e6:	3802      	subs	r0, #2
 80003e8:	443d      	add	r5, r7
 80003ea:	1aeb      	subs	r3, r5, r3
 80003ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f0:	e78f      	b.n	8000312 <__udivmoddi4+0x10e>
 80003f2:	f1c1 0720 	rsb	r7, r1, #32
 80003f6:	fa22 f807 	lsr.w	r8, r2, r7
 80003fa:	408b      	lsls	r3, r1
 80003fc:	fa05 f401 	lsl.w	r4, r5, r1
 8000400:	ea48 0303 	orr.w	r3, r8, r3
 8000404:	fa20 fe07 	lsr.w	lr, r0, r7
 8000408:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800040c:	40fd      	lsrs	r5, r7
 800040e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000412:	fbb5 f9fc 	udiv	r9, r5, ip
 8000416:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041a:	fb0c 5519 	mls	r5, ip, r9, r5
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000426:	fb09 f408 	mul.w	r4, r9, r8
 800042a:	42ac      	cmp	r4, r5
 800042c:	fa02 f201 	lsl.w	r2, r2, r1
 8000430:	fa00 fa01 	lsl.w	sl, r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x244>
 8000436:	18ed      	adds	r5, r5, r3
 8000438:	f109 30ff 	add.w	r0, r9, #4294967295
 800043c:	d243      	bcs.n	80004c6 <__udivmoddi4+0x2c2>
 800043e:	42ac      	cmp	r4, r5
 8000440:	d941      	bls.n	80004c6 <__udivmoddi4+0x2c2>
 8000442:	f1a9 0902 	sub.w	r9, r9, #2
 8000446:	441d      	add	r5, r3
 8000448:	1b2d      	subs	r5, r5, r4
 800044a:	fa1f fe8e 	uxth.w	lr, lr
 800044e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000452:	fb0c 5510 	mls	r5, ip, r0, r5
 8000456:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045a:	fb00 f808 	mul.w	r8, r0, r8
 800045e:	45a0      	cmp	r8, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x26e>
 8000462:	18e4      	adds	r4, r4, r3
 8000464:	f100 35ff 	add.w	r5, r0, #4294967295
 8000468:	d229      	bcs.n	80004be <__udivmoddi4+0x2ba>
 800046a:	45a0      	cmp	r8, r4
 800046c:	d927      	bls.n	80004be <__udivmoddi4+0x2ba>
 800046e:	3802      	subs	r0, #2
 8000470:	441c      	add	r4, r3
 8000472:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000476:	eba4 0408 	sub.w	r4, r4, r8
 800047a:	fba0 8902 	umull	r8, r9, r0, r2
 800047e:	454c      	cmp	r4, r9
 8000480:	46c6      	mov	lr, r8
 8000482:	464d      	mov	r5, r9
 8000484:	d315      	bcc.n	80004b2 <__udivmoddi4+0x2ae>
 8000486:	d012      	beq.n	80004ae <__udivmoddi4+0x2aa>
 8000488:	b156      	cbz	r6, 80004a0 <__udivmoddi4+0x29c>
 800048a:	ebba 030e 	subs.w	r3, sl, lr
 800048e:	eb64 0405 	sbc.w	r4, r4, r5
 8000492:	fa04 f707 	lsl.w	r7, r4, r7
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431f      	orrs	r7, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	6037      	str	r7, [r6, #0]
 800049e:	6074      	str	r4, [r6, #4]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	4618      	mov	r0, r3
 80004a8:	e6f8      	b.n	800029c <__udivmoddi4+0x98>
 80004aa:	4690      	mov	r8, r2
 80004ac:	e6e0      	b.n	8000270 <__udivmoddi4+0x6c>
 80004ae:	45c2      	cmp	sl, r8
 80004b0:	d2ea      	bcs.n	8000488 <__udivmoddi4+0x284>
 80004b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7e4      	b.n	8000488 <__udivmoddi4+0x284>
 80004be:	4628      	mov	r0, r5
 80004c0:	e7d7      	b.n	8000472 <__udivmoddi4+0x26e>
 80004c2:	4640      	mov	r0, r8
 80004c4:	e791      	b.n	80003ea <__udivmoddi4+0x1e6>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e7be      	b.n	8000448 <__udivmoddi4+0x244>
 80004ca:	4601      	mov	r1, r0
 80004cc:	e778      	b.n	80003c0 <__udivmoddi4+0x1bc>
 80004ce:	3802      	subs	r0, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	e745      	b.n	8000360 <__udivmoddi4+0x15c>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xe6>
 80004d8:	f1a8 0802 	sub.w	r8, r8, #2
 80004dc:	443d      	add	r5, r7
 80004de:	e72b      	b.n	8000338 <__udivmoddi4+0x134>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004ea:	2300      	movs	r3, #0
 80004ec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004ee:	4a0c      	ldr	r2, [pc, #48]	; (8000520 <HAL_Init+0x3c>)
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <HAL_Init+0x3c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fa:	2003      	movs	r0, #3
 80004fc:	f000 f91e 	bl	800073c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000500:	2000      	movs	r0, #0
 8000502:	f000 f80f 	bl	8000524 <HAL_InitTick>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d002      	beq.n	8000512 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800050c:	2301      	movs	r3, #1
 800050e:	71fb      	strb	r3, [r7, #7]
 8000510:	e001      	b.n	8000516 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000512:	f003 fbdb 	bl	8003ccc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000516:	79fb      	ldrb	r3, [r7, #7]
}
 8000518:	4618      	mov	r0, r3
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40022000 	.word	0x40022000

08000524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800052c:	2300      	movs	r3, #0
 800052e:	73fb      	strb	r3, [r7, #15]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <HAL_InitTick+0x40>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <HAL_InitTick+0x44>)
 8000536:	fba2 2303 	umull	r2, r3, r2, r3
 800053a:	099b      	lsrs	r3, r3, #6
 800053c:	4618      	mov	r0, r3
 800053e:	f000 f924 	bl	800078a <HAL_SYSTICK_Config>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d002      	beq.n	800054e <HAL_InitTick+0x2a>
  {
    status = HAL_ERROR;
 8000548:	2301      	movs	r3, #1
 800054a:	73fb      	strb	r3, [r7, #15]
 800054c:	e005      	b.n	800055a <HAL_InitTick+0x36>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	6879      	ldr	r1, [r7, #4]
 8000552:	f04f 30ff 	mov.w	r0, #4294967295
 8000556:	f000 f8fc 	bl	8000752 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 800055a:	7bfb      	ldrb	r3, [r7, #15]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	2000007c 	.word	0x2000007c
 8000568:	10624dd3 	.word	0x10624dd3

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick++;
 8000570:	4b04      	ldr	r3, [pc, #16]	; (8000584 <HAL_IncTick+0x18>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	3301      	adds	r3, #1
 8000576:	4a03      	ldr	r2, [pc, #12]	; (8000584 <HAL_IncTick+0x18>)
 8000578:	6013      	str	r3, [r2, #0]
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	2000009c 	.word	0x2000009c

08000588 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  return uwTick;
 800058c:	4b03      	ldr	r3, [pc, #12]	; (800059c <HAL_GetTick+0x14>)
 800058e:	681b      	ldr	r3, [r3, #0]
}
 8000590:	4618      	mov	r0, r3
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	2000009c 	.word	0x2000009c

080005a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005a8:	f7ff ffee 	bl	8000588 <HAL_GetTick>
 80005ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005b8:	d002      	beq.n	80005c0 <HAL_Delay+0x20>
  {
    wait++;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	3301      	adds	r3, #1
 80005be:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005c0:	bf00      	nop
 80005c2:	f7ff ffe1 	bl	8000588 <HAL_GetTick>
 80005c6:	4602      	mov	r2, r0
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	1ad2      	subs	r2, r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d3f7      	bcc.n	80005c2 <HAL_Delay+0x22>
  {
  }
}
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f003 0307 	and.w	r3, r3, #7
 80005ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <NVIC_SetPriorityGrouping+0x44>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f2:	68ba      	ldr	r2, [r7, #8]
 80005f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005f8:	4013      	ands	r3, r2
 80005fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800060e:	4a04      	ldr	r2, [pc, #16]	; (8000620 <NVIC_SetPriorityGrouping+0x44>)
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	60d3      	str	r3, [r2, #12]
}
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <NVIC_GetPriorityGrouping+0x18>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	0a1b      	lsrs	r3, r3, #8
 800062e:	f003 0307 	and.w	r3, r3, #7
}
 8000632:	4618      	mov	r0, r3
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	6039      	str	r1, [r7, #0]
 800064a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800064c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000650:	2b00      	cmp	r3, #0
 8000652:	da0b      	bge.n	800066c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000654:	490d      	ldr	r1, [pc, #52]	; (800068c <NVIC_SetPriority+0x4c>)
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	f003 030f 	and.w	r3, r3, #15
 800065c:	3b04      	subs	r3, #4
 800065e:	683a      	ldr	r2, [r7, #0]
 8000660:	b2d2      	uxtb	r2, r2
 8000662:	0112      	lsls	r2, r2, #4
 8000664:	b2d2      	uxtb	r2, r2
 8000666:	440b      	add	r3, r1
 8000668:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800066a:	e009      	b.n	8000680 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066c:	4908      	ldr	r1, [pc, #32]	; (8000690 <NVIC_SetPriority+0x50>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	683a      	ldr	r2, [r7, #0]
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	0112      	lsls	r2, r2, #4
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	440b      	add	r3, r1
 800067c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00
 8000690:	e000e100 	.word	0xe000e100

08000694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000694:	b480      	push	{r7}
 8000696:	b089      	sub	sp, #36	; 0x24
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f003 0307 	and.w	r3, r3, #7
 80006a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a8:	69fb      	ldr	r3, [r7, #28]
 80006aa:	f1c3 0307 	rsb	r3, r3, #7
 80006ae:	2b04      	cmp	r3, #4
 80006b0:	bf28      	it	cs
 80006b2:	2304      	movcs	r3, #4
 80006b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	3304      	adds	r3, #4
 80006ba:	2b06      	cmp	r3, #6
 80006bc:	d902      	bls.n	80006c4 <NVIC_EncodePriority+0x30>
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	3b03      	subs	r3, #3
 80006c2:	e000      	b.n	80006c6 <NVIC_EncodePriority+0x32>
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c8:	2201      	movs	r2, #1
 80006ca:	69bb      	ldr	r3, [r7, #24]
 80006cc:	fa02 f303 	lsl.w	r3, r2, r3
 80006d0:	1e5a      	subs	r2, r3, #1
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	401a      	ands	r2, r3
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006da:	2101      	movs	r1, #1
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	fa01 f303 	lsl.w	r3, r1, r3
 80006e2:	1e59      	subs	r1, r3, #1
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e8:	4313      	orrs	r3, r2
         );
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3724      	adds	r7, #36	; 0x24
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
	...

080006f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3b01      	subs	r3, #1
 8000704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000708:	d301      	bcc.n	800070e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800070a:	2301      	movs	r3, #1
 800070c:	e00f      	b.n	800072e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800070e:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <SysTick_Config+0x40>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3b01      	subs	r3, #1
 8000714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000716:	210f      	movs	r1, #15
 8000718:	f04f 30ff 	mov.w	r0, #4294967295
 800071c:	f7ff ff90 	bl	8000640 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <SysTick_Config+0x40>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000726:	4b04      	ldr	r3, [pc, #16]	; (8000738 <SysTick_Config+0x40>)
 8000728:	2207      	movs	r2, #7
 800072a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800072c:	2300      	movs	r3, #0
}
 800072e:	4618      	mov	r0, r3
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	e000e010 	.word	0xe000e010

0800073c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f7ff ff49 	bl	80005dc <NVIC_SetPriorityGrouping>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b086      	sub	sp, #24
 8000756:	af00      	add	r7, sp, #0
 8000758:	4603      	mov	r3, r0
 800075a:	60b9      	str	r1, [r7, #8]
 800075c:	607a      	str	r2, [r7, #4]
 800075e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000764:	f7ff ff5e 	bl	8000624 <NVIC_GetPriorityGrouping>
 8000768:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	68b9      	ldr	r1, [r7, #8]
 800076e:	6978      	ldr	r0, [r7, #20]
 8000770:	f7ff ff90 	bl	8000694 <NVIC_EncodePriority>
 8000774:	4602      	mov	r2, r0
 8000776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800077a:	4611      	mov	r1, r2
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff5f 	bl	8000640 <NVIC_SetPriority>
}
 8000782:	bf00      	nop
 8000784:	3718      	adds	r7, #24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff ffb0 	bl	80006f8 <SysTick_Config>
 8000798:	4603      	mov	r3, r0
}
 800079a:	4618      	mov	r0, r3
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2b04      	cmp	r3, #4
 80007b0:	d106      	bne.n	80007c0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80007b2:	4a09      	ldr	r2, [pc, #36]	; (80007d8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80007be:	e005      	b.n	80007cc <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80007c0:	4a05      	ldr	r2, [pc, #20]	; (80007d8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f023 0304 	bic.w	r3, r3, #4
 80007ca:	6013      	str	r3, [r2, #0]
}
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	e000e010 	.word	0xe000e010

080007dc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80007e0:	f000 f802 	bl	80007e8 <HAL_SYSTICK_Callback>
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
	...

080007f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b087      	sub	sp, #28
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000806:	e154      	b.n	8000ab2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	2101      	movs	r1, #1
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	fa01 f303 	lsl.w	r3, r1, r3
 8000814:	4013      	ands	r3, r2
 8000816:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	2b00      	cmp	r3, #0
 800081c:	f000 8146 	beq.w	8000aac <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	2b02      	cmp	r3, #2
 8000826:	d003      	beq.n	8000830 <HAL_GPIO_Init+0x38>
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	2b12      	cmp	r3, #18
 800082e:	d123      	bne.n	8000878 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	08da      	lsrs	r2, r3, #3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3208      	adds	r2, #8
 8000838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800083c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	f003 0307 	and.w	r3, r3, #7
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	220f      	movs	r2, #15
 8000848:	fa02 f303 	lsl.w	r3, r2, r3
 800084c:	43db      	mvns	r3, r3
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	4013      	ands	r3, r2
 8000852:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	691a      	ldr	r2, [r3, #16]
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	693a      	ldr	r2, [r7, #16]
 8000866:	4313      	orrs	r3, r2
 8000868:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	08da      	lsrs	r2, r3, #3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	3208      	adds	r2, #8
 8000872:	6939      	ldr	r1, [r7, #16]
 8000874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	2203      	movs	r2, #3
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	43db      	mvns	r3, r3
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	4013      	ands	r3, r2
 800088e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	f003 0203 	and.w	r2, r3, #3
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	693a      	ldr	r2, [r7, #16]
 80008a2:	4313      	orrs	r3, r2
 80008a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	693a      	ldr	r2, [r7, #16]
 80008aa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d00b      	beq.n	80008cc <HAL_GPIO_Init+0xd4>
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d007      	beq.n	80008cc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008c0:	2b11      	cmp	r3, #17
 80008c2:	d003      	beq.n	80008cc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	2b12      	cmp	r3, #18
 80008ca:	d130      	bne.n	800092e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	2203      	movs	r2, #3
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	43db      	mvns	r3, r3
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	4013      	ands	r3, r2
 80008e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	68da      	ldr	r2, [r3, #12]
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	693a      	ldr	r2, [r7, #16]
 80008fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000902:	2201      	movs	r2, #1
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	43db      	mvns	r3, r3
 800090c:	693a      	ldr	r2, [r7, #16]
 800090e:	4013      	ands	r3, r2
 8000910:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	091b      	lsrs	r3, r3, #4
 8000918:	f003 0201 	and.w	r2, r3, #1
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	4313      	orrs	r3, r2
 8000926:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	68db      	ldr	r3, [r3, #12]
 8000932:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	2203      	movs	r2, #3
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	43db      	mvns	r3, r3
 8000940:	693a      	ldr	r2, [r7, #16]
 8000942:	4013      	ands	r3, r2
 8000944:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	689a      	ldr	r2, [r3, #8]
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	4313      	orrs	r3, r2
 8000956:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	2b00      	cmp	r3, #0
 8000968:	f000 80a0 	beq.w	8000aac <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096c:	4a58      	ldr	r2, [pc, #352]	; (8000ad0 <HAL_GPIO_Init+0x2d8>)
 800096e:	4b58      	ldr	r3, [pc, #352]	; (8000ad0 <HAL_GPIO_Init+0x2d8>)
 8000970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	6613      	str	r3, [r2, #96]	; 0x60
 8000978:	4b55      	ldr	r3, [pc, #340]	; (8000ad0 <HAL_GPIO_Init+0x2d8>)
 800097a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000984:	4a53      	ldr	r2, [pc, #332]	; (8000ad4 <HAL_GPIO_Init+0x2dc>)
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	089b      	lsrs	r3, r3, #2
 800098a:	3302      	adds	r3, #2
 800098c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000990:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	f003 0303 	and.w	r3, r3, #3
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	220f      	movs	r2, #15
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	43db      	mvns	r3, r3
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	4013      	ands	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009ae:	d019      	beq.n	80009e4 <HAL_GPIO_Init+0x1ec>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a49      	ldr	r2, [pc, #292]	; (8000ad8 <HAL_GPIO_Init+0x2e0>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d013      	beq.n	80009e0 <HAL_GPIO_Init+0x1e8>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a48      	ldr	r2, [pc, #288]	; (8000adc <HAL_GPIO_Init+0x2e4>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d00d      	beq.n	80009dc <HAL_GPIO_Init+0x1e4>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a47      	ldr	r2, [pc, #284]	; (8000ae0 <HAL_GPIO_Init+0x2e8>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d007      	beq.n	80009d8 <HAL_GPIO_Init+0x1e0>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a46      	ldr	r2, [pc, #280]	; (8000ae4 <HAL_GPIO_Init+0x2ec>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d101      	bne.n	80009d4 <HAL_GPIO_Init+0x1dc>
 80009d0:	2304      	movs	r3, #4
 80009d2:	e008      	b.n	80009e6 <HAL_GPIO_Init+0x1ee>
 80009d4:	2307      	movs	r3, #7
 80009d6:	e006      	b.n	80009e6 <HAL_GPIO_Init+0x1ee>
 80009d8:	2303      	movs	r3, #3
 80009da:	e004      	b.n	80009e6 <HAL_GPIO_Init+0x1ee>
 80009dc:	2302      	movs	r3, #2
 80009de:	e002      	b.n	80009e6 <HAL_GPIO_Init+0x1ee>
 80009e0:	2301      	movs	r3, #1
 80009e2:	e000      	b.n	80009e6 <HAL_GPIO_Init+0x1ee>
 80009e4:	2300      	movs	r3, #0
 80009e6:	697a      	ldr	r2, [r7, #20]
 80009e8:	f002 0203 	and.w	r2, r2, #3
 80009ec:	0092      	lsls	r2, r2, #2
 80009ee:	4093      	lsls	r3, r2
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009f6:	4937      	ldr	r1, [pc, #220]	; (8000ad4 <HAL_GPIO_Init+0x2dc>)
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	089b      	lsrs	r3, r3, #2
 80009fc:	3302      	adds	r3, #2
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a04:	4b38      	ldr	r3, [pc, #224]	; (8000ae8 <HAL_GPIO_Init+0x2f0>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4013      	ands	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d003      	beq.n	8000a28 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a28:	4a2f      	ldr	r2, [pc, #188]	; (8000ae8 <HAL_GPIO_Init+0x2f0>)
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000a2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ae8 <HAL_GPIO_Init+0x2f0>)
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	43db      	mvns	r3, r3
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d003      	beq.n	8000a52 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a52:	4a25      	ldr	r2, [pc, #148]	; (8000ae8 <HAL_GPIO_Init+0x2f0>)
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a58:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <HAL_GPIO_Init+0x2f0>)
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	43db      	mvns	r3, r3
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	4013      	ands	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d003      	beq.n	8000a7c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a7c:	4a1a      	ldr	r2, [pc, #104]	; (8000ae8 <HAL_GPIO_Init+0x2f0>)
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a82:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <HAL_GPIO_Init+0x2f0>)
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d003      	beq.n	8000aa6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000aa6:	4a10      	ldr	r2, [pc, #64]	; (8000ae8 <HAL_GPIO_Init+0x2f0>)
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	f47f aea3 	bne.w	8000808 <HAL_GPIO_Init+0x10>
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	371c      	adds	r7, #28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40010000 	.word	0x40010000
 8000ad8:	48000400 	.word	0x48000400
 8000adc:	48000800 	.word	0x48000800
 8000ae0:	48000c00 	.word	0x48000c00
 8000ae4:	48001000 	.word	0x48001000
 8000ae8:	40010400 	.word	0x40010400

08000aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	460b      	mov	r3, r1
 8000af6:	807b      	strh	r3, [r7, #2]
 8000af8:	4613      	mov	r3, r2
 8000afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000afc:	787b      	ldrb	r3, [r7, #1]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d003      	beq.n	8000b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b02:	887a      	ldrh	r2, [r7, #2]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b08:	e002      	b.n	8000b10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b0a:	887a      	ldrh	r2, [r7, #2]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d101      	bne.n	8000b2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e080      	b.n	8000c30 <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d106      	bne.n	8000b48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f003 f910 	bl	8003d68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2224      	movs	r2, #36	; 0x24
 8000b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	6812      	ldr	r2, [r2, #0]
 8000b58:	6812      	ldr	r2, [r2, #0]
 8000b5a:	f022 0201 	bic.w	r2, r2, #1
 8000b5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	6852      	ldr	r2, [r2, #4]
 8000b68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000b6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	6812      	ldr	r2, [r2, #0]
 8000b76:	6892      	ldr	r2, [r2, #8]
 8000b78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d107      	bne.n	8000b96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	6892      	ldr	r2, [r2, #8]
 8000b8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	e006      	b.n	8000ba4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	6892      	ldr	r2, [r2, #8]
 8000b9e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000ba2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d104      	bne.n	8000bb6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bb4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bc8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	6812      	ldr	r2, [r2, #0]
 8000bd2:	68d2      	ldr	r2, [r2, #12]
 8000bd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000bd8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	6911      	ldr	r1, [r2, #16]
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	6952      	ldr	r2, [r2, #20]
 8000be6:	4311      	orrs	r1, r2
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	6992      	ldr	r2, [r2, #24]
 8000bec:	0212      	lsls	r2, r2, #8
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	69d1      	ldr	r1, [r2, #28]
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	6a12      	ldr	r2, [r2, #32]
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	6812      	ldr	r2, [r2, #0]
 8000c0a:	6812      	ldr	r2, [r2, #0]
 8000c0c:	f042 0201 	orr.w	r2, r2, #1
 8000c10:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2220      	movs	r2, #32
 8000c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000c2e:	2300      	movs	r3, #0
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af02      	add	r7, sp, #8
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	4608      	mov	r0, r1
 8000c42:	4611      	mov	r1, r2
 8000c44:	461a      	mov	r2, r3
 8000c46:	4603      	mov	r3, r0
 8000c48:	817b      	strh	r3, [r7, #10]
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	813b      	strh	r3, [r7, #8]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b20      	cmp	r3, #32
 8000c5c:	f040 80f9 	bne.w	8000e52 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000c60:	6a3b      	ldr	r3, [r7, #32]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d002      	beq.n	8000c6c <HAL_I2C_Mem_Write+0x34>
 8000c66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d105      	bne.n	8000c78 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c72:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	e0ed      	b.n	8000e54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d101      	bne.n	8000c86 <HAL_I2C_Mem_Write+0x4e>
 8000c82:	2302      	movs	r3, #2
 8000c84:	e0e6      	b.n	8000e54 <HAL_I2C_Mem_Write+0x21c>
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000c8e:	f7ff fc7b 	bl	8000588 <HAL_GetTick>
 8000c92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	2319      	movs	r3, #25
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ca0:	68f8      	ldr	r0, [r7, #12]
 8000ca2:	f000 fac3 	bl	800122c <I2C_WaitOnFlagUntilTimeout>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e0d1      	b.n	8000e54 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2221      	movs	r2, #33	; 0x21
 8000cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2240      	movs	r2, #64	; 0x40
 8000cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	6a3a      	ldr	r2, [r7, #32]
 8000cca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000cd8:	88f8      	ldrh	r0, [r7, #6]
 8000cda:	893a      	ldrh	r2, [r7, #8]
 8000cdc:	8979      	ldrh	r1, [r7, #10]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	9301      	str	r3, [sp, #4]
 8000ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	68f8      	ldr	r0, [r7, #12]
 8000cea:	f000 f9d3 	bl	8001094 <I2C_RequestMemoryWrite>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d005      	beq.n	8000d00 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e0a9      	b.n	8000e54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	2bff      	cmp	r3, #255	; 0xff
 8000d08:	d90e      	bls.n	8000d28 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	22ff      	movs	r2, #255	; 0xff
 8000d0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	8979      	ldrh	r1, [r7, #10]
 8000d18:	2300      	movs	r3, #0
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d20:	68f8      	ldr	r0, [r7, #12]
 8000d22:	f000 fba5 	bl	8001470 <I2C_TransferConfig>
 8000d26:	e00f      	b.n	8000d48 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	8979      	ldrh	r1, [r7, #10]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d42:	68f8      	ldr	r0, [r7, #12]
 8000d44:	f000 fb94 	bl	8001470 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d4c:	68f8      	ldr	r0, [r7, #12]
 8000d4e:	f000 faad 	bl	80012ac <I2C_WaitOnTXISFlagUntilTimeout>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e07b      	b.n	8000e54 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68fa      	ldr	r2, [r7, #12]
 8000d62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000d64:	7812      	ldrb	r2, [r2, #0]
 8000d66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6c:	1c5a      	adds	r2, r3, #1
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d84:	3b01      	subs	r3, #1
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d034      	beq.n	8000e00 <HAL_I2C_Mem_Write+0x1c8>
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d130      	bne.n	8000e00 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da4:	2200      	movs	r2, #0
 8000da6:	2180      	movs	r1, #128	; 0x80
 8000da8:	68f8      	ldr	r0, [r7, #12]
 8000daa:	f000 fa3f 	bl	800122c <I2C_WaitOnFlagUntilTimeout>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	e04d      	b.n	8000e54 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	2bff      	cmp	r3, #255	; 0xff
 8000dc0:	d90e      	bls.n	8000de0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	22ff      	movs	r2, #255	; 0xff
 8000dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	8979      	ldrh	r1, [r7, #10]
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dd8:	68f8      	ldr	r0, [r7, #12]
 8000dda:	f000 fb49 	bl	8001470 <I2C_TransferConfig>
 8000dde:	e00f      	b.n	8000e00 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	8979      	ldrh	r1, [r7, #10]
 8000df2:	2300      	movs	r3, #0
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dfa:	68f8      	ldr	r0, [r7, #12]
 8000dfc:	f000 fb38 	bl	8001470 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d19e      	bne.n	8000d48 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	f000 fa8c 	bl	800132c <I2C_WaitOnSTOPFlagUntilTimeout>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e01a      	b.n	8000e54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2220      	movs	r2, #32
 8000e24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	6859      	ldr	r1, [r3, #4]
 8000e30:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <HAL_I2C_Mem_Write+0x224>)
 8000e32:	400b      	ands	r3, r1
 8000e34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	2220      	movs	r2, #32
 8000e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	e000      	b.n	8000e54 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8000e52:	2302      	movs	r3, #2
  }
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	fe00e800 	.word	0xfe00e800

08000e60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af02      	add	r7, sp, #8
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	4608      	mov	r0, r1
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4603      	mov	r3, r0
 8000e70:	817b      	strh	r3, [r7, #10]
 8000e72:	460b      	mov	r3, r1
 8000e74:	813b      	strh	r3, [r7, #8]
 8000e76:	4613      	mov	r3, r2
 8000e78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b20      	cmp	r3, #32
 8000e84:	f040 80fd 	bne.w	8001082 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8000e88:	6a3b      	ldr	r3, [r7, #32]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d002      	beq.n	8000e94 <HAL_I2C_Mem_Read+0x34>
 8000e8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d105      	bne.n	8000ea0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e9a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e0f1      	b.n	8001084 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d101      	bne.n	8000eae <HAL_I2C_Mem_Read+0x4e>
 8000eaa:	2302      	movs	r3, #2
 8000eac:	e0ea      	b.n	8001084 <HAL_I2C_Mem_Read+0x224>
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000eb6:	f7ff fb67 	bl	8000588 <HAL_GetTick>
 8000eba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	2319      	movs	r3, #25
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec8:	68f8      	ldr	r0, [r7, #12]
 8000eca:	f000 f9af 	bl	800122c <I2C_WaitOnFlagUntilTimeout>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e0d5      	b.n	8001084 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2222      	movs	r2, #34	; 0x22
 8000edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2240      	movs	r2, #64	; 0x40
 8000ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2200      	movs	r2, #0
 8000eec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6a3a      	ldr	r2, [r7, #32]
 8000ef2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000ef8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2200      	movs	r2, #0
 8000efe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000f00:	88f8      	ldrh	r0, [r7, #6]
 8000f02:	893a      	ldrh	r2, [r7, #8]
 8000f04:	8979      	ldrh	r1, [r7, #10]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	4603      	mov	r3, r0
 8000f10:	68f8      	ldr	r0, [r7, #12]
 8000f12:	f000 f913 	bl	800113c <I2C_RequestMemoryRead>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d005      	beq.n	8000f28 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e0ad      	b.n	8001084 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	2bff      	cmp	r3, #255	; 0xff
 8000f30:	d90e      	bls.n	8000f50 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	22ff      	movs	r2, #255	; 0xff
 8000f36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	8979      	ldrh	r1, [r7, #10]
 8000f40:	4b52      	ldr	r3, [pc, #328]	; (800108c <HAL_I2C_Mem_Read+0x22c>)
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f48:	68f8      	ldr	r0, [r7, #12]
 8000f4a:	f000 fa91 	bl	8001470 <I2C_TransferConfig>
 8000f4e:	e00f      	b.n	8000f70 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	8979      	ldrh	r1, [r7, #10]
 8000f62:	4b4a      	ldr	r3, [pc, #296]	; (800108c <HAL_I2C_Mem_Read+0x22c>)
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f6a:	68f8      	ldr	r0, [r7, #12]
 8000f6c:	f000 fa80 	bl	8001470 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f76:	2200      	movs	r2, #0
 8000f78:	2104      	movs	r1, #4
 8000f7a:	68f8      	ldr	r0, [r7, #12]
 8000f7c:	f000 f956 	bl	800122c <I2C_WaitOnFlagUntilTimeout>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e07c      	b.n	8001084 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	6812      	ldr	r2, [r2, #0]
 8000f92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9c:	1c5a      	adds	r2, r3, #1
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d034      	beq.n	8001030 <HAL_I2C_Mem_Read+0x1d0>
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d130      	bne.n	8001030 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2180      	movs	r1, #128	; 0x80
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f000 f927 	bl	800122c <I2C_WaitOnFlagUntilTimeout>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e04d      	b.n	8001084 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	2bff      	cmp	r3, #255	; 0xff
 8000ff0:	d90e      	bls.n	8001010 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	22ff      	movs	r2, #255	; 0xff
 8000ff6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	8979      	ldrh	r1, [r7, #10]
 8001000:	2300      	movs	r3, #0
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f000 fa31 	bl	8001470 <I2C_TransferConfig>
 800100e:	e00f      	b.n	8001030 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001014:	b29a      	uxth	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800101e:	b2da      	uxtb	r2, r3
 8001020:	8979      	ldrh	r1, [r7, #10]
 8001022:	2300      	movs	r3, #0
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f000 fa20 	bl	8001470 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001034:	b29b      	uxth	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d19a      	bne.n	8000f70 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f000 f974 	bl	800132c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e01a      	b.n	8001084 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2220      	movs	r2, #32
 8001054:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	6859      	ldr	r1, [r3, #4]
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_I2C_Mem_Read+0x230>)
 8001062:	400b      	ands	r3, r1
 8001064:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2220      	movs	r2, #32
 800106a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e000      	b.n	8001084 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001082:	2302      	movs	r3, #2
  }
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	80002400 	.word	0x80002400
 8001090:	fe00e800 	.word	0xfe00e800

08001094 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af02      	add	r7, sp, #8
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	4608      	mov	r0, r1
 800109e:	4611      	mov	r1, r2
 80010a0:	461a      	mov	r2, r3
 80010a2:	4603      	mov	r3, r0
 80010a4:	817b      	strh	r3, [r7, #10]
 80010a6:	460b      	mov	r3, r1
 80010a8:	813b      	strh	r3, [r7, #8]
 80010aa:	4613      	mov	r3, r2
 80010ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80010ae:	88fb      	ldrh	r3, [r7, #6]
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	8979      	ldrh	r1, [r7, #10]
 80010b4:	4b20      	ldr	r3, [pc, #128]	; (8001138 <I2C_RequestMemoryWrite+0xa4>)
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f000 f9d7 	bl	8001470 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80010c2:	69fa      	ldr	r2, [r7, #28]
 80010c4:	69b9      	ldr	r1, [r7, #24]
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	f000 f8f0 	bl	80012ac <I2C_WaitOnTXISFlagUntilTimeout>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e02c      	b.n	8001130 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d105      	bne.n	80010e8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	893a      	ldrh	r2, [r7, #8]
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	629a      	str	r2, [r3, #40]	; 0x28
 80010e6:	e015      	b.n	8001114 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	893a      	ldrh	r2, [r7, #8]
 80010ee:	0a12      	lsrs	r2, r2, #8
 80010f0:	b292      	uxth	r2, r2
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80010f6:	69fa      	ldr	r2, [r7, #28]
 80010f8:	69b9      	ldr	r1, [r7, #24]
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f000 f8d6 	bl	80012ac <I2C_WaitOnTXISFlagUntilTimeout>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e012      	b.n	8001130 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	893a      	ldrh	r2, [r7, #8]
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	2200      	movs	r2, #0
 800111c:	2180      	movs	r1, #128	; 0x80
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f000 f884 	bl	800122c <I2C_WaitOnFlagUntilTimeout>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	80002000 	.word	0x80002000

0800113c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af02      	add	r7, sp, #8
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	4608      	mov	r0, r1
 8001146:	4611      	mov	r1, r2
 8001148:	461a      	mov	r2, r3
 800114a:	4603      	mov	r3, r0
 800114c:	817b      	strh	r3, [r7, #10]
 800114e:	460b      	mov	r3, r1
 8001150:	813b      	strh	r3, [r7, #8]
 8001152:	4613      	mov	r3, r2
 8001154:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001156:	88fb      	ldrh	r3, [r7, #6]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	8979      	ldrh	r1, [r7, #10]
 800115c:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <I2C_RequestMemoryRead+0xa4>)
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2300      	movs	r3, #0
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f000 f984 	bl	8001470 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001168:	69fa      	ldr	r2, [r7, #28]
 800116a:	69b9      	ldr	r1, [r7, #24]
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f000 f89d 	bl	80012ac <I2C_WaitOnTXISFlagUntilTimeout>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e02c      	b.n	80011d6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800117c:	88fb      	ldrh	r3, [r7, #6]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d105      	bne.n	800118e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	893a      	ldrh	r2, [r7, #8]
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	629a      	str	r2, [r3, #40]	; 0x28
 800118c:	e015      	b.n	80011ba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	893a      	ldrh	r2, [r7, #8]
 8001194:	0a12      	lsrs	r2, r2, #8
 8001196:	b292      	uxth	r2, r2
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800119c:	69fa      	ldr	r2, [r7, #28]
 800119e:	69b9      	ldr	r1, [r7, #24]
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	f000 f883 	bl	80012ac <I2C_WaitOnTXISFlagUntilTimeout>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e012      	b.n	80011d6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	893a      	ldrh	r2, [r7, #8]
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	2200      	movs	r2, #0
 80011c2:	2140      	movs	r1, #64	; 0x40
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f000 f831 	bl	800122c <I2C_WaitOnFlagUntilTimeout>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e000      	b.n	80011d6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	80002000 	.word	0x80002000

080011e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d103      	bne.n	8001202 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2200      	movs	r2, #0
 8001200:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b01      	cmp	r3, #1
 800120e:	d007      	beq.n	8001220 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	6812      	ldr	r2, [r2, #0]
 8001218:	6992      	ldr	r2, [r2, #24]
 800121a:	f042 0201 	orr.w	r2, r2, #1
 800121e:	619a      	str	r2, [r3, #24]
  }
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	4613      	mov	r3, r2
 800123a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800123c:	e022      	b.n	8001284 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001244:	d01e      	beq.n	8001284 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001246:	f7ff f99f 	bl	8000588 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	1ad2      	subs	r2, r2, r3
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d802      	bhi.n	800125c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d113      	bne.n	8001284 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001260:	f043 0220 	orr.w	r2, r3, #32
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2220      	movs	r2, #32
 800126c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e00f      	b.n	80012a4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	699a      	ldr	r2, [r3, #24]
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	401a      	ands	r2, r3
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	429a      	cmp	r2, r3
 8001292:	bf0c      	ite	eq
 8001294:	2301      	moveq	r3, #1
 8001296:	2300      	movne	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	461a      	mov	r2, r3
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d0cd      	beq.n	800123e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80012b8:	e02c      	b.n	8001314 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f000 f870 	bl	80013a4 <I2C_IsAcknowledgeFailed>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e02a      	b.n	8001324 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d4:	d01e      	beq.n	8001314 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012d6:	f7ff f957 	bl	8000588 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	1ad2      	subs	r2, r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d802      	bhi.n	80012ec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d113      	bne.n	8001314 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f0:	f043 0220 	orr.w	r2, r3, #32
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2220      	movs	r2, #32
 80012fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e007      	b.n	8001324 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b02      	cmp	r3, #2
 8001320:	d1cb      	bne.n	80012ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001338:	e028      	b.n	800138c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68b9      	ldr	r1, [r7, #8]
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f000 f830 	bl	80013a4 <I2C_IsAcknowledgeFailed>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e026      	b.n	800139c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800134e:	f7ff f91b 	bl	8000588 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	1ad2      	subs	r2, r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	429a      	cmp	r2, r3
 800135c:	d802      	bhi.n	8001364 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d113      	bne.n	800138c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001368:	f043 0220 	orr.w	r2, r3, #32
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2220      	movs	r2, #32
 8001374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e007      	b.n	800139c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	f003 0320 	and.w	r3, r3, #32
 8001396:	2b20      	cmp	r3, #32
 8001398:	d1cf      	bne.n	800133a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	f003 0310 	and.w	r3, r3, #16
 80013ba:	2b10      	cmp	r3, #16
 80013bc:	d151      	bne.n	8001462 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013be:	e022      	b.n	8001406 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c6:	d01e      	beq.n	8001406 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013c8:	f7ff f8de 	bl	8000588 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	1ad2      	subs	r2, r2, r3
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d802      	bhi.n	80013de <I2C_IsAcknowledgeFailed+0x3a>
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d113      	bne.n	8001406 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f043 0220 	orr.w	r2, r3, #32
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2220      	movs	r2, #32
 80013ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e02e      	b.n	8001464 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0320 	and.w	r3, r3, #32
 8001410:	2b20      	cmp	r3, #32
 8001412:	d1d5      	bne.n	80013c0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2210      	movs	r2, #16
 800141a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2220      	movs	r2, #32
 8001422:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	f7ff fedd 	bl	80011e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6859      	ldr	r1, [r3, #4]
 8001434:	4b0d      	ldr	r3, [pc, #52]	; (800146c <I2C_IsAcknowledgeFailed+0xc8>)
 8001436:	400b      	ands	r3, r1
 8001438:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f043 0204 	orr.w	r2, r3, #4
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2220      	movs	r2, #32
 800144a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	fe00e800 	.word	0xfe00e800

08001470 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	460b      	mov	r3, r1
 800147c:	817b      	strh	r3, [r7, #10]
 800147e:	4613      	mov	r3, r2
 8001480:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6859      	ldr	r1, [r3, #4]
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	0d5b      	lsrs	r3, r3, #21
 8001490:	f403 6080 	and.w	r0, r3, #1024	; 0x400
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <I2C_TransferConfig+0x54>)
 8001496:	4303      	orrs	r3, r0
 8001498:	43db      	mvns	r3, r3
 800149a:	4019      	ands	r1, r3
 800149c:	897b      	ldrh	r3, [r7, #10]
 800149e:	f3c3 0009 	ubfx	r0, r3, #0, #10
 80014a2:	7a7b      	ldrb	r3, [r7, #9]
 80014a4:	041b      	lsls	r3, r3, #16
 80014a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80014aa:	4318      	orrs	r0, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4318      	orrs	r0, r3
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	4303      	orrs	r3, r0
 80014b4:	430b      	orrs	r3, r1
 80014b6:	6053      	str	r3, [r2, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80014b8:	bf00      	nop
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	03ff63ff 	.word	0x03ff63ff

080014c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b20      	cmp	r3, #32
 80014dc:	d138      	bne.n	8001550 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d101      	bne.n	80014ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80014e8:	2302      	movs	r3, #2
 80014ea:	e032      	b.n	8001552 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2224      	movs	r2, #36	; 0x24
 80014f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6812      	ldr	r2, [r2, #0]
 8001504:	6812      	ldr	r2, [r2, #0]
 8001506:	f022 0201 	bic.w	r2, r2, #1
 800150a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	6812      	ldr	r2, [r2, #0]
 8001514:	6812      	ldr	r2, [r2, #0]
 8001516:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800151a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	6812      	ldr	r2, [r2, #0]
 8001524:	6811      	ldr	r1, [r2, #0]
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6812      	ldr	r2, [r2, #0]
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	f042 0201 	orr.w	r2, r2, #1
 800153a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2220      	movs	r2, #32
 8001540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	e000      	b.n	8001552 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001550:	2302      	movs	r3, #2
  }
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800155e:	b480      	push	{r7}
 8001560:	b085      	sub	sp, #20
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b20      	cmp	r3, #32
 8001572:	d139      	bne.n	80015e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800157a:	2b01      	cmp	r3, #1
 800157c:	d101      	bne.n	8001582 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800157e:	2302      	movs	r3, #2
 8001580:	e033      	b.n	80015ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2201      	movs	r2, #1
 8001586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2224      	movs	r2, #36	; 0x24
 800158e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6812      	ldr	r2, [r2, #0]
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	f022 0201 	bic.w	r2, r2, #1
 80015a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	f042 0201 	orr.w	r2, r2, #1
 80015d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2220      	movs	r2, #32
 80015d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	e000      	b.n	80015ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80015e8:	2302      	movs	r3, #2
  }
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <HAL_PWREx_GetVoltageRange+0x18>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40007000 	.word	0x40007000

08001614 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001622:	d130      	bne.n	8001686 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001624:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800162c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001630:	d038      	beq.n	80016a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001632:	4a20      	ldr	r2, [pc, #128]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001634:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800163c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001640:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001642:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2232      	movs	r2, #50	; 0x32
 8001648:	fb02 f303 	mul.w	r3, r2, r3
 800164c:	4a1b      	ldr	r2, [pc, #108]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800164e:	fba2 2303 	umull	r2, r3, r2, r3
 8001652:	0c9b      	lsrs	r3, r3, #18
 8001654:	3301      	adds	r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001658:	e002      	b.n	8001660 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	3b01      	subs	r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001660:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800166c:	d102      	bne.n	8001674 <HAL_PWREx_ControlVoltageScaling+0x60>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f2      	bne.n	800165a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001680:	d110      	bne.n	80016a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e00f      	b.n	80016a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800168e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001692:	d007      	beq.n	80016a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001694:	4a07      	ldr	r2, [pc, #28]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001696:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800169e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40007000 	.word	0x40007000
 80016b8:	2000007c 	.word	0x2000007c
 80016bc:	431bde83 	.word	0x431bde83

080016c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_oscsource;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e395      	b.n	8001dfe <HAL_RCC_OscConfig+0x73e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016d2:	4ba3      	ldr	r3, [pc, #652]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016dc:	4ba0      	ldr	r3, [pc, #640]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0310 	and.w	r3, r3, #16
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 80df 	beq.w	80018b2 <HAL_RCC_OscConfig+0x1f2>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d007      	beq.n	800170a <HAL_RCC_OscConfig+0x4a>
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	2b0c      	cmp	r3, #12
 80016fe:	f040 8086 	bne.w	800180e <HAL_RCC_OscConfig+0x14e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	2b01      	cmp	r3, #1
 8001706:	f040 8082 	bne.w	800180e <HAL_RCC_OscConfig+0x14e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800170a:	4b95      	ldr	r3, [pc, #596]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d005      	beq.n	8001722 <HAL_RCC_OscConfig+0x62>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e36d      	b.n	8001dfe <HAL_RCC_OscConfig+0x73e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a1a      	ldr	r2, [r3, #32]
 8001726:	4b8e      	ldr	r3, [pc, #568]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	2b00      	cmp	r3, #0
 8001730:	d004      	beq.n	800173c <HAL_RCC_OscConfig+0x7c>
 8001732:	4b8b      	ldr	r3, [pc, #556]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800173a:	e005      	b.n	8001748 <HAL_RCC_OscConfig+0x88>
 800173c:	4b88      	ldr	r3, [pc, #544]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 800173e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001742:	091b      	lsrs	r3, r3, #4
 8001744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001748:	429a      	cmp	r2, r3
 800174a:	d923      	bls.n	8001794 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	4618      	mov	r0, r3
 8001752:	f000 fd0d 	bl	8002170 <RCC_SetFlashLatencyFromMSIRange>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e34e      	b.n	8001dfe <HAL_RCC_OscConfig+0x73e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001760:	4a7f      	ldr	r2, [pc, #508]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 8001762:	4b7f      	ldr	r3, [pc, #508]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f043 0308 	orr.w	r3, r3, #8
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	497c      	ldr	r1, [pc, #496]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 800176e:	4b7c      	ldr	r3, [pc, #496]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	4313      	orrs	r3, r2
 800177c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800177e:	4978      	ldr	r1, [pc, #480]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 8001780:	4b77      	ldr	r3, [pc, #476]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	4313      	orrs	r3, r2
 8001790:	604b      	str	r3, [r1, #4]
 8001792:	e022      	b.n	80017da <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001794:	4a72      	ldr	r2, [pc, #456]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 8001796:	4b72      	ldr	r3, [pc, #456]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f043 0308 	orr.w	r3, r3, #8
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	496f      	ldr	r1, [pc, #444]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 80017a2:	4b6f      	ldr	r3, [pc, #444]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017b2:	496b      	ldr	r1, [pc, #428]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 80017b4:	4b6a      	ldr	r3, [pc, #424]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	4313      	orrs	r3, r2
 80017c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 fcd0 	bl	8002170 <RCC_SetFlashLatencyFromMSIRange>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e311      	b.n	8001dfe <HAL_RCC_OscConfig+0x73e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017da:	f000 fbf5 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 80017de:	4601      	mov	r1, r0
 80017e0:	4b5f      	ldr	r3, [pc, #380]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	091b      	lsrs	r3, r3, #4
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	4a5e      	ldr	r2, [pc, #376]	; (8001964 <HAL_RCC_OscConfig+0x2a4>)
 80017ec:	5cd3      	ldrb	r3, [r2, r3]
 80017ee:	f003 031f 	and.w	r3, r3, #31
 80017f2:	fa21 f303 	lsr.w	r3, r1, r3
 80017f6:	4a5c      	ldr	r2, [pc, #368]	; (8001968 <HAL_RCC_OscConfig+0x2a8>)
 80017f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80017fa:	2000      	movs	r0, #0
 80017fc:	f7fe fe92 	bl	8000524 <HAL_InitTick>
 8001800:	4603      	mov	r3, r0
 8001802:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d052      	beq.n	80018b0 <HAL_RCC_OscConfig+0x1f0>
        {
          return status;
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	e2f7      	b.n	8001dfe <HAL_RCC_OscConfig+0x73e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d032      	beq.n	800187c <HAL_RCC_OscConfig+0x1bc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001816:	4a52      	ldr	r2, [pc, #328]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 8001818:	4b51      	ldr	r3, [pc, #324]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001822:	f7fe feb1 	bl	8000588 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800182a:	f7fe fead 	bl	8000588 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e2e0      	b.n	8001dfe <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800183c:	4b48      	ldr	r3, [pc, #288]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0f0      	beq.n	800182a <HAL_RCC_OscConfig+0x16a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001848:	4a45      	ldr	r2, [pc, #276]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 800184a:	4b45      	ldr	r3, [pc, #276]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f043 0308 	orr.w	r3, r3, #8
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	4942      	ldr	r1, [pc, #264]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 8001856:	4b42      	ldr	r3, [pc, #264]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	4313      	orrs	r3, r2
 8001864:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001866:	493e      	ldr	r1, [pc, #248]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 8001868:	4b3d      	ldr	r3, [pc, #244]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	4313      	orrs	r3, r2
 8001878:	604b      	str	r3, [r1, #4]
 800187a:	e01a      	b.n	80018b2 <HAL_RCC_OscConfig+0x1f2>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800187c:	4a38      	ldr	r2, [pc, #224]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 800187e:	4b38      	ldr	r3, [pc, #224]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f023 0301 	bic.w	r3, r3, #1
 8001886:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001888:	f7fe fe7e 	bl	8000588 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x1e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001890:	f7fe fe7a 	bl	8000588 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x1e2>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e2ad      	b.n	8001dfe <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018a2:	4b2f      	ldr	r3, [pc, #188]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x1d0>
 80018ae:	e000      	b.n	80018b2 <HAL_RCC_OscConfig+0x1f2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d072      	beq.n	80019a4 <HAL_RCC_OscConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_OscConfig+0x210>
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	2b0c      	cmp	r3, #12
 80018c8:	d10e      	bne.n	80018e8 <HAL_RCC_OscConfig+0x228>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d10b      	bne.n	80018e8 <HAL_RCC_OscConfig+0x228>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d0:	4b23      	ldr	r3, [pc, #140]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d062      	beq.n	80019a2 <HAL_RCC_OscConfig+0x2e2>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d15e      	bne.n	80019a2 <HAL_RCC_OscConfig+0x2e2>
      {
        return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e28a      	b.n	8001dfe <HAL_RCC_OscConfig+0x73e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f0:	d106      	bne.n	8001900 <HAL_RCC_OscConfig+0x240>
 80018f2:	4a1b      	ldr	r2, [pc, #108]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 80018f4:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	e01d      	b.n	800193c <HAL_RCC_OscConfig+0x27c>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001908:	d10c      	bne.n	8001924 <HAL_RCC_OscConfig+0x264>
 800190a:	4a15      	ldr	r2, [pc, #84]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 800190c:	4b14      	ldr	r3, [pc, #80]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	4a12      	ldr	r2, [pc, #72]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	e00b      	b.n	800193c <HAL_RCC_OscConfig+0x27c>
 8001924:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_RCC_OscConfig+0x2a0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800193a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d01a      	beq.n	800197a <HAL_RCC_OscConfig+0x2ba>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7fe fe20 	bl	8000588 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800194a:	e00f      	b.n	800196c <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800194c:	f7fe fe1c 	bl	8000588 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b64      	cmp	r3, #100	; 0x64
 8001958:	d908      	bls.n	800196c <HAL_RCC_OscConfig+0x2ac>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e24f      	b.n	8001dfe <HAL_RCC_OscConfig+0x73e>
 800195e:	bf00      	nop
 8001960:	40021000 	.word	0x40021000
 8001964:	08003fb4 	.word	0x08003fb4
 8001968:	2000007c 	.word	0x2000007c
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800196c:	4bae      	ldr	r3, [pc, #696]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0e9      	beq.n	800194c <HAL_RCC_OscConfig+0x28c>
 8001978:	e014      	b.n	80019a4 <HAL_RCC_OscConfig+0x2e4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197a:	f7fe fe05 	bl	8000588 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x2d4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001982:	f7fe fe01 	bl	8000588 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b64      	cmp	r3, #100	; 0x64
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x2d4>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e234      	b.n	8001dfe <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001994:	4ba4      	ldr	r3, [pc, #656]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1f0      	bne.n	8001982 <HAL_RCC_OscConfig+0x2c2>
 80019a0:	e000      	b.n	80019a4 <HAL_RCC_OscConfig+0x2e4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d060      	beq.n	8001a72 <HAL_RCC_OscConfig+0x3b2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d005      	beq.n	80019c2 <HAL_RCC_OscConfig+0x302>
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	2b0c      	cmp	r3, #12
 80019ba:	d119      	bne.n	80019f0 <HAL_RCC_OscConfig+0x330>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d116      	bne.n	80019f0 <HAL_RCC_OscConfig+0x330>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019c2:	4b99      	ldr	r3, [pc, #612]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d005      	beq.n	80019da <HAL_RCC_OscConfig+0x31a>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e211      	b.n	8001dfe <HAL_RCC_OscConfig+0x73e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019da:	4993      	ldr	r1, [pc, #588]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 80019dc:	4b92      	ldr	r3, [pc, #584]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	061b      	lsls	r3, r3, #24
 80019ea:	4313      	orrs	r3, r2
 80019ec:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019ee:	e040      	b.n	8001a72 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d023      	beq.n	8001a40 <HAL_RCC_OscConfig+0x380>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f8:	4a8b      	ldr	r2, [pc, #556]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 80019fa:	4b8b      	ldr	r3, [pc, #556]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7fe fdc0 	bl	8000588 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a0c:	f7fe fdbc 	bl	8000588 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e1ef      	b.n	8001dfe <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a1e:	4b82      	ldr	r3, [pc, #520]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0x34c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2a:	497f      	ldr	r1, [pc, #508]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 8001a2c:	4b7e      	ldr	r3, [pc, #504]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	061b      	lsls	r3, r3, #24
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	604b      	str	r3, [r1, #4]
 8001a3e:	e018      	b.n	8001a72 <HAL_RCC_OscConfig+0x3b2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a40:	4a79      	ldr	r2, [pc, #484]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 8001a42:	4b79      	ldr	r3, [pc, #484]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4c:	f7fe fd9c 	bl	8000588 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a54:	f7fe fd98 	bl	8000588 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e1cb      	b.n	8001dfe <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a66:	4b70      	ldr	r3, [pc, #448]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x394>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d03c      	beq.n	8001af8 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d01c      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x400>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a86:	4a68      	ldr	r2, [pc, #416]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 8001a88:	4b67      	ldr	r3, [pc, #412]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 8001a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a96:	f7fe fd77 	bl	8000588 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a9e:	f7fe fd73 	bl	8000588 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e1a6      	b.n	8001dfe <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ab0:	4b5d      	ldr	r3, [pc, #372]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 8001ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0ef      	beq.n	8001a9e <HAL_RCC_OscConfig+0x3de>
 8001abe:	e01b      	b.n	8001af8 <HAL_RCC_OscConfig+0x438>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac0:	4a59      	ldr	r2, [pc, #356]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 8001ac2:	4b59      	ldr	r3, [pc, #356]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 8001ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac8:	f023 0301 	bic.w	r3, r3, #1
 8001acc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad0:	f7fe fd5a 	bl	8000588 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad8:	f7fe fd56 	bl	8000588 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e189      	b.n	8001dfe <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aea:	4b4f      	ldr	r3, [pc, #316]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 8001aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1ef      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80a5 	beq.w	8001c50 <HAL_RCC_OscConfig+0x590>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b0a:	4b47      	ldr	r3, [pc, #284]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10d      	bne.n	8001b32 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	4a44      	ldr	r2, [pc, #272]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 8001b18:	4b43      	ldr	r3, [pc, #268]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 8001b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b20:	6593      	str	r3, [r2, #88]	; 0x58
 8001b22:	4b41      	ldr	r3, [pc, #260]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 8001b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b32:	4b3e      	ldr	r3, [pc, #248]	; (8001c2c <HAL_RCC_OscConfig+0x56c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d118      	bne.n	8001b70 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b3e:	4a3b      	ldr	r2, [pc, #236]	; (8001c2c <HAL_RCC_OscConfig+0x56c>)
 8001b40:	4b3a      	ldr	r3, [pc, #232]	; (8001c2c <HAL_RCC_OscConfig+0x56c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b4a:	f7fe fd1d 	bl	8000588 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b52:	f7fe fd19 	bl	8000588 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e14c      	b.n	8001dfe <HAL_RCC_OscConfig+0x73e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b64:	4b31      	ldr	r3, [pc, #196]	; (8001c2c <HAL_RCC_OscConfig+0x56c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0f0      	beq.n	8001b52 <HAL_RCC_OscConfig+0x492>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d108      	bne.n	8001b8a <HAL_RCC_OscConfig+0x4ca>
 8001b78:	4a2b      	ldr	r2, [pc, #172]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 8001b7a:	4b2b      	ldr	r3, [pc, #172]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 8001b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b88:	e024      	b.n	8001bd4 <HAL_RCC_OscConfig+0x514>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2b05      	cmp	r3, #5
 8001b90:	d110      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x4f4>
 8001b92:	4a25      	ldr	r2, [pc, #148]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 8001b94:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 8001b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b9a:	f043 0304 	orr.w	r3, r3, #4
 8001b9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ba2:	4a21      	ldr	r2, [pc, #132]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 8001ba4:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 8001ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bb2:	e00f      	b.n	8001bd4 <HAL_RCC_OscConfig+0x514>
 8001bb4:	4a1c      	ldr	r2, [pc, #112]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 8001bb6:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 8001bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bbc:	f023 0301 	bic.w	r3, r3, #1
 8001bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bc4:	4a18      	ldr	r2, [pc, #96]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 8001bc6:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 8001bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bcc:	f023 0304 	bic.w	r3, r3, #4
 8001bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d016      	beq.n	8001c0a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bdc:	f7fe fcd4 	bl	8000588 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001be2:	e00a      	b.n	8001bfa <HAL_RCC_OscConfig+0x53a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be4:	f7fe fcd0 	bl	8000588 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x53a>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e101      	b.n	8001dfe <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_RCC_OscConfig+0x568>)
 8001bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0ed      	beq.n	8001be4 <HAL_RCC_OscConfig+0x524>
 8001c08:	e019      	b.n	8001c3e <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0a:	f7fe fcbd 	bl	8000588 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c10:	e00e      	b.n	8001c30 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c12:	f7fe fcb9 	bl	8000588 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d905      	bls.n	8001c30 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e0ea      	b.n	8001dfe <HAL_RCC_OscConfig+0x73e>
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c30:	4b75      	ldr	r3, [pc, #468]	; (8001e08 <HAL_RCC_OscConfig+0x748>)
 8001c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1e9      	bne.n	8001c12 <HAL_RCC_OscConfig+0x552>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c3e:	7ffb      	ldrb	r3, [r7, #31]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d105      	bne.n	8001c50 <HAL_RCC_OscConfig+0x590>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c44:	4a70      	ldr	r2, [pc, #448]	; (8001e08 <HAL_RCC_OscConfig+0x748>)
 8001c46:	4b70      	ldr	r3, [pc, #448]	; (8001e08 <HAL_RCC_OscConfig+0x748>)
 8001c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0320 	and.w	r3, r3, #32
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d03c      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x616>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d01c      	beq.n	8001c9e <HAL_RCC_OscConfig+0x5de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c64:	4a68      	ldr	r2, [pc, #416]	; (8001e08 <HAL_RCC_OscConfig+0x748>)
 8001c66:	4b68      	ldr	r3, [pc, #416]	; (8001e08 <HAL_RCC_OscConfig+0x748>)
 8001c68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c74:	f7fe fc88 	bl	8000588 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x5ce>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c7c:	f7fe fc84 	bl	8000588 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e0b7      	b.n	8001dfe <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c8e:	4b5e      	ldr	r3, [pc, #376]	; (8001e08 <HAL_RCC_OscConfig+0x748>)
 8001c90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0ef      	beq.n	8001c7c <HAL_RCC_OscConfig+0x5bc>
 8001c9c:	e01b      	b.n	8001cd6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c9e:	4a5a      	ldr	r2, [pc, #360]	; (8001e08 <HAL_RCC_OscConfig+0x748>)
 8001ca0:	4b59      	ldr	r3, [pc, #356]	; (8001e08 <HAL_RCC_OscConfig+0x748>)
 8001ca2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ca6:	f023 0301 	bic.w	r3, r3, #1
 8001caa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cae:	f7fe fc6b 	bl	8000588 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x608>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cb6:	f7fe fc67 	bl	8000588 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x608>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e09a      	b.n	8001dfe <HAL_RCC_OscConfig+0x73e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cc8:	4b4f      	ldr	r3, [pc, #316]	; (8001e08 <HAL_RCC_OscConfig+0x748>)
 8001cca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1ef      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x5f6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 808e 	beq.w	8001dfc <HAL_RCC_OscConfig+0x73c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	2b0c      	cmp	r3, #12
 8001ce4:	f000 8088 	beq.w	8001df8 <HAL_RCC_OscConfig+0x738>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d155      	bne.n	8001d9c <HAL_RCC_OscConfig+0x6dc>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf0:	4a45      	ldr	r2, [pc, #276]	; (8001e08 <HAL_RCC_OscConfig+0x748>)
 8001cf2:	4b45      	ldr	r3, [pc, #276]	; (8001e08 <HAL_RCC_OscConfig+0x748>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7fe fc44 	bl	8000588 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d04:	f7fe fc40 	bl	8000588 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e073      	b.n	8001dfe <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d16:	4b3c      	ldr	r3, [pc, #240]	; (8001e08 <HAL_RCC_OscConfig+0x748>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x644>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d22:	4939      	ldr	r1, [pc, #228]	; (8001e08 <HAL_RCC_OscConfig+0x748>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	011a      	lsls	r2, r3, #4
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d3e:	085b      	lsrs	r3, r3, #1
 8001d40:	3b01      	subs	r3, #1
 8001d42:	055b      	lsls	r3, r3, #21
 8001d44:	431a      	orrs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	085b      	lsrs	r3, r3, #1
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	065b      	lsls	r3, r3, #25
 8001d50:	431a      	orrs	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d56:	06db      	lsls	r3, r3, #27
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d5c:	4a2a      	ldr	r2, [pc, #168]	; (8001e08 <HAL_RCC_OscConfig+0x748>)
 8001d5e:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <HAL_RCC_OscConfig+0x748>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d66:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d68:	4a27      	ldr	r2, [pc, #156]	; (8001e08 <HAL_RCC_OscConfig+0x748>)
 8001d6a:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <HAL_RCC_OscConfig+0x748>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d74:	f7fe fc08 	bl	8000588 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x6ce>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7c:	f7fe fc04 	bl	8000588 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x6ce>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e037      	b.n	8001dfe <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d8e:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <HAL_RCC_OscConfig+0x748>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCC_OscConfig+0x6bc>
 8001d9a:	e02f      	b.n	8001dfc <HAL_RCC_OscConfig+0x73c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9c:	4a1a      	ldr	r2, [pc, #104]	; (8001e08 <HAL_RCC_OscConfig+0x748>)
 8001d9e:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <HAL_RCC_OscConfig+0x748>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001da6:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001da8:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <HAL_RCC_OscConfig+0x748>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d105      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x700>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001db4:	4a14      	ldr	r2, [pc, #80]	; (8001e08 <HAL_RCC_OscConfig+0x748>)
 8001db6:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <HAL_RCC_OscConfig+0x748>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	f023 0303 	bic.w	r3, r3, #3
 8001dbe:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001dc0:	4a11      	ldr	r2, [pc, #68]	; (8001e08 <HAL_RCC_OscConfig+0x748>)
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <HAL_RCC_OscConfig+0x748>)
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dce:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd0:	f7fe fbda 	bl	8000588 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x72a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd8:	f7fe fbd6 	bl	8000588 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x72a>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e009      	b.n	8001dfe <HAL_RCC_OscConfig+0x73e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dea:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <HAL_RCC_OscConfig+0x748>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x718>
 8001df6:	e001      	b.n	8001dfc <HAL_RCC_OscConfig+0x73c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e000      	b.n	8001dfe <HAL_RCC_OscConfig+0x73e>
    }
  }
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3720      	adds	r7, #32
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000

08001e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0c6      	b.n	8001fae <HAL_RCC_ClockConfig+0x1a2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e20:	4b65      	ldr	r3, [pc, #404]	; (8001fb8 <HAL_RCC_ClockConfig+0x1ac>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0207 	and.w	r2, r3, #7
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d210      	bcs.n	8001e50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2e:	4962      	ldr	r1, [pc, #392]	; (8001fb8 <HAL_RCC_ClockConfig+0x1ac>)
 8001e30:	4b61      	ldr	r3, [pc, #388]	; (8001fb8 <HAL_RCC_ClockConfig+0x1ac>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f023 0207 	bic.w	r2, r3, #7
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3e:	4b5e      	ldr	r3, [pc, #376]	; (8001fb8 <HAL_RCC_ClockConfig+0x1ac>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0207 	and.w	r2, r3, #7
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0ae      	b.n	8001fae <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d04c      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d107      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e64:	4b55      	ldr	r3, [pc, #340]	; (8001fbc <HAL_RCC_ClockConfig+0x1b0>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d121      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e09c      	b.n	8001fae <HAL_RCC_ClockConfig+0x1a2>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d107      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e7c:	4b4f      	ldr	r3, [pc, #316]	; (8001fbc <HAL_RCC_ClockConfig+0x1b0>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d115      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e090      	b.n	8001fae <HAL_RCC_ClockConfig+0x1a2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d107      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e94:	4b49      	ldr	r3, [pc, #292]	; (8001fbc <HAL_RCC_ClockConfig+0x1b0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d109      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e084      	b.n	8001fae <HAL_RCC_ClockConfig+0x1a2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ea4:	4b45      	ldr	r3, [pc, #276]	; (8001fbc <HAL_RCC_ClockConfig+0x1b0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e07c      	b.n	8001fae <HAL_RCC_ClockConfig+0x1a2>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001eb4:	4941      	ldr	r1, [pc, #260]	; (8001fbc <HAL_RCC_ClockConfig+0x1b0>)
 8001eb6:	4b41      	ldr	r3, [pc, #260]	; (8001fbc <HAL_RCC_ClockConfig+0x1b0>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f023 0203 	bic.w	r2, r3, #3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ec6:	f7fe fb5f 	bl	8000588 <HAL_GetTick>
 8001eca:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ecc:	e00a      	b.n	8001ee4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ece:	f7fe fb5b 	bl	8000588 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e064      	b.n	8001fae <HAL_RCC_ClockConfig+0x1a2>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee4:	4b35      	ldr	r3, [pc, #212]	; (8001fbc <HAL_RCC_ClockConfig+0x1b0>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 020c 	and.w	r2, r3, #12
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d1eb      	bne.n	8001ece <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d008      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f02:	492e      	ldr	r1, [pc, #184]	; (8001fbc <HAL_RCC_ClockConfig+0x1b0>)
 8001f04:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <HAL_RCC_ClockConfig+0x1b0>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f14:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <HAL_RCC_ClockConfig+0x1ac>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0207 	and.w	r2, r3, #7
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d910      	bls.n	8001f44 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f22:	4925      	ldr	r1, [pc, #148]	; (8001fb8 <HAL_RCC_ClockConfig+0x1ac>)
 8001f24:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <HAL_RCC_ClockConfig+0x1ac>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f023 0207 	bic.w	r2, r3, #7
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f32:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <HAL_RCC_ClockConfig+0x1ac>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0207 	and.w	r2, r3, #7
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d001      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e034      	b.n	8001fae <HAL_RCC_ClockConfig+0x1a2>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d008      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f50:	491a      	ldr	r1, [pc, #104]	; (8001fbc <HAL_RCC_ClockConfig+0x1b0>)
 8001f52:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <HAL_RCC_ClockConfig+0x1b0>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d009      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f6e:	4913      	ldr	r1, [pc, #76]	; (8001fbc <HAL_RCC_ClockConfig+0x1b0>)
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_RCC_ClockConfig+0x1b0>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f82:	f000 f821 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 8001f86:	4601      	mov	r1, r0
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <HAL_RCC_ClockConfig+0x1b0>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	4a0b      	ldr	r2, [pc, #44]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f94:	5cd3      	ldrb	r3, [r2, r3]
 8001f96:	f003 031f 	and.w	r3, r3, #31
 8001f9a:	fa21 f303 	lsr.w	r3, r1, r3
 8001f9e:	4a09      	ldr	r2, [pc, #36]	; (8001fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f7fe fabe 	bl	8000524 <HAL_InitTick>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fac:	7afb      	ldrb	r3, [r7, #11]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40022000 	.word	0x40022000
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	08003fb4 	.word	0x08003fb4
 8001fc4:	2000007c 	.word	0x2000007c

08001fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b089      	sub	sp, #36	; 0x24
 8001fcc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fd6:	4b46      	ldr	r3, [pc, #280]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x128>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fe0:	4b43      	ldr	r3, [pc, #268]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x128>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <HAL_RCC_GetSysClockFreq+0x34>
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	2b0c      	cmp	r3, #12
 8001ff4:	d121      	bne.n	800203a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d11e      	bne.n	800203a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ffc:	4b3c      	ldr	r3, [pc, #240]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x128>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b00      	cmp	r3, #0
 8002006:	d107      	bne.n	8002018 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002008:	4b39      	ldr	r3, [pc, #228]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x128>)
 800200a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	f003 030f 	and.w	r3, r3, #15
 8002014:	61fb      	str	r3, [r7, #28]
 8002016:	e005      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002018:	4b35      	ldr	r3, [pc, #212]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x128>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002024:	4a33      	ldr	r2, [pc, #204]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10d      	bne.n	8002050 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002038:	e00a      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	2b04      	cmp	r3, #4
 800203e:	d102      	bne.n	8002046 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002040:	4b2d      	ldr	r3, [pc, #180]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x130>)
 8002042:	61bb      	str	r3, [r7, #24]
 8002044:	e004      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	2b08      	cmp	r3, #8
 800204a:	d101      	bne.n	8002050 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800204c:	4b2b      	ldr	r3, [pc, #172]	; (80020fc <HAL_RCC_GetSysClockFreq+0x134>)
 800204e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	2b0c      	cmp	r3, #12
 8002054:	d145      	bne.n	80020e2 <HAL_RCC_GetSysClockFreq+0x11a>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002056:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x128>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	60bb      	str	r3, [r7, #8]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002060:	4b23      	ldr	r3, [pc, #140]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x128>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	091b      	lsrs	r3, r3, #4
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	3301      	adds	r3, #1
 800206c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b02      	cmp	r3, #2
 8002072:	d002      	beq.n	800207a <HAL_RCC_GetSysClockFreq+0xb2>
 8002074:	2b03      	cmp	r3, #3
 8002076:	d00d      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0xcc>
 8002078:	e019      	b.n	80020ae <HAL_RCC_GetSysClockFreq+0xe6>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800207a:	4a1f      	ldr	r2, [pc, #124]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x130>)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002082:	4a1b      	ldr	r2, [pc, #108]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x128>)
 8002084:	68d2      	ldr	r2, [r2, #12]
 8002086:	0a12      	lsrs	r2, r2, #8
 8002088:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800208c:	fb02 f303 	mul.w	r3, r2, r3
 8002090:	617b      	str	r3, [r7, #20]
      break;
 8002092:	e019      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002094:	4a19      	ldr	r2, [pc, #100]	; (80020fc <HAL_RCC_GetSysClockFreq+0x134>)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	fbb2 f3f3 	udiv	r3, r2, r3
 800209c:	4a14      	ldr	r2, [pc, #80]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x128>)
 800209e:	68d2      	ldr	r2, [r2, #12]
 80020a0:	0a12      	lsrs	r2, r2, #8
 80020a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020a6:	fb02 f303 	mul.w	r3, r2, r3
 80020aa:	617b      	str	r3, [r7, #20]
      break;
 80020ac:	e00c      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0x100>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b6:	4a0e      	ldr	r2, [pc, #56]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x128>)
 80020b8:	68d2      	ldr	r2, [r2, #12]
 80020ba:	0a12      	lsrs	r2, r2, #8
 80020bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020c0:	fb02 f303 	mul.w	r3, r2, r3
 80020c4:	617b      	str	r3, [r7, #20]
      break;
 80020c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x128>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	0e5b      	lsrs	r3, r3, #25
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	3301      	adds	r3, #1
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco/pllr;
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020e2:	69bb      	ldr	r3, [r7, #24]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3724      	adds	r7, #36	; 0x24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	40021000 	.word	0x40021000
 80020f4:	08003fcc 	.word	0x08003fcc
 80020f8:	00f42400 	.word	0x00f42400
 80020fc:	007a1200 	.word	0x007a1200

08002100 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002104:	4b03      	ldr	r3, [pc, #12]	; (8002114 <HAL_RCC_GetHCLKFreq+0x14>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	2000007c 	.word	0x2000007c

08002118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800211c:	f7ff fff0 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 8002120:	4601      	mov	r1, r0
 8002122:	4b06      	ldr	r3, [pc, #24]	; (800213c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	0a1b      	lsrs	r3, r3, #8
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	4a04      	ldr	r2, [pc, #16]	; (8002140 <HAL_RCC_GetPCLK1Freq+0x28>)
 800212e:	5cd3      	ldrb	r3, [r2, r3]
 8002130:	f003 031f 	and.w	r3, r3, #31
 8002134:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002138:	4618      	mov	r0, r3
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40021000 	.word	0x40021000
 8002140:	08003fc4 	.word	0x08003fc4

08002144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002148:	f7ff ffda 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 800214c:	4601      	mov	r1, r0
 800214e:	4b06      	ldr	r3, [pc, #24]	; (8002168 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	0adb      	lsrs	r3, r3, #11
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	4a04      	ldr	r2, [pc, #16]	; (800216c <HAL_RCC_GetPCLK2Freq+0x28>)
 800215a:	5cd3      	ldrb	r3, [r2, r3]
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002164:	4618      	mov	r0, r3
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40021000 	.word	0x40021000
 800216c:	08003fc4 	.word	0x08003fc4

08002170 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002178:	2300      	movs	r3, #0
 800217a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800217c:	4b2a      	ldr	r3, [pc, #168]	; (8002228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002188:	f7ff fa36 	bl	80015f8 <HAL_PWREx_GetVoltageRange>
 800218c:	6178      	str	r0, [r7, #20]
 800218e:	e014      	b.n	80021ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002190:	4a25      	ldr	r2, [pc, #148]	; (8002228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002192:	4b25      	ldr	r3, [pc, #148]	; (8002228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800219a:	6593      	str	r3, [r2, #88]	; 0x58
 800219c:	4b22      	ldr	r3, [pc, #136]	; (8002228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800219e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021a8:	f7ff fa26 	bl	80015f8 <HAL_PWREx_GetVoltageRange>
 80021ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021ae:	4a1e      	ldr	r2, [pc, #120]	; (8002228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021b0:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c0:	d10b      	bne.n	80021da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b80      	cmp	r3, #128	; 0x80
 80021c6:	d919      	bls.n	80021fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2ba0      	cmp	r3, #160	; 0xa0
 80021cc:	d902      	bls.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021ce:	2302      	movs	r3, #2
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	e013      	b.n	80021fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021d4:	2301      	movs	r3, #1
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	e010      	b.n	80021fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b80      	cmp	r3, #128	; 0x80
 80021de:	d902      	bls.n	80021e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021e0:	2303      	movs	r3, #3
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	e00a      	b.n	80021fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b80      	cmp	r3, #128	; 0x80
 80021ea:	d102      	bne.n	80021f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021ec:	2302      	movs	r3, #2
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	e004      	b.n	80021fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b70      	cmp	r3, #112	; 0x70
 80021f6:	d101      	bne.n	80021fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021f8:	2301      	movs	r3, #1
 80021fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021fc:	490b      	ldr	r1, [pc, #44]	; (800222c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021fe:	4b0b      	ldr	r3, [pc, #44]	; (800222c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 0207 	bic.w	r2, r3, #7
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800220c:	4b07      	ldr	r3, [pc, #28]	; (800222c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0207 	and.w	r2, r3, #7
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	429a      	cmp	r2, r3
 8002218:	d001      	beq.n	800221e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40021000 	.word	0x40021000
 800222c:	40022000 	.word	0x40022000

08002230 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002238:	2300      	movs	r3, #0
 800223a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800223c:	2300      	movs	r3, #0
 800223e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002248:	2b00      	cmp	r3, #0
 800224a:	d02f      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002250:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002254:	d005      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002256:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800225a:	d015      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x58>
 800225c:	2b00      	cmp	r3, #0
 800225e:	d007      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002260:	e00f      	b.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002262:	4a5d      	ldr	r2, [pc, #372]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002264:	4b5c      	ldr	r3, [pc, #368]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800226e:	e00c      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3304      	adds	r3, #4
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f000 fa44 	bl	8002704 <RCCEx_PLLSAI1_Config>
 800227c:	4603      	mov	r3, r0
 800227e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002280:	e003      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	74fb      	strb	r3, [r7, #19]
      break;
 8002286:	e000      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002288:	bf00      	nop
    }

    if(ret == HAL_OK)
 800228a:	7cfb      	ldrb	r3, [r7, #19]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10b      	bne.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002290:	4951      	ldr	r1, [pc, #324]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002292:	4b51      	ldr	r3, [pc, #324]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002298:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022a6:	e001      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 809e 	beq.w	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ba:	2300      	movs	r3, #0
 80022bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022be:	4b46      	ldr	r3, [pc, #280]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80022c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80022ce:	2300      	movs	r3, #0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00d      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d4:	4a40      	ldr	r2, [pc, #256]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80022d6:	4b40      	ldr	r3, [pc, #256]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80022d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022de:	6593      	str	r3, [r2, #88]	; 0x58
 80022e0:	4b3d      	ldr	r3, [pc, #244]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80022e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ec:	2301      	movs	r3, #1
 80022ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022f0:	4a3a      	ldr	r2, [pc, #232]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022f2:	4b3a      	ldr	r3, [pc, #232]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022fc:	f7fe f944 	bl	8000588 <HAL_GetTick>
 8002300:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002302:	e009      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002304:	f7fe f940 	bl	8000588 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d902      	bls.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	74fb      	strb	r3, [r7, #19]
        break;
 8002316:	e005      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002318:	4b30      	ldr	r3, [pc, #192]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0ef      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002324:	7cfb      	ldrb	r3, [r7, #19]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d15a      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800232a:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800232c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002334:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d01e      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	429a      	cmp	r2, r3
 8002344:	d019      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002346:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002350:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002352:	4a21      	ldr	r2, [pc, #132]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002354:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002362:	4a1d      	ldr	r2, [pc, #116]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002364:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800236e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002372:	4a19      	ldr	r2, [pc, #100]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b00      	cmp	r3, #0
 8002382:	d016      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7fe f900 	bl	8000588 <HAL_GetTick>
 8002388:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800238a:	e00b      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238c:	f7fe f8fc 	bl	8000588 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	f241 3288 	movw	r2, #5000	; 0x1388
 800239a:	4293      	cmp	r3, r2
 800239c:	d902      	bls.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	74fb      	strb	r3, [r7, #19]
            break;
 80023a2:	e006      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80023a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0ec      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80023b2:	7cfb      	ldrb	r3, [r7, #19]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10b      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023b8:	4907      	ldr	r1, [pc, #28]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80023ba:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80023bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023ce:	e009      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023d0:	7cfb      	ldrb	r3, [r7, #19]
 80023d2:	74bb      	strb	r3, [r7, #18]
 80023d4:	e006      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023e0:	7cfb      	ldrb	r3, [r7, #19]
 80023e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023e4:	7c7b      	ldrb	r3, [r7, #17]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d105      	bne.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ea:	4a9e      	ldr	r2, [pc, #632]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80023ec:	4b9d      	ldr	r3, [pc, #628]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80023ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00a      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002402:	4998      	ldr	r1, [pc, #608]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002404:	4b97      	ldr	r3, [pc, #604]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240a:	f023 0203 	bic.w	r2, r3, #3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00a      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002424:	498f      	ldr	r1, [pc, #572]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002426:	4b8f      	ldr	r3, [pc, #572]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242c:	f023 020c 	bic.w	r2, r3, #12
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0304 	and.w	r3, r3, #4
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002446:	4987      	ldr	r1, [pc, #540]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002448:	4b86      	ldr	r3, [pc, #536]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800244a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	4313      	orrs	r3, r2
 8002458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00a      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002468:	497e      	ldr	r1, [pc, #504]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800246a:	4b7e      	ldr	r3, [pc, #504]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800246c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002470:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00a      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800248a:	4976      	ldr	r1, [pc, #472]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800248c:	4b75      	ldr	r3, [pc, #468]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00a      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024ac:	496d      	ldr	r1, [pc, #436]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80024ae:	4b6d      	ldr	r3, [pc, #436]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80024b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024ce:	4965      	ldr	r1, [pc, #404]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80024d0:	4b64      	ldr	r3, [pc, #400]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00a      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024f0:	495c      	ldr	r1, [pc, #368]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80024f2:	4b5c      	ldr	r3, [pc, #368]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80024f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00a      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002512:	4954      	ldr	r1, [pc, #336]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002514:	4b53      	ldr	r3, [pc, #332]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002522:	4313      	orrs	r3, r2
 8002524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00a      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002534:	494b      	ldr	r1, [pc, #300]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002536:	4b4b      	ldr	r3, [pc, #300]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002544:	4313      	orrs	r3, r2
 8002546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00a      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002556:	4943      	ldr	r1, [pc, #268]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002558:	4b42      	ldr	r3, [pc, #264]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800255a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800255e:	f023 0203 	bic.w	r2, r3, #3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d028      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002578:	493a      	ldr	r1, [pc, #232]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800257a:	4b3a      	ldr	r3, [pc, #232]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800257c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002580:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002592:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002596:	d106      	bne.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002598:	4a32      	ldr	r2, [pc, #200]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800259a:	4b32      	ldr	r3, [pc, #200]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025a2:	60d3      	str	r3, [r2, #12]
 80025a4:	e011      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025ae:	d10c      	bne.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3304      	adds	r3, #4
 80025b4:	2101      	movs	r1, #1
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 f8a4 	bl	8002704 <RCCEx_PLLSAI1_Config>
 80025bc:	4603      	mov	r3, r0
 80025be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025c0:	7cfb      	ldrb	r3, [r7, #19]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 80025c6:	7cfb      	ldrb	r3, [r7, #19]
 80025c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d028      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025d6:	4923      	ldr	r1, [pc, #140]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025d8:	4b22      	ldr	r3, [pc, #136]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025f4:	d106      	bne.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025f6:	4a1b      	ldr	r2, [pc, #108]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025f8:	4b1a      	ldr	r3, [pc, #104]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002600:	60d3      	str	r3, [r2, #12]
 8002602:	e011      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002608:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800260c:	d10c      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3304      	adds	r3, #4
 8002612:	2101      	movs	r1, #1
 8002614:	4618      	mov	r0, r3
 8002616:	f000 f875 	bl	8002704 <RCCEx_PLLSAI1_Config>
 800261a:	4603      	mov	r3, r0
 800261c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800261e:	7cfb      	ldrb	r3, [r7, #19]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8002624:	7cfb      	ldrb	r3, [r7, #19]
 8002626:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d02b      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002634:	490b      	ldr	r1, [pc, #44]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002636:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002652:	d109      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002654:	4a03      	ldr	r2, [pc, #12]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002656:	4b03      	ldr	r3, [pc, #12]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800265e:	60d3      	str	r3, [r2, #12]
 8002660:	e014      	b.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002670:	d10c      	bne.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3304      	adds	r3, #4
 8002676:	2101      	movs	r1, #1
 8002678:	4618      	mov	r0, r3
 800267a:	f000 f843 	bl	8002704 <RCCEx_PLLSAI1_Config>
 800267e:	4603      	mov	r3, r0
 8002680:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002682:	7cfb      	ldrb	r3, [r7, #19]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8002688:	7cfb      	ldrb	r3, [r7, #19]
 800268a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d01c      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002698:	4919      	ldr	r1, [pc, #100]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 800269a:	4b19      	ldr	r3, [pc, #100]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 800269c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026b6:	d10c      	bne.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3304      	adds	r3, #4
 80026bc:	2102      	movs	r1, #2
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f820 	bl	8002704 <RCCEx_PLLSAI1_Config>
 80026c4:	4603      	mov	r3, r0
 80026c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026c8:	7cfb      	ldrb	r3, [r7, #19]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 80026ce:	7cfb      	ldrb	r3, [r7, #19]
 80026d0:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00a      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026de:	4908      	ldr	r1, [pc, #32]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80026e0:	4b07      	ldr	r3, [pc, #28]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40021000 	.word	0x40021000

08002704 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002712:	4b73      	ldr	r3, [pc, #460]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d018      	beq.n	8002750 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800271e:	4b70      	ldr	r3, [pc, #448]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f003 0203 	and.w	r2, r3, #3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d10d      	bne.n	800274a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
       ||
 8002732:	2b00      	cmp	r3, #0
 8002734:	d009      	beq.n	800274a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002736:	4b6a      	ldr	r3, [pc, #424]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	091b      	lsrs	r3, r3, #4
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
       ||
 8002746:	429a      	cmp	r2, r3
 8002748:	d044      	beq.n	80027d4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
 800274e:	e041      	b.n	80027d4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d00c      	beq.n	8002772 <RCCEx_PLLSAI1_Config+0x6e>
 8002758:	2b03      	cmp	r3, #3
 800275a:	d013      	beq.n	8002784 <RCCEx_PLLSAI1_Config+0x80>
 800275c:	2b01      	cmp	r3, #1
 800275e:	d120      	bne.n	80027a2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002760:	4b5f      	ldr	r3, [pc, #380]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d11d      	bne.n	80027a8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002770:	e01a      	b.n	80027a8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002772:	4b5b      	ldr	r3, [pc, #364]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800277a:	2b00      	cmp	r3, #0
 800277c:	d116      	bne.n	80027ac <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002782:	e013      	b.n	80027ac <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002784:	4b56      	ldr	r3, [pc, #344]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10f      	bne.n	80027b0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002790:	4b53      	ldr	r3, [pc, #332]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d109      	bne.n	80027b0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027a0:	e006      	b.n	80027b0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	73fb      	strb	r3, [r7, #15]
      break;
 80027a6:	e004      	b.n	80027b2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80027a8:	bf00      	nop
 80027aa:	e002      	b.n	80027b2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80027ac:	bf00      	nop
 80027ae:	e000      	b.n	80027b2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80027b0:	bf00      	nop
    }

    if(status == HAL_OK)
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10d      	bne.n	80027d4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027b8:	4849      	ldr	r0, [pc, #292]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027ba:	4b49      	ldr	r3, [pc, #292]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6819      	ldr	r1, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	430b      	orrs	r3, r1
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d17c      	bne.n	80028d4 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027da:	4a41      	ldr	r2, [pc, #260]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027dc:	4b40      	ldr	r3, [pc, #256]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e6:	f7fd fecf 	bl	8000588 <HAL_GetTick>
 80027ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027ec:	e009      	b.n	8002802 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027ee:	f7fd fecb 	bl	8000588 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d902      	bls.n	8002802 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	73fb      	strb	r3, [r7, #15]
        break;
 8002800:	e005      	b.n	800280e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002802:	4b37      	ldr	r3, [pc, #220]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1ef      	bne.n	80027ee <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d15f      	bne.n	80028d4 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d110      	bne.n	800283c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800281a:	4831      	ldr	r0, [pc, #196]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800281c:	4b30      	ldr	r3, [pc, #192]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002824:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6892      	ldr	r2, [r2, #8]
 800282c:	0211      	lsls	r1, r2, #8
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68d2      	ldr	r2, [r2, #12]
 8002832:	06d2      	lsls	r2, r2, #27
 8002834:	430a      	orrs	r2, r1
 8002836:	4313      	orrs	r3, r2
 8002838:	6103      	str	r3, [r0, #16]
 800283a:	e027      	b.n	800288c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d112      	bne.n	8002868 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002842:	4827      	ldr	r0, [pc, #156]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002844:	4b26      	ldr	r3, [pc, #152]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800284c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6892      	ldr	r2, [r2, #8]
 8002854:	0211      	lsls	r1, r2, #8
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6912      	ldr	r2, [r2, #16]
 800285a:	0852      	lsrs	r2, r2, #1
 800285c:	3a01      	subs	r2, #1
 800285e:	0552      	lsls	r2, r2, #21
 8002860:	430a      	orrs	r2, r1
 8002862:	4313      	orrs	r3, r2
 8002864:	6103      	str	r3, [r0, #16]
 8002866:	e011      	b.n	800288c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002868:	481d      	ldr	r0, [pc, #116]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800286a:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002872:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6892      	ldr	r2, [r2, #8]
 800287a:	0211      	lsls	r1, r2, #8
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6952      	ldr	r2, [r2, #20]
 8002880:	0852      	lsrs	r2, r2, #1
 8002882:	3a01      	subs	r2, #1
 8002884:	0652      	lsls	r2, r2, #25
 8002886:	430a      	orrs	r2, r1
 8002888:	4313      	orrs	r3, r2
 800288a:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800288c:	4a14      	ldr	r2, [pc, #80]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800288e:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002896:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002898:	f7fd fe76 	bl	8000588 <HAL_GetTick>
 800289c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800289e:	e009      	b.n	80028b4 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028a0:	f7fd fe72 	bl	8000588 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d902      	bls.n	80028b4 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	73fb      	strb	r3, [r7, #15]
          break;
 80028b2:	e005      	b.n	80028c0 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028b4:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0ef      	beq.n	80028a0 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d106      	bne.n	80028d4 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028c6:	4906      	ldr	r1, [pc, #24]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000

080028e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e043      	b.n	800297e <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d106      	bne.n	8002910 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f001 fa5c 	bl	8003dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2224      	movs	r2, #36	; 0x24
 8002914:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	f022 0201 	bic.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f82d 	bl	8002988 <UART_SetConfig>
 800292e:	4603      	mov	r3, r0
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e022      	b.n	800297e <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 fb31 	bl	8002fa8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6812      	ldr	r2, [r2, #0]
 800294e:	6852      	ldr	r2, [r2, #4]
 8002950:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002954:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6812      	ldr	r2, [r2, #0]
 800295e:	6892      	ldr	r2, [r2, #8]
 8002960:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002964:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6812      	ldr	r2, [r2, #0]
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	f042 0201 	orr.w	r2, r2, #1
 8002974:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 fbb8 	bl	80030ec <UART_CheckIdleState>
 800297c:	4603      	mov	r3, r0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002988:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800298c:	b088      	sub	sp, #32
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002996:	2310      	movs	r3, #16
 8002998:	76fb      	strb	r3, [r7, #27]
  uint16_t brrtemp                    = 0x0000U;
 800299a:	2300      	movs	r3, #0
 800299c:	817b      	strh	r3, [r7, #10]
  uint32_t usartdiv                   = 0x00000000U;
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80029a2:	2300      	movs	r3, #0
 80029a4:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	431a      	orrs	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6819      	ldr	r1, [r3, #0]
 80029cc:	4bad      	ldr	r3, [pc, #692]	; (8002c84 <UART_SetConfig+0x2fc>)
 80029ce:	400b      	ands	r3, r1
 80029d0:	69f9      	ldr	r1, [r7, #28]
 80029d2:	430b      	orrs	r3, r1
 80029d4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	6852      	ldr	r2, [r2, #4]
 80029e0:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	68d2      	ldr	r2, [r2, #12]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4aa4      	ldr	r2, [pc, #656]	; (8002c88 <UART_SetConfig+0x300>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d004      	beq.n	8002a06 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6812      	ldr	r2, [r2, #0]
 8002a0e:	6892      	ldr	r2, [r2, #8]
 8002a10:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8002a14:	69fa      	ldr	r2, [r7, #28]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a9b      	ldr	r2, [pc, #620]	; (8002c8c <UART_SetConfig+0x304>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d121      	bne.n	8002a68 <UART_SetConfig+0xe0>
 8002a24:	4b9a      	ldr	r3, [pc, #616]	; (8002c90 <UART_SetConfig+0x308>)
 8002a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d816      	bhi.n	8002a60 <UART_SetConfig+0xd8>
 8002a32:	a201      	add	r2, pc, #4	; (adr r2, 8002a38 <UART_SetConfig+0xb0>)
 8002a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a38:	08002a49 	.word	0x08002a49
 8002a3c:	08002a55 	.word	0x08002a55
 8002a40:	08002a4f 	.word	0x08002a4f
 8002a44:	08002a5b 	.word	0x08002a5b
 8002a48:	2301      	movs	r3, #1
 8002a4a:	76fb      	strb	r3, [r7, #27]
 8002a4c:	e0ba      	b.n	8002bc4 <UART_SetConfig+0x23c>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	76fb      	strb	r3, [r7, #27]
 8002a52:	e0b7      	b.n	8002bc4 <UART_SetConfig+0x23c>
 8002a54:	2304      	movs	r3, #4
 8002a56:	76fb      	strb	r3, [r7, #27]
 8002a58:	e0b4      	b.n	8002bc4 <UART_SetConfig+0x23c>
 8002a5a:	2308      	movs	r3, #8
 8002a5c:	76fb      	strb	r3, [r7, #27]
 8002a5e:	e0b1      	b.n	8002bc4 <UART_SetConfig+0x23c>
 8002a60:	2310      	movs	r3, #16
 8002a62:	76fb      	strb	r3, [r7, #27]
 8002a64:	bf00      	nop
 8002a66:	e0ad      	b.n	8002bc4 <UART_SetConfig+0x23c>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a89      	ldr	r2, [pc, #548]	; (8002c94 <UART_SetConfig+0x30c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d134      	bne.n	8002adc <UART_SetConfig+0x154>
 8002a72:	4b87      	ldr	r3, [pc, #540]	; (8002c90 <UART_SetConfig+0x308>)
 8002a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a78:	f003 030c 	and.w	r3, r3, #12
 8002a7c:	2b0c      	cmp	r3, #12
 8002a7e:	d829      	bhi.n	8002ad4 <UART_SetConfig+0x14c>
 8002a80:	a201      	add	r2, pc, #4	; (adr r2, 8002a88 <UART_SetConfig+0x100>)
 8002a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a86:	bf00      	nop
 8002a88:	08002abd 	.word	0x08002abd
 8002a8c:	08002ad5 	.word	0x08002ad5
 8002a90:	08002ad5 	.word	0x08002ad5
 8002a94:	08002ad5 	.word	0x08002ad5
 8002a98:	08002ac9 	.word	0x08002ac9
 8002a9c:	08002ad5 	.word	0x08002ad5
 8002aa0:	08002ad5 	.word	0x08002ad5
 8002aa4:	08002ad5 	.word	0x08002ad5
 8002aa8:	08002ac3 	.word	0x08002ac3
 8002aac:	08002ad5 	.word	0x08002ad5
 8002ab0:	08002ad5 	.word	0x08002ad5
 8002ab4:	08002ad5 	.word	0x08002ad5
 8002ab8:	08002acf 	.word	0x08002acf
 8002abc:	2300      	movs	r3, #0
 8002abe:	76fb      	strb	r3, [r7, #27]
 8002ac0:	e080      	b.n	8002bc4 <UART_SetConfig+0x23c>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	76fb      	strb	r3, [r7, #27]
 8002ac6:	e07d      	b.n	8002bc4 <UART_SetConfig+0x23c>
 8002ac8:	2304      	movs	r3, #4
 8002aca:	76fb      	strb	r3, [r7, #27]
 8002acc:	e07a      	b.n	8002bc4 <UART_SetConfig+0x23c>
 8002ace:	2308      	movs	r3, #8
 8002ad0:	76fb      	strb	r3, [r7, #27]
 8002ad2:	e077      	b.n	8002bc4 <UART_SetConfig+0x23c>
 8002ad4:	2310      	movs	r3, #16
 8002ad6:	76fb      	strb	r3, [r7, #27]
 8002ad8:	bf00      	nop
 8002ada:	e073      	b.n	8002bc4 <UART_SetConfig+0x23c>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a6d      	ldr	r2, [pc, #436]	; (8002c98 <UART_SetConfig+0x310>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d120      	bne.n	8002b28 <UART_SetConfig+0x1a0>
 8002ae6:	4b6a      	ldr	r3, [pc, #424]	; (8002c90 <UART_SetConfig+0x308>)
 8002ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002af0:	2b10      	cmp	r3, #16
 8002af2:	d00f      	beq.n	8002b14 <UART_SetConfig+0x18c>
 8002af4:	2b10      	cmp	r3, #16
 8002af6:	d802      	bhi.n	8002afe <UART_SetConfig+0x176>
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <UART_SetConfig+0x180>
 8002afc:	e010      	b.n	8002b20 <UART_SetConfig+0x198>
 8002afe:	2b20      	cmp	r3, #32
 8002b00:	d005      	beq.n	8002b0e <UART_SetConfig+0x186>
 8002b02:	2b30      	cmp	r3, #48	; 0x30
 8002b04:	d009      	beq.n	8002b1a <UART_SetConfig+0x192>
 8002b06:	e00b      	b.n	8002b20 <UART_SetConfig+0x198>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	76fb      	strb	r3, [r7, #27]
 8002b0c:	e05a      	b.n	8002bc4 <UART_SetConfig+0x23c>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	76fb      	strb	r3, [r7, #27]
 8002b12:	e057      	b.n	8002bc4 <UART_SetConfig+0x23c>
 8002b14:	2304      	movs	r3, #4
 8002b16:	76fb      	strb	r3, [r7, #27]
 8002b18:	e054      	b.n	8002bc4 <UART_SetConfig+0x23c>
 8002b1a:	2308      	movs	r3, #8
 8002b1c:	76fb      	strb	r3, [r7, #27]
 8002b1e:	e051      	b.n	8002bc4 <UART_SetConfig+0x23c>
 8002b20:	2310      	movs	r3, #16
 8002b22:	76fb      	strb	r3, [r7, #27]
 8002b24:	bf00      	nop
 8002b26:	e04d      	b.n	8002bc4 <UART_SetConfig+0x23c>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a5b      	ldr	r2, [pc, #364]	; (8002c9c <UART_SetConfig+0x314>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d120      	bne.n	8002b74 <UART_SetConfig+0x1ec>
 8002b32:	4b57      	ldr	r3, [pc, #348]	; (8002c90 <UART_SetConfig+0x308>)
 8002b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b38:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002b3c:	2b40      	cmp	r3, #64	; 0x40
 8002b3e:	d00f      	beq.n	8002b60 <UART_SetConfig+0x1d8>
 8002b40:	2b40      	cmp	r3, #64	; 0x40
 8002b42:	d802      	bhi.n	8002b4a <UART_SetConfig+0x1c2>
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <UART_SetConfig+0x1cc>
 8002b48:	e010      	b.n	8002b6c <UART_SetConfig+0x1e4>
 8002b4a:	2b80      	cmp	r3, #128	; 0x80
 8002b4c:	d005      	beq.n	8002b5a <UART_SetConfig+0x1d2>
 8002b4e:	2bc0      	cmp	r3, #192	; 0xc0
 8002b50:	d009      	beq.n	8002b66 <UART_SetConfig+0x1de>
 8002b52:	e00b      	b.n	8002b6c <UART_SetConfig+0x1e4>
 8002b54:	2300      	movs	r3, #0
 8002b56:	76fb      	strb	r3, [r7, #27]
 8002b58:	e034      	b.n	8002bc4 <UART_SetConfig+0x23c>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	76fb      	strb	r3, [r7, #27]
 8002b5e:	e031      	b.n	8002bc4 <UART_SetConfig+0x23c>
 8002b60:	2304      	movs	r3, #4
 8002b62:	76fb      	strb	r3, [r7, #27]
 8002b64:	e02e      	b.n	8002bc4 <UART_SetConfig+0x23c>
 8002b66:	2308      	movs	r3, #8
 8002b68:	76fb      	strb	r3, [r7, #27]
 8002b6a:	e02b      	b.n	8002bc4 <UART_SetConfig+0x23c>
 8002b6c:	2310      	movs	r3, #16
 8002b6e:	76fb      	strb	r3, [r7, #27]
 8002b70:	bf00      	nop
 8002b72:	e027      	b.n	8002bc4 <UART_SetConfig+0x23c>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a43      	ldr	r2, [pc, #268]	; (8002c88 <UART_SetConfig+0x300>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d123      	bne.n	8002bc6 <UART_SetConfig+0x23e>
 8002b7e:	4b44      	ldr	r3, [pc, #272]	; (8002c90 <UART_SetConfig+0x308>)
 8002b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b8c:	d012      	beq.n	8002bb4 <UART_SetConfig+0x22c>
 8002b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b92:	d802      	bhi.n	8002b9a <UART_SetConfig+0x212>
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d007      	beq.n	8002ba8 <UART_SetConfig+0x220>
 8002b98:	e012      	b.n	8002bc0 <UART_SetConfig+0x238>
 8002b9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b9e:	d006      	beq.n	8002bae <UART_SetConfig+0x226>
 8002ba0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ba4:	d009      	beq.n	8002bba <UART_SetConfig+0x232>
 8002ba6:	e00b      	b.n	8002bc0 <UART_SetConfig+0x238>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	76fb      	strb	r3, [r7, #27]
 8002bac:	e00a      	b.n	8002bc4 <UART_SetConfig+0x23c>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	76fb      	strb	r3, [r7, #27]
 8002bb2:	e007      	b.n	8002bc4 <UART_SetConfig+0x23c>
 8002bb4:	2304      	movs	r3, #4
 8002bb6:	76fb      	strb	r3, [r7, #27]
 8002bb8:	e004      	b.n	8002bc4 <UART_SetConfig+0x23c>
 8002bba:	2308      	movs	r3, #8
 8002bbc:	76fb      	strb	r3, [r7, #27]
 8002bbe:	e001      	b.n	8002bc4 <UART_SetConfig+0x23c>
 8002bc0:	2310      	movs	r3, #16
 8002bc2:	76fb      	strb	r3, [r7, #27]
 8002bc4:	bf00      	nop

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a2f      	ldr	r2, [pc, #188]	; (8002c88 <UART_SetConfig+0x300>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	f040 80ea 	bne.w	8002da6 <UART_SetConfig+0x41e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002bd2:	7efb      	ldrb	r3, [r7, #27]
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d824      	bhi.n	8002c22 <UART_SetConfig+0x29a>
 8002bd8:	a201      	add	r2, pc, #4	; (adr r2, 8002be0 <UART_SetConfig+0x258>)
 8002bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bde:	bf00      	nop
 8002be0:	08002c05 	.word	0x08002c05
 8002be4:	08002c23 	.word	0x08002c23
 8002be8:	08002c0d 	.word	0x08002c0d
 8002bec:	08002c23 	.word	0x08002c23
 8002bf0:	08002c13 	.word	0x08002c13
 8002bf4:	08002c23 	.word	0x08002c23
 8002bf8:	08002c23 	.word	0x08002c23
 8002bfc:	08002c23 	.word	0x08002c23
 8002c00:	08002c1b 	.word	0x08002c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002c04:	f7ff fa88 	bl	8002118 <HAL_RCC_GetPCLK1Freq>
 8002c08:	60f8      	str	r0, [r7, #12]
#endif
        break;
 8002c0a:	e00d      	b.n	8002c28 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002c0c:	4b24      	ldr	r3, [pc, #144]	; (8002ca0 <UART_SetConfig+0x318>)
 8002c0e:	60fb      	str	r3, [r7, #12]
#endif
        break;
 8002c10:	e00a      	b.n	8002c28 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002c12:	f7ff f9d9 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 8002c16:	60f8      	str	r0, [r7, #12]
#endif
        break;
 8002c18:	e006      	b.n	8002c28 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c1e:	60fb      	str	r3, [r7, #12]
#endif
        break;
 8002c20:	e002      	b.n	8002c28 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	74fb      	strb	r3, [r7, #19]
        break;
 8002c26:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 81ad 	beq.w	8002f8a <UART_SetConfig+0x602>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	441a      	add	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d805      	bhi.n	8002c4c <UART_SetConfig+0x2c4>
          (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate)))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d202      	bcs.n	8002c52 <UART_SetConfig+0x2ca>
      {
        ret = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	74fb      	strb	r3, [r7, #19]
 8002c50:	e19b      	b.n	8002f8a <UART_SetConfig+0x602>
      }
      else
      {
        switch (clocksource)
 8002c52:	7efb      	ldrb	r3, [r7, #27]
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	f200 8093 	bhi.w	8002d80 <UART_SetConfig+0x3f8>
 8002c5a:	a201      	add	r2, pc, #4	; (adr r2, 8002c60 <UART_SetConfig+0x2d8>)
 8002c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c60:	08002ca5 	.word	0x08002ca5
 8002c64:	08002d81 	.word	0x08002d81
 8002c68:	08002ce5 	.word	0x08002ce5
 8002c6c:	08002d81 	.word	0x08002d81
 8002c70:	08002d19 	.word	0x08002d19
 8002c74:	08002d81 	.word	0x08002d81
 8002c78:	08002d81 	.word	0x08002d81
 8002c7c:	08002d81 	.word	0x08002d81
 8002c80:	08002d57 	.word	0x08002d57
 8002c84:	efff69f3 	.word	0xefff69f3
 8002c88:	40008000 	.word	0x40008000
 8002c8c:	40013800 	.word	0x40013800
 8002c90:	40021000 	.word	0x40021000
 8002c94:	40004400 	.word	0x40004400
 8002c98:	40004800 	.word	0x40004800
 8002c9c:	40004c00 	.word	0x40004c00
 8002ca0:	00f42400 	.word	0x00f42400
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002ca4:	f7ff fa38 	bl	8002118 <HAL_RCC_GetPCLK1Freq>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f04f 0400 	mov.w	r4, #0
 8002cae:	ea4f 2904 	mov.w	r9, r4, lsl #8
 8002cb2:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 8002cb6:	ea4f 2803 	mov.w	r8, r3, lsl #8
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	085b      	lsrs	r3, r3, #1
 8002cc0:	f04f 0400 	mov.w	r4, #0
 8002cc4:	eb18 0003 	adds.w	r0, r8, r3
 8002cc8:	eb49 0104 	adc.w	r1, r9, r4
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f04f 0400 	mov.w	r4, #0
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4623      	mov	r3, r4
 8002cd8:	f7fd fa7c 	bl	80001d4 <__aeabi_uldivmod>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	460c      	mov	r4, r1
 8002ce0:	617b      	str	r3, [r7, #20]
#endif
            break;
 8002ce2:	e050      	b.n	8002d86 <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	085b      	lsrs	r3, r3, #1
 8002cea:	f04f 0400 	mov.w	r4, #0
 8002cee:	49ad      	ldr	r1, [pc, #692]	; (8002fa4 <UART_SetConfig+0x61c>)
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	eb13 0801 	adds.w	r8, r3, r1
 8002cf8:	eb44 0902 	adc.w	r9, r4, r2
 8002cfc:	4640      	mov	r0, r8
 8002cfe:	4649      	mov	r1, r9
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f04f 0400 	mov.w	r4, #0
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4623      	mov	r3, r4
 8002d0c:	f7fd fa62 	bl	80001d4 <__aeabi_uldivmod>
 8002d10:	4603      	mov	r3, r0
 8002d12:	460c      	mov	r4, r1
 8002d14:	617b      	str	r3, [r7, #20]
#endif
            break;
 8002d16:	e036      	b.n	8002d86 <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d18:	f7ff f956 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	461a      	mov	r2, r3
 8002d20:	f04f 0300 	mov.w	r3, #0
 8002d24:	021d      	lsls	r5, r3, #8
 8002d26:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8002d2a:	0214      	lsls	r4, r2, #8
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	085b      	lsrs	r3, r3, #1
 8002d32:	461a      	mov	r2, r3
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	18a0      	adds	r0, r4, r2
 8002d3a:	eb45 0103 	adc.w	r1, r5, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f04f 0400 	mov.w	r4, #0
 8002d46:	461a      	mov	r2, r3
 8002d48:	4623      	mov	r3, r4
 8002d4a:	f7fd fa43 	bl	80001d4 <__aeabi_uldivmod>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	460c      	mov	r4, r1
 8002d52:	617b      	str	r3, [r7, #20]
#endif
            break;
 8002d54:	e017      	b.n	8002d86 <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	085b      	lsrs	r3, r3, #1
 8002d5c:	f04f 0400 	mov.w	r4, #0
 8002d60:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8002d64:	f144 0100 	adc.w	r1, r4, #0
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f04f 0400 	mov.w	r4, #0
 8002d70:	461a      	mov	r2, r3
 8002d72:	4623      	mov	r3, r4
 8002d74:	f7fd fa2e 	bl	80001d4 <__aeabi_uldivmod>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	460c      	mov	r4, r1
 8002d7c:	617b      	str	r3, [r7, #20]
#endif
            break;
 8002d7e:	e002      	b.n	8002d86 <UART_SetConfig+0x3fe>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	74fb      	strb	r3, [r7, #19]
            break;
 8002d84:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d8c:	d308      	bcc.n	8002da0 <UART_SetConfig+0x418>
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d94:	d204      	bcs.n	8002da0 <UART_SetConfig+0x418>
        {
          huart->Instance->BRR = usartdiv;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	60da      	str	r2, [r3, #12]
 8002d9e:	e0f4      	b.n	8002f8a <UART_SetConfig+0x602>
        }
        else
        {
          ret = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	74fb      	strb	r3, [r7, #19]
 8002da4:	e0f1      	b.n	8002f8a <UART_SetConfig+0x602>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dae:	d17e      	bne.n	8002eae <UART_SetConfig+0x526>
  {
    switch (clocksource)
 8002db0:	7efb      	ldrb	r3, [r7, #27]
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d85b      	bhi.n	8002e6e <UART_SetConfig+0x4e6>
 8002db6:	a201      	add	r2, pc, #4	; (adr r2, 8002dbc <UART_SetConfig+0x434>)
 8002db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dbc:	08002de1 	.word	0x08002de1
 8002dc0:	08002dff 	.word	0x08002dff
 8002dc4:	08002e1d 	.word	0x08002e1d
 8002dc8:	08002e6f 	.word	0x08002e6f
 8002dcc:	08002e39 	.word	0x08002e39
 8002dd0:	08002e6f 	.word	0x08002e6f
 8002dd4:	08002e6f 	.word	0x08002e6f
 8002dd8:	08002e6f 	.word	0x08002e6f
 8002ddc:	08002e57 	.word	0x08002e57
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002de0:	f7ff f99a 	bl	8002118 <HAL_RCC_GetPCLK1Freq>
 8002de4:	4603      	mov	r3, r0
 8002de6:	005a      	lsls	r2, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	085b      	lsrs	r3, r3, #1
 8002dee:	441a      	add	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	617b      	str	r3, [r7, #20]
#endif
        break;
 8002dfc:	e03a      	b.n	8002e74 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002dfe:	f7ff f9a1 	bl	8002144 <HAL_RCC_GetPCLK2Freq>
 8002e02:	4603      	mov	r3, r0
 8002e04:	005a      	lsls	r2, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	085b      	lsrs	r3, r3, #1
 8002e0c:	441a      	add	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	617b      	str	r3, [r7, #20]
#endif
        break;
 8002e1a:	e02b      	b.n	8002e74 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	085b      	lsrs	r3, r3, #1
 8002e22:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002e26:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6852      	ldr	r2, [r2, #4]
 8002e2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	617b      	str	r3, [r7, #20]
#endif
        break;
 8002e36:	e01d      	b.n	8002e74 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002e38:	f7ff f8c6 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	005a      	lsls	r2, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	085b      	lsrs	r3, r3, #1
 8002e46:	441a      	add	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	617b      	str	r3, [r7, #20]
#endif
        break;
 8002e54:	e00e      	b.n	8002e74 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	085b      	lsrs	r3, r3, #1
 8002e5c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	617b      	str	r3, [r7, #20]
#endif
        break;
 8002e6c:	e002      	b.n	8002e74 <UART_SetConfig+0x4ec>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	74fb      	strb	r3, [r7, #19]
        break;
 8002e72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	2b0f      	cmp	r3, #15
 8002e78:	d916      	bls.n	8002ea8 <UART_SetConfig+0x520>
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e80:	d212      	bcs.n	8002ea8 <UART_SetConfig+0x520>
    {
      brrtemp = usartdiv & 0xFFF0U;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	f023 030f 	bic.w	r3, r3, #15
 8002e8a:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	085b      	lsrs	r3, r3, #1
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	897b      	ldrh	r3, [r7, #10]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	897a      	ldrh	r2, [r7, #10]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	e070      	b.n	8002f8a <UART_SetConfig+0x602>
    }
    else
    {
      ret = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	74fb      	strb	r3, [r7, #19]
 8002eac:	e06d      	b.n	8002f8a <UART_SetConfig+0x602>
    }
  }
  else
  {
    switch (clocksource)
 8002eae:	7efb      	ldrb	r3, [r7, #27]
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d859      	bhi.n	8002f68 <UART_SetConfig+0x5e0>
 8002eb4:	a201      	add	r2, pc, #4	; (adr r2, 8002ebc <UART_SetConfig+0x534>)
 8002eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eba:	bf00      	nop
 8002ebc:	08002ee1 	.word	0x08002ee1
 8002ec0:	08002efd 	.word	0x08002efd
 8002ec4:	08002f19 	.word	0x08002f19
 8002ec8:	08002f69 	.word	0x08002f69
 8002ecc:	08002f35 	.word	0x08002f35
 8002ed0:	08002f69 	.word	0x08002f69
 8002ed4:	08002f69 	.word	0x08002f69
 8002ed8:	08002f69 	.word	0x08002f69
 8002edc:	08002f51 	.word	0x08002f51
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002ee0:	f7ff f91a 	bl	8002118 <HAL_RCC_GetPCLK1Freq>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	085b      	lsrs	r3, r3, #1
 8002eec:	441a      	add	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	617b      	str	r3, [r7, #20]
#endif
        break;
 8002efa:	e038      	b.n	8002f6e <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002efc:	f7ff f922 	bl	8002144 <HAL_RCC_GetPCLK2Freq>
 8002f00:	4602      	mov	r2, r0
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	085b      	lsrs	r3, r3, #1
 8002f08:	441a      	add	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	617b      	str	r3, [r7, #20]
#endif
        break;
 8002f16:	e02a      	b.n	8002f6e <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	085b      	lsrs	r3, r3, #1
 8002f1e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002f22:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6852      	ldr	r2, [r2, #4]
 8002f2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	617b      	str	r3, [r7, #20]
#endif
        break;
 8002f32:	e01c      	b.n	8002f6e <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002f34:	f7ff f848 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	085b      	lsrs	r3, r3, #1
 8002f40:	441a      	add	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	617b      	str	r3, [r7, #20]
#endif
        break;
 8002f4e:	e00e      	b.n	8002f6e <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	085b      	lsrs	r3, r3, #1
 8002f56:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	617b      	str	r3, [r7, #20]
#endif
        break;
 8002f66:	e002      	b.n	8002f6e <UART_SetConfig+0x5e6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	74fb      	strb	r3, [r7, #19]
        break;
 8002f6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2b0f      	cmp	r3, #15
 8002f72:	d908      	bls.n	8002f86 <UART_SetConfig+0x5fe>
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f7a:	d204      	bcs.n	8002f86 <UART_SetConfig+0x5fe>
    {
      huart->Instance->BRR = usartdiv;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	60da      	str	r2, [r3, #12]
 8002f84:	e001      	b.n	8002f8a <UART_SetConfig+0x602>
    }
    else
    {
      ret = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002f96:	7cfb      	ldrb	r3, [r7, #19]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3720      	adds	r7, #32
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fa2:	bf00      	nop
 8002fa4:	f4240000 	.word	0xf4240000

08002fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00a      	beq.n	8002fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	6852      	ldr	r2, [r2, #4]
 8002fc6:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6812      	ldr	r2, [r2, #0]
 8002fe6:	6852      	ldr	r2, [r2, #4]
 8002fe8:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00a      	beq.n	8003016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6812      	ldr	r2, [r2, #0]
 8003008:	6852      	ldr	r2, [r2, #4]
 800300a:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003012:	430a      	orrs	r2, r1
 8003014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	6852      	ldr	r2, [r2, #4]
 800302c:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003034:	430a      	orrs	r2, r1
 8003036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	f003 0310 	and.w	r3, r3, #16
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00a      	beq.n	800305a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	6892      	ldr	r2, [r2, #8]
 800304e:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003056:	430a      	orrs	r2, r1
 8003058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	f003 0320 	and.w	r3, r3, #32
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00a      	beq.n	800307c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6812      	ldr	r2, [r2, #0]
 800306e:	6892      	ldr	r2, [r2, #8]
 8003070:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003078:	430a      	orrs	r2, r1
 800307a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003084:	2b00      	cmp	r3, #0
 8003086:	d01a      	beq.n	80030be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6812      	ldr	r2, [r2, #0]
 8003090:	6852      	ldr	r2, [r2, #4]
 8003092:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800309a:	430a      	orrs	r2, r1
 800309c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030a6:	d10a      	bne.n	80030be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6812      	ldr	r2, [r2, #0]
 80030b0:	6852      	ldr	r2, [r2, #4]
 80030b2:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80030ba:	430a      	orrs	r2, r1
 80030bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6812      	ldr	r2, [r2, #0]
 80030d2:	6852      	ldr	r2, [r2, #4]
 80030d4:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030dc:	430a      	orrs	r2, r1
 80030de:	605a      	str	r2, [r3, #4]
  }
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af02      	add	r7, sp, #8
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80030fe:	f7fd fa43 	bl	8000588 <HAL_GetTick>
 8003102:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b08      	cmp	r3, #8
 8003110:	d10e      	bne.n	8003130 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003112:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f82c 	bl	800317e <UART_WaitOnFlagUntilTimeout>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e022      	b.n	8003176 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	2b04      	cmp	r3, #4
 800313c:	d10e      	bne.n	800315c <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800313e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f816 	bl	800317e <UART_WaitOnFlagUntilTimeout>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e00c      	b.n	8003176 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b084      	sub	sp, #16
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	603b      	str	r3, [r7, #0]
 800318a:	4613      	mov	r3, r2
 800318c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800318e:	e02c      	b.n	80031ea <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003196:	d028      	beq.n	80031ea <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d007      	beq.n	80031ae <UART_WaitOnFlagUntilTimeout+0x30>
 800319e:	f7fd f9f3 	bl	8000588 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	1ad2      	subs	r2, r2, r3
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d91d      	bls.n	80031ea <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031bc:	601a      	str	r2, [r3, #0]
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	6812      	ldr	r2, [r2, #0]
 80031c6:	6892      	ldr	r2, [r2, #8]
 80031c8:	f022 0201 	bic.w	r2, r2, #1
 80031cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2220      	movs	r2, #32
 80031d2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e00f      	b.n	800320a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69da      	ldr	r2, [r3, #28]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	401a      	ands	r2, r3
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	bf0c      	ite	eq
 80031fa:	2301      	moveq	r3, #1
 80031fc:	2300      	movne	r3, #0
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	461a      	mov	r2, r3
 8003202:	79fb      	ldrb	r3, [r7, #7]
 8003204:	429a      	cmp	r2, r3
 8003206:	d0c3      	beq.n	8003190 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <est_negatif>:
/* USER CODE BEGIN 0 */

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint16_t est_negatif(uint16_t valeur)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	4603      	mov	r3, r0
 800321a:	80fb      	strh	r3, [r7, #6]
	if (valeur>=0x8000){
 800321c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003220:	2b00      	cmp	r3, #0
 8003222:	da02      	bge.n	800322a <est_negatif+0x18>
		valeur=~valeur+1;
 8003224:	88fb      	ldrh	r3, [r7, #6]
 8003226:	425b      	negs	r3, r3
 8003228:	80fb      	strh	r3, [r7, #6]
	}
	return valeur;
 800322a:	88fb      	ldrh	r3, [r7, #6]
}
 800322c:	4618      	mov	r0, r3
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <TEMPandHUM_init>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void TEMPandHUM_init(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Write(&hi2c1,0xBE, addr_CTRL_REG1_TEMP[0], 1, CTRL_REG1_TEMP, 1, I2C_TIMEOUT);
 800323e:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <TEMPandHUM_init+0x30>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	b29a      	uxth	r2, r3
 8003244:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003248:	9302      	str	r3, [sp, #8]
 800324a:	2301      	movs	r3, #1
 800324c:	9301      	str	r3, [sp, #4]
 800324e:	4b07      	ldr	r3, [pc, #28]	; (800326c <TEMPandHUM_init+0x34>)
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	2301      	movs	r3, #1
 8003254:	21be      	movs	r1, #190	; 0xbe
 8003256:	4806      	ldr	r0, [pc, #24]	; (8003270 <TEMPandHUM_init+0x38>)
 8003258:	f7fd fcee 	bl	8000c38 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800325c:	200a      	movs	r0, #10
 800325e:	f7fd f99f 	bl	80005a0 <HAL_Delay>
}
 8003262:	bf00      	nop
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	20000024 	.word	0x20000024
 800326c:	20000028 	.word	0x20000028
 8003270:	200000c8 	.word	0x200000c8

08003274 <PRES_init>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void PRES_init(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Write(&hi2c1,0xBA, addr_CTRL_REG1_PRES[0], 1, CTRL_REG1_PRES, 1, I2C_TIMEOUT);
 800327a:	4b1c      	ldr	r3, [pc, #112]	; (80032ec <PRES_init+0x78>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	b29a      	uxth	r2, r3
 8003280:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003284:	9302      	str	r3, [sp, #8]
 8003286:	2301      	movs	r3, #1
 8003288:	9301      	str	r3, [sp, #4]
 800328a:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <PRES_init+0x7c>)
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	2301      	movs	r3, #1
 8003290:	21ba      	movs	r1, #186	; 0xba
 8003292:	4818      	ldr	r0, [pc, #96]	; (80032f4 <PRES_init+0x80>)
 8003294:	f7fd fcd0 	bl	8000c38 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8003298:	200a      	movs	r0, #10
 800329a:	f7fd f981 	bl	80005a0 <HAL_Delay>

	HAL_I2C_Mem_Write(&hi2c1,0xBA, addr_CTRL_REG2_PRES[0], 1, CTRL_REG2_PRES, 1, I2C_TIMEOUT);
 800329e:	4b16      	ldr	r3, [pc, #88]	; (80032f8 <PRES_init+0x84>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032a8:	9302      	str	r3, [sp, #8]
 80032aa:	2301      	movs	r3, #1
 80032ac:	9301      	str	r3, [sp, #4]
 80032ae:	4b13      	ldr	r3, [pc, #76]	; (80032fc <PRES_init+0x88>)
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	2301      	movs	r3, #1
 80032b4:	21ba      	movs	r1, #186	; 0xba
 80032b6:	480f      	ldr	r0, [pc, #60]	; (80032f4 <PRES_init+0x80>)
 80032b8:	f7fd fcbe 	bl	8000c38 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80032bc:	200a      	movs	r0, #10
 80032be:	f7fd f96f 	bl	80005a0 <HAL_Delay>

	HAL_I2C_Mem_Write(&hi2c1,0xBA, addr_INTERRUPT_CFG[0], 1, INTERRUPT_CFG, 1, I2C_TIMEOUT);
 80032c2:	4b0f      	ldr	r3, [pc, #60]	; (8003300 <PRES_init+0x8c>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032cc:	9302      	str	r3, [sp, #8]
 80032ce:	2301      	movs	r3, #1
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <PRES_init+0x90>)
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	2301      	movs	r3, #1
 80032d8:	21ba      	movs	r1, #186	; 0xba
 80032da:	4806      	ldr	r0, [pc, #24]	; (80032f4 <PRES_init+0x80>)
 80032dc:	f7fd fcac 	bl	8000c38 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80032e0:	200a      	movs	r0, #10
 80032e2:	f7fd f95d 	bl	80005a0 <HAL_Delay>
}
 80032e6:	bf00      	nop
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	20000064 	.word	0x20000064
 80032f0:	20000068 	.word	0x20000068
 80032f4:	200000c8 	.word	0x200000c8
 80032f8:	2000006c 	.word	0x2000006c
 80032fc:	20000070 	.word	0x20000070
 8003300:	20000074 	.word	0x20000074
 8003304:	20000078 	.word	0x20000078

08003308 <get_TEMP>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void get_TEMP(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_degC_x8[0], 1, T0_degC_x8, 1, I2C_TIMEOUT);
 800330e:	4ba4      	ldr	r3, [pc, #656]	; (80035a0 <get_TEMP+0x298>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	b29a      	uxth	r2, r3
 8003314:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003318:	9302      	str	r3, [sp, #8]
 800331a:	2301      	movs	r3, #1
 800331c:	9301      	str	r3, [sp, #4]
 800331e:	4ba1      	ldr	r3, [pc, #644]	; (80035a4 <get_TEMP+0x29c>)
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	2301      	movs	r3, #1
 8003324:	21bf      	movs	r1, #191	; 0xbf
 8003326:	48a0      	ldr	r0, [pc, #640]	; (80035a8 <get_TEMP+0x2a0>)
 8003328:	f7fd fd9a 	bl	8000e60 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 800332c:	200a      	movs	r0, #10
 800332e:	f7fd f937 	bl	80005a0 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T1_degC_x8[0], 1, T1_degC_x8, 1, I2C_TIMEOUT);
 8003332:	4b9e      	ldr	r3, [pc, #632]	; (80035ac <get_TEMP+0x2a4>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	b29a      	uxth	r2, r3
 8003338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800333c:	9302      	str	r3, [sp, #8]
 800333e:	2301      	movs	r3, #1
 8003340:	9301      	str	r3, [sp, #4]
 8003342:	4b9b      	ldr	r3, [pc, #620]	; (80035b0 <get_TEMP+0x2a8>)
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	2301      	movs	r3, #1
 8003348:	21bf      	movs	r1, #191	; 0xbf
 800334a:	4897      	ldr	r0, [pc, #604]	; (80035a8 <get_TEMP+0x2a0>)
 800334c:	f7fd fd88 	bl	8000e60 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8003350:	200a      	movs	r0, #10
 8003352:	f7fd f925 	bl	80005a0 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_T1_msb[0], 1, T0_T1_msb, 1, I2C_TIMEOUT);
 8003356:	4b97      	ldr	r3, [pc, #604]	; (80035b4 <get_TEMP+0x2ac>)
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	b29a      	uxth	r2, r3
 800335c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003360:	9302      	str	r3, [sp, #8]
 8003362:	2301      	movs	r3, #1
 8003364:	9301      	str	r3, [sp, #4]
 8003366:	4b94      	ldr	r3, [pc, #592]	; (80035b8 <get_TEMP+0x2b0>)
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	2301      	movs	r3, #1
 800336c:	21bf      	movs	r1, #191	; 0xbf
 800336e:	488e      	ldr	r0, [pc, #568]	; (80035a8 <get_TEMP+0x2a0>)
 8003370:	f7fd fd76 	bl	8000e60 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8003374:	200a      	movs	r0, #10
 8003376:	f7fd f913 	bl	80005a0 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_H[0], 1, T0_H, 1, I2C_TIMEOUT);
 800337a:	4b90      	ldr	r3, [pc, #576]	; (80035bc <get_TEMP+0x2b4>)
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	b29a      	uxth	r2, r3
 8003380:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003384:	9302      	str	r3, [sp, #8]
 8003386:	2301      	movs	r3, #1
 8003388:	9301      	str	r3, [sp, #4]
 800338a:	4b8d      	ldr	r3, [pc, #564]	; (80035c0 <get_TEMP+0x2b8>)
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	2301      	movs	r3, #1
 8003390:	21bf      	movs	r1, #191	; 0xbf
 8003392:	4885      	ldr	r0, [pc, #532]	; (80035a8 <get_TEMP+0x2a0>)
 8003394:	f7fd fd64 	bl	8000e60 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8003398:	200a      	movs	r0, #10
 800339a:	f7fd f901 	bl	80005a0 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_H[0], 1, T0_H, 1, I2C_TIMEOUT);
 800339e:	4b87      	ldr	r3, [pc, #540]	; (80035bc <get_TEMP+0x2b4>)
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033a8:	9302      	str	r3, [sp, #8]
 80033aa:	2301      	movs	r3, #1
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	4b84      	ldr	r3, [pc, #528]	; (80035c0 <get_TEMP+0x2b8>)
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	2301      	movs	r3, #1
 80033b4:	21bf      	movs	r1, #191	; 0xbf
 80033b6:	487c      	ldr	r0, [pc, #496]	; (80035a8 <get_TEMP+0x2a0>)
 80033b8:	f7fd fd52 	bl	8000e60 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 80033bc:	200a      	movs	r0, #10
 80033be:	f7fd f8ef 	bl	80005a0 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_L[0], 1, T0_L, 1, I2C_TIMEOUT);
 80033c2:	4b80      	ldr	r3, [pc, #512]	; (80035c4 <get_TEMP+0x2bc>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033cc:	9302      	str	r3, [sp, #8]
 80033ce:	2301      	movs	r3, #1
 80033d0:	9301      	str	r3, [sp, #4]
 80033d2:	4b7d      	ldr	r3, [pc, #500]	; (80035c8 <get_TEMP+0x2c0>)
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	2301      	movs	r3, #1
 80033d8:	21bf      	movs	r1, #191	; 0xbf
 80033da:	4873      	ldr	r0, [pc, #460]	; (80035a8 <get_TEMP+0x2a0>)
 80033dc:	f7fd fd40 	bl	8000e60 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 80033e0:	200a      	movs	r0, #10
 80033e2:	f7fd f8dd 	bl	80005a0 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T1_H[0], 1, T1_H, 1, I2C_TIMEOUT);
 80033e6:	4b79      	ldr	r3, [pc, #484]	; (80035cc <get_TEMP+0x2c4>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033f0:	9302      	str	r3, [sp, #8]
 80033f2:	2301      	movs	r3, #1
 80033f4:	9301      	str	r3, [sp, #4]
 80033f6:	4b76      	ldr	r3, [pc, #472]	; (80035d0 <get_TEMP+0x2c8>)
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	2301      	movs	r3, #1
 80033fc:	21bf      	movs	r1, #191	; 0xbf
 80033fe:	486a      	ldr	r0, [pc, #424]	; (80035a8 <get_TEMP+0x2a0>)
 8003400:	f7fd fd2e 	bl	8000e60 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8003404:	200a      	movs	r0, #10
 8003406:	f7fd f8cb 	bl	80005a0 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T1_L[0], 1, T1_L, 1, I2C_TIMEOUT);
 800340a:	4b72      	ldr	r3, [pc, #456]	; (80035d4 <get_TEMP+0x2cc>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	b29a      	uxth	r2, r3
 8003410:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003414:	9302      	str	r3, [sp, #8]
 8003416:	2301      	movs	r3, #1
 8003418:	9301      	str	r3, [sp, #4]
 800341a:	4b6f      	ldr	r3, [pc, #444]	; (80035d8 <get_TEMP+0x2d0>)
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	2301      	movs	r3, #1
 8003420:	21bf      	movs	r1, #191	; 0xbf
 8003422:	4861      	ldr	r0, [pc, #388]	; (80035a8 <get_TEMP+0x2a0>)
 8003424:	f7fd fd1c 	bl	8000e60 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8003428:	200a      	movs	r0, #10
 800342a:	f7fd f8b9 	bl	80005a0 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T_OUT_H[0], 1, T_OUT_H, 1, I2C_TIMEOUT);
 800342e:	4b6b      	ldr	r3, [pc, #428]	; (80035dc <get_TEMP+0x2d4>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	b29a      	uxth	r2, r3
 8003434:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003438:	9302      	str	r3, [sp, #8]
 800343a:	2301      	movs	r3, #1
 800343c:	9301      	str	r3, [sp, #4]
 800343e:	4b68      	ldr	r3, [pc, #416]	; (80035e0 <get_TEMP+0x2d8>)
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	2301      	movs	r3, #1
 8003444:	21bf      	movs	r1, #191	; 0xbf
 8003446:	4858      	ldr	r0, [pc, #352]	; (80035a8 <get_TEMP+0x2a0>)
 8003448:	f7fd fd0a 	bl	8000e60 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 800344c:	200a      	movs	r0, #10
 800344e:	f7fd f8a7 	bl	80005a0 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T_OUT_L[0], 1, T_OUT_L, 1, I2C_TIMEOUT);
 8003452:	4b64      	ldr	r3, [pc, #400]	; (80035e4 <get_TEMP+0x2dc>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	b29a      	uxth	r2, r3
 8003458:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800345c:	9302      	str	r3, [sp, #8]
 800345e:	2301      	movs	r3, #1
 8003460:	9301      	str	r3, [sp, #4]
 8003462:	4b61      	ldr	r3, [pc, #388]	; (80035e8 <get_TEMP+0x2e0>)
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	2301      	movs	r3, #1
 8003468:	21bf      	movs	r1, #191	; 0xbf
 800346a:	484f      	ldr	r0, [pc, #316]	; (80035a8 <get_TEMP+0x2a0>)
 800346c:	f7fd fcf8 	bl	8000e60 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8003470:	200a      	movs	r0, #10
 8003472:	f7fd f895 	bl	80005a0 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T_OUT_L[0], 1, T_OUT_L, 1, I2C_TIMEOUT);
 8003476:	4b5b      	ldr	r3, [pc, #364]	; (80035e4 <get_TEMP+0x2dc>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	b29a      	uxth	r2, r3
 800347c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003480:	9302      	str	r3, [sp, #8]
 8003482:	2301      	movs	r3, #1
 8003484:	9301      	str	r3, [sp, #4]
 8003486:	4b58      	ldr	r3, [pc, #352]	; (80035e8 <get_TEMP+0x2e0>)
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	2301      	movs	r3, #1
 800348c:	21bf      	movs	r1, #191	; 0xbf
 800348e:	4846      	ldr	r0, [pc, #280]	; (80035a8 <get_TEMP+0x2a0>)
 8003490:	f7fd fce6 	bl	8000e60 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8003494:	200a      	movs	r0, #10
 8003496:	f7fd f883 	bl	80005a0 <HAL_Delay>

	//CONCATENATION
	T0_OUT[0]	= (T0_H[0]<<8) + T0_L[0];
 800349a:	4b49      	ldr	r3, [pc, #292]	; (80035c0 <get_TEMP+0x2b8>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	b29b      	uxth	r3, r3
 80034a0:	021b      	lsls	r3, r3, #8
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	4b48      	ldr	r3, [pc, #288]	; (80035c8 <get_TEMP+0x2c0>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	4413      	add	r3, r2
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	4b4f      	ldr	r3, [pc, #316]	; (80035ec <get_TEMP+0x2e4>)
 80034b0:	801a      	strh	r2, [r3, #0]
	T1_OUT[0]	= (T1_H[0]<<8) + T1_L[0];
 80034b2:	4b47      	ldr	r3, [pc, #284]	; (80035d0 <get_TEMP+0x2c8>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	021b      	lsls	r3, r3, #8
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	4b46      	ldr	r3, [pc, #280]	; (80035d8 <get_TEMP+0x2d0>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	4413      	add	r3, r2
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	4b4a      	ldr	r3, [pc, #296]	; (80035f0 <get_TEMP+0x2e8>)
 80034c8:	801a      	strh	r2, [r3, #0]
	T_OUT[0]	= (T_OUT_H[0]<<8) + T_OUT_L[0];
 80034ca:	4b45      	ldr	r3, [pc, #276]	; (80035e0 <get_TEMP+0x2d8>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	021b      	lsls	r3, r3, #8
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	4b44      	ldr	r3, [pc, #272]	; (80035e8 <get_TEMP+0x2e0>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	b29b      	uxth	r3, r3
 80034da:	4413      	add	r3, r2
 80034dc:	b29a      	uxth	r2, r3
 80034de:	4b45      	ldr	r3, [pc, #276]	; (80035f4 <get_TEMP+0x2ec>)
 80034e0:	801a      	strh	r2, [r3, #0]

	//GESTION VALEURS NEGATIVES
	est_negatif(T0_OUT[0]);
 80034e2:	4b42      	ldr	r3, [pc, #264]	; (80035ec <get_TEMP+0x2e4>)
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff fe93 	bl	8003212 <est_negatif>
	est_negatif(T1_OUT[0]);
 80034ec:	4b40      	ldr	r3, [pc, #256]	; (80035f0 <get_TEMP+0x2e8>)
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff fe8e 	bl	8003212 <est_negatif>
	est_negatif(T_OUT[0]);
 80034f6:	4b3f      	ldr	r3, [pc, #252]	; (80035f4 <get_TEMP+0x2ec>)
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff fe89 	bl	8003212 <est_negatif>

	//CALCUL DES T0_degC ET T1_degC FINALES
	T0_msb[0]		= T0_T1_msb[0] & 0x3;
 8003500:	4b2d      	ldr	r3, [pc, #180]	; (80035b8 <get_TEMP+0x2b0>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	f003 0303 	and.w	r3, r3, #3
 8003508:	b2da      	uxtb	r2, r3
 800350a:	4b3b      	ldr	r3, [pc, #236]	; (80035f8 <get_TEMP+0x2f0>)
 800350c:	701a      	strb	r2, [r3, #0]
	T1_msb[0]		= (T0_T1_msb[0] & 0xC)>>2;
 800350e:	4b2a      	ldr	r3, [pc, #168]	; (80035b8 <get_TEMP+0x2b0>)
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	109b      	asrs	r3, r3, #2
 8003514:	b2db      	uxtb	r3, r3
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	b2da      	uxtb	r2, r3
 800351c:	4b37      	ldr	r3, [pc, #220]	; (80035fc <get_TEMP+0x2f4>)
 800351e:	701a      	strb	r2, [r3, #0]
	T0_degC[0] 		= (T0_msb[0]<<8) + T0_degC_x8[0];
 8003520:	4b35      	ldr	r3, [pc, #212]	; (80035f8 <get_TEMP+0x2f0>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	b29b      	uxth	r3, r3
 8003526:	021b      	lsls	r3, r3, #8
 8003528:	b29a      	uxth	r2, r3
 800352a:	4b1e      	ldr	r3, [pc, #120]	; (80035a4 <get_TEMP+0x29c>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	b29b      	uxth	r3, r3
 8003530:	4413      	add	r3, r2
 8003532:	b29a      	uxth	r2, r3
 8003534:	4b32      	ldr	r3, [pc, #200]	; (8003600 <get_TEMP+0x2f8>)
 8003536:	801a      	strh	r2, [r3, #0]
	T1_degC[0] 		= (T1_msb[0]<<8) + T1_degC_x8[0];
 8003538:	4b30      	ldr	r3, [pc, #192]	; (80035fc <get_TEMP+0x2f4>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	b29b      	uxth	r3, r3
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	b29a      	uxth	r2, r3
 8003542:	4b1b      	ldr	r3, [pc, #108]	; (80035b0 <get_TEMP+0x2a8>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	b29b      	uxth	r3, r3
 8003548:	4413      	add	r3, r2
 800354a:	b29a      	uxth	r2, r3
 800354c:	4b2d      	ldr	r3, [pc, #180]	; (8003604 <get_TEMP+0x2fc>)
 800354e:	801a      	strh	r2, [r3, #0]
	T0_degC_DIV8[0]	= T0_degC[0]>>3;
 8003550:	4b2b      	ldr	r3, [pc, #172]	; (8003600 <get_TEMP+0x2f8>)
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	08db      	lsrs	r3, r3, #3
 8003556:	b29a      	uxth	r2, r3
 8003558:	4b2b      	ldr	r3, [pc, #172]	; (8003608 <get_TEMP+0x300>)
 800355a:	801a      	strh	r2, [r3, #0]
	T1_degC_DIV8[0]	= T1_degC[0]>>3;
 800355c:	4b29      	ldr	r3, [pc, #164]	; (8003604 <get_TEMP+0x2fc>)
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	08db      	lsrs	r3, r3, #3
 8003562:	b29a      	uxth	r2, r3
 8003564:	4b29      	ldr	r3, [pc, #164]	; (800360c <get_TEMP+0x304>)
 8003566:	801a      	strh	r2, [r3, #0]

	//CALCUL DE LA TEMPERATURE
	temp16[0] = ((int16_t)(T_OUT[0]-T0_OUT[0]))*10*((int16_t)(T1_degC_DIV8[0]-T0_degC_DIV8[0]))/((int16_t)(T1_OUT[0]-T0_OUT[0]))+(int16_t)(T0_degC_DIV8[0])*10;
 8003568:	4b22      	ldr	r3, [pc, #136]	; (80035f4 <get_TEMP+0x2ec>)
 800356a:	881a      	ldrh	r2, [r3, #0]
 800356c:	4b1f      	ldr	r3, [pc, #124]	; (80035ec <get_TEMP+0x2e4>)
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	b29b      	uxth	r3, r3
 8003574:	b21b      	sxth	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	4619      	mov	r1, r3
 8003582:	4b22      	ldr	r3, [pc, #136]	; (800360c <get_TEMP+0x304>)
 8003584:	881a      	ldrh	r2, [r3, #0]
 8003586:	4b20      	ldr	r3, [pc, #128]	; (8003608 <get_TEMP+0x300>)
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	b29b      	uxth	r3, r3
 800358e:	b21b      	sxth	r3, r3
 8003590:	fb03 f301 	mul.w	r3, r3, r1
 8003594:	4a16      	ldr	r2, [pc, #88]	; (80035f0 <get_TEMP+0x2e8>)
 8003596:	8811      	ldrh	r1, [r2, #0]
 8003598:	4a14      	ldr	r2, [pc, #80]	; (80035ec <get_TEMP+0x2e4>)
 800359a:	8812      	ldrh	r2, [r2, #0]
 800359c:	1a8a      	subs	r2, r1, r2
 800359e:	e037      	b.n	8003610 <get_TEMP+0x308>
 80035a0:	20000000 	.word	0x20000000
 80035a4:	20000130 	.word	0x20000130
 80035a8:	200000c8 	.word	0x200000c8
 80035ac:	20000004 	.word	0x20000004
 80035b0:	2000012c 	.word	0x2000012c
 80035b4:	20000008 	.word	0x20000008
 80035b8:	20000148 	.word	0x20000148
 80035bc:	2000000c 	.word	0x2000000c
 80035c0:	20000138 	.word	0x20000138
 80035c4:	20000010 	.word	0x20000010
 80035c8:	200000a8 	.word	0x200000a8
 80035cc:	20000014 	.word	0x20000014
 80035d0:	200000b4 	.word	0x200000b4
 80035d4:	20000018 	.word	0x20000018
 80035d8:	20000124 	.word	0x20000124
 80035dc:	2000001c 	.word	0x2000001c
 80035e0:	2000015c 	.word	0x2000015c
 80035e4:	20000020 	.word	0x20000020
 80035e8:	200000b0 	.word	0x200000b0
 80035ec:	20000144 	.word	0x20000144
 80035f0:	20000160 	.word	0x20000160
 80035f4:	2000017c 	.word	0x2000017c
 80035f8:	20000150 	.word	0x20000150
 80035fc:	200000a0 	.word	0x200000a0
 8003600:	20000128 	.word	0x20000128
 8003604:	20000140 	.word	0x20000140
 8003608:	20000170 	.word	0x20000170
 800360c:	200000c4 	.word	0x200000c4
 8003610:	b292      	uxth	r2, r2
 8003612:	b212      	sxth	r2, r2
 8003614:	fb93 f3f2 	sdiv	r3, r3, r2
 8003618:	b29a      	uxth	r2, r3
 800361a:	4b07      	ldr	r3, [pc, #28]	; (8003638 <get_TEMP+0x330>)
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	4619      	mov	r1, r3
 8003620:	0089      	lsls	r1, r1, #2
 8003622:	440b      	add	r3, r1
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	b29b      	uxth	r3, r3
 8003628:	4413      	add	r3, r2
 800362a:	b29a      	uxth	r2, r3
 800362c:	4b03      	ldr	r3, [pc, #12]	; (800363c <get_TEMP+0x334>)
 800362e:	801a      	strh	r2, [r3, #0]

}
 8003630:	bf00      	nop
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000170 	.word	0x20000170
 800363c:	2000014c 	.word	0x2000014c

08003640 <get_HUM>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void get_HUM(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_HUM_H[0], 1, HUM_H, 1, I2C_TIMEOUT);
 8003646:	4b73      	ldr	r3, [pc, #460]	; (8003814 <get_HUM+0x1d4>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	b29a      	uxth	r2, r3
 800364c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003650:	9302      	str	r3, [sp, #8]
 8003652:	2301      	movs	r3, #1
 8003654:	9301      	str	r3, [sp, #4]
 8003656:	4b70      	ldr	r3, [pc, #448]	; (8003818 <get_HUM+0x1d8>)
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	2301      	movs	r3, #1
 800365c:	21bf      	movs	r1, #191	; 0xbf
 800365e:	486f      	ldr	r0, [pc, #444]	; (800381c <get_HUM+0x1dc>)
 8003660:	f7fd fbfe 	bl	8000e60 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8003664:	200a      	movs	r0, #10
 8003666:	f7fc ff9b 	bl	80005a0 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_HUM_L[0], 1, HUM_L, 1, I2C_TIMEOUT);
 800366a:	4b6d      	ldr	r3, [pc, #436]	; (8003820 <get_HUM+0x1e0>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	b29a      	uxth	r2, r3
 8003670:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003674:	9302      	str	r3, [sp, #8]
 8003676:	2301      	movs	r3, #1
 8003678:	9301      	str	r3, [sp, #4]
 800367a:	4b6a      	ldr	r3, [pc, #424]	; (8003824 <get_HUM+0x1e4>)
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	2301      	movs	r3, #1
 8003680:	21bf      	movs	r1, #191	; 0xbf
 8003682:	4866      	ldr	r0, [pc, #408]	; (800381c <get_HUM+0x1dc>)
 8003684:	f7fd fbec 	bl	8000e60 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8003688:	200a      	movs	r0, #10
 800368a:	f7fc ff89 	bl	80005a0 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H0_rH_x2[0], 1, H0_rH_x2, 1, I2C_TIMEOUT);
 800368e:	4b66      	ldr	r3, [pc, #408]	; (8003828 <get_HUM+0x1e8>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	b29a      	uxth	r2, r3
 8003694:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003698:	9302      	str	r3, [sp, #8]
 800369a:	2301      	movs	r3, #1
 800369c:	9301      	str	r3, [sp, #4]
 800369e:	4b63      	ldr	r3, [pc, #396]	; (800382c <get_HUM+0x1ec>)
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	2301      	movs	r3, #1
 80036a4:	21bf      	movs	r1, #191	; 0xbf
 80036a6:	485d      	ldr	r0, [pc, #372]	; (800381c <get_HUM+0x1dc>)
 80036a8:	f7fd fbda 	bl	8000e60 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 80036ac:	200a      	movs	r0, #10
 80036ae:	f7fc ff77 	bl	80005a0 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H1_rH_x2[0], 1, H0_rH_x2, 1, I2C_TIMEOUT);
 80036b2:	4b5f      	ldr	r3, [pc, #380]	; (8003830 <get_HUM+0x1f0>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036bc:	9302      	str	r3, [sp, #8]
 80036be:	2301      	movs	r3, #1
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	4b5a      	ldr	r3, [pc, #360]	; (800382c <get_HUM+0x1ec>)
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	2301      	movs	r3, #1
 80036c8:	21bf      	movs	r1, #191	; 0xbf
 80036ca:	4854      	ldr	r0, [pc, #336]	; (800381c <get_HUM+0x1dc>)
 80036cc:	f7fd fbc8 	bl	8000e60 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 80036d0:	200a      	movs	r0, #10
 80036d2:	f7fc ff65 	bl	80005a0 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H0_T0_OUT_H[0], 1, H0_T0_OUT_H, 1, I2C_TIMEOUT);
 80036d6:	4b57      	ldr	r3, [pc, #348]	; (8003834 <get_HUM+0x1f4>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	b29a      	uxth	r2, r3
 80036dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036e0:	9302      	str	r3, [sp, #8]
 80036e2:	2301      	movs	r3, #1
 80036e4:	9301      	str	r3, [sp, #4]
 80036e6:	4b54      	ldr	r3, [pc, #336]	; (8003838 <get_HUM+0x1f8>)
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	2301      	movs	r3, #1
 80036ec:	21bf      	movs	r1, #191	; 0xbf
 80036ee:	484b      	ldr	r0, [pc, #300]	; (800381c <get_HUM+0x1dc>)
 80036f0:	f7fd fbb6 	bl	8000e60 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 80036f4:	200a      	movs	r0, #10
 80036f6:	f7fc ff53 	bl	80005a0 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H0_T0_OUT_L[0], 1, H0_T0_OUT_L, 1, I2C_TIMEOUT);
 80036fa:	4b50      	ldr	r3, [pc, #320]	; (800383c <get_HUM+0x1fc>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	b29a      	uxth	r2, r3
 8003700:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003704:	9302      	str	r3, [sp, #8]
 8003706:	2301      	movs	r3, #1
 8003708:	9301      	str	r3, [sp, #4]
 800370a:	4b4d      	ldr	r3, [pc, #308]	; (8003840 <get_HUM+0x200>)
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	2301      	movs	r3, #1
 8003710:	21bf      	movs	r1, #191	; 0xbf
 8003712:	4842      	ldr	r0, [pc, #264]	; (800381c <get_HUM+0x1dc>)
 8003714:	f7fd fba4 	bl	8000e60 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8003718:	200a      	movs	r0, #10
 800371a:	f7fc ff41 	bl	80005a0 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H1_T0_OUT_H[0], 1, H1_T0_OUT_H, 1, I2C_TIMEOUT);
 800371e:	4b49      	ldr	r3, [pc, #292]	; (8003844 <get_HUM+0x204>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	b29a      	uxth	r2, r3
 8003724:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003728:	9302      	str	r3, [sp, #8]
 800372a:	2301      	movs	r3, #1
 800372c:	9301      	str	r3, [sp, #4]
 800372e:	4b46      	ldr	r3, [pc, #280]	; (8003848 <get_HUM+0x208>)
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	2301      	movs	r3, #1
 8003734:	21bf      	movs	r1, #191	; 0xbf
 8003736:	4839      	ldr	r0, [pc, #228]	; (800381c <get_HUM+0x1dc>)
 8003738:	f7fd fb92 	bl	8000e60 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 800373c:	200a      	movs	r0, #10
 800373e:	f7fc ff2f 	bl	80005a0 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H1_T0_OUT_L[0], 1, H1_T0_OUT_L, 1, I2C_TIMEOUT);
 8003742:	4b42      	ldr	r3, [pc, #264]	; (800384c <get_HUM+0x20c>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	b29a      	uxth	r2, r3
 8003748:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800374c:	9302      	str	r3, [sp, #8]
 800374e:	2301      	movs	r3, #1
 8003750:	9301      	str	r3, [sp, #4]
 8003752:	4b3f      	ldr	r3, [pc, #252]	; (8003850 <get_HUM+0x210>)
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	2301      	movs	r3, #1
 8003758:	21bf      	movs	r1, #191	; 0xbf
 800375a:	4830      	ldr	r0, [pc, #192]	; (800381c <get_HUM+0x1dc>)
 800375c:	f7fd fb80 	bl	8000e60 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8003760:	200a      	movs	r0, #10
 8003762:	f7fc ff1d 	bl	80005a0 <HAL_Delay>

	H0_rH[0]	= H0_rH_x2[0]>>1;
 8003766:	4b31      	ldr	r3, [pc, #196]	; (800382c <get_HUM+0x1ec>)
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	085b      	lsrs	r3, r3, #1
 800376c:	b2db      	uxtb	r3, r3
 800376e:	b29a      	uxth	r2, r3
 8003770:	4b38      	ldr	r3, [pc, #224]	; (8003854 <get_HUM+0x214>)
 8003772:	801a      	strh	r2, [r3, #0]
	H1_rH[0]	= H1_rH_x2[0]>>1;
 8003774:	4b38      	ldr	r3, [pc, #224]	; (8003858 <get_HUM+0x218>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	085b      	lsrs	r3, r3, #1
 800377a:	b2db      	uxtb	r3, r3
 800377c:	b29a      	uxth	r2, r3
 800377e:	4b37      	ldr	r3, [pc, #220]	; (800385c <get_HUM+0x21c>)
 8003780:	801a      	strh	r2, [r3, #0]

	H0[0]		= (H0_T0_OUT_H[0]<<8) + H0_T0_OUT_L[0];
 8003782:	4b2d      	ldr	r3, [pc, #180]	; (8003838 <get_HUM+0x1f8>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	b29b      	uxth	r3, r3
 8003788:	021b      	lsls	r3, r3, #8
 800378a:	b29a      	uxth	r2, r3
 800378c:	4b2c      	ldr	r3, [pc, #176]	; (8003840 <get_HUM+0x200>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	b29b      	uxth	r3, r3
 8003792:	4413      	add	r3, r2
 8003794:	b29a      	uxth	r2, r3
 8003796:	4b32      	ldr	r3, [pc, #200]	; (8003860 <get_HUM+0x220>)
 8003798:	801a      	strh	r2, [r3, #0]
	H1[0]		= (H1_T0_OUT_H[0]<<8) + H1_T0_OUT_L[0];
 800379a:	4b2b      	ldr	r3, [pc, #172]	; (8003848 <get_HUM+0x208>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	b29b      	uxth	r3, r3
 80037a0:	021b      	lsls	r3, r3, #8
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	4b2a      	ldr	r3, [pc, #168]	; (8003850 <get_HUM+0x210>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	4413      	add	r3, r2
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	4b2d      	ldr	r3, [pc, #180]	; (8003864 <get_HUM+0x224>)
 80037b0:	801a      	strh	r2, [r3, #0]
	H_OUT[0]	= (HUM_H[0]<<8) + HUM_L[0];
 80037b2:	4b19      	ldr	r3, [pc, #100]	; (8003818 <get_HUM+0x1d8>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	021b      	lsls	r3, r3, #8
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	4b19      	ldr	r3, [pc, #100]	; (8003824 <get_HUM+0x1e4>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	4413      	add	r3, r2
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	4b28      	ldr	r3, [pc, #160]	; (8003868 <get_HUM+0x228>)
 80037c8:	801a      	strh	r2, [r3, #0]

	//CALCUL DE L'HUMIDITE
	hum16[0] = ((int16_t)(H1_rH[0]-H0_rH[0]))*((int16_t)(H_OUT[0]-H0[0]))/((int16_t)(H1[0]-H0[0]))+(int16_t)(H0_rH[0]);
 80037ca:	4b24      	ldr	r3, [pc, #144]	; (800385c <get_HUM+0x21c>)
 80037cc:	881a      	ldrh	r2, [r3, #0]
 80037ce:	4b21      	ldr	r3, [pc, #132]	; (8003854 <get_HUM+0x214>)
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	b21b      	sxth	r3, r3
 80037d8:	4619      	mov	r1, r3
 80037da:	4b23      	ldr	r3, [pc, #140]	; (8003868 <get_HUM+0x228>)
 80037dc:	881a      	ldrh	r2, [r3, #0]
 80037de:	4b20      	ldr	r3, [pc, #128]	; (8003860 <get_HUM+0x220>)
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	b21b      	sxth	r3, r3
 80037e8:	fb03 f301 	mul.w	r3, r3, r1
 80037ec:	4a1d      	ldr	r2, [pc, #116]	; (8003864 <get_HUM+0x224>)
 80037ee:	8811      	ldrh	r1, [r2, #0]
 80037f0:	4a1b      	ldr	r2, [pc, #108]	; (8003860 <get_HUM+0x220>)
 80037f2:	8812      	ldrh	r2, [r2, #0]
 80037f4:	1a8a      	subs	r2, r1, r2
 80037f6:	b292      	uxth	r2, r2
 80037f8:	b212      	sxth	r2, r2
 80037fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80037fe:	b29a      	uxth	r2, r3
 8003800:	4b14      	ldr	r3, [pc, #80]	; (8003854 <get_HUM+0x214>)
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	4413      	add	r3, r2
 8003806:	b29a      	uxth	r2, r3
 8003808:	4b18      	ldr	r3, [pc, #96]	; (800386c <get_HUM+0x22c>)
 800380a:	801a      	strh	r2, [r3, #0]
}
 800380c:	bf00      	nop
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	2000002c 	.word	0x2000002c
 8003818:	20000168 	.word	0x20000168
 800381c:	200000c8 	.word	0x200000c8
 8003820:	20000030 	.word	0x20000030
 8003824:	20000200 	.word	0x20000200
 8003828:	20000034 	.word	0x20000034
 800382c:	20000174 	.word	0x20000174
 8003830:	20000038 	.word	0x20000038
 8003834:	20000040 	.word	0x20000040
 8003838:	2000016c 	.word	0x2000016c
 800383c:	2000003c 	.word	0x2000003c
 8003840:	200000c0 	.word	0x200000c0
 8003844:	20000048 	.word	0x20000048
 8003848:	200000b8 	.word	0x200000b8
 800384c:	20000044 	.word	0x20000044
 8003850:	200000a4 	.word	0x200000a4
 8003854:	20000114 	.word	0x20000114
 8003858:	20000164 	.word	0x20000164
 800385c:	200000ac 	.word	0x200000ac
 8003860:	20000158 	.word	0x20000158
 8003864:	20000208 	.word	0x20000208
 8003868:	200000bc 	.word	0x200000bc
 800386c:	20000180 	.word	0x20000180

08003870 <get_PRES>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void get_PRES(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_REF_P_XL[0], 1, REF_P_XL, 1, I2C_TIMEOUT);
 8003876:	4b47      	ldr	r3, [pc, #284]	; (8003994 <get_PRES+0x124>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	b29a      	uxth	r2, r3
 800387c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003880:	9302      	str	r3, [sp, #8]
 8003882:	2301      	movs	r3, #1
 8003884:	9301      	str	r3, [sp, #4]
 8003886:	4b44      	ldr	r3, [pc, #272]	; (8003998 <get_PRES+0x128>)
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	2301      	movs	r3, #1
 800388c:	21bb      	movs	r1, #187	; 0xbb
 800388e:	4843      	ldr	r0, [pc, #268]	; (800399c <get_PRES+0x12c>)
 8003890:	f7fd fae6 	bl	8000e60 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8003894:	200a      	movs	r0, #10
 8003896:	f7fc fe83 	bl	80005a0 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_REF_P_L[0], 1, REF_P_L, 1, I2C_TIMEOUT);
 800389a:	4b41      	ldr	r3, [pc, #260]	; (80039a0 <get_PRES+0x130>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	b29a      	uxth	r2, r3
 80038a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038a4:	9302      	str	r3, [sp, #8]
 80038a6:	2301      	movs	r3, #1
 80038a8:	9301      	str	r3, [sp, #4]
 80038aa:	4b3e      	ldr	r3, [pc, #248]	; (80039a4 <get_PRES+0x134>)
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	2301      	movs	r3, #1
 80038b0:	21bb      	movs	r1, #187	; 0xbb
 80038b2:	483a      	ldr	r0, [pc, #232]	; (800399c <get_PRES+0x12c>)
 80038b4:	f7fd fad4 	bl	8000e60 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 80038b8:	200a      	movs	r0, #10
 80038ba:	f7fc fe71 	bl	80005a0 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_REF_P_H[0], 1, REF_P_H, 1, I2C_TIMEOUT);
 80038be:	4b3a      	ldr	r3, [pc, #232]	; (80039a8 <get_PRES+0x138>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038c8:	9302      	str	r3, [sp, #8]
 80038ca:	2301      	movs	r3, #1
 80038cc:	9301      	str	r3, [sp, #4]
 80038ce:	4b37      	ldr	r3, [pc, #220]	; (80039ac <get_PRES+0x13c>)
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	2301      	movs	r3, #1
 80038d4:	21bb      	movs	r1, #187	; 0xbb
 80038d6:	4831      	ldr	r0, [pc, #196]	; (800399c <get_PRES+0x12c>)
 80038d8:	f7fd fac2 	bl	8000e60 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 80038dc:	200a      	movs	r0, #10
 80038de:	f7fc fe5f 	bl	80005a0 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_PRES_OUT_XL[0], 1, PRES_OUT_XL, 1, I2C_TIMEOUT);
 80038e2:	4b33      	ldr	r3, [pc, #204]	; (80039b0 <get_PRES+0x140>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038ec:	9302      	str	r3, [sp, #8]
 80038ee:	2301      	movs	r3, #1
 80038f0:	9301      	str	r3, [sp, #4]
 80038f2:	4b30      	ldr	r3, [pc, #192]	; (80039b4 <get_PRES+0x144>)
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	2301      	movs	r3, #1
 80038f8:	21bb      	movs	r1, #187	; 0xbb
 80038fa:	4828      	ldr	r0, [pc, #160]	; (800399c <get_PRES+0x12c>)
 80038fc:	f7fd fab0 	bl	8000e60 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8003900:	200a      	movs	r0, #10
 8003902:	f7fc fe4d 	bl	80005a0 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_PRES_OUT_L[0], 1, PRES_OUT_L, 1, I2C_TIMEOUT);
 8003906:	4b2c      	ldr	r3, [pc, #176]	; (80039b8 <get_PRES+0x148>)
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	b29a      	uxth	r2, r3
 800390c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003910:	9302      	str	r3, [sp, #8]
 8003912:	2301      	movs	r3, #1
 8003914:	9301      	str	r3, [sp, #4]
 8003916:	4b29      	ldr	r3, [pc, #164]	; (80039bc <get_PRES+0x14c>)
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	2301      	movs	r3, #1
 800391c:	21bb      	movs	r1, #187	; 0xbb
 800391e:	481f      	ldr	r0, [pc, #124]	; (800399c <get_PRES+0x12c>)
 8003920:	f7fd fa9e 	bl	8000e60 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8003924:	200a      	movs	r0, #10
 8003926:	f7fc fe3b 	bl	80005a0 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_PRES_OUT_H[0], 1, PRES_OUT_H, 1, I2C_TIMEOUT);
 800392a:	4b25      	ldr	r3, [pc, #148]	; (80039c0 <get_PRES+0x150>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	b29a      	uxth	r2, r3
 8003930:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003934:	9302      	str	r3, [sp, #8]
 8003936:	2301      	movs	r3, #1
 8003938:	9301      	str	r3, [sp, #4]
 800393a:	4b22      	ldr	r3, [pc, #136]	; (80039c4 <get_PRES+0x154>)
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	2301      	movs	r3, #1
 8003940:	21bb      	movs	r1, #187	; 0xbb
 8003942:	4816      	ldr	r0, [pc, #88]	; (800399c <get_PRES+0x12c>)
 8003944:	f7fd fa8c 	bl	8000e60 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8003948:	200a      	movs	r0, #10
 800394a:	f7fc fe29 	bl	80005a0 <HAL_Delay>

	//CONCATENATION

	PRES_x4096[0]	= (PRES_OUT_H[0]<<16) + (PRES_OUT_L[0]<<8) + PRES_OUT_XL[0];
 800394e:	4b1d      	ldr	r3, [pc, #116]	; (80039c4 <get_PRES+0x154>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	041a      	lsls	r2, r3, #16
 8003954:	4b19      	ldr	r3, [pc, #100]	; (80039bc <get_PRES+0x14c>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	021b      	lsls	r3, r3, #8
 800395a:	4413      	add	r3, r2
 800395c:	4a15      	ldr	r2, [pc, #84]	; (80039b4 <get_PRES+0x144>)
 800395e:	7812      	ldrb	r2, [r2, #0]
 8003960:	4413      	add	r3, r2
 8003962:	461a      	mov	r2, r3
 8003964:	4b18      	ldr	r3, [pc, #96]	; (80039c8 <get_PRES+0x158>)
 8003966:	601a      	str	r2, [r3, #0]
	REF_P_x4096[0]	= (REF_P_H[0]<<16) + (REF_P_L[0]<<8) + REF_P_XL[0];
 8003968:	4b10      	ldr	r3, [pc, #64]	; (80039ac <get_PRES+0x13c>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	041a      	lsls	r2, r3, #16
 800396e:	4b0d      	ldr	r3, [pc, #52]	; (80039a4 <get_PRES+0x134>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	021b      	lsls	r3, r3, #8
 8003974:	4413      	add	r3, r2
 8003976:	4a08      	ldr	r2, [pc, #32]	; (8003998 <get_PRES+0x128>)
 8003978:	7812      	ldrb	r2, [r2, #0]
 800397a:	4413      	add	r3, r2
 800397c:	461a      	mov	r2, r3
 800397e:	4b13      	ldr	r3, [pc, #76]	; (80039cc <get_PRES+0x15c>)
 8003980:	601a      	str	r2, [r3, #0]

	//CALCUL DE LA PRESSION
	pres32[0] = (REF_P_x4096[0])>>12;
 8003982:	4b12      	ldr	r3, [pc, #72]	; (80039cc <get_PRES+0x15c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	0b1b      	lsrs	r3, r3, #12
 8003988:	4a11      	ldr	r2, [pc, #68]	; (80039d0 <get_PRES+0x160>)
 800398a:	6013      	str	r3, [r2, #0]
}
 800398c:	bf00      	nop
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20000058 	.word	0x20000058
 8003998:	20000118 	.word	0x20000118
 800399c:	200000c8 	.word	0x200000c8
 80039a0:	2000005c 	.word	0x2000005c
 80039a4:	2000013c 	.word	0x2000013c
 80039a8:	20000060 	.word	0x20000060
 80039ac:	20000120 	.word	0x20000120
 80039b0:	2000004c 	.word	0x2000004c
 80039b4:	20000204 	.word	0x20000204
 80039b8:	20000050 	.word	0x20000050
 80039bc:	20000134 	.word	0x20000134
 80039c0:	20000054 	.word	0x20000054
 80039c4:	20000178 	.word	0x20000178
 80039c8:	20000154 	.word	0x20000154
 80039cc:	200001fc 	.word	0x200001fc
 80039d0:	2000011c 	.word	0x2000011c

080039d4 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039d8:	f7fc fd84 	bl	80004e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039dc:	f000 f812 	bl	8003a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039e0:	f000 f90e 	bl	8003c00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80039e4:	f000 f8d8 	bl	8003b98 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80039e8:	f000 f88c 	bl	8003b04 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  TEMPandHUM_init();
 80039ec:	f7ff fc24 	bl	8003238 <TEMPandHUM_init>
  PRES_init();
 80039f0:	f7ff fc40 	bl	8003274 <PRES_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  get_TEMP();
 80039f4:	f7ff fc88 	bl	8003308 <get_TEMP>
	  get_HUM();
 80039f8:	f7ff fe22 	bl	8003640 <get_HUM>
	  get_PRES();
 80039fc:	f7ff ff38 	bl	8003870 <get_PRES>
	  get_TEMP();
 8003a00:	e7f8      	b.n	80039f4 <main+0x20>
	...

08003a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b0b0      	sub	sp, #192	; 0xc0
 8003a08:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003a16:	2310      	movs	r3, #16
 8003a18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a22:	2302      	movs	r3, #2
 8003a24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003a2e:	230a      	movs	r3, #10
 8003a30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003a34:	2307      	movs	r3, #7
 8003a36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003a40:	2302      	movs	r3, #2
 8003a42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a46:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fd fe38 	bl	80016c0 <HAL_RCC_OscConfig>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d004      	beq.n	8003a60 <SystemClock_Config+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003a56:	f240 1191 	movw	r1, #401	; 0x191
 8003a5a:	4828      	ldr	r0, [pc, #160]	; (8003afc <SystemClock_Config+0xf8>)
 8003a5c:	f000 f930 	bl	8003cc0 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a60:	230f      	movs	r3, #15
 8003a62:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a64:	2303      	movs	r3, #3
 8003a66:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a70:	2300      	movs	r3, #0
 8003a72:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003a74:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a78:	2104      	movs	r1, #4
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fe f9c6 	bl	8001e0c <HAL_RCC_ClockConfig>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d004      	beq.n	8003a90 <SystemClock_Config+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003a86:	f240 119f 	movw	r1, #415	; 0x19f
 8003a8a:	481c      	ldr	r0, [pc, #112]	; (8003afc <SystemClock_Config+0xf8>)
 8003a8c:	f000 f918 	bl	8003cc0 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8003a90:	2342      	movs	r3, #66	; 0x42
 8003a92:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003a94:	2300      	movs	r3, #0
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a9c:	463b      	mov	r3, r7
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fe fbc6 	bl	8002230 <HAL_RCCEx_PeriphCLKConfig>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d004      	beq.n	8003ab4 <SystemClock_Config+0xb0>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003aaa:	f240 11a7 	movw	r1, #423	; 0x1a7
 8003aae:	4813      	ldr	r0, [pc, #76]	; (8003afc <SystemClock_Config+0xf8>)
 8003ab0:	f000 f906 	bl	8003cc0 <_Error_Handler>
  }

    /**Configure the main internal regulator output voltage
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003ab4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003ab8:	f7fd fdac 	bl	8001614 <HAL_PWREx_ControlVoltageScaling>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d004      	beq.n	8003acc <SystemClock_Config+0xc8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003ac2:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003ac6:	480d      	ldr	r0, [pc, #52]	; (8003afc <SystemClock_Config+0xf8>)
 8003ac8:	f000 f8fa 	bl	8003cc0 <_Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003acc:	f7fe fb18 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <SystemClock_Config+0xfc>)
 8003ad4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ad8:	099b      	lsrs	r3, r3, #6
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fc fe55 	bl	800078a <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003ae0:	2004      	movs	r0, #4
 8003ae2:	f7fc fe5f 	bl	80007a4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	2100      	movs	r1, #0
 8003aea:	f04f 30ff 	mov.w	r0, #4294967295
 8003aee:	f7fc fe30 	bl	8000752 <HAL_NVIC_SetPriority>
}
 8003af2:	bf00      	nop
 8003af4:	37c0      	adds	r7, #192	; 0xc0
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	08003fa4 	.word	0x08003fa4
 8003b00:	10624dd3 	.word	0x10624dd3

08003b04 <MX_I2C1_Init>:

/* I2C1 init function */
static void MX_I2C1_Init(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8003b08:	4b1f      	ldr	r3, [pc, #124]	; (8003b88 <MX_I2C1_Init+0x84>)
 8003b0a:	4a20      	ldr	r2, [pc, #128]	; (8003b8c <MX_I2C1_Init+0x88>)
 8003b0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8003b0e:	4b1e      	ldr	r3, [pc, #120]	; (8003b88 <MX_I2C1_Init+0x84>)
 8003b10:	4a1f      	ldr	r2, [pc, #124]	; (8003b90 <MX_I2C1_Init+0x8c>)
 8003b12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003b14:	4b1c      	ldr	r3, [pc, #112]	; (8003b88 <MX_I2C1_Init+0x84>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b1a:	4b1b      	ldr	r3, [pc, #108]	; (8003b88 <MX_I2C1_Init+0x84>)
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b20:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <MX_I2C1_Init+0x84>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003b26:	4b18      	ldr	r3, [pc, #96]	; (8003b88 <MX_I2C1_Init+0x84>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003b2c:	4b16      	ldr	r3, [pc, #88]	; (8003b88 <MX_I2C1_Init+0x84>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b32:	4b15      	ldr	r3, [pc, #84]	; (8003b88 <MX_I2C1_Init+0x84>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b38:	4b13      	ldr	r3, [pc, #76]	; (8003b88 <MX_I2C1_Init+0x84>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003b3e:	4812      	ldr	r0, [pc, #72]	; (8003b88 <MX_I2C1_Init+0x84>)
 8003b40:	f7fc ffec 	bl	8000b1c <HAL_I2C_Init>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d004      	beq.n	8003b54 <MX_I2C1_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003b4a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8003b4e:	4811      	ldr	r0, [pc, #68]	; (8003b94 <MX_I2C1_Init+0x90>)
 8003b50:	f000 f8b6 	bl	8003cc0 <_Error_Handler>
  }

    /**Configure Analogue filter
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003b54:	2100      	movs	r1, #0
 8003b56:	480c      	ldr	r0, [pc, #48]	; (8003b88 <MX_I2C1_Init+0x84>)
 8003b58:	f7fd fcb6 	bl	80014c8 <HAL_I2CEx_ConfigAnalogFilter>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d004      	beq.n	8003b6c <MX_I2C1_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003b62:	f240 11d3 	movw	r1, #467	; 0x1d3
 8003b66:	480b      	ldr	r0, [pc, #44]	; (8003b94 <MX_I2C1_Init+0x90>)
 8003b68:	f000 f8aa 	bl	8003cc0 <_Error_Handler>
  }

    /**Configure Digital filter
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4806      	ldr	r0, [pc, #24]	; (8003b88 <MX_I2C1_Init+0x84>)
 8003b70:	f7fd fcf5 	bl	800155e <HAL_I2CEx_ConfigDigitalFilter>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d004      	beq.n	8003b84 <MX_I2C1_Init+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003b7a:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8003b7e:	4805      	ldr	r0, [pc, #20]	; (8003b94 <MX_I2C1_Init+0x90>)
 8003b80:	f000 f89e 	bl	8003cc0 <_Error_Handler>
  }

}
 8003b84:	bf00      	nop
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	200000c8 	.word	0x200000c8
 8003b8c:	40005400 	.word	0x40005400
 8003b90:	10909cec 	.word	0x10909cec
 8003b94:	08003fa4 	.word	0x08003fa4

08003b98 <MX_USART2_UART_Init>:

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003b9c:	4b15      	ldr	r3, [pc, #84]	; (8003bf4 <MX_USART2_UART_Init+0x5c>)
 8003b9e:	4a16      	ldr	r2, [pc, #88]	; (8003bf8 <MX_USART2_UART_Init+0x60>)
 8003ba0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003ba2:	4b14      	ldr	r3, [pc, #80]	; (8003bf4 <MX_USART2_UART_Init+0x5c>)
 8003ba4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ba8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003baa:	4b12      	ldr	r3, [pc, #72]	; (8003bf4 <MX_USART2_UART_Init+0x5c>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003bb0:	4b10      	ldr	r3, [pc, #64]	; (8003bf4 <MX_USART2_UART_Init+0x5c>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003bb6:	4b0f      	ldr	r3, [pc, #60]	; (8003bf4 <MX_USART2_UART_Init+0x5c>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003bbc:	4b0d      	ldr	r3, [pc, #52]	; (8003bf4 <MX_USART2_UART_Init+0x5c>)
 8003bbe:	220c      	movs	r2, #12
 8003bc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bc2:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <MX_USART2_UART_Init+0x5c>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bc8:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <MX_USART2_UART_Init+0x5c>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bce:	4b09      	ldr	r3, [pc, #36]	; (8003bf4 <MX_USART2_UART_Init+0x5c>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bd4:	4b07      	ldr	r3, [pc, #28]	; (8003bf4 <MX_USART2_UART_Init+0x5c>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003bda:	4806      	ldr	r0, [pc, #24]	; (8003bf4 <MX_USART2_UART_Init+0x5c>)
 8003bdc:	f7fe fe82 	bl	80028e4 <HAL_UART_Init>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d004      	beq.n	8003bf0 <MX_USART2_UART_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003be6:	f240 11ef 	movw	r1, #495	; 0x1ef
 8003bea:	4804      	ldr	r0, [pc, #16]	; (8003bfc <MX_USART2_UART_Init+0x64>)
 8003bec:	f000 f868 	bl	8003cc0 <_Error_Handler>
  }

}
 8003bf0:	bf00      	nop
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	20000184 	.word	0x20000184
 8003bf8:	40004400 	.word	0x40004400
 8003bfc:	08003fa4 	.word	0x08003fa4

08003c00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08a      	sub	sp, #40	; 0x28
 8003c04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c06:	4a2b      	ldr	r2, [pc, #172]	; (8003cb4 <MX_GPIO_Init+0xb4>)
 8003c08:	4b2a      	ldr	r3, [pc, #168]	; (8003cb4 <MX_GPIO_Init+0xb4>)
 8003c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0c:	f043 0304 	orr.w	r3, r3, #4
 8003c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c12:	4b28      	ldr	r3, [pc, #160]	; (8003cb4 <MX_GPIO_Init+0xb4>)
 8003c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	613b      	str	r3, [r7, #16]
 8003c1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c1e:	4a25      	ldr	r2, [pc, #148]	; (8003cb4 <MX_GPIO_Init+0xb4>)
 8003c20:	4b24      	ldr	r3, [pc, #144]	; (8003cb4 <MX_GPIO_Init+0xb4>)
 8003c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c2a:	4b22      	ldr	r3, [pc, #136]	; (8003cb4 <MX_GPIO_Init+0xb4>)
 8003c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c36:	4a1f      	ldr	r2, [pc, #124]	; (8003cb4 <MX_GPIO_Init+0xb4>)
 8003c38:	4b1e      	ldr	r3, [pc, #120]	; (8003cb4 <MX_GPIO_Init+0xb4>)
 8003c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c42:	4b1c      	ldr	r3, [pc, #112]	; (8003cb4 <MX_GPIO_Init+0xb4>)
 8003c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	60bb      	str	r3, [r7, #8]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c4e:	4a19      	ldr	r2, [pc, #100]	; (8003cb4 <MX_GPIO_Init+0xb4>)
 8003c50:	4b18      	ldr	r3, [pc, #96]	; (8003cb4 <MX_GPIO_Init+0xb4>)
 8003c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c54:	f043 0302 	orr.w	r3, r3, #2
 8003c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c5a:	4b16      	ldr	r3, [pc, #88]	; (8003cb4 <MX_GPIO_Init+0xb4>)
 8003c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	607b      	str	r3, [r7, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8003c66:	2200      	movs	r2, #0
 8003c68:	2120      	movs	r1, #32
 8003c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c6e:	f7fc ff3d 	bl	8000aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003c72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003c78:	4b0f      	ldr	r3, [pc, #60]	; (8003cb8 <MX_GPIO_Init+0xb8>)
 8003c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003c80:	f107 0314 	add.w	r3, r7, #20
 8003c84:	4619      	mov	r1, r3
 8003c86:	480d      	ldr	r0, [pc, #52]	; (8003cbc <MX_GPIO_Init+0xbc>)
 8003c88:	f7fc fdb6 	bl	80007f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8003c8c:	2320      	movs	r3, #32
 8003c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c90:	2301      	movs	r3, #1
 8003c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c94:	2300      	movs	r3, #0
 8003c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8003c9c:	f107 0314 	add.w	r3, r7, #20
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ca6:	f7fc fda7 	bl	80007f8 <HAL_GPIO_Init>

}
 8003caa:	bf00      	nop
 8003cac:	3728      	adds	r7, #40	; 0x28
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	10210000 	.word	0x10210000
 8003cbc:	48000800 	.word	0x48000800

08003cc0 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8003cca:	e7fe      	b.n	8003cca <_Error_Handler+0xa>

08003ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cd2:	4a24      	ldr	r2, [pc, #144]	; (8003d64 <HAL_MspInit+0x98>)
 8003cd4:	4b23      	ldr	r3, [pc, #140]	; (8003d64 <HAL_MspInit+0x98>)
 8003cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	6613      	str	r3, [r2, #96]	; 0x60
 8003cde:	4b21      	ldr	r3, [pc, #132]	; (8003d64 <HAL_MspInit+0x98>)
 8003ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	607b      	str	r3, [r7, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cea:	4a1e      	ldr	r2, [pc, #120]	; (8003d64 <HAL_MspInit+0x98>)
 8003cec:	4b1d      	ldr	r3, [pc, #116]	; (8003d64 <HAL_MspInit+0x98>)
 8003cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf4:	6593      	str	r3, [r2, #88]	; 0x58
 8003cf6:	4b1b      	ldr	r3, [pc, #108]	; (8003d64 <HAL_MspInit+0x98>)
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d02:	2003      	movs	r0, #3
 8003d04:	f7fc fd1a 	bl	800073c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003d08:	2200      	movs	r2, #0
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	f06f 000b 	mvn.w	r0, #11
 8003d10:	f7fc fd1f 	bl	8000752 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003d14:	2200      	movs	r2, #0
 8003d16:	2100      	movs	r1, #0
 8003d18:	f06f 000a 	mvn.w	r0, #10
 8003d1c:	f7fc fd19 	bl	8000752 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003d20:	2200      	movs	r2, #0
 8003d22:	2100      	movs	r1, #0
 8003d24:	f06f 0009 	mvn.w	r0, #9
 8003d28:	f7fc fd13 	bl	8000752 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2100      	movs	r1, #0
 8003d30:	f06f 0004 	mvn.w	r0, #4
 8003d34:	f7fc fd0d 	bl	8000752 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	f06f 0003 	mvn.w	r0, #3
 8003d40:	f7fc fd07 	bl	8000752 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003d44:	2200      	movs	r2, #0
 8003d46:	2100      	movs	r1, #0
 8003d48:	f06f 0001 	mvn.w	r0, #1
 8003d4c:	f7fc fd01 	bl	8000752 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003d50:	2200      	movs	r2, #0
 8003d52:	2100      	movs	r1, #0
 8003d54:	f04f 30ff 	mov.w	r0, #4294967295
 8003d58:	f7fc fcfb 	bl	8000752 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d5c:	bf00      	nop
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40021000 	.word	0x40021000

08003d68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a11      	ldr	r2, [pc, #68]	; (8003dbc <HAL_I2C_MspInit+0x54>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d11c      	bne.n	8003db4 <HAL_I2C_MspInit+0x4c>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003d7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d80:	2312      	movs	r3, #18
 8003d82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d84:	2301      	movs	r3, #1
 8003d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d8c:	2304      	movs	r3, #4
 8003d8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d90:	f107 030c 	add.w	r3, r7, #12
 8003d94:	4619      	mov	r1, r3
 8003d96:	480a      	ldr	r0, [pc, #40]	; (8003dc0 <HAL_I2C_MspInit+0x58>)
 8003d98:	f7fc fd2e 	bl	80007f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d9c:	4a09      	ldr	r2, [pc, #36]	; (8003dc4 <HAL_I2C_MspInit+0x5c>)
 8003d9e:	4b09      	ldr	r3, [pc, #36]	; (8003dc4 <HAL_I2C_MspInit+0x5c>)
 8003da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003da6:	6593      	str	r3, [r2, #88]	; 0x58
 8003da8:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <HAL_I2C_MspInit+0x5c>)
 8003daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003db4:	bf00      	nop
 8003db6:	3720      	adds	r7, #32
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40005400 	.word	0x40005400
 8003dc0:	48000400 	.word	0x48000400
 8003dc4:	40021000 	.word	0x40021000

08003dc8 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a11      	ldr	r2, [pc, #68]	; (8003e1c <HAL_UART_MspInit+0x54>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d11c      	bne.n	8003e14 <HAL_UART_MspInit+0x4c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003dda:	4a11      	ldr	r2, [pc, #68]	; (8003e20 <HAL_UART_MspInit+0x58>)
 8003ddc:	4b10      	ldr	r3, [pc, #64]	; (8003e20 <HAL_UART_MspInit+0x58>)
 8003dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de4:	6593      	str	r3, [r2, #88]	; 0x58
 8003de6:	4b0e      	ldr	r3, [pc, #56]	; (8003e20 <HAL_UART_MspInit+0x58>)
 8003de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dee:	60bb      	str	r3, [r7, #8]
 8003df0:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003df2:	230c      	movs	r3, #12
 8003df4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df6:	2302      	movs	r3, #2
 8003df8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e02:	2307      	movs	r3, #7
 8003e04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e06:	f107 030c 	add.w	r3, r7, #12
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e10:	f7fc fcf2 	bl	80007f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003e14:	bf00      	nop
 8003e16:	3720      	adds	r7, #32
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40004400 	.word	0x40004400
 8003e20:	40021000 	.word	0x40021000

08003e24 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003e28:	bf00      	nop
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003e32:	b480      	push	{r7}
 8003e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e36:	e7fe      	b.n	8003e36 <HardFault_Handler+0x4>

08003e38 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e3c:	e7fe      	b.n	8003e3c <MemManage_Handler+0x4>

08003e3e <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e42:	e7fe      	b.n	8003e42 <BusFault_Handler+0x4>

08003e44 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e48:	e7fe      	b.n	8003e48 <UsageFault_Handler+0x4>

08003e4a <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e4e:	bf00      	nop
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e5c:	bf00      	nop
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003e66:	b480      	push	{r7}
 8003e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e6a:	bf00      	nop
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e78:	f7fc fb78 	bl	800056c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8003e7c:	f7fc fcae 	bl	80007dc <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e80:	bf00      	nop
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e88:	4a17      	ldr	r2, [pc, #92]	; (8003ee8 <SystemInit+0x64>)
 8003e8a:	4b17      	ldr	r3, [pc, #92]	; (8003ee8 <SystemInit+0x64>)
 8003e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003e98:	4a14      	ldr	r2, [pc, #80]	; (8003eec <SystemInit+0x68>)
 8003e9a:	4b14      	ldr	r3, [pc, #80]	; (8003eec <SystemInit+0x68>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003ea4:	4b11      	ldr	r3, [pc, #68]	; (8003eec <SystemInit+0x68>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003eaa:	4a10      	ldr	r2, [pc, #64]	; (8003eec <SystemInit+0x68>)
 8003eac:	4b0f      	ldr	r3, [pc, #60]	; (8003eec <SystemInit+0x68>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003eb4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003eb8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003eba:	4b0c      	ldr	r3, [pc, #48]	; (8003eec <SystemInit+0x68>)
 8003ebc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ec0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003ec2:	4a0a      	ldr	r2, [pc, #40]	; (8003eec <SystemInit+0x68>)
 8003ec4:	4b09      	ldr	r3, [pc, #36]	; (8003eec <SystemInit+0x68>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ecc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003ece:	4b07      	ldr	r3, [pc, #28]	; (8003eec <SystemInit+0x68>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ed4:	4b04      	ldr	r3, [pc, #16]	; (8003ee8 <SystemInit+0x64>)
 8003ed6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003eda:	609a      	str	r2, [r3, #8]
#endif
}
 8003edc:	bf00      	nop
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	e000ed00 	.word	0xe000ed00
 8003eec:	40021000 	.word	0x40021000

08003ef0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f28 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003ef4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003ef6:	e003      	b.n	8003f00 <LoopCopyDataInit>

08003ef8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003ef8:	4b0c      	ldr	r3, [pc, #48]	; (8003f2c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003efa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003efc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003efe:	3104      	adds	r1, #4

08003f00 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003f00:	480b      	ldr	r0, [pc, #44]	; (8003f30 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003f02:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003f04:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003f06:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003f08:	d3f6      	bcc.n	8003ef8 <CopyDataInit>
	ldr	r2, =_sbss
 8003f0a:	4a0b      	ldr	r2, [pc, #44]	; (8003f38 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003f0c:	e002      	b.n	8003f14 <LoopFillZerobss>

08003f0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003f0e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003f10:	f842 3b04 	str.w	r3, [r2], #4

08003f14 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003f14:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <LoopForever+0x16>)
	cmp	r2, r3
 8003f16:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003f18:	d3f9      	bcc.n	8003f0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003f1a:	f7ff ffb3 	bl	8003e84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f1e:	f000 f811 	bl	8003f44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f22:	f7ff fd57 	bl	80039d4 <main>

08003f26 <LoopForever>:

LoopForever:
    b LoopForever
 8003f26:	e7fe      	b.n	8003f26 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003f28:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 8003f2c:	0800400c 	.word	0x0800400c
	ldr	r0, =_sdata
 8003f30:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003f34:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 8003f38:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 8003f3c:	2000020c 	.word	0x2000020c

08003f40 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f40:	e7fe      	b.n	8003f40 <ADC1_IRQHandler>
	...

08003f44 <__libc_init_array>:
 8003f44:	b570      	push	{r4, r5, r6, lr}
 8003f46:	4e0d      	ldr	r6, [pc, #52]	; (8003f7c <__libc_init_array+0x38>)
 8003f48:	4c0d      	ldr	r4, [pc, #52]	; (8003f80 <__libc_init_array+0x3c>)
 8003f4a:	1ba4      	subs	r4, r4, r6
 8003f4c:	10a4      	asrs	r4, r4, #2
 8003f4e:	2500      	movs	r5, #0
 8003f50:	42a5      	cmp	r5, r4
 8003f52:	d109      	bne.n	8003f68 <__libc_init_array+0x24>
 8003f54:	4e0b      	ldr	r6, [pc, #44]	; (8003f84 <__libc_init_array+0x40>)
 8003f56:	4c0c      	ldr	r4, [pc, #48]	; (8003f88 <__libc_init_array+0x44>)
 8003f58:	f000 f818 	bl	8003f8c <_init>
 8003f5c:	1ba4      	subs	r4, r4, r6
 8003f5e:	10a4      	asrs	r4, r4, #2
 8003f60:	2500      	movs	r5, #0
 8003f62:	42a5      	cmp	r5, r4
 8003f64:	d105      	bne.n	8003f72 <__libc_init_array+0x2e>
 8003f66:	bd70      	pop	{r4, r5, r6, pc}
 8003f68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f6c:	4798      	blx	r3
 8003f6e:	3501      	adds	r5, #1
 8003f70:	e7ee      	b.n	8003f50 <__libc_init_array+0xc>
 8003f72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f76:	4798      	blx	r3
 8003f78:	3501      	adds	r5, #1
 8003f7a:	e7f2      	b.n	8003f62 <__libc_init_array+0x1e>
 8003f7c:	08004004 	.word	0x08004004
 8003f80:	08004004 	.word	0x08004004
 8003f84:	08004004 	.word	0x08004004
 8003f88:	08004008 	.word	0x08004008

08003f8c <_init>:
 8003f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8e:	bf00      	nop
 8003f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f92:	bc08      	pop	{r3}
 8003f94:	469e      	mov	lr, r3
 8003f96:	4770      	bx	lr

08003f98 <_fini>:
 8003f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9a:	bf00      	nop
 8003f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9e:	bc08      	pop	{r3}
 8003fa0:	469e      	mov	lr, r3
 8003fa2:	4770      	bx	lr
