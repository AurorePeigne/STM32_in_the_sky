
71_Sensor_Gaz_T.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ac8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08004c58  08004c58  00014c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004da0  08004da0  00014da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004da8  08004da8  00014da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004dac  08004dac  00014dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  20000000  08004db0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001f0  20000088  08004e38  00020088  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000278  08004e38  00020278  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 10 .debug_info   000198d7  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002b78  00000000  00000000  0003998f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000e227  00000000  00000000  0003c507  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f90  00000000  00000000  0004a730  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001588  00000000  00000000  0004b6c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008e76  00000000  00000000  0004cc48  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006740  00000000  00000000  00055abe  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005c1fe  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000037ac  00000000  00000000  0005c27c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000084  00000000  00000000  0005fa28  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000117  00000000  00000000  0005faac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c40 	.word	0x08004c40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08004c40 	.word	0x08004c40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000582:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <HAL_InitTick+0x2c>)
{
 8000584:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000586:	6818      	ldr	r0, [r3, #0]
 8000588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000590:	f000 fdee 	bl	8001170 <HAL_SYSTICK_Config>
 8000594:	4604      	mov	r4, r0
 8000596:	b938      	cbnz	r0, 80005a8 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000598:	4602      	mov	r2, r0
 800059a:	4629      	mov	r1, r5
 800059c:	f04f 30ff 	mov.w	r0, #4294967295
 80005a0:	f000 fda6 	bl	80010f0 <HAL_NVIC_SetPriority>
 80005a4:	4620      	mov	r0, r4
 80005a6:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 80005a8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80005aa:	bd38      	pop	{r3, r4, r5, pc}
 80005ac:	20000020 	.word	0x20000020

080005b0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b0:	4a09      	ldr	r2, [pc, #36]	; (80005d8 <HAL_Init+0x28>)
 80005b2:	6813      	ldr	r3, [r2, #0]
 80005b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80005b8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ba:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005bc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005be:	f000 fd85 	bl	80010cc <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005c2:	2000      	movs	r0, #0
 80005c4:	f7ff ffdc 	bl	8000580 <HAL_InitTick>
 80005c8:	4604      	mov	r4, r0
 80005ca:	b918      	cbnz	r0, 80005d4 <HAL_Init+0x24>
    HAL_MspInit();
 80005cc:	f003 fa40 	bl	8003a50 <HAL_MspInit>
}
 80005d0:	4620      	mov	r0, r4
 80005d2:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80005d4:	2401      	movs	r4, #1
 80005d6:	e7fb      	b.n	80005d0 <HAL_Init+0x20>
 80005d8:	40022000 	.word	0x40022000

080005dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80005dc:	4a02      	ldr	r2, [pc, #8]	; (80005e8 <HAL_IncTick+0xc>)
 80005de:	6813      	ldr	r3, [r2, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	200000b8 	.word	0x200000b8

080005ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005ec:	4b01      	ldr	r3, [pc, #4]	; (80005f4 <HAL_GetTick+0x8>)
 80005ee:	6818      	ldr	r0, [r3, #0]
}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	200000b8 	.word	0x200000b8

080005f8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80005f8:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80005fa:	0dcc      	lsrs	r4, r1, #23
 80005fc:	f004 0404 	and.w	r4, r4, #4
 8000600:	3014      	adds	r0, #20
  
  MODIFY_REG(*preg,
 8000602:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8000606:	2307      	movs	r3, #7
 8000608:	fa03 f501 	lsl.w	r5, r3, r1
 800060c:	5823      	ldr	r3, [r4, r0]
 800060e:	fa02 f101 	lsl.w	r1, r2, r1
 8000612:	ea23 0305 	bic.w	r3, r3, r5
 8000616:	4319      	orrs	r1, r3
 8000618:	5021      	str	r1, [r4, r0]
 800061a:	bd30      	pop	{r4, r5, pc}

0800061c <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800061c:	6880      	ldr	r0, [r0, #8]
}
 800061e:	f000 0001 	and.w	r0, r0, #1
 8000622:	4770      	bx	lr

08000624 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000624:	6880      	ldr	r0, [r0, #8]
}
 8000626:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800062a:	4770      	bx	lr

0800062c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800062c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000632:	4604      	mov	r4, r0
 8000634:	2800      	cmp	r0, #0
 8000636:	f000 8085 	beq.w	8000744 <HAL_ADC_Init+0x118>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800063a:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800063c:	b925      	cbnz	r5, 8000648 <HAL_ADC_Init+0x1c>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800063e:	f003 fa1f 	bl	8003a80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000642:	65a5      	str	r5, [r4, #88]	; 0x58
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000644:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000648:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800064a:	6883      	ldr	r3, [r0, #8]
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	d47b      	bmi.n	8000748 <HAL_ADC_Init+0x11c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000650:	6883      	ldr	r3, [r0, #8]
 8000652:	00dd      	lsls	r5, r3, #3
 8000654:	d57f      	bpl.n	8000756 <HAL_ADC_Init+0x12a>
 8000656:	6883      	ldr	r3, [r0, #8]
 8000658:	00d9      	lsls	r1, r3, #3
 800065a:	f140 808a 	bpl.w	8000772 <HAL_ADC_Init+0x146>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800065e:	2100      	movs	r1, #0
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000660:	f7ff ffe0 	bl	8000624 <LL_ADC_REG_IsConversionOngoing>
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000664:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000666:	f013 0f10 	tst.w	r3, #16
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800066a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800066c:	d167      	bne.n	800073e <HAL_ADC_Init+0x112>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800066e:	2800      	cmp	r0, #0
 8000670:	d165      	bne.n	800073e <HAL_ADC_Init+0x112>
    ADC_STATE_CLR_SET(hadc->State,
 8000672:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000676:	f043 0302 	orr.w	r3, r3, #2
 800067a:	6563      	str	r3, [r4, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800067c:	6820      	ldr	r0, [r4, #0]
 800067e:	f7ff ffcd 	bl	800061c <LL_ADC_IsEnabled>
 8000682:	b998      	cbnz	r0, 80006ac <HAL_ADC_Init+0x80>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000684:	4852      	ldr	r0, [pc, #328]	; (80007d0 <HAL_ADC_Init+0x1a4>)
 8000686:	f7ff ffc9 	bl	800061c <LL_ADC_IsEnabled>
 800068a:	4603      	mov	r3, r0
 800068c:	4851      	ldr	r0, [pc, #324]	; (80007d4 <HAL_ADC_Init+0x1a8>)
 800068e:	f7ff ffc5 	bl	800061c <LL_ADC_IsEnabled>
 8000692:	4303      	orrs	r3, r0
 8000694:	4850      	ldr	r0, [pc, #320]	; (80007d8 <HAL_ADC_Init+0x1ac>)
 8000696:	f7ff ffc1 	bl	800061c <LL_ADC_IsEnabled>
 800069a:	4303      	orrs	r3, r0
 800069c:	d106      	bne.n	80006ac <HAL_ADC_Init+0x80>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800069e:	4a4f      	ldr	r2, [pc, #316]	; (80007dc <HAL_ADC_Init+0x1b0>)
 80006a0:	6860      	ldr	r0, [r4, #4]
 80006a2:	6893      	ldr	r3, [r2, #8]
 80006a4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80006a8:	4303      	orrs	r3, r0
 80006aa:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80006ac:	68e0      	ldr	r0, [r4, #12]
 80006ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode)  );
 80006b0:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 80006b4:	4303      	orrs	r3, r0
 80006b6:	68a0      	ldr	r0, [r4, #8]
 80006b8:	4303      	orrs	r3, r0
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80006ba:	7e60      	ldrb	r0, [r4, #25]
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80006bc:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 80006be:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80006c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80006c6:	bf02      	ittt	eq
 80006c8:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 80006ca:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80006ce:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80006d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80006d4:	b122      	cbz	r2, 80006e0 <HAL_ADC_Init+0xb4>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80006d6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80006d8:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80006dc:	4302      	orrs	r2, r0
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80006de:	4313      	orrs	r3, r2
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 80006e0:	6820      	ldr	r0, [r4, #0]
 80006e2:	4a3f      	ldr	r2, [pc, #252]	; (80007e0 <HAL_ADC_Init+0x1b4>)
 80006e4:	68c5      	ldr	r5, [r0, #12]
 80006e6:	402a      	ands	r2, r5
 80006e8:	4313      	orrs	r3, r2
 80006ea:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80006ec:	f7ff ff9a 	bl	8000624 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80006f0:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80006f2:	689a      	ldr	r2, [r3, #8]
 80006f4:	0712      	lsls	r2, r2, #28
 80006f6:	d546      	bpl.n	8000786 <HAL_ADC_Init+0x15a>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80006f8:	6922      	ldr	r2, [r4, #16]
 80006fa:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80006fc:	bf05      	ittet	eq
 80006fe:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 8000700:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000702:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000704:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8000708:	bf06      	itte	eq
 800070a:	f020 000f 	biceq.w	r0, r0, #15
 800070e:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000710:	f022 020f 	bicne.w	r2, r2, #15
 8000714:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000716:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000718:	f023 0303 	bic.w	r3, r3, #3
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000722:	4608      	mov	r0, r1
 8000724:	b003      	add	sp, #12
 8000726:	bd30      	pop	{r4, r5, pc}
      wait_loop_index--;
 8000728:	9b01      	ldr	r3, [sp, #4]
 800072a:	3b01      	subs	r3, #1
 800072c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 800072e:	9b01      	ldr	r3, [sp, #4]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d1f9      	bne.n	8000728 <HAL_ADC_Init+0xfc>
 8000734:	e78f      	b.n	8000656 <HAL_ADC_Init+0x2a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000736:	691a      	ldr	r2, [r3, #16]
 8000738:	f022 0201 	bic.w	r2, r2, #1
 800073c:	e045      	b.n	80007ca <HAL_ADC_Init+0x19e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800073e:	f043 0310 	orr.w	r3, r3, #16
 8000742:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8000744:	2101      	movs	r1, #1
 8000746:	e7ec      	b.n	8000722 <HAL_ADC_Init+0xf6>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000748:	6883      	ldr	r3, [r0, #8]
 800074a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800074e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000752:	6083      	str	r3, [r0, #8]
 8000754:	e77c      	b.n	8000650 <HAL_ADC_Init+0x24>
  MODIFY_REG(ADCx->CR,
 8000756:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000758:	4a22      	ldr	r2, [pc, #136]	; (80007e4 <HAL_ADC_Init+0x1b8>)
 800075a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800075e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000766:	6083      	str	r3, [r0, #8]
 8000768:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <HAL_ADC_Init+0x1bc>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000770:	e7dc      	b.n	800072c <HAL_ADC_Init+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000772:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000774:	f043 0310 	orr.w	r3, r3, #16
 8000778:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800077a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8000782:	2101      	movs	r1, #1
 8000784:	e76c      	b.n	8000660 <HAL_ADC_Init+0x34>
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000786:	2800      	cmp	r0, #0
 8000788:	d1b6      	bne.n	80006f8 <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800078a:	68d8      	ldr	r0, [r3, #12]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800078c:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000790:	7e25      	ldrb	r5, [r4, #24]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000792:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000794:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                            |
 8000798:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800079c:	f020 0002 	bic.w	r0, r0, #2
 80007a0:	4302      	orrs	r2, r0
 80007a2:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80007a4:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80007a8:	2a01      	cmp	r2, #1
 80007aa:	d1c4      	bne.n	8000736 <HAL_ADC_Init+0x10a>
        MODIFY_REG(hadc->Instance->CFGR2,
 80007ac:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80007ae:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80007b0:	6918      	ldr	r0, [r3, #16]
 80007b2:	432a      	orrs	r2, r5
 80007b4:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80007b6:	f042 0201 	orr.w	r2, r2, #1
 80007ba:	432a      	orrs	r2, r5
 80007bc:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80007be:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80007c2:	432a      	orrs	r2, r5
 80007c4:	f020 0004 	bic.w	r0, r0, #4
 80007c8:	4302      	orrs	r2, r0
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80007ca:	611a      	str	r2, [r3, #16]
 80007cc:	e794      	b.n	80006f8 <HAL_ADC_Init+0xcc>
 80007ce:	bf00      	nop
 80007d0:	50040000 	.word	0x50040000
 80007d4:	50040100 	.word	0x50040100
 80007d8:	50040200 	.word	0x50040200
 80007dc:	50040300 	.word	0x50040300
 80007e0:	fff0c007 	.word	0xfff0c007
 80007e4:	00030d40 	.word	0x00030d40
 80007e8:	20000020 	.word	0x20000020

080007ec <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80007ec:	6803      	ldr	r3, [r0, #0]
 80007ee:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80007f0:	4770      	bx	lr

080007f2 <HAL_ADC_LevelOutOfWindowCallback>:
 80007f2:	4770      	bx	lr

080007f4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80007f4:	4770      	bx	lr
	...

080007f8 <HAL_ADC_IRQHandler>:
  uint32_t tmp_isr = hadc->Instance->ISR;
 80007f8:	6803      	ldr	r3, [r0, #0]
{
 80007fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 80007fe:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000800:	685e      	ldr	r6, [r3, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000802:	4b8b      	ldr	r3, [pc, #556]	; (8000a30 <HAL_ADC_IRQHandler+0x238>)
 8000804:	689f      	ldr	r7, [r3, #8]
  if(((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8000806:	f015 0f02 	tst.w	r5, #2
{
 800080a:	4604      	mov	r4, r0
 800080c:	f007 071f 	and.w	r7, r7, #31
 8000810:	4698      	mov	r8, r3
  if(((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8000812:	d00e      	beq.n	8000832 <HAL_ADC_IRQHandler+0x3a>
 8000814:	07b0      	lsls	r0, r6, #30
 8000816:	d50c      	bpl.n	8000832 <HAL_ADC_IRQHandler+0x3a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000818:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800081a:	06d9      	lsls	r1, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800081c:	bf5e      	ittt	pl
 800081e:	6d63      	ldrpl	r3, [r4, #84]	; 0x54
 8000820:	f443 6300 	orrpl.w	r3, r3, #2048	; 0x800
 8000824:	6563      	strpl	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8000826:	4620      	mov	r0, r4
 8000828:	f000 fbd6 	bl	8000fd8 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP );
 800082c:	6823      	ldr	r3, [r4, #0]
 800082e:	2202      	movs	r2, #2
 8000830:	601a      	str	r2, [r3, #0]
  if((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000832:	076a      	lsls	r2, r5, #29
 8000834:	d501      	bpl.n	800083a <HAL_ADC_IRQHandler+0x42>
 8000836:	0773      	lsls	r3, r6, #29
 8000838:	d403      	bmi.n	8000842 <HAL_ADC_IRQHandler+0x4a>
 800083a:	0728      	lsls	r0, r5, #28
 800083c:	d539      	bpl.n	80008b2 <HAL_ADC_IRQHandler+0xba>
     (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))  )
 800083e:	0731      	lsls	r1, r6, #28
 8000840:	d537      	bpl.n	80008b2 <HAL_ADC_IRQHandler+0xba>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000842:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if(LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000844:	6820      	ldr	r0, [r4, #0]
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000846:	06da      	lsls	r2, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000848:	bf5e      	ittt	pl
 800084a:	6d63      	ldrpl	r3, [r4, #84]	; 0x54
 800084c:	f443 7300 	orrpl.w	r3, r3, #512	; 0x200
 8000850:	6563      	strpl	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000852:	68c3      	ldr	r3, [r0, #12]
 8000854:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8000858:	d125      	bne.n	80008a6 <HAL_ADC_IRQHandler+0xae>
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800085a:	4b76      	ldr	r3, [pc, #472]	; (8000a34 <HAL_ADC_IRQHandler+0x23c>)
 800085c:	4298      	cmp	r0, r3
 800085e:	d108      	bne.n	8000872 <HAL_ADC_IRQHandler+0x7a>
           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000860:	2f09      	cmp	r7, #9
 8000862:	bf9d      	ittte	ls
 8000864:	f240 2321 	movwls	r3, #545	; 0x221
 8000868:	40fb      	lsrls	r3, r7
 800086a:	43db      	mvnls	r3, r3
 800086c:	2301      	movhi	r3, #1
 800086e:	07da      	lsls	r2, r3, #31
 8000870:	d455      	bmi.n	800091e <HAL_ADC_IRQHandler+0x126>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000872:	68c3      	ldr	r3, [r0, #12]
      if (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8000874:	049b      	lsls	r3, r3, #18
 8000876:	d416      	bmi.n	80008a6 <HAL_ADC_IRQHandler+0xae>
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000878:	6803      	ldr	r3, [r0, #0]
 800087a:	0719      	lsls	r1, r3, #28
 800087c:	d513      	bpl.n	80008a6 <HAL_ADC_IRQHandler+0xae>
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800087e:	f7ff fed1 	bl	8000624 <LL_ADC_REG_IsConversionOngoing>
 8000882:	2800      	cmp	r0, #0
 8000884:	d14e      	bne.n	8000924 <HAL_ADC_IRQHandler+0x12c>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000886:	6822      	ldr	r2, [r4, #0]
 8000888:	6853      	ldr	r3, [r2, #4]
 800088a:	f023 030c 	bic.w	r3, r3, #12
 800088e:	6053      	str	r3, [r2, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000890:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000892:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000896:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000898:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800089a:	04da      	lsls	r2, r3, #19
 800089c:	d403      	bmi.n	80008a6 <HAL_ADC_IRQHandler+0xae>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800089e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80008a6:	4620      	mov	r0, r4
 80008a8:	f003 f8ae 	bl	8003a08 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80008ac:	6823      	ldr	r3, [r4, #0]
 80008ae:	220c      	movs	r2, #12
 80008b0:	601a      	str	r2, [r3, #0]
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80008b2:	06ab      	lsls	r3, r5, #26
 80008b4:	d501      	bpl.n	80008ba <HAL_ADC_IRQHandler+0xc2>
 80008b6:	06b0      	lsls	r0, r6, #26
 80008b8:	d403      	bmi.n	80008c2 <HAL_ADC_IRQHandler+0xca>
 80008ba:	0669      	lsls	r1, r5, #25
 80008bc:	d558      	bpl.n	8000970 <HAL_ADC_IRQHandler+0x178>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))  )      
 80008be:	0672      	lsls	r2, r6, #25
 80008c0:	d556      	bpl.n	8000970 <HAL_ADC_IRQHandler+0x178>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80008c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80008c4:	4a5b      	ldr	r2, [pc, #364]	; (8000a34 <HAL_ADC_IRQHandler+0x23c>)
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80008c6:	06db      	lsls	r3, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80008c8:	bf5e      	ittt	pl
 80008ca:	6d63      	ldrpl	r3, [r4, #84]	; 0x54
 80008cc:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 80008d0:	6563      	strpl	r3, [r4, #84]	; 0x54
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80008d2:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80008d4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80008d6:	68d9      	ldr	r1, [r3, #12]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80008d8:	4293      	cmp	r3, r2
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80008da:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80008de:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 80008e2:	d103      	bne.n	80008ec <HAL_ADC_IRQHandler+0xf4>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80008e4:	b117      	cbz	r7, 80008ec <HAL_ADC_IRQHandler+0xf4>
         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80008e6:	1fba      	subs	r2, r7, #6
 80008e8:	2a01      	cmp	r2, #1
 80008ea:	d824      	bhi.n	8000936 <HAL_ADC_IRQHandler+0x13e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80008ec:	68da      	ldr	r2, [r3, #12]
    if((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80008ee:	b128      	cbz	r0, 80008fc <HAL_ADC_IRQHandler+0x104>
 80008f0:	0190      	lsls	r0, r2, #6
 80008f2:	d437      	bmi.n	8000964 <HAL_ADC_IRQHandler+0x16c>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80008f4:	2900      	cmp	r1, #0
 80008f6:	d135      	bne.n	8000964 <HAL_ADC_IRQHandler+0x16c>
        ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 80008f8:	0491      	lsls	r1, r2, #18
 80008fa:	d433      	bmi.n	8000964 <HAL_ADC_IRQHandler+0x16c>
      if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80008fc:	6819      	ldr	r1, [r3, #0]
 80008fe:	0648      	lsls	r0, r1, #25
 8000900:	d530      	bpl.n	8000964 <HAL_ADC_IRQHandler+0x16c>
        if(READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8000902:	0291      	lsls	r1, r2, #10
 8000904:	d42e      	bmi.n	8000964 <HAL_ADC_IRQHandler+0x16c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000906:	689a      	ldr	r2, [r3, #8]
 8000908:	0712      	lsls	r2, r2, #28
 800090a:	d51c      	bpl.n	8000946 <HAL_ADC_IRQHandler+0x14e>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800090c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800090e:	f043 0310 	orr.w	r3, r3, #16
 8000912:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000914:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	65a3      	str	r3, [r4, #88]	; 0x58
 800091c:	e022      	b.n	8000964 <HAL_ADC_IRQHandler+0x16c>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800091e:	4b46      	ldr	r3, [pc, #280]	; (8000a38 <HAL_ADC_IRQHandler+0x240>)
 8000920:	68db      	ldr	r3, [r3, #12]
 8000922:	e7a7      	b.n	8000874 <HAL_ADC_IRQHandler+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000924:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000926:	f043 0310 	orr.w	r3, r3, #16
 800092a:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800092c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	65a3      	str	r3, [r4, #88]	; 0x58
 8000934:	e7b7      	b.n	80008a6 <HAL_ADC_IRQHandler+0xae>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000936:	4a40      	ldr	r2, [pc, #256]	; (8000a38 <HAL_ADC_IRQHandler+0x240>)
 8000938:	68d2      	ldr	r2, [r2, #12]
 800093a:	e7d8      	b.n	80008ee <HAL_ADC_IRQHandler+0xf6>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800093c:	6823      	ldr	r3, [r4, #0]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	f013 0f01 	tst.w	r3, #1
 8000944:	e04c      	b.n	80009e0 <HAL_ADC_IRQHandler+0x1e8>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8000946:	685a      	ldr	r2, [r3, #4]
 8000948:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800094c:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800094e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000950:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000954:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8000956:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000958:	05db      	lsls	r3, r3, #23
 800095a:	d403      	bmi.n	8000964 <HAL_ADC_IRQHandler+0x16c>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800095c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800095e:	f043 0301 	orr.w	r3, r3, #1
 8000962:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000964:	4620      	mov	r0, r4
 8000966:	f000 fb33 	bl	8000fd0 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800096a:	6823      	ldr	r3, [r4, #0]
 800096c:	2260      	movs	r2, #96	; 0x60
 800096e:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))      
 8000970:	0628      	lsls	r0, r5, #24
 8000972:	d50b      	bpl.n	800098c <HAL_ADC_IRQHandler+0x194>
 8000974:	0631      	lsls	r1, r6, #24
 8000976:	d509      	bpl.n	800098c <HAL_ADC_IRQHandler+0x194>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000978:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800097a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800097e:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000980:	4620      	mov	r0, r4
 8000982:	f7ff ff36 	bl	80007f2 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8000986:	6823      	ldr	r3, [r4, #0]
 8000988:	2280      	movs	r2, #128	; 0x80
 800098a:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))      
 800098c:	05ea      	lsls	r2, r5, #23
 800098e:	d50c      	bpl.n	80009aa <HAL_ADC_IRQHandler+0x1b2>
 8000990:	05f3      	lsls	r3, r6, #23
 8000992:	d50a      	bpl.n	80009aa <HAL_ADC_IRQHandler+0x1b2>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8000994:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099a:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800099c:	4620      	mov	r0, r4
 800099e:	f000 fb19 	bl	8000fd4 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80009a2:	6823      	ldr	r3, [r4, #0]
 80009a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009a8:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))      
 80009aa:	05a8      	lsls	r0, r5, #22
 80009ac:	d50c      	bpl.n	80009c8 <HAL_ADC_IRQHandler+0x1d0>
 80009ae:	05b1      	lsls	r1, r6, #22
 80009b0:	d50a      	bpl.n	80009c8 <HAL_ADC_IRQHandler+0x1d0>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80009b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80009b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b8:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80009ba:	4620      	mov	r0, r4
 80009bc:	f000 fb0b 	bl	8000fd6 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80009c0:	6823      	ldr	r3, [r4, #0]
 80009c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c6:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR)) 
 80009c8:	06ea      	lsls	r2, r5, #27
 80009ca:	d50d      	bpl.n	80009e8 <HAL_ADC_IRQHandler+0x1f0>
 80009cc:	06f3      	lsls	r3, r6, #27
 80009ce:	d50b      	bpl.n	80009e8 <HAL_ADC_IRQHandler+0x1f0>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80009d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80009d2:	b1f3      	cbz	r3, 8000a12 <HAL_ADC_IRQHandler+0x21a>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80009d4:	2f00      	cmp	r7, #0
 80009d6:	d0b1      	beq.n	800093c <HAL_ADC_IRQHandler+0x144>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80009d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80009dc:	f413 4f60 	tst.w	r3, #57344	; 0xe000
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80009e0:	d117      	bne.n	8000a12 <HAL_ADC_IRQHandler+0x21a>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80009e2:	6823      	ldr	r3, [r4, #0]
 80009e4:	2210      	movs	r2, #16
 80009e6:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF)) 
 80009e8:	0568      	lsls	r0, r5, #21
 80009ea:	d51e      	bpl.n	8000a2a <HAL_ADC_IRQHandler+0x232>
 80009ec:	0571      	lsls	r1, r6, #21
 80009ee:	d51c      	bpl.n	8000a2a <HAL_ADC_IRQHandler+0x232>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80009f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80009f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f6:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80009f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80009fa:	f043 0308 	orr.w	r3, r3, #8
 80009fe:	65a3      	str	r3, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8000a00:	6823      	ldr	r3, [r4, #0]
 8000a02:	f44f 6280 	mov.w	r2, #1024	; 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8000a06:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8000a08:	601a      	str	r2, [r3, #0]
}
 8000a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8000a0e:	f000 bae0 	b.w	8000fd2 <HAL_ADCEx_InjectedQueueOverflowCallback>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8000a12:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a18:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000a1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 8000a22:	4620      	mov	r0, r4
 8000a24:	f7ff fee6 	bl	80007f4 <HAL_ADC_ErrorCallback>
 8000a28:	e7db      	b.n	80009e2 <HAL_ADC_IRQHandler+0x1ea>
 8000a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a2e:	bf00      	nop
 8000a30:	50040300 	.word	0x50040300
 8000a34:	50040100 	.word	0x50040100
 8000a38:	50040000 	.word	0x50040000

08000a3c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a42:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000a46:	2b01      	cmp	r3, #1
{
 8000a48:	4605      	mov	r5, r0
 8000a4a:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 8000a4c:	f000 8187 	beq.w	8000d5e <HAL_ADC_ConfigChannel+0x322>
 8000a50:	2301      	movs	r3, #1
 8000a52:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000a56:	6800      	ldr	r0, [r0, #0]
 8000a58:	f7ff fde4 	bl	8000624 <LL_ADC_REG_IsConversionOngoing>
 8000a5c:	2800      	cmp	r0, #0
 8000a5e:	f040 8178 	bne.w	8000d52 <HAL_ADC_ConfigChannel+0x316>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8000a62:	684b      	ldr	r3, [r1, #4]
 8000a64:	2b05      	cmp	r3, #5
 8000a66:	d808      	bhi.n	8000a7a <HAL_ADC_ConfigChannel+0x3e>
    {
      switch (sConfig->Rank)
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	2b03      	cmp	r3, #3
 8000a6c:	d865      	bhi.n	8000b3a <HAL_ADC_ConfigChannel+0xfe>
 8000a6e:	e8df f003 	tbb	[pc, r3]
 8000a72:	5d02      	.short	0x5d02
 8000a74:	615f      	.short	0x615f
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8000a76:	230c      	movs	r3, #12
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8000a78:	6063      	str	r3, [r4, #4]
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000a7a:	6861      	ldr	r1, [r4, #4]
 8000a7c:	6828      	ldr	r0, [r5, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000a7e:	098e      	lsrs	r6, r1, #6
 8000a80:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8000a84:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 8000a88:	f001 011f 	and.w	r1, r1, #31
 8000a8c:	231f      	movs	r3, #31
 8000a8e:	fa03 f201 	lsl.w	r2, r3, r1
 8000a92:	59f3      	ldr	r3, [r6, r7]
 8000a94:	ea23 0302 	bic.w	r3, r3, r2
 8000a98:	6822      	ldr	r2, [r4, #0]
 8000a9a:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8000a9e:	408a      	lsls	r2, r1
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	51f3      	str	r3, [r6, r7]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000aa4:	f7ff fdbe 	bl	8000624 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000aa8:	682b      	ldr	r3, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000aaa:	689a      	ldr	r2, [r3, #8]
 8000aac:	0711      	lsls	r1, r2, #28
 8000aae:	f140 8158 	bpl.w	8000d62 <HAL_ADC_ConfigChannel+0x326>
    }
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ab2:	6828      	ldr	r0, [r5, #0]
 8000ab4:	f7ff fdb2 	bl	800061c <LL_ADC_IsEnabled>
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	f040 80d7 	bne.w	8000c6c <HAL_ADC_ConfigChannel+0x230>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000abe:	68e6      	ldr	r6, [r4, #12]
 8000ac0:	6828      	ldr	r0, [r5, #0]
 8000ac2:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8000ac4:	4ac3      	ldr	r2, [pc, #780]	; (8000dd4 <HAL_ADC_ConfigChannel+0x398>)
 8000ac6:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 8000aca:	f006 0e18 	and.w	lr, r6, #24
 8000ace:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8000ad2:	fa22 f20e 	lsr.w	r2, r2, lr
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	ea21 0107 	bic.w	r1, r1, r7
 8000adc:	430a      	orrs	r2, r1
 8000ade:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      
      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000ae2:	4abd      	ldr	r2, [pc, #756]	; (8000dd8 <HAL_ADC_ConfigChannel+0x39c>)
 8000ae4:	4296      	cmp	r6, r2
 8000ae6:	f040 80c1 	bne.w	8000c6c <HAL_ADC_ConfigChannel+0x230>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 8000aea:	2f00      	cmp	r7, #0
 8000aec:	f040 8093 	bne.w	8000c16 <HAL_ADC_ConfigChannel+0x1da>
 8000af0:	0e9e      	lsrs	r6, r3, #26
 8000af2:	3601      	adds	r6, #1
 8000af4:	f006 021f 	and.w	r2, r6, #31
 8000af8:	2a09      	cmp	r2, #9
 8000afa:	f04f 0101 	mov.w	r1, #1
 8000afe:	ea4f 6686 	mov.w	r6, r6, lsl #26
 8000b02:	f240 80a2 	bls.w	8000c4a <HAL_ADC_ConfigChannel+0x20e>
 8000b06:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8000b0a:	4091      	lsls	r1, r2
 8000b0c:	ea41 0206 	orr.w	r2, r1, r6
 8000b10:	2f00      	cmp	r7, #0
 8000b12:	f040 80cb 	bne.w	8000cac <HAL_ADC_ConfigChannel+0x270>
 8000b16:	0e9b      	lsrs	r3, r3, #26
 8000b18:	3301      	adds	r3, #1
 8000b1a:	f003 031f 	and.w	r3, r3, #31
 8000b1e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8000b22:	391e      	subs	r1, #30
 8000b24:	0509      	lsls	r1, r1, #20
 8000b26:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8000b2a:	e09b      	b.n	8000c64 <HAL_ADC_ConfigChannel+0x228>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8000b2c:	2312      	movs	r3, #18
 8000b2e:	e7a3      	b.n	8000a78 <HAL_ADC_ConfigChannel+0x3c>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8000b30:	2318      	movs	r3, #24
 8000b32:	e7a1      	b.n	8000a78 <HAL_ADC_ConfigChannel+0x3c>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8000b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b38:	e79e      	b.n	8000a78 <HAL_ADC_ConfigChannel+0x3c>
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8000b3a:	2306      	movs	r3, #6
 8000b3c:	e79c      	b.n	8000a78 <HAL_ADC_ConfigChannel+0x3c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000b3e:	f8de 1060 	ldr.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000b42:	f3c3 0012 	ubfx	r0, r3, #0, #19
 8000b46:	f3c1 6784 	ubfx	r7, r1, #26, #5
 8000b4a:	f10e 0664 	add.w	r6, lr, #100	; 0x64
 8000b4e:	2800      	cmp	r0, #0
 8000b50:	d13a      	bne.n	8000bc8 <HAL_ADC_ConfigChannel+0x18c>
 8000b52:	f3c3 6084 	ubfx	r0, r3, #26, #5
 8000b56:	4287      	cmp	r7, r0
 8000b58:	f040 8128 	bne.w	8000dac <HAL_ADC_ConfigChannel+0x370>
  MODIFY_REG(*preg,
 8000b5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000b60:	f8ce 1060 	str.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000b64:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000b66:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
 8000b6a:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8000b6e:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8000b72:	bb9f      	cbnz	r7, 8000bdc <HAL_ADC_ConfigChannel+0x1a0>
 8000b74:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8000b78:	4283      	cmp	r3, r0
 8000b7a:	f040 811c 	bne.w	8000db6 <HAL_ADC_ConfigChannel+0x37a>
  MODIFY_REG(*preg,
 8000b7e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000b82:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000b84:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000b86:	6891      	ldr	r1, [r2, #8]
 8000b88:	f3c3 0712 	ubfx	r7, r3, #0, #19
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b8c:	f102 0608 	add.w	r6, r2, #8
 8000b90:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8000b94:	bb77      	cbnz	r7, 8000bf4 <HAL_ADC_ConfigChannel+0x1b8>
 8000b96:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8000b9a:	4283      	cmp	r3, r0
 8000b9c:	f040 8112 	bne.w	8000dc4 <HAL_ADC_ConfigChannel+0x388>
  MODIFY_REG(*preg,
 8000ba0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000ba4:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000ba6:	6823      	ldr	r3, [r4, #0]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ba8:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000bac:	68d2      	ldr	r2, [r2, #12]
 8000bae:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8000bb2:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8000bb6:	bb4e      	cbnz	r6, 8000c0c <HAL_ADC_ConfigChannel+0x1d0>
 8000bb8:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8000bbc:	428b      	cmp	r3, r1
  MODIFY_REG(*preg,
 8000bbe:	bf04      	itt	eq
 8000bc0:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000bc4:	6002      	streq	r2, [r0, #0]
 8000bc6:	e774      	b.n	8000ab2 <HAL_ADC_ConfigChannel+0x76>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bc8:	fa93 f0a3 	rbit	r0, r3
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000bcc:	fab0 f080 	clz	r0, r0
 8000bd0:	4287      	cmp	r7, r0
 8000bd2:	d0c3      	beq.n	8000b5c <HAL_ADC_ConfigChannel+0x120>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000bd4:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000bd8:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8000bdc:	fa93 f3a3 	rbit	r3, r3
 8000be0:	fab3 f383 	clz	r3, r3
 8000be4:	4283      	cmp	r3, r0
 8000be6:	d0ca      	beq.n	8000b7e <HAL_ADC_ConfigChannel+0x142>
 8000be8:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000bea:	6823      	ldr	r3, [r4, #0]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bec:	f102 0608 	add.w	r6, r2, #8
 8000bf0:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8000bf4:	fa93 f3a3 	rbit	r3, r3
 8000bf8:	fab3 f383 	clz	r3, r3
 8000bfc:	4283      	cmp	r3, r0
 8000bfe:	d0cf      	beq.n	8000ba0 <HAL_ADC_ConfigChannel+0x164>
 8000c00:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000c04:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000c06:	6823      	ldr	r3, [r4, #0]
 8000c08:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8000c0c:	fa93 f3a3 	rbit	r3, r3
 8000c10:	fab3 f383 	clz	r3, r3
 8000c14:	e7d2      	b.n	8000bbc <HAL_ADC_ConfigChannel+0x180>
 8000c16:	fa93 f2a3 	rbit	r2, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	3201      	adds	r2, #1
 8000c20:	f002 021f 	and.w	r2, r2, #31
 8000c24:	2a09      	cmp	r2, #9
 8000c26:	d830      	bhi.n	8000c8a <HAL_ADC_ConfigChannel+0x24e>
 8000c28:	fa93 f6a3 	rbit	r6, r3
 8000c2c:	fab6 f686 	clz	r6, r6
 8000c30:	3601      	adds	r6, #1
 8000c32:	06b6      	lsls	r6, r6, #26
 8000c34:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8000c38:	fa93 f1a3 	rbit	r1, r3
 8000c3c:	fab1 f181 	clz	r1, r1
 8000c40:	3101      	adds	r1, #1
 8000c42:	f001 021f 	and.w	r2, r1, #31
 8000c46:	2101      	movs	r1, #1
 8000c48:	e001      	b.n	8000c4e <HAL_ADC_ConfigChannel+0x212>
 8000c4a:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8000c4e:	4091      	lsls	r1, r2
 8000c50:	ea41 0206 	orr.w	r2, r1, r6
 8000c54:	b9a7      	cbnz	r7, 8000c80 <HAL_ADC_ConfigChannel+0x244>
 8000c56:	0e99      	lsrs	r1, r3, #26
 8000c58:	3101      	adds	r1, #1
 8000c5a:	f001 011f 	and.w	r1, r1, #31
 8000c5e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000c62:	0509      	lsls	r1, r1, #20
 8000c64:	4311      	orrs	r1, r2
 8000c66:	68a2      	ldr	r2, [r4, #8]
 8000c68:	f7ff fcc6 	bl	80005f8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */
    
    if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000c6c:	6822      	ldr	r2, [r4, #0]
 8000c6e:	4b5b      	ldr	r3, [pc, #364]	; (8000ddc <HAL_ADC_ConfigChannel+0x3a0>)
 8000c70:	421a      	tst	r2, r3
 8000c72:	d120      	bne.n	8000cb6 <HAL_ADC_ConfigChannel+0x27a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c74:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c76:	2300      	movs	r3, #0
 8000c78:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
  
  /* Return function status */
  return tmp_hal_status;
}
 8000c7c:	b003      	add	sp, #12
 8000c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c80:	fa93 f1a3 	rbit	r1, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 8000c84:	fab1 f181 	clz	r1, r1
 8000c88:	e7e6      	b.n	8000c58 <HAL_ADC_ConfigChannel+0x21c>
 8000c8a:	fa93 f2a3 	rbit	r2, r3
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	3201      	adds	r2, #1
 8000c94:	0692      	lsls	r2, r2, #26
 8000c96:	f002 46f8 	and.w	r6, r2, #2080374784	; 0x7c000000
 8000c9a:	fa93 f1a3 	rbit	r1, r3
 8000c9e:	fab1 f181 	clz	r1, r1
 8000ca2:	3101      	adds	r1, #1
 8000ca4:	f001 021f 	and.w	r2, r1, #31
 8000ca8:	2101      	movs	r1, #1
 8000caa:	e72e      	b.n	8000b0a <HAL_ADC_ConfigChannel+0xce>
 8000cac:	fa93 f3a3 	rbit	r3, r3
 8000cb0:	fab3 f383 	clz	r3, r3
 8000cb4:	e730      	b.n	8000b18 <HAL_ADC_ConfigChannel+0xdc>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000cb6:	494a      	ldr	r1, [pc, #296]	; (8000de0 <HAL_ADC_ConfigChannel+0x3a4>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000cb8:	4b4a      	ldr	r3, [pc, #296]	; (8000de4 <HAL_ADC_ConfigChannel+0x3a8>)
 8000cba:	6888      	ldr	r0, [r1, #8]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8000cc2:	460c      	mov	r4, r1
 8000cc4:	d11e      	bne.n	8000d04 <HAL_ADC_ConfigChannel+0x2c8>
 8000cc6:	0202      	lsls	r2, r0, #8
 8000cc8:	d4d4      	bmi.n	8000c74 <HAL_ADC_ConfigChannel+0x238>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 8000cca:	682b      	ldr	r3, [r5, #0]
 8000ccc:	4a46      	ldr	r2, [pc, #280]	; (8000de8 <HAL_ADC_ConfigChannel+0x3ac>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d003      	beq.n	8000cda <HAL_ADC_ConfigChannel+0x29e>
 8000cd2:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d1cc      	bne.n	8000c74 <HAL_ADC_ConfigChannel+0x238>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000cda:	68a3      	ldr	r3, [r4, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000cdc:	4a43      	ldr	r2, [pc, #268]	; (8000dec <HAL_ADC_ConfigChannel+0x3b0>)
 8000cde:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8000ce2:	4333      	orrs	r3, r6
 8000ce4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ce8:	60a3      	str	r3, [r4, #8]
 8000cea:	4b41      	ldr	r3, [pc, #260]	; (8000df0 <HAL_ADC_ConfigChannel+0x3b4>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	fbb3 f2f2 	udiv	r2, r3, r2
 8000cf2:	230c      	movs	r3, #12
 8000cf4:	4353      	muls	r3, r2
            wait_loop_index--;
 8000cf6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0UL)
 8000cf8:	9b01      	ldr	r3, [sp, #4]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d0ba      	beq.n	8000c74 <HAL_ADC_ConfigChannel+0x238>
            wait_loop_index--;
 8000cfe:	9b01      	ldr	r3, [sp, #4]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	e7f8      	b.n	8000cf6 <HAL_ADC_ConfigChannel+0x2ba>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000d04:	4b3b      	ldr	r3, [pc, #236]	; (8000df4 <HAL_ADC_ConfigChannel+0x3b8>)
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d111      	bne.n	8000d2e <HAL_ADC_ConfigChannel+0x2f2>
 8000d0a:	01c3      	lsls	r3, r0, #7
 8000d0c:	d4b2      	bmi.n	8000c74 <HAL_ADC_ConfigChannel+0x238>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8000d0e:	682b      	ldr	r3, [r5, #0]
 8000d10:	4a35      	ldr	r2, [pc, #212]	; (8000de8 <HAL_ADC_ConfigChannel+0x3ac>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d003      	beq.n	8000d1e <HAL_ADC_ConfigChannel+0x2e2>
 8000d16:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d1aa      	bne.n	8000c74 <HAL_ADC_ConfigChannel+0x238>
 8000d1e:	68a3      	ldr	r3, [r4, #8]
 8000d20:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8000d24:	4333      	orrs	r3, r6
 8000d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d2a:	60a3      	str	r3, [r4, #8]
 8000d2c:	e7a2      	b.n	8000c74 <HAL_ADC_ConfigChannel+0x238>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000d2e:	4b32      	ldr	r3, [pc, #200]	; (8000df8 <HAL_ADC_ConfigChannel+0x3bc>)
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d19f      	bne.n	8000c74 <HAL_ADC_ConfigChannel+0x238>
 8000d34:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8000d38:	d19c      	bne.n	8000c74 <HAL_ADC_ConfigChannel+0x238>
        if (ADC_VREFINT_INSTANCE(hadc))
 8000d3a:	682a      	ldr	r2, [r5, #0]
 8000d3c:	4b2a      	ldr	r3, [pc, #168]	; (8000de8 <HAL_ADC_ConfigChannel+0x3ac>)
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d198      	bne.n	8000c74 <HAL_ADC_ConfigChannel+0x238>
 8000d42:	688b      	ldr	r3, [r1, #8]
 8000d44:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8000d48:	4333      	orrs	r3, r6
 8000d4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d4e:	608b      	str	r3, [r1, #8]
 8000d50:	e791      	b.n	8000c76 <HAL_ADC_ConfigChannel+0x23a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d52:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8000d54:	f042 0220 	orr.w	r2, r2, #32
 8000d58:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	e78b      	b.n	8000c76 <HAL_ADC_ConfigChannel+0x23a>
  __HAL_LOCK(hadc);
 8000d5e:	2002      	movs	r0, #2
 8000d60:	e78c      	b.n	8000c7c <HAL_ADC_ConfigChannel+0x240>
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000d62:	2800      	cmp	r0, #0
 8000d64:	f47f aea5 	bne.w	8000ab2 <HAL_ADC_ConfigChannel+0x76>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000d68:	68a2      	ldr	r2, [r4, #8]
 8000d6a:	6821      	ldr	r1, [r4, #0]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fc43 	bl	80005f8 <LL_ADC_SetChannelSamplingTime>
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000d72:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000d74:	f8d5 e000 	ldr.w	lr, [r5]
 8000d78:	6823      	ldr	r3, [r4, #0]
 8000d7a:	f8de 100c 	ldr.w	r1, [lr, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000d7e:	2e04      	cmp	r6, #4
 8000d80:	f10e 0260 	add.w	r2, lr, #96	; 0x60
 8000d84:	f43f aedb 	beq.w	8000b3e <HAL_ADC_ConfigChannel+0x102>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000d88:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8000d8c:	0048      	lsls	r0, r1, #1
 8000d8e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 8000d90:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8000d94:	4081      	lsls	r1, r0
 8000d96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d9a:	4319      	orrs	r1, r3
 8000d9c:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <HAL_ADC_ConfigChannel+0x3c0>)
 8000da2:	4003      	ands	r3, r0
 8000da4:	4319      	orrs	r1, r3
 8000da6:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
 8000daa:	e682      	b.n	8000ab2 <HAL_ADC_ConfigChannel+0x76>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000dac:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000db0:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8000db4:	e6de      	b.n	8000b74 <HAL_ADC_ConfigChannel+0x138>
 8000db6:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000db8:	6823      	ldr	r3, [r4, #0]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dba:	f102 0608 	add.w	r6, r2, #8
 8000dbe:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8000dc2:	e6e8      	b.n	8000b96 <HAL_ADC_ConfigChannel+0x15a>
 8000dc4:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000dc8:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000dca:	6823      	ldr	r3, [r4, #0]
 8000dcc:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8000dd0:	e6f2      	b.n	8000bb8 <HAL_ADC_ConfigChannel+0x17c>
 8000dd2:	bf00      	nop
 8000dd4:	0007ffff 	.word	0x0007ffff
 8000dd8:	407f0000 	.word	0x407f0000
 8000ddc:	80080000 	.word	0x80080000
 8000de0:	50040300 	.word	0x50040300
 8000de4:	c7520000 	.word	0xc7520000
 8000de8:	50040000 	.word	0x50040000
 8000dec:	00030d40 	.word	0x00030d40
 8000df0:	20000020 	.word	0x20000020
 8000df4:	cb840000 	.word	0xcb840000
 8000df8:	80000001 	.word	0x80000001
 8000dfc:	03fff000 	.word	0x03fff000

08000e00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000e00:	b570      	push	{r4, r5, r6, lr}
 8000e02:	4604      	mov	r4, r0
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e04:	6800      	ldr	r0, [r0, #0]
 8000e06:	f7ff fc09 	bl	800061c <LL_ADC_IsEnabled>
 8000e0a:	b108      	cbz	r0, 8000e10 <ADC_Enable+0x10>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8000e10:	6822      	ldr	r2, [r4, #0]
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <ADC_Enable+0x68>)
 8000e14:	6891      	ldr	r1, [r2, #8]
 8000e16:	4219      	tst	r1, r3
 8000e18:	d009      	beq.n	8000e2e <ADC_Enable+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e1a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e1c:	f043 0310 	orr.w	r3, r3, #16
 8000e20:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8000e2e:	6893      	ldr	r3, [r2, #8]
 8000e30:	4d0e      	ldr	r5, [pc, #56]	; (8000e6c <ADC_Enable+0x6c>)
 8000e32:	402b      	ands	r3, r5
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8000e3a:	f7ff fbd7 	bl	80005ec <HAL_GetTick>
 8000e3e:	4606      	mov	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8000e40:	6820      	ldr	r0, [r4, #0]
 8000e42:	6803      	ldr	r3, [r0, #0]
 8000e44:	07db      	lsls	r3, r3, #31
 8000e46:	d4e1      	bmi.n	8000e0c <ADC_Enable+0xc>
      if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e48:	f7ff fbe8 	bl	800061c <LL_ADC_IsEnabled>
 8000e4c:	b928      	cbnz	r0, 8000e5a <ADC_Enable+0x5a>
        LL_ADC_Enable(hadc->Instance);
 8000e4e:	6822      	ldr	r2, [r4, #0]
 8000e50:	6893      	ldr	r3, [r2, #8]
 8000e52:	402b      	ands	r3, r5
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6093      	str	r3, [r2, #8]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e5a:	f7ff fbc7 	bl	80005ec <HAL_GetTick>
 8000e5e:	1b80      	subs	r0, r0, r6
 8000e60:	2802      	cmp	r0, #2
 8000e62:	d9ed      	bls.n	8000e40 <ADC_Enable+0x40>
 8000e64:	e7d9      	b.n	8000e1a <ADC_Enable+0x1a>
 8000e66:	bf00      	nop
 8000e68:	8000003f 	.word	0x8000003f
 8000e6c:	7fffffc0 	.word	0x7fffffc0

08000e70 <HAL_ADC_Start_IT>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000e70:	4b50      	ldr	r3, [pc, #320]	; (8000fb4 <HAL_ADC_Start_IT+0x144>)
{
 8000e72:	b570      	push	{r4, r5, r6, lr}
 8000e74:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e76:	6800      	ldr	r0, [r0, #0]
 8000e78:	689e      	ldr	r6, [r3, #8]
 8000e7a:	f7ff fbd3 	bl	8000624 <LL_ADC_REG_IsConversionOngoing>
 8000e7e:	4605      	mov	r5, r0
 8000e80:	2800      	cmp	r0, #0
 8000e82:	f040 8090 	bne.w	8000fa6 <HAL_ADC_Start_IT+0x136>
    __HAL_LOCK(hadc);
 8000e86:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	f000 808b 	beq.w	8000fa6 <HAL_ADC_Start_IT+0x136>
 8000e90:	2301      	movs	r3, #1
 8000e92:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 8000e96:	4620      	mov	r0, r4
 8000e98:	f7ff ffb2 	bl	8000e00 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000e9c:	2800      	cmp	r0, #0
 8000e9e:	d17f      	bne.n	8000fa0 <HAL_ADC_Start_IT+0x130>
      ADC_STATE_CLR_SET(hadc->State,
 8000ea0:	6d63      	ldr	r3, [r4, #84]	; 0x54
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000ea2:	4a45      	ldr	r2, [pc, #276]	; (8000fb8 <HAL_ADC_Start_IT+0x148>)
      ADC_STATE_CLR_SET(hadc->State,
 8000ea4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ea8:	f023 0301 	bic.w	r3, r3, #1
 8000eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb0:	6563      	str	r3, [r4, #84]	; 0x54
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000eb2:	6823      	ldr	r3, [r4, #0]
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	f006 011f 	and.w	r1, r6, #31
 8000eba:	d076      	beq.n	8000faa <HAL_ADC_Start_IT+0x13a>
 8000ebc:	461e      	mov	r6, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ebe:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000ec0:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000ec4:	6562      	str	r2, [r4, #84]	; 0x54
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000ec6:	6d62      	ldr	r2, [r4, #84]	; 0x54
      switch(hadc->Init.EOCSelection)
 8000ec8:	6965      	ldr	r5, [r4, #20]
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000eca:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR|HAL_ADC_ERROR_DMA));         
 8000ece:	bf1c      	itt	ne
 8000ed0:	6da2      	ldrne	r2, [r4, #88]	; 0x58
 8000ed2:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc); 
 8000ed6:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000ed8:	221c      	movs	r2, #28
 8000eda:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 8000edc:	2200      	movs	r2, #0
 8000ede:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	f022 021c 	bic.w	r2, r2, #28
 8000ee8:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8000eea:	685a      	ldr	r2, [r3, #4]
      switch(hadc->Init.EOCSelection)
 8000eec:	2d08      	cmp	r5, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8000eee:	bf0c      	ite	eq
 8000ef0:	f042 0208 	orreq.w	r2, r2, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000ef4:	f042 0204 	orrne.w	r2, r2, #4
 8000ef8:	605a      	str	r2, [r3, #4]
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000efa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000efc:	b91a      	cbnz	r2, 8000f06 <HAL_ADC_Start_IT+0x96>
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);  
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	f042 0210 	orr.w	r2, r2, #16
 8000f04:	605a      	str	r2, [r3, #4]
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000f06:	42b3      	cmp	r3, r6
 8000f08:	d008      	beq.n	8000f1c <HAL_ADC_Start_IT+0xac>
           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000f0a:	2909      	cmp	r1, #9
 8000f0c:	bf9d      	ittte	ls
 8000f0e:	f240 2221 	movwls	r2, #545	; 0x221
 8000f12:	40ca      	lsrls	r2, r1
 8000f14:	43d2      	mvnls	r2, r2
 8000f16:	2201      	movhi	r2, #1
 8000f18:	07d2      	lsls	r2, r2, #31
 8000f1a:	d422      	bmi.n	8000f62 <HAL_ADC_Start_IT+0xf2>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000f1c:	68da      	ldr	r2, [r3, #12]
 8000f1e:	0191      	lsls	r1, r2, #6
 8000f20:	d516      	bpl.n	8000f50 <HAL_ADC_Start_IT+0xe0>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f22:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000f24:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000f28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f2c:	6562      	str	r2, [r4, #84]	; 0x54
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000f2e:	685a      	ldr	r2, [r3, #4]
          switch(hadc->Init.EOCSelection)
 8000f30:	2d08      	cmp	r5, #8
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000f32:	bf0b      	itete	eq
 8000f34:	f022 0220 	biceq.w	r2, r2, #32
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);      
 8000f38:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000f3c:	605a      	streq	r2, [r3, #4]
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);      
 8000f3e:	605a      	strne	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8000f40:	bf0b      	itete	eq
 8000f42:	685a      	ldreq	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8000f44:	685a      	ldrne	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8000f46:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8000f4a:	f042 0220 	orrne.w	r2, r2, #32
 8000f4e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->CR,
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000f56:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8000f5a:	f042 0204 	orr.w	r2, r2, #4
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f62:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000f64:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f68:	6562      	str	r2, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000f6a:	68f2      	ldr	r2, [r6, #12]
 8000f6c:	0192      	lsls	r2, r2, #6
 8000f6e:	d520      	bpl.n	8000fb2 <HAL_ADC_Start_IT+0x142>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f70:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000f72:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000f76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f7a:	6562      	str	r2, [r4, #84]	; 0x54
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000f7c:	685a      	ldr	r2, [r3, #4]
          switch(hadc->Init.EOCSelection)
 8000f7e:	2d08      	cmp	r5, #8
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000f80:	bf0b      	itete	eq
 8000f82:	f022 0220 	biceq.w	r2, r2, #32
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8000f86:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000f8a:	605a      	streq	r2, [r3, #4]
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8000f8c:	605a      	strne	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8000f8e:	bf0b      	itete	eq
 8000f90:	685a      	ldreq	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8000f92:	685a      	ldrne	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8000f94:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8000f98:	f042 0220 	orrne.w	r2, r2, #32
 8000f9c:	605a      	str	r2, [r3, #4]
            break;
 8000f9e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 8000fa0:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8000fa4:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = HAL_BUSY;
 8000fa6:	2002      	movs	r0, #2
 8000fa8:	bd70      	pop	{r4, r5, r6, pc}
      if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000faa:	4e04      	ldr	r6, [pc, #16]	; (8000fbc <HAL_ADC_Start_IT+0x14c>)
           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000fac:	2900      	cmp	r1, #0
 8000fae:	d086      	beq.n	8000ebe <HAL_ADC_Start_IT+0x4e>
 8000fb0:	e789      	b.n	8000ec6 <HAL_ADC_Start_IT+0x56>
}
 8000fb2:	bd70      	pop	{r4, r5, r6, pc}
 8000fb4:	50040300 	.word	0x50040300
 8000fb8:	50040100 	.word	0x50040100
 8000fbc:	50040000 	.word	0x50040000

08000fc0 <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fc0:	6880      	ldr	r0, [r0, #8]
}
 8000fc2:	f000 0001 	and.w	r0, r0, #1
 8000fc6:	4770      	bx	lr

08000fc8 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fc8:	6880      	ldr	r0, [r0, #8]
}
 8000fca:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8000fce:	4770      	bx	lr

08000fd0 <HAL_ADCEx_InjectedConvCpltCallback>:
 8000fd0:	4770      	bx	lr

08000fd2 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8000fd2:	4770      	bx	lr

08000fd4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8000fd4:	4770      	bx	lr

08000fd6 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8000fd6:	4770      	bx	lr

08000fd8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef* hadc)
{
 8000fd8:	4770      	bx	lr
	...

08000fdc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8000fdc:	b530      	push	{r4, r5, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fde:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000fe2:	2b01      	cmp	r3, #1
{
 8000fe4:	b09b      	sub	sp, #108	; 0x6c
 8000fe6:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8000fe8:	d066      	beq.n	80010b8 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
 8000fea:	2301      	movs	r3, #1
 8000fec:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000ff0:	4b32      	ldr	r3, [pc, #200]	; (80010bc <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8000ff2:	6800      	ldr	r0, [r0, #0]
 8000ff4:	4298      	cmp	r0, r3
 8000ff6:	bf0c      	ite	eq
 8000ff8:	f503 7380 	addeq.w	r3, r3, #256	; 0x100
 8000ffc:	2300      	movne	r3, #0
 8000ffe:	9301      	str	r3, [sp, #4]
  
  if (tmphadcSlave.Instance == NULL)
 8001000:	9801      	ldr	r0, [sp, #4]
 8001002:	b940      	cbnz	r0, 8001016 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001004:	6d53      	ldr	r3, [r2, #84]	; 0x54
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001006:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800100a:	f043 0320 	orr.w	r3, r3, #32
 800100e:	6553      	str	r3, [r2, #84]	; 0x54
    
    return HAL_ERROR;
 8001010:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
} 
 8001012:	b01b      	add	sp, #108	; 0x6c
 8001014:	bd30      	pop	{r4, r5, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001016:	f7ff ffd7 	bl	8000fc8 <LL_ADC_REG_IsConversionOngoing>
 800101a:	4603      	mov	r3, r0
  if ( (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL) 
 800101c:	6810      	ldr	r0, [r2, #0]
 800101e:	f7ff ffd3 	bl	8000fc8 <LL_ADC_REG_IsConversionOngoing>
 8001022:	2800      	cmp	r0, #0
 8001024:	d142      	bne.n	80010ac <HAL_ADCEx_MultiModeConfigChannel+0xd0>
    && (tmphadcSlave_conversion_on_going == 0UL) )
 8001026:	2b00      	cmp	r3, #0
 8001028:	d140      	bne.n	80010ac <HAL_ADCEx_MultiModeConfigChannel+0xd0>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800102a:	680b      	ldr	r3, [r1, #0]
 800102c:	4c24      	ldr	r4, [pc, #144]	; (80010c0 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 800102e:	b333      	cbz	r3, 800107e <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG, 
 8001030:	68a3      	ldr	r3, [r4, #8]
 8001032:	6848      	ldr	r0, [r1, #4]
 8001034:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001038:	4303      	orrs	r3, r0
 800103a:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 800103e:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 8001042:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001044:	481d      	ldr	r0, [pc, #116]	; (80010bc <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8001046:	f7ff ffbb 	bl	8000fc0 <LL_ADC_IsEnabled>
 800104a:	4603      	mov	r3, r0
 800104c:	481d      	ldr	r0, [pc, #116]	; (80010c4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 800104e:	f7ff ffb7 	bl	8000fc0 <LL_ADC_IsEnabled>
 8001052:	4303      	orrs	r3, r0
 8001054:	481c      	ldr	r0, [pc, #112]	; (80010c8 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8001056:	f7ff ffb3 	bl	8000fc0 <LL_ADC_IsEnabled>
 800105a:	4318      	orrs	r0, r3
 800105c:	d004      	beq.n	8001068 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800105e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001060:	2300      	movs	r3, #0
 8001062:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 8001066:	e7d4      	b.n	8001012 <HAL_ADCEx_MultiModeConfigChannel+0x36>
          MODIFY_REG(tmpADC_Common->CCR,
 8001068:	680b      	ldr	r3, [r1, #0]
 800106a:	68a5      	ldr	r5, [r4, #8]
 800106c:	6889      	ldr	r1, [r1, #8]
 800106e:	430b      	orrs	r3, r1
 8001070:	f425 6171 	bic.w	r1, r5, #3856	; 0xf10
 8001074:	f021 010f 	bic.w	r1, r1, #15
 8001078:	430b      	orrs	r3, r1
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800107a:	60a3      	str	r3, [r4, #8]
 800107c:	e7f0      	b.n	8001060 <HAL_ADCEx_MultiModeConfigChannel+0x84>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800107e:	68a3      	ldr	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001080:	480e      	ldr	r0, [pc, #56]	; (80010bc <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001082:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001086:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001088:	f7ff ff9a 	bl	8000fc0 <LL_ADC_IsEnabled>
 800108c:	4603      	mov	r3, r0
 800108e:	480d      	ldr	r0, [pc, #52]	; (80010c4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 8001090:	f7ff ff96 	bl	8000fc0 <LL_ADC_IsEnabled>
 8001094:	4303      	orrs	r3, r0
 8001096:	480c      	ldr	r0, [pc, #48]	; (80010c8 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8001098:	f7ff ff92 	bl	8000fc0 <LL_ADC_IsEnabled>
 800109c:	4318      	orrs	r0, r3
 800109e:	d1de      	bne.n	800105e <HAL_ADCEx_MultiModeConfigChannel+0x82>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80010a0:	68a3      	ldr	r3, [r4, #8]
 80010a2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80010a6:	f023 030f 	bic.w	r3, r3, #15
 80010aa:	e7e6      	b.n	800107a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010ac:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80010ae:	f043 0320 	orr.w	r3, r3, #32
 80010b2:	6553      	str	r3, [r2, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80010b4:	2001      	movs	r0, #1
 80010b6:	e7d3      	b.n	8001060 <HAL_ADCEx_MultiModeConfigChannel+0x84>
  __HAL_LOCK(hadc);
 80010b8:	2002      	movs	r0, #2
 80010ba:	e7aa      	b.n	8001012 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80010bc:	50040000 	.word	0x50040000
 80010c0:	50040300 	.word	0x50040300
 80010c4:	50040100 	.word	0x50040100
 80010c8:	50040200 	.word	0x50040200

080010cc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010cc:	4a07      	ldr	r2, [pc, #28]	; (80010ec <HAL_NVIC_SetPriorityGrouping+0x20>)
 80010ce:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010d4:	041b      	lsls	r3, r3, #16
 80010d6:	0c1b      	lsrs	r3, r3, #16
 80010d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80010dc:	0200      	lsls	r0, r0, #8
 80010de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80010e6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80010e8:	60d3      	str	r3, [r2, #12]
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b17      	ldr	r3, [pc, #92]	; (8001150 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f2:	b530      	push	{r4, r5, lr}
 80010f4:	68dc      	ldr	r4, [r3, #12]
 80010f6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010fa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fe:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001100:	2b04      	cmp	r3, #4
 8001102:	bf28      	it	cs
 8001104:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001106:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	f04f 0501 	mov.w	r5, #1
 800110c:	fa05 f303 	lsl.w	r3, r5, r3
 8001110:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001114:	bf8c      	ite	hi
 8001116:	3c03      	subhi	r4, #3
 8001118:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111a:	4019      	ands	r1, r3
 800111c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800111e:	fa05 f404 	lsl.w	r4, r5, r4
 8001122:	3c01      	subs	r4, #1
 8001124:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001126:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	ea42 0201 	orr.w	r2, r2, r1
 800112c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	bfaf      	iteee	ge
 8001132:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001136:	f000 000f 	andlt.w	r0, r0, #15
 800113a:	4b06      	ldrlt	r3, [pc, #24]	; (8001154 <HAL_NVIC_SetPriority+0x64>)
 800113c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	bfa5      	ittet	ge
 8001140:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001144:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001146:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800114c:	bd30      	pop	{r4, r5, pc}
 800114e:	bf00      	nop
 8001150:	e000ed00 	.word	0xe000ed00
 8001154:	e000ed14 	.word	0xe000ed14

08001158 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001158:	0942      	lsrs	r2, r0, #5
 800115a:	2301      	movs	r3, #1
 800115c:	f000 001f 	and.w	r0, r0, #31
 8001160:	fa03 f000 	lsl.w	r0, r3, r0
 8001164:	4b01      	ldr	r3, [pc, #4]	; (800116c <HAL_NVIC_EnableIRQ+0x14>)
 8001166:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100

08001170 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001170:	3801      	subs	r0, #1
 8001172:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001176:	d20a      	bcs.n	800118e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117a:	4a07      	ldr	r2, [pc, #28]	; (8001198 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117e:	21f0      	movs	r1, #240	; 0xf0
 8001180:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001184:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001186:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001188:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800118e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000e010 	.word	0xe000e010
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800119c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011a0:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a4:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001350 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011a8:	4c67      	ldr	r4, [pc, #412]	; (8001348 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011aa:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 80011ac:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ae:	9a01      	ldr	r2, [sp, #4]
 80011b0:	40da      	lsrs	r2, r3
 80011b2:	d102      	bne.n	80011ba <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 80011b4:	b005      	add	sp, #20
 80011b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011ba:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 80011bc:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011be:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 80011c0:	ea12 0e06 	ands.w	lr, r2, r6
 80011c4:	f000 80b1 	beq.w	800132a <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011c8:	684a      	ldr	r2, [r1, #4]
 80011ca:	f022 0710 	bic.w	r7, r2, #16
 80011ce:	2f02      	cmp	r7, #2
 80011d0:	d116      	bne.n	8001200 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 80011d2:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80011d6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011da:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80011de:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011e2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80011e6:	f04f 0c0f 	mov.w	ip, #15
 80011ea:	fa0c fc0a 	lsl.w	ip, ip, sl
 80011ee:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011f2:	690d      	ldr	r5, [r1, #16]
 80011f4:	fa05 f50a 	lsl.w	r5, r5, sl
 80011f8:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 80011fc:	f8c9 5020 	str.w	r5, [r9, #32]
 8001200:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001204:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001206:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800120a:	fa05 f50c 	lsl.w	r5, r5, ip
 800120e:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001210:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001214:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001218:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800121c:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800121e:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001222:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001224:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001228:	d811      	bhi.n	800124e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800122a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800122c:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001230:	68cf      	ldr	r7, [r1, #12]
 8001232:	fa07 f70c 	lsl.w	r7, r7, ip
 8001236:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 800123a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800123c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800123e:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001242:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8001246:	409f      	lsls	r7, r3
 8001248:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 800124c:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800124e:	f1ba 0f03 	cmp.w	sl, #3
 8001252:	d107      	bne.n	8001264 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8001254:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001256:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800125a:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 800125e:	409f      	lsls	r7, r3
 8001260:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8001262:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8001264:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001266:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001268:	688e      	ldr	r6, [r1, #8]
 800126a:	fa06 f60c 	lsl.w	r6, r6, ip
 800126e:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8001270:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001272:	00d5      	lsls	r5, r2, #3
 8001274:	d559      	bpl.n	800132a <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800127a:	f045 0501 	orr.w	r5, r5, #1
 800127e:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8001282:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8001286:	f023 0603 	bic.w	r6, r3, #3
 800128a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800128e:	f005 0501 	and.w	r5, r5, #1
 8001292:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8001296:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001298:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129c:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 800129e:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012a0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80012a4:	270f      	movs	r7, #15
 80012a6:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012aa:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012ae:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012b2:	d03c      	beq.n	800132e <HAL_GPIO_Init+0x192>
 80012b4:	4d25      	ldr	r5, [pc, #148]	; (800134c <HAL_GPIO_Init+0x1b0>)
 80012b6:	42a8      	cmp	r0, r5
 80012b8:	d03b      	beq.n	8001332 <HAL_GPIO_Init+0x196>
 80012ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012be:	42a8      	cmp	r0, r5
 80012c0:	d039      	beq.n	8001336 <HAL_GPIO_Init+0x19a>
 80012c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012c6:	42a8      	cmp	r0, r5
 80012c8:	d037      	beq.n	800133a <HAL_GPIO_Init+0x19e>
 80012ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012ce:	42a8      	cmp	r0, r5
 80012d0:	d035      	beq.n	800133e <HAL_GPIO_Init+0x1a2>
 80012d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012d6:	42a8      	cmp	r0, r5
 80012d8:	d033      	beq.n	8001342 <HAL_GPIO_Init+0x1a6>
 80012da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012de:	42a8      	cmp	r0, r5
 80012e0:	bf14      	ite	ne
 80012e2:	2507      	movne	r5, #7
 80012e4:	2506      	moveq	r5, #6
 80012e6:	fa05 f50c 	lsl.w	r5, r5, ip
 80012ea:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012ec:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 80012ee:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80012f0:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012f4:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 80012f6:	bf54      	ite	pl
 80012f8:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80012fa:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 80012fe:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8001300:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001302:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8001304:	bf54      	ite	pl
 8001306:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001308:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 800130c:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 800130e:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001310:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8001312:	bf54      	ite	pl
 8001314:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001316:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 800131a:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 800131c:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800131e:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8001320:	bf54      	ite	pl
 8001322:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001324:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8001328:	60e5      	str	r5, [r4, #12]
    position++;
 800132a:	3301      	adds	r3, #1
 800132c:	e73f      	b.n	80011ae <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800132e:	2500      	movs	r5, #0
 8001330:	e7d9      	b.n	80012e6 <HAL_GPIO_Init+0x14a>
 8001332:	2501      	movs	r5, #1
 8001334:	e7d7      	b.n	80012e6 <HAL_GPIO_Init+0x14a>
 8001336:	2502      	movs	r5, #2
 8001338:	e7d5      	b.n	80012e6 <HAL_GPIO_Init+0x14a>
 800133a:	2503      	movs	r5, #3
 800133c:	e7d3      	b.n	80012e6 <HAL_GPIO_Init+0x14a>
 800133e:	2504      	movs	r5, #4
 8001340:	e7d1      	b.n	80012e6 <HAL_GPIO_Init+0x14a>
 8001342:	2505      	movs	r5, #5
 8001344:	e7cf      	b.n	80012e6 <HAL_GPIO_Init+0x14a>
 8001346:	bf00      	nop
 8001348:	40010400 	.word	0x40010400
 800134c:	48000400 	.word	0x48000400
 8001350:	40021000 	.word	0x40021000

08001354 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001354:	6803      	ldr	r3, [r0, #0]
 8001356:	699a      	ldr	r2, [r3, #24]
 8001358:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 800135a:	bf44      	itt	mi
 800135c:	2200      	movmi	r2, #0
 800135e:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001360:	699a      	ldr	r2, [r3, #24]
 8001362:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001364:	bf5e      	ittt	pl
 8001366:	699a      	ldrpl	r2, [r3, #24]
 8001368:	f042 0201 	orrpl.w	r2, r2, #1
 800136c:	619a      	strpl	r2, [r3, #24]
 800136e:	4770      	bx	lr

08001370 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001370:	b530      	push	{r4, r5, lr}
 8001372:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001374:	6805      	ldr	r5, [r0, #0]
 8001376:	4323      	orrs	r3, r4
 8001378:	0d64      	lsrs	r4, r4, #21
 800137a:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 800137e:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8001382:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8001386:	6868      	ldr	r0, [r5, #4]
 8001388:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800138c:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8001390:	4319      	orrs	r1, r3
 8001392:	f044 0403 	orr.w	r4, r4, #3
 8001396:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800139a:	ea20 0404 	bic.w	r4, r0, r4
 800139e:	4321      	orrs	r1, r4
 80013a0:	6069      	str	r1, [r5, #4]
 80013a2:	bd30      	pop	{r4, r5, pc}

080013a4 <I2C_WaitOnFlagUntilTimeout>:
{
 80013a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013a8:	9f06      	ldr	r7, [sp, #24]
 80013aa:	4604      	mov	r4, r0
 80013ac:	4688      	mov	r8, r1
 80013ae:	4616      	mov	r6, r2
 80013b0:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013b2:	6822      	ldr	r2, [r4, #0]
 80013b4:	6993      	ldr	r3, [r2, #24]
 80013b6:	ea38 0303 	bics.w	r3, r8, r3
 80013ba:	bf0c      	ite	eq
 80013bc:	2301      	moveq	r3, #1
 80013be:	2300      	movne	r3, #0
 80013c0:	42b3      	cmp	r3, r6
 80013c2:	d002      	beq.n	80013ca <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80013c4:	2000      	movs	r0, #0
}
 80013c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80013ca:	1c6b      	adds	r3, r5, #1
 80013cc:	d0f2      	beq.n	80013b4 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013ce:	f7ff f90d 	bl	80005ec <HAL_GetTick>
 80013d2:	1bc0      	subs	r0, r0, r7
 80013d4:	4285      	cmp	r5, r0
 80013d6:	d301      	bcc.n	80013dc <I2C_WaitOnFlagUntilTimeout+0x38>
 80013d8:	2d00      	cmp	r5, #0
 80013da:	d1ea      	bne.n	80013b2 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013de:	f043 0320 	orr.w	r3, r3, #32
 80013e2:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80013e4:	2320      	movs	r3, #32
 80013e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80013f0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80013f4:	2001      	movs	r0, #1
 80013f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080013fa <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013fa:	6803      	ldr	r3, [r0, #0]
{
 80013fc:	b570      	push	{r4, r5, r6, lr}
 80013fe:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001400:	6998      	ldr	r0, [r3, #24]
 8001402:	f010 0010 	ands.w	r0, r0, #16
{
 8001406:	460d      	mov	r5, r1
 8001408:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800140a:	d116      	bne.n	800143a <I2C_IsAcknowledgeFailed+0x40>
 800140c:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 800140e:	1c69      	adds	r1, r5, #1
 8001410:	d014      	beq.n	800143c <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001412:	f7ff f8eb 	bl	80005ec <HAL_GetTick>
 8001416:	1b80      	subs	r0, r0, r6
 8001418:	4285      	cmp	r5, r0
 800141a:	d300      	bcc.n	800141e <I2C_IsAcknowledgeFailed+0x24>
 800141c:	b96d      	cbnz	r5, 800143a <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800141e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001420:	f043 0320 	orr.w	r3, r3, #32
 8001424:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001426:	2320      	movs	r3, #32
 8001428:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800142c:	2300      	movs	r3, #0
 800142e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001432:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8001436:	2001      	movs	r0, #1
}
 8001438:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800143a:	6823      	ldr	r3, [r4, #0]
 800143c:	6999      	ldr	r1, [r3, #24]
 800143e:	068a      	lsls	r2, r1, #26
 8001440:	d5e5      	bpl.n	800140e <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001442:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001444:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001446:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001448:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800144a:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800144c:	f7ff ff82 	bl	8001354 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001450:	6822      	ldr	r2, [r4, #0]
 8001452:	6853      	ldr	r3, [r2, #4]
 8001454:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001458:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800145c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001460:	f023 0301 	bic.w	r3, r3, #1
 8001464:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001466:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800146e:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8001472:	e7db      	b.n	800142c <I2C_IsAcknowledgeFailed+0x32>

08001474 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001474:	b570      	push	{r4, r5, r6, lr}
 8001476:	4604      	mov	r4, r0
 8001478:	460d      	mov	r5, r1
 800147a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800147c:	6823      	ldr	r3, [r4, #0]
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	079b      	lsls	r3, r3, #30
 8001482:	d501      	bpl.n	8001488 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8001484:	2000      	movs	r0, #0
 8001486:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001488:	4632      	mov	r2, r6
 800148a:	4629      	mov	r1, r5
 800148c:	4620      	mov	r0, r4
 800148e:	f7ff ffb4 	bl	80013fa <I2C_IsAcknowledgeFailed>
 8001492:	b9a0      	cbnz	r0, 80014be <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8001494:	1c6a      	adds	r2, r5, #1
 8001496:	d0f1      	beq.n	800147c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001498:	f7ff f8a8 	bl	80005ec <HAL_GetTick>
 800149c:	1b80      	subs	r0, r0, r6
 800149e:	4285      	cmp	r5, r0
 80014a0:	d301      	bcc.n	80014a6 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80014a2:	2d00      	cmp	r5, #0
 80014a4:	d1ea      	bne.n	800147c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014a8:	f043 0320 	orr.w	r3, r3, #32
 80014ac:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80014ae:	2320      	movs	r3, #32
 80014b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80014ba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80014be:	2001      	movs	r0, #1
}
 80014c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080014c4 <I2C_RequestMemoryWrite>:
{
 80014c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014c6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80014c8:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80014ca:	4b16      	ldr	r3, [pc, #88]	; (8001524 <I2C_RequestMemoryWrite+0x60>)
 80014cc:	9300      	str	r3, [sp, #0]
{
 80014ce:	4605      	mov	r5, r0
 80014d0:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80014d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014d6:	b2fa      	uxtb	r2, r7
 80014d8:	f7ff ff4a 	bl	8001370 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014dc:	4632      	mov	r2, r6
 80014de:	9908      	ldr	r1, [sp, #32]
 80014e0:	4628      	mov	r0, r5
 80014e2:	f7ff ffc7 	bl	8001474 <I2C_WaitOnTXISFlagUntilTimeout>
 80014e6:	b110      	cbz	r0, 80014ee <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 80014e8:	2001      	movs	r0, #1
}
 80014ea:	b003      	add	sp, #12
 80014ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80014ee:	2f01      	cmp	r7, #1
 80014f0:	682b      	ldr	r3, [r5, #0]
 80014f2:	d10c      	bne.n	800150e <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014f4:	b2e4      	uxtb	r4, r4
 80014f6:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80014f8:	9b08      	ldr	r3, [sp, #32]
 80014fa:	9600      	str	r6, [sp, #0]
 80014fc:	2200      	movs	r2, #0
 80014fe:	2180      	movs	r1, #128	; 0x80
 8001500:	4628      	mov	r0, r5
 8001502:	f7ff ff4f 	bl	80013a4 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8001506:	3000      	adds	r0, #0
 8001508:	bf18      	it	ne
 800150a:	2001      	movne	r0, #1
 800150c:	e7ed      	b.n	80014ea <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800150e:	0a22      	lsrs	r2, r4, #8
 8001510:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001512:	9908      	ldr	r1, [sp, #32]
 8001514:	4632      	mov	r2, r6
 8001516:	4628      	mov	r0, r5
 8001518:	f7ff ffac 	bl	8001474 <I2C_WaitOnTXISFlagUntilTimeout>
 800151c:	2800      	cmp	r0, #0
 800151e:	d1e3      	bne.n	80014e8 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001520:	682b      	ldr	r3, [r5, #0]
 8001522:	e7e7      	b.n	80014f4 <I2C_RequestMemoryWrite+0x30>
 8001524:	80002000 	.word	0x80002000

08001528 <I2C_RequestMemoryRead>:
{
 8001528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800152a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800152c:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <I2C_RequestMemoryRead+0x60>)
 8001530:	9300      	str	r3, [sp, #0]
{
 8001532:	4605      	mov	r5, r0
 8001534:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001536:	2300      	movs	r3, #0
 8001538:	b2fa      	uxtb	r2, r7
 800153a:	f7ff ff19 	bl	8001370 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800153e:	4632      	mov	r2, r6
 8001540:	9908      	ldr	r1, [sp, #32]
 8001542:	4628      	mov	r0, r5
 8001544:	f7ff ff96 	bl	8001474 <I2C_WaitOnTXISFlagUntilTimeout>
 8001548:	b110      	cbz	r0, 8001550 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 800154a:	2001      	movs	r0, #1
}
 800154c:	b003      	add	sp, #12
 800154e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001550:	2f01      	cmp	r7, #1
 8001552:	682b      	ldr	r3, [r5, #0]
 8001554:	d10c      	bne.n	8001570 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001556:	b2e4      	uxtb	r4, r4
 8001558:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800155a:	9b08      	ldr	r3, [sp, #32]
 800155c:	9600      	str	r6, [sp, #0]
 800155e:	2200      	movs	r2, #0
 8001560:	2140      	movs	r1, #64	; 0x40
 8001562:	4628      	mov	r0, r5
 8001564:	f7ff ff1e 	bl	80013a4 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8001568:	3000      	adds	r0, #0
 800156a:	bf18      	it	ne
 800156c:	2001      	movne	r0, #1
 800156e:	e7ed      	b.n	800154c <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001570:	0a22      	lsrs	r2, r4, #8
 8001572:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001574:	9908      	ldr	r1, [sp, #32]
 8001576:	4632      	mov	r2, r6
 8001578:	4628      	mov	r0, r5
 800157a:	f7ff ff7b 	bl	8001474 <I2C_WaitOnTXISFlagUntilTimeout>
 800157e:	2800      	cmp	r0, #0
 8001580:	d1e3      	bne.n	800154a <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001582:	682b      	ldr	r3, [r5, #0]
 8001584:	e7e7      	b.n	8001556 <I2C_RequestMemoryRead+0x2e>
 8001586:	bf00      	nop
 8001588:	80002000 	.word	0x80002000

0800158c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800158c:	b570      	push	{r4, r5, r6, lr}
 800158e:	4604      	mov	r4, r0
 8001590:	460d      	mov	r5, r1
 8001592:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001594:	6823      	ldr	r3, [r4, #0]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	069b      	lsls	r3, r3, #26
 800159a:	d501      	bpl.n	80015a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800159c:	2000      	movs	r0, #0
 800159e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80015a0:	4632      	mov	r2, r6
 80015a2:	4629      	mov	r1, r5
 80015a4:	4620      	mov	r0, r4
 80015a6:	f7ff ff28 	bl	80013fa <I2C_IsAcknowledgeFailed>
 80015aa:	b990      	cbnz	r0, 80015d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015ac:	f7ff f81e 	bl	80005ec <HAL_GetTick>
 80015b0:	1b80      	subs	r0, r0, r6
 80015b2:	4285      	cmp	r5, r0
 80015b4:	d301      	bcc.n	80015ba <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80015b6:	2d00      	cmp	r5, #0
 80015b8:	d1ec      	bne.n	8001594 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015bc:	f043 0320 	orr.w	r3, r3, #32
 80015c0:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80015c2:	2320      	movs	r3, #32
 80015c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80015ce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80015d2:	2001      	movs	r0, #1
}
 80015d4:	bd70      	pop	{r4, r5, r6, pc}

080015d6 <HAL_I2C_Init>:
{
 80015d6:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80015d8:	4604      	mov	r4, r0
 80015da:	2800      	cmp	r0, #0
 80015dc:	d04a      	beq.n	8001674 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015de:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80015e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015e6:	b91b      	cbnz	r3, 80015f0 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80015e8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80015ec:	f002 fa80 	bl	8003af0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80015f0:	2324      	movs	r3, #36	; 0x24
 80015f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80015f6:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015f8:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	f022 0201 	bic.w	r2, r2, #1
 8001600:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001602:	6862      	ldr	r2, [r4, #4]
 8001604:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001608:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800160a:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800160c:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800160e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001616:	d124      	bne.n	8001662 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001618:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800161c:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800161e:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001620:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001622:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001626:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800162a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001632:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001634:	6922      	ldr	r2, [r4, #16]
 8001636:	430a      	orrs	r2, r1
 8001638:	69a1      	ldr	r1, [r4, #24]
 800163a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800163e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001640:	6a21      	ldr	r1, [r4, #32]
 8001642:	69e2      	ldr	r2, [r4, #28]
 8001644:	430a      	orrs	r2, r1
 8001646:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	f042 0201 	orr.w	r2, r2, #1
 800164e:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001650:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001652:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001654:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001656:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800165a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800165c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8001660:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001662:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001666:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001668:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800166a:	bf04      	itt	eq
 800166c:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001670:	605a      	streq	r2, [r3, #4]
 8001672:	e7d4      	b.n	800161e <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001674:	2001      	movs	r0, #1
}
 8001676:	bd10      	pop	{r4, pc}

08001678 <HAL_I2C_Mem_Write>:
{
 8001678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800167c:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800167e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001682:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001684:	2b20      	cmp	r3, #32
{
 8001686:	4604      	mov	r4, r0
 8001688:	460f      	mov	r7, r1
 800168a:	9203      	str	r2, [sp, #12]
 800168c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8001690:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001694:	f040 80a5 	bne.w	80017e2 <HAL_I2C_Mem_Write+0x16a>
    if ((pData == NULL) || (Size == 0U))
 8001698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800169a:	b113      	cbz	r3, 80016a2 <HAL_I2C_Mem_Write+0x2a>
 800169c:	f1ba 0f00 	cmp.w	sl, #0
 80016a0:	d106      	bne.n	80016b0 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016a6:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80016a8:	2001      	movs	r0, #1
}
 80016aa:	b005      	add	sp, #20
 80016ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80016b0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	f000 8094 	beq.w	80017e2 <HAL_I2C_Mem_Write+0x16a>
 80016ba:	2501      	movs	r5, #1
 80016bc:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80016c0:	f7fe ff94 	bl	80005ec <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016c4:	2319      	movs	r3, #25
 80016c6:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80016c8:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016ca:	462a      	mov	r2, r5
 80016cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d0:	4620      	mov	r0, r4
 80016d2:	f7ff fe67 	bl	80013a4 <I2C_WaitOnFlagUntilTimeout>
 80016d6:	4681      	mov	r9, r0
 80016d8:	2800      	cmp	r0, #0
 80016da:	d1e5      	bne.n	80016a8 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016dc:	2321      	movs	r3, #33	; 0x21
 80016de:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016e2:	2340      	movs	r3, #64	; 0x40
 80016e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80016e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016ea:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80016ec:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 80016ee:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80016f0:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016f4:	9601      	str	r6, [sp, #4]
 80016f6:	f8cd 8000 	str.w	r8, [sp]
 80016fa:	465b      	mov	r3, fp
 80016fc:	9a03      	ldr	r2, [sp, #12]
 80016fe:	4639      	mov	r1, r7
 8001700:	4620      	mov	r0, r4
 8001702:	f7ff fedf 	bl	80014c4 <I2C_RequestMemoryWrite>
 8001706:	b110      	cbz	r0, 800170e <HAL_I2C_Mem_Write+0x96>
      __HAL_UNLOCK(hi2c);
 8001708:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 800170c:	e7cc      	b.n	80016a8 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800170e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001710:	b29b      	uxth	r3, r3
 8001712:	2bff      	cmp	r3, #255	; 0xff
 8001714:	d955      	bls.n	80017c2 <HAL_I2C_Mem_Write+0x14a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001716:	22ff      	movs	r2, #255	; 0xff
 8001718:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800171a:	9000      	str	r0, [sp, #0]
 800171c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001720:	4639      	mov	r1, r7
 8001722:	4620      	mov	r0, r4
 8001724:	f7ff fe24 	bl	8001370 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001728:	4632      	mov	r2, r6
 800172a:	4641      	mov	r1, r8
 800172c:	4620      	mov	r0, r4
 800172e:	f7ff fea1 	bl	8001474 <I2C_WaitOnTXISFlagUntilTimeout>
 8001732:	2800      	cmp	r0, #0
 8001734:	d1b8      	bne.n	80016a8 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001738:	6822      	ldr	r2, [r4, #0]
 800173a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800173e:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001740:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001742:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001744:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001746:	3b01      	subs	r3, #1
 8001748:	b29b      	uxth	r3, r3
 800174a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800174c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800174e:	3a01      	subs	r2, #1
 8001750:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001752:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001754:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001756:	b1ab      	cbz	r3, 8001784 <HAL_I2C_Mem_Write+0x10c>
 8001758:	b9a2      	cbnz	r2, 8001784 <HAL_I2C_Mem_Write+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800175a:	9600      	str	r6, [sp, #0]
 800175c:	4643      	mov	r3, r8
 800175e:	2180      	movs	r1, #128	; 0x80
 8001760:	4620      	mov	r0, r4
 8001762:	f7ff fe1f 	bl	80013a4 <I2C_WaitOnFlagUntilTimeout>
 8001766:	2800      	cmp	r0, #0
 8001768:	d19e      	bne.n	80016a8 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800176a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800176c:	b29b      	uxth	r3, r3
 800176e:	2bff      	cmp	r3, #255	; 0xff
 8001770:	d92f      	bls.n	80017d2 <HAL_I2C_Mem_Write+0x15a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001772:	22ff      	movs	r2, #255	; 0xff
 8001774:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001776:	9000      	str	r0, [sp, #0]
 8001778:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800177c:	4639      	mov	r1, r7
 800177e:	4620      	mov	r0, r4
 8001780:	f7ff fdf6 	bl	8001370 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8001784:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001786:	b29b      	uxth	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1cd      	bne.n	8001728 <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800178c:	4632      	mov	r2, r6
 800178e:	4641      	mov	r1, r8
 8001790:	4620      	mov	r0, r4
 8001792:	f7ff fefb 	bl	800158c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001796:	2800      	cmp	r0, #0
 8001798:	d186      	bne.n	80016a8 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800179a:	6823      	ldr	r3, [r4, #0]
 800179c:	2120      	movs	r1, #32
 800179e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80017a6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80017aa:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80017ae:	f022 0201 	bic.w	r2, r2, #1
 80017b2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80017b4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80017b8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017bc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80017c0:	e773      	b.n	80016aa <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80017c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017c4:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80017c6:	b292      	uxth	r2, r2
 80017c8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	e7a6      	b.n	8001720 <HAL_I2C_Mem_Write+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 80017d2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017d4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80017d6:	b292      	uxth	r2, r2
 80017d8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	e7cc      	b.n	800177c <HAL_I2C_Mem_Write+0x104>
    return HAL_BUSY;
 80017e2:	2002      	movs	r0, #2
 80017e4:	e761      	b.n	80016aa <HAL_I2C_Mem_Write+0x32>
	...

080017e8 <HAL_I2C_Mem_Read>:
{
 80017e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017ec:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ee:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80017f2:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 80017f4:	2b20      	cmp	r3, #32
{
 80017f6:	4604      	mov	r4, r0
 80017f8:	460f      	mov	r7, r1
 80017fa:	9203      	str	r2, [sp, #12]
 80017fc:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8001800:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001804:	f040 80a9 	bne.w	800195a <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8001808:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800180a:	b113      	cbz	r3, 8001812 <HAL_I2C_Mem_Read+0x2a>
 800180c:	f1ba 0f00 	cmp.w	sl, #0
 8001810:	d106      	bne.n	8001820 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001816:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001818:	2001      	movs	r0, #1
}
 800181a:	b005      	add	sp, #20
 800181c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001820:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001824:	2b01      	cmp	r3, #1
 8001826:	f000 8098 	beq.w	800195a <HAL_I2C_Mem_Read+0x172>
 800182a:	2501      	movs	r5, #1
 800182c:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001830:	f7fe fedc 	bl	80005ec <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001834:	2319      	movs	r3, #25
 8001836:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8001838:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800183a:	462a      	mov	r2, r5
 800183c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001840:	4620      	mov	r0, r4
 8001842:	f7ff fdaf 	bl	80013a4 <I2C_WaitOnFlagUntilTimeout>
 8001846:	4681      	mov	r9, r0
 8001848:	2800      	cmp	r0, #0
 800184a:	d1e5      	bne.n	8001818 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800184c:	2322      	movs	r3, #34	; 0x22
 800184e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001852:	2340      	movs	r3, #64	; 0x40
 8001854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800185a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800185c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800185e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001860:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001864:	9601      	str	r6, [sp, #4]
 8001866:	f8cd 8000 	str.w	r8, [sp]
 800186a:	465b      	mov	r3, fp
 800186c:	9a03      	ldr	r2, [sp, #12]
 800186e:	4639      	mov	r1, r7
 8001870:	4620      	mov	r0, r4
 8001872:	f7ff fe59 	bl	8001528 <I2C_RequestMemoryRead>
 8001876:	b110      	cbz	r0, 800187e <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 8001878:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 800187c:	e7cc      	b.n	8001818 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800187e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001880:	b29b      	uxth	r3, r3
 8001882:	2bff      	cmp	r3, #255	; 0xff
 8001884:	4b36      	ldr	r3, [pc, #216]	; (8001960 <HAL_I2C_Mem_Read+0x178>)
 8001886:	d958      	bls.n	800193a <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001888:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800188a:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800188c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800188e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001892:	4639      	mov	r1, r7
 8001894:	4620      	mov	r0, r4
 8001896:	f7ff fd6b 	bl	8001370 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800189a:	9600      	str	r6, [sp, #0]
 800189c:	4643      	mov	r3, r8
 800189e:	2200      	movs	r2, #0
 80018a0:	2104      	movs	r1, #4
 80018a2:	4620      	mov	r0, r4
 80018a4:	f7ff fd7e 	bl	80013a4 <I2C_WaitOnFlagUntilTimeout>
 80018a8:	2800      	cmp	r0, #0
 80018aa:	d1b5      	bne.n	8001818 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018ac:	6822      	ldr	r2, [r4, #0]
 80018ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018b2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80018b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80018b6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80018b8:	3301      	adds	r3, #1
 80018ba:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80018bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018be:	3b01      	subs	r3, #1
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80018c6:	3a01      	subs	r2, #1
 80018c8:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018ca:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80018cc:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018ce:	b1ab      	cbz	r3, 80018fc <HAL_I2C_Mem_Read+0x114>
 80018d0:	b9a2      	cbnz	r2, 80018fc <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018d2:	9600      	str	r6, [sp, #0]
 80018d4:	4643      	mov	r3, r8
 80018d6:	2180      	movs	r1, #128	; 0x80
 80018d8:	4620      	mov	r0, r4
 80018da:	f7ff fd63 	bl	80013a4 <I2C_WaitOnFlagUntilTimeout>
 80018de:	2800      	cmp	r0, #0
 80018e0:	d19a      	bne.n	8001818 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	2bff      	cmp	r3, #255	; 0xff
 80018e8:	d92f      	bls.n	800194a <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018ea:	22ff      	movs	r2, #255	; 0xff
 80018ec:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80018ee:	9000      	str	r0, [sp, #0]
 80018f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018f4:	4639      	mov	r1, r7
 80018f6:	4620      	mov	r0, r4
 80018f8:	f7ff fd3a 	bl	8001370 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80018fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018fe:	b29b      	uxth	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1ca      	bne.n	800189a <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001904:	4632      	mov	r2, r6
 8001906:	4641      	mov	r1, r8
 8001908:	4620      	mov	r0, r4
 800190a:	f7ff fe3f 	bl	800158c <I2C_WaitOnSTOPFlagUntilTimeout>
 800190e:	2800      	cmp	r0, #0
 8001910:	d182      	bne.n	8001818 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001912:	6823      	ldr	r3, [r4, #0]
 8001914:	2120      	movs	r1, #32
 8001916:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800191e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001922:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001926:	f022 0201 	bic.w	r2, r2, #1
 800192a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800192c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001930:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001934:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001938:	e76f      	b.n	800181a <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 800193a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800193c:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800193e:	b292      	uxth	r2, r2
 8001940:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001942:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	e7a3      	b.n	8001892 <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 800194a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800194c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800194e:	b292      	uxth	r2, r2
 8001950:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001952:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	e7cc      	b.n	80018f4 <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 800195a:	2002      	movs	r0, #2
 800195c:	e75d      	b.n	800181a <HAL_I2C_Mem_Read+0x32>
 800195e:	bf00      	nop
 8001960:	80002400 	.word	0x80002400

08001964 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001964:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	2a20      	cmp	r2, #32
{
 800196c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800196e:	d11d      	bne.n	80019ac <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001970:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001974:	2b01      	cmp	r3, #1
 8001976:	d019      	beq.n	80019ac <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001978:	2324      	movs	r3, #36	; 0x24
 800197a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800197e:	6803      	ldr	r3, [r0, #0]
 8001980:	681c      	ldr	r4, [r3, #0]
 8001982:	f024 0401 	bic.w	r4, r4, #1
 8001986:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001988:	681c      	ldr	r4, [r3, #0]
 800198a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800198e:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001990:	681c      	ldr	r4, [r3, #0]
 8001992:	4321      	orrs	r1, r4
 8001994:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001996:	6819      	ldr	r1, [r3, #0]
 8001998:	f041 0101 	orr.w	r1, r1, #1
 800199c:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800199e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80019a0:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80019a4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80019a8:	4618      	mov	r0, r3
 80019aa:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80019ac:	2002      	movs	r0, #2
  }
}
 80019ae:	bd10      	pop	{r4, pc}

080019b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80019b0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019b2:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80019b6:	b2e4      	uxtb	r4, r4
 80019b8:	2c20      	cmp	r4, #32
 80019ba:	d11c      	bne.n	80019f6 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019bc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d018      	beq.n	80019f6 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019c4:	2324      	movs	r3, #36	; 0x24
 80019c6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019ca:	6803      	ldr	r3, [r0, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	f022 0201 	bic.w	r2, r2, #1
 80019d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80019d4:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80019d6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80019da:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019de:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	f042 0201 	orr.w	r2, r2, #1
 80019e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019e8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80019ea:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80019ee:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80019f2:	4618      	mov	r0, r3
 80019f4:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80019f6:	2002      	movs	r0, #2
  }
}
 80019f8:	bd10      	pop	{r4, pc}
	...

080019fc <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019fc:	4b02      	ldr	r3, [pc, #8]	; (8001a08 <HAL_PWREx_GetVoltageRange+0xc>)
 80019fe:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001a00:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40007000 	.word	0x40007000

08001a0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a0e:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a10:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a14:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a18:	d11c      	bne.n	8001a54 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a1a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001a1e:	d015      	beq.n	8001a4c <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a2a:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a2c:	4a10      	ldr	r2, [pc, #64]	; (8001a70 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001a2e:	6811      	ldr	r1, [r2, #0]
 8001a30:	2232      	movs	r2, #50	; 0x32
 8001a32:	434a      	muls	r2, r1
 8001a34:	490f      	ldr	r1, [pc, #60]	; (8001a74 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8001a36:	fbb2 f2f1 	udiv	r2, r2, r1
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a3e:	6958      	ldr	r0, [r3, #20]
 8001a40:	0540      	lsls	r0, r0, #21
 8001a42:	d500      	bpl.n	8001a46 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8001a44:	b922      	cbnz	r2, 8001a50 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a46:	694b      	ldr	r3, [r1, #20]
 8001a48:	055b      	lsls	r3, r3, #21
 8001a4a:	d40d      	bmi.n	8001a68 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	4770      	bx	lr
        wait_loop_index--;
 8001a50:	3a01      	subs	r2, #1
 8001a52:	e7f4      	b.n	8001a3e <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a54:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a58:	bf1f      	itttt	ne
 8001a5a:	681a      	ldrne	r2, [r3, #0]
 8001a5c:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001a60:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001a64:	601a      	strne	r2, [r3, #0]
 8001a66:	e7f1      	b.n	8001a4c <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8001a68:	2003      	movs	r0, #3
}
 8001a6a:	4770      	bx	lr
 8001a6c:	40007000 	.word	0x40007000
 8001a70:	20000020 	.word	0x20000020
 8001a74:	000f4240 	.word	0x000f4240

08001a78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a78:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a7a:	4d1e      	ldr	r5, [pc, #120]	; (8001af4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001a7c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001a7e:	00da      	lsls	r2, r3, #3
{
 8001a80:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a82:	d518      	bpl.n	8001ab6 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a84:	f7ff ffba 	bl	80019fc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a88:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001a8c:	d123      	bne.n	8001ad6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a8e:	2c80      	cmp	r4, #128	; 0x80
 8001a90:	d929      	bls.n	8001ae6 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a92:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a94:	bf8c      	ite	hi
 8001a96:	2002      	movhi	r0, #2
 8001a98:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a9a:	4a17      	ldr	r2, [pc, #92]	; (8001af8 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001a9c:	6813      	ldr	r3, [r2, #0]
 8001a9e:	f023 0307 	bic.w	r3, r3, #7
 8001aa2:	4303      	orrs	r3, r0
 8001aa4:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001aa6:	6813      	ldr	r3, [r2, #0]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001aac:	1a18      	subs	r0, r3, r0
 8001aae:	bf18      	it	ne
 8001ab0:	2001      	movne	r0, #1
 8001ab2:	b003      	add	sp, #12
 8001ab4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001abc:	65ab      	str	r3, [r5, #88]	; 0x58
 8001abe:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	9301      	str	r3, [sp, #4]
 8001ac6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001ac8:	f7ff ff98 	bl	80019fc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001acc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	65ab      	str	r3, [r5, #88]	; 0x58
 8001ad4:	e7d8      	b.n	8001a88 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001ad6:	2c80      	cmp	r4, #128	; 0x80
 8001ad8:	d807      	bhi.n	8001aea <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8001ada:	d008      	beq.n	8001aee <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001adc:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001ae0:	4258      	negs	r0, r3
 8001ae2:	4158      	adcs	r0, r3
 8001ae4:	e7d9      	b.n	8001a9a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	e7d7      	b.n	8001a9a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001aea:	2003      	movs	r0, #3
 8001aec:	e7d5      	b.n	8001a9a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001aee:	2002      	movs	r0, #2
 8001af0:	e7d3      	b.n	8001a9a <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40022000 	.word	0x40022000

08001afc <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001afc:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001afe:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b00:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b02:	f012 020c 	ands.w	r2, r2, #12
 8001b06:	d005      	beq.n	8001b14 <HAL_RCC_GetSysClockFreq+0x18>
 8001b08:	2a0c      	cmp	r2, #12
 8001b0a:	d115      	bne.n	8001b38 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b0c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b10:	2901      	cmp	r1, #1
 8001b12:	d118      	bne.n	8001b46 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b14:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001b16:	4820      	ldr	r0, [pc, #128]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b18:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b1a:	bf55      	itete	pl
 8001b1c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b20:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b22:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b26:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001b2a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b2e:	b382      	cbz	r2, 8001b92 <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b30:	2a0c      	cmp	r2, #12
 8001b32:	d009      	beq.n	8001b48 <HAL_RCC_GetSysClockFreq+0x4c>
 8001b34:	2000      	movs	r0, #0
  return sysclockfreq;
 8001b36:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b38:	2a04      	cmp	r2, #4
 8001b3a:	d029      	beq.n	8001b90 <HAL_RCC_GetSysClockFreq+0x94>
 8001b3c:	2a08      	cmp	r2, #8
 8001b3e:	4817      	ldr	r0, [pc, #92]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b40:	bf18      	it	ne
 8001b42:	2000      	movne	r0, #0
 8001b44:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b46:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b48:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b4a:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b4c:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b50:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8001b54:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b56:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8001b5a:	d005      	beq.n	8001b68 <HAL_RCC_GetSysClockFreq+0x6c>
 8001b5c:	2903      	cmp	r1, #3
 8001b5e:	d012      	beq.n	8001b86 <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b60:	68d9      	ldr	r1, [r3, #12]
 8001b62:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8001b66:	e003      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b68:	68d9      	ldr	r1, [r3, #12]
 8001b6a:	480d      	ldr	r0, [pc, #52]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b6c:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b70:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b72:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b76:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001b7a:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b7c:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b7e:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001b80:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b84:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b86:	68d9      	ldr	r1, [r3, #12]
 8001b88:	4804      	ldr	r0, [pc, #16]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b8a:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8001b8e:	e7ef      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8001b90:	4803      	ldr	r0, [pc, #12]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8001b92:	4770      	bx	lr
 8001b94:	40021000 	.word	0x40021000
 8001b98:	08004cd8 	.word	0x08004cd8
 8001b9c:	007a1200 	.word	0x007a1200
 8001ba0:	00f42400 	.word	0x00f42400

08001ba4 <HAL_RCC_OscConfig>:
{
 8001ba4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001ba8:	4605      	mov	r5, r0
 8001baa:	b918      	cbnz	r0, 8001bb4 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001bac:	2001      	movs	r0, #1
}
 8001bae:	b003      	add	sp, #12
 8001bb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bb4:	4ca5      	ldr	r4, [pc, #660]	; (8001e4c <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bb6:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bb8:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bba:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bbc:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bbe:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bc2:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bc6:	d53c      	bpl.n	8001c42 <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bc8:	b11e      	cbz	r6, 8001bd2 <HAL_RCC_OscConfig+0x2e>
 8001bca:	2e0c      	cmp	r6, #12
 8001bcc:	d163      	bne.n	8001c96 <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bce:	2f01      	cmp	r7, #1
 8001bd0:	d161      	bne.n	8001c96 <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bd2:	6823      	ldr	r3, [r4, #0]
 8001bd4:	0798      	lsls	r0, r3, #30
 8001bd6:	d502      	bpl.n	8001bde <HAL_RCC_OscConfig+0x3a>
 8001bd8:	69ab      	ldr	r3, [r5, #24]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0e6      	beq.n	8001bac <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bde:	6823      	ldr	r3, [r4, #0]
 8001be0:	6a28      	ldr	r0, [r5, #32]
 8001be2:	0719      	lsls	r1, r3, #28
 8001be4:	bf56      	itet	pl
 8001be6:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001bea:	6823      	ldrmi	r3, [r4, #0]
 8001bec:	091b      	lsrpl	r3, r3, #4
 8001bee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bf2:	4283      	cmp	r3, r0
 8001bf4:	d23a      	bcs.n	8001c6c <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bf6:	f7ff ff3f 	bl	8001a78 <RCC_SetFlashLatencyFromMSIRange>
 8001bfa:	2800      	cmp	r0, #0
 8001bfc:	d1d6      	bne.n	8001bac <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bfe:	6823      	ldr	r3, [r4, #0]
 8001c00:	f043 0308 	orr.w	r3, r3, #8
 8001c04:	6023      	str	r3, [r4, #0]
 8001c06:	6823      	ldr	r3, [r4, #0]
 8001c08:	6a2a      	ldr	r2, [r5, #32]
 8001c0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c12:	6863      	ldr	r3, [r4, #4]
 8001c14:	69ea      	ldr	r2, [r5, #28]
 8001c16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001c1e:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c20:	f7ff ff6c 	bl	8001afc <HAL_RCC_GetSysClockFreq>
 8001c24:	68a3      	ldr	r3, [r4, #8]
 8001c26:	4a8a      	ldr	r2, [pc, #552]	; (8001e50 <HAL_RCC_OscConfig+0x2ac>)
 8001c28:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c2c:	5cd3      	ldrb	r3, [r2, r3]
 8001c2e:	f003 031f 	and.w	r3, r3, #31
 8001c32:	40d8      	lsrs	r0, r3
 8001c34:	4b87      	ldr	r3, [pc, #540]	; (8001e54 <HAL_RCC_OscConfig+0x2b0>)
 8001c36:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f7fe fca1 	bl	8000580 <HAL_InitTick>
        if(status != HAL_OK)
 8001c3e:	2800      	cmp	r0, #0
 8001c40:	d1b5      	bne.n	8001bae <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c42:	682b      	ldr	r3, [r5, #0]
 8001c44:	07d8      	lsls	r0, r3, #31
 8001c46:	d45d      	bmi.n	8001d04 <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c48:	682b      	ldr	r3, [r5, #0]
 8001c4a:	0799      	lsls	r1, r3, #30
 8001c4c:	f100 809c 	bmi.w	8001d88 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c50:	682b      	ldr	r3, [r5, #0]
 8001c52:	0718      	lsls	r0, r3, #28
 8001c54:	f100 80d0 	bmi.w	8001df8 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c58:	682b      	ldr	r3, [r5, #0]
 8001c5a:	0759      	lsls	r1, r3, #29
 8001c5c:	f100 80fc 	bmi.w	8001e58 <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c60:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f040 8165 	bne.w	8001f32 <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 8001c68:	2000      	movs	r0, #0
 8001c6a:	e7a0      	b.n	8001bae <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c6c:	6823      	ldr	r3, [r4, #0]
 8001c6e:	f043 0308 	orr.w	r3, r3, #8
 8001c72:	6023      	str	r3, [r4, #0]
 8001c74:	6823      	ldr	r3, [r4, #0]
 8001c76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c7a:	4303      	orrs	r3, r0
 8001c7c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c7e:	6863      	ldr	r3, [r4, #4]
 8001c80:	69ea      	ldr	r2, [r5, #28]
 8001c82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001c8a:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c8c:	f7ff fef4 	bl	8001a78 <RCC_SetFlashLatencyFromMSIRange>
 8001c90:	2800      	cmp	r0, #0
 8001c92:	d0c5      	beq.n	8001c20 <HAL_RCC_OscConfig+0x7c>
 8001c94:	e78a      	b.n	8001bac <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c96:	69ab      	ldr	r3, [r5, #24]
 8001c98:	b31b      	cbz	r3, 8001ce2 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 8001c9a:	6823      	ldr	r3, [r4, #0]
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ca2:	f7fe fca3 	bl	80005ec <HAL_GetTick>
 8001ca6:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ca8:	6823      	ldr	r3, [r4, #0]
 8001caa:	079a      	lsls	r2, r3, #30
 8001cac:	d511      	bpl.n	8001cd2 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cae:	6823      	ldr	r3, [r4, #0]
 8001cb0:	f043 0308 	orr.w	r3, r3, #8
 8001cb4:	6023      	str	r3, [r4, #0]
 8001cb6:	6823      	ldr	r3, [r4, #0]
 8001cb8:	6a2a      	ldr	r2, [r5, #32]
 8001cba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cc2:	6863      	ldr	r3, [r4, #4]
 8001cc4:	69ea      	ldr	r2, [r5, #28]
 8001cc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001cca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001cce:	6063      	str	r3, [r4, #4]
 8001cd0:	e7b7      	b.n	8001c42 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cd2:	f7fe fc8b 	bl	80005ec <HAL_GetTick>
 8001cd6:	eba0 0008 	sub.w	r0, r0, r8
 8001cda:	2802      	cmp	r0, #2
 8001cdc:	d9e4      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8001cde:	2003      	movs	r0, #3
 8001ce0:	e765      	b.n	8001bae <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001cea:	f7fe fc7f 	bl	80005ec <HAL_GetTick>
 8001cee:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	079b      	lsls	r3, r3, #30
 8001cf4:	d5a5      	bpl.n	8001c42 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cf6:	f7fe fc79 	bl	80005ec <HAL_GetTick>
 8001cfa:	eba0 0008 	sub.w	r0, r0, r8
 8001cfe:	2802      	cmp	r0, #2
 8001d00:	d9f6      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x14c>
 8001d02:	e7ec      	b.n	8001cde <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d04:	2e08      	cmp	r6, #8
 8001d06:	d003      	beq.n	8001d10 <HAL_RCC_OscConfig+0x16c>
 8001d08:	2e0c      	cmp	r6, #12
 8001d0a:	d108      	bne.n	8001d1e <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8001d0c:	2f03      	cmp	r7, #3
 8001d0e:	d106      	bne.n	8001d1e <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d10:	6823      	ldr	r3, [r4, #0]
 8001d12:	039a      	lsls	r2, r3, #14
 8001d14:	d598      	bpl.n	8001c48 <HAL_RCC_OscConfig+0xa4>
 8001d16:	686b      	ldr	r3, [r5, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d195      	bne.n	8001c48 <HAL_RCC_OscConfig+0xa4>
 8001d1c:	e746      	b.n	8001bac <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d1e:	686b      	ldr	r3, [r5, #4]
 8001d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d24:	d110      	bne.n	8001d48 <HAL_RCC_OscConfig+0x1a4>
 8001d26:	6823      	ldr	r3, [r4, #0]
 8001d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001d2e:	f7fe fc5d 	bl	80005ec <HAL_GetTick>
 8001d32:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d34:	6823      	ldr	r3, [r4, #0]
 8001d36:	039b      	lsls	r3, r3, #14
 8001d38:	d486      	bmi.n	8001c48 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d3a:	f7fe fc57 	bl	80005ec <HAL_GetTick>
 8001d3e:	eba0 0008 	sub.w	r0, r0, r8
 8001d42:	2864      	cmp	r0, #100	; 0x64
 8001d44:	d9f6      	bls.n	8001d34 <HAL_RCC_OscConfig+0x190>
 8001d46:	e7ca      	b.n	8001cde <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d4c:	d104      	bne.n	8001d58 <HAL_RCC_OscConfig+0x1b4>
 8001d4e:	6823      	ldr	r3, [r4, #0]
 8001d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d54:	6023      	str	r3, [r4, #0]
 8001d56:	e7e6      	b.n	8001d26 <HAL_RCC_OscConfig+0x182>
 8001d58:	6822      	ldr	r2, [r4, #0]
 8001d5a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d5e:	6022      	str	r2, [r4, #0]
 8001d60:	6822      	ldr	r2, [r4, #0]
 8001d62:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d66:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1e0      	bne.n	8001d2e <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 8001d6c:	f7fe fc3e 	bl	80005ec <HAL_GetTick>
 8001d70:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	0398      	lsls	r0, r3, #14
 8001d76:	f57f af67 	bpl.w	8001c48 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d7a:	f7fe fc37 	bl	80005ec <HAL_GetTick>
 8001d7e:	eba0 0008 	sub.w	r0, r0, r8
 8001d82:	2864      	cmp	r0, #100	; 0x64
 8001d84:	d9f5      	bls.n	8001d72 <HAL_RCC_OscConfig+0x1ce>
 8001d86:	e7aa      	b.n	8001cde <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d88:	2e04      	cmp	r6, #4
 8001d8a:	d003      	beq.n	8001d94 <HAL_RCC_OscConfig+0x1f0>
 8001d8c:	2e0c      	cmp	r6, #12
 8001d8e:	d110      	bne.n	8001db2 <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8001d90:	2f02      	cmp	r7, #2
 8001d92:	d10e      	bne.n	8001db2 <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d94:	6823      	ldr	r3, [r4, #0]
 8001d96:	0559      	lsls	r1, r3, #21
 8001d98:	d503      	bpl.n	8001da2 <HAL_RCC_OscConfig+0x1fe>
 8001d9a:	68eb      	ldr	r3, [r5, #12]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f43f af05 	beq.w	8001bac <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da2:	6863      	ldr	r3, [r4, #4]
 8001da4:	692a      	ldr	r2, [r5, #16]
 8001da6:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001daa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001dae:	6063      	str	r3, [r4, #4]
 8001db0:	e74e      	b.n	8001c50 <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001db2:	68eb      	ldr	r3, [r5, #12]
 8001db4:	b17b      	cbz	r3, 8001dd6 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8001db6:	6823      	ldr	r3, [r4, #0]
 8001db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dbc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001dbe:	f7fe fc15 	bl	80005ec <HAL_GetTick>
 8001dc2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dc4:	6823      	ldr	r3, [r4, #0]
 8001dc6:	055a      	lsls	r2, r3, #21
 8001dc8:	d4eb      	bmi.n	8001da2 <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dca:	f7fe fc0f 	bl	80005ec <HAL_GetTick>
 8001dce:	1bc0      	subs	r0, r0, r7
 8001dd0:	2802      	cmp	r0, #2
 8001dd2:	d9f7      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x220>
 8001dd4:	e783      	b.n	8001cde <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 8001dd6:	6823      	ldr	r3, [r4, #0]
 8001dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ddc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001dde:	f7fe fc05 	bl	80005ec <HAL_GetTick>
 8001de2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	055b      	lsls	r3, r3, #21
 8001de8:	f57f af32 	bpl.w	8001c50 <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dec:	f7fe fbfe 	bl	80005ec <HAL_GetTick>
 8001df0:	1bc0      	subs	r0, r0, r7
 8001df2:	2802      	cmp	r0, #2
 8001df4:	d9f6      	bls.n	8001de4 <HAL_RCC_OscConfig+0x240>
 8001df6:	e772      	b.n	8001cde <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df8:	696b      	ldr	r3, [r5, #20]
 8001dfa:	b19b      	cbz	r3, 8001e24 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8001dfc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001e08:	f7fe fbf0 	bl	80005ec <HAL_GetTick>
 8001e0c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e0e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001e12:	079a      	lsls	r2, r3, #30
 8001e14:	f53f af20 	bmi.w	8001c58 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e18:	f7fe fbe8 	bl	80005ec <HAL_GetTick>
 8001e1c:	1bc0      	subs	r0, r0, r7
 8001e1e:	2802      	cmp	r0, #2
 8001e20:	d9f5      	bls.n	8001e0e <HAL_RCC_OscConfig+0x26a>
 8001e22:	e75c      	b.n	8001cde <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 8001e24:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001e28:	f023 0301 	bic.w	r3, r3, #1
 8001e2c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001e30:	f7fe fbdc 	bl	80005ec <HAL_GetTick>
 8001e34:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e36:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001e3a:	079b      	lsls	r3, r3, #30
 8001e3c:	f57f af0c 	bpl.w	8001c58 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e40:	f7fe fbd4 	bl	80005ec <HAL_GetTick>
 8001e44:	1bc0      	subs	r0, r0, r7
 8001e46:	2802      	cmp	r0, #2
 8001e48:	d9f5      	bls.n	8001e36 <HAL_RCC_OscConfig+0x292>
 8001e4a:	e748      	b.n	8001cde <HAL_RCC_OscConfig+0x13a>
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	08004cbe 	.word	0x08004cbe
 8001e54:	20000020 	.word	0x20000020
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e5a:	00d8      	lsls	r0, r3, #3
 8001e5c:	d429      	bmi.n	8001eb2 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e64:	65a3      	str	r3, [r4, #88]	; 0x58
 8001e66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001e70:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e74:	4f5d      	ldr	r7, [pc, #372]	; (8001fec <HAL_RCC_OscConfig+0x448>)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	05d9      	lsls	r1, r3, #23
 8001e7a:	d51d      	bpl.n	8001eb8 <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e7c:	68ab      	ldr	r3, [r5, #8]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d12b      	bne.n	8001eda <HAL_RCC_OscConfig+0x336>
 8001e82:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001e8e:	f7fe fbad 	bl	80005ec <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e92:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001e96:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e98:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001e9c:	079b      	lsls	r3, r3, #30
 8001e9e:	d542      	bpl.n	8001f26 <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 8001ea0:	f1b8 0f00 	cmp.w	r8, #0
 8001ea4:	f43f aedc 	beq.w	8001c60 <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001eaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eae:	65a3      	str	r3, [r4, #88]	; 0x58
 8001eb0:	e6d6      	b.n	8001c60 <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 8001eb2:	f04f 0800 	mov.w	r8, #0
 8001eb6:	e7dd      	b.n	8001e74 <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ebe:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001ec0:	f7fe fb94 	bl	80005ec <HAL_GetTick>
 8001ec4:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	05da      	lsls	r2, r3, #23
 8001eca:	d4d7      	bmi.n	8001e7c <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ecc:	f7fe fb8e 	bl	80005ec <HAL_GetTick>
 8001ed0:	eba0 0009 	sub.w	r0, r0, r9
 8001ed4:	2802      	cmp	r0, #2
 8001ed6:	d9f6      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x322>
 8001ed8:	e701      	b.n	8001cde <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eda:	2b05      	cmp	r3, #5
 8001edc:	d106      	bne.n	8001eec <HAL_RCC_OscConfig+0x348>
 8001ede:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001ee2:	f043 0304 	orr.w	r3, r3, #4
 8001ee6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001eea:	e7ca      	b.n	8001e82 <HAL_RCC_OscConfig+0x2de>
 8001eec:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001ef0:	f022 0201 	bic.w	r2, r2, #1
 8001ef4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001ef8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001efc:	f022 0204 	bic.w	r2, r2, #4
 8001f00:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1c2      	bne.n	8001e8e <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 8001f08:	f7fe fb70 	bl	80005ec <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001f10:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f12:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001f16:	0798      	lsls	r0, r3, #30
 8001f18:	d5c2      	bpl.n	8001ea0 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1a:	f7fe fb67 	bl	80005ec <HAL_GetTick>
 8001f1e:	1bc0      	subs	r0, r0, r7
 8001f20:	4548      	cmp	r0, r9
 8001f22:	d9f6      	bls.n	8001f12 <HAL_RCC_OscConfig+0x36e>
 8001f24:	e6db      	b.n	8001cde <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f26:	f7fe fb61 	bl	80005ec <HAL_GetTick>
 8001f2a:	1bc0      	subs	r0, r0, r7
 8001f2c:	4548      	cmp	r0, r9
 8001f2e:	d9b3      	bls.n	8001e98 <HAL_RCC_OscConfig+0x2f4>
 8001f30:	e6d5      	b.n	8001cde <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f32:	2e0c      	cmp	r6, #12
 8001f34:	f43f ae3a 	beq.w	8001bac <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f38:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8001f3a:	6823      	ldr	r3, [r4, #0]
 8001f3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f40:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f42:	d137      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 8001f44:	f7fe fb52 	bl	80005ec <HAL_GetTick>
 8001f48:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f4a:	6823      	ldr	r3, [r4, #0]
 8001f4c:	0199      	lsls	r1, r3, #6
 8001f4e:	d42b      	bmi.n	8001fa8 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f50:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001f52:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001f54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001f58:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001f5a:	3a01      	subs	r2, #1
 8001f5c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001f60:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001f62:	0912      	lsrs	r2, r2, #4
 8001f64:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001f68:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001f6a:	0852      	lsrs	r2, r2, #1
 8001f6c:	3a01      	subs	r2, #1
 8001f6e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001f72:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001f74:	0852      	lsrs	r2, r2, #1
 8001f76:	3a01      	subs	r2, #1
 8001f78:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001f7c:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001f7e:	6823      	ldr	r3, [r4, #0]
 8001f80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f84:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f86:	68e3      	ldr	r3, [r4, #12]
 8001f88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f8c:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001f8e:	f7fe fb2d 	bl	80005ec <HAL_GetTick>
 8001f92:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f94:	6823      	ldr	r3, [r4, #0]
 8001f96:	019a      	lsls	r2, r3, #6
 8001f98:	f53f ae66 	bmi.w	8001c68 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7fe fb26 	bl	80005ec <HAL_GetTick>
 8001fa0:	1b40      	subs	r0, r0, r5
 8001fa2:	2802      	cmp	r0, #2
 8001fa4:	d9f6      	bls.n	8001f94 <HAL_RCC_OscConfig+0x3f0>
 8001fa6:	e69a      	b.n	8001cde <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa8:	f7fe fb20 	bl	80005ec <HAL_GetTick>
 8001fac:	1b80      	subs	r0, r0, r6
 8001fae:	2802      	cmp	r0, #2
 8001fb0:	d9cb      	bls.n	8001f4a <HAL_RCC_OscConfig+0x3a6>
 8001fb2:	e694      	b.n	8001cde <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001fb4:	6823      	ldr	r3, [r4, #0]
 8001fb6:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001fba:	bf02      	ittt	eq
 8001fbc:	68e3      	ldreq	r3, [r4, #12]
 8001fbe:	f023 0303 	biceq.w	r3, r3, #3
 8001fc2:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001fc4:	68e3      	ldr	r3, [r4, #12]
 8001fc6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fce:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001fd0:	f7fe fb0c 	bl	80005ec <HAL_GetTick>
 8001fd4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fd6:	6823      	ldr	r3, [r4, #0]
 8001fd8:	019b      	lsls	r3, r3, #6
 8001fda:	f57f ae45 	bpl.w	8001c68 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fde:	f7fe fb05 	bl	80005ec <HAL_GetTick>
 8001fe2:	1b40      	subs	r0, r0, r5
 8001fe4:	2802      	cmp	r0, #2
 8001fe6:	d9f6      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x432>
 8001fe8:	e679      	b.n	8001cde <HAL_RCC_OscConfig+0x13a>
 8001fea:	bf00      	nop
 8001fec:	40007000 	.word	0x40007000

08001ff0 <HAL_RCC_ClockConfig>:
{
 8001ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ff4:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8001ff6:	4604      	mov	r4, r0
 8001ff8:	b910      	cbnz	r0, 8002000 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002000:	4a40      	ldr	r2, [pc, #256]	; (8002104 <HAL_RCC_ClockConfig+0x114>)
 8002002:	6813      	ldr	r3, [r2, #0]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	428b      	cmp	r3, r1
 800200a:	d329      	bcc.n	8002060 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800200c:	6823      	ldr	r3, [r4, #0]
 800200e:	07d9      	lsls	r1, r3, #31
 8002010:	d431      	bmi.n	8002076 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002012:	6821      	ldr	r1, [r4, #0]
 8002014:	078a      	lsls	r2, r1, #30
 8002016:	d45b      	bmi.n	80020d0 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002018:	4a3a      	ldr	r2, [pc, #232]	; (8002104 <HAL_RCC_ClockConfig+0x114>)
 800201a:	6813      	ldr	r3, [r2, #0]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	429e      	cmp	r6, r3
 8002022:	d35d      	bcc.n	80020e0 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002024:	f011 0f04 	tst.w	r1, #4
 8002028:	4d37      	ldr	r5, [pc, #220]	; (8002108 <HAL_RCC_ClockConfig+0x118>)
 800202a:	d164      	bne.n	80020f6 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202c:	070b      	lsls	r3, r1, #28
 800202e:	d506      	bpl.n	800203e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002030:	68ab      	ldr	r3, [r5, #8]
 8002032:	6922      	ldr	r2, [r4, #16]
 8002034:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002038:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800203c:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800203e:	f7ff fd5d 	bl	8001afc <HAL_RCC_GetSysClockFreq>
 8002042:	68ab      	ldr	r3, [r5, #8]
 8002044:	4a31      	ldr	r2, [pc, #196]	; (800210c <HAL_RCC_ClockConfig+0x11c>)
 8002046:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800204a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800204e:	5cd3      	ldrb	r3, [r2, r3]
 8002050:	f003 031f 	and.w	r3, r3, #31
 8002054:	40d8      	lsrs	r0, r3
 8002056:	4b2e      	ldr	r3, [pc, #184]	; (8002110 <HAL_RCC_ClockConfig+0x120>)
 8002058:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 800205a:	2000      	movs	r0, #0
 800205c:	f7fe ba90 	b.w	8000580 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002060:	6813      	ldr	r3, [r2, #0]
 8002062:	f023 0307 	bic.w	r3, r3, #7
 8002066:	430b      	orrs	r3, r1
 8002068:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800206a:	6813      	ldr	r3, [r2, #0]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	4299      	cmp	r1, r3
 8002072:	d1c2      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xa>
 8002074:	e7ca      	b.n	800200c <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002076:	6862      	ldr	r2, [r4, #4]
 8002078:	4d23      	ldr	r5, [pc, #140]	; (8002108 <HAL_RCC_ClockConfig+0x118>)
 800207a:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800207c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800207e:	d11b      	bne.n	80020b8 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002080:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002084:	d0b9      	beq.n	8001ffa <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002086:	68ab      	ldr	r3, [r5, #8]
 8002088:	f023 0303 	bic.w	r3, r3, #3
 800208c:	4313      	orrs	r3, r2
 800208e:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8002090:	f7fe faac 	bl	80005ec <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002094:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002098:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209a:	68ab      	ldr	r3, [r5, #8]
 800209c:	6862      	ldr	r2, [r4, #4]
 800209e:	f003 030c 	and.w	r3, r3, #12
 80020a2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80020a6:	d0b4      	beq.n	8002012 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a8:	f7fe faa0 	bl	80005ec <HAL_GetTick>
 80020ac:	1bc0      	subs	r0, r0, r7
 80020ae:	4540      	cmp	r0, r8
 80020b0:	d9f3      	bls.n	800209a <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 80020b2:	2003      	movs	r0, #3
}
 80020b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b8:	2a02      	cmp	r2, #2
 80020ba:	d102      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020bc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80020c0:	e7e0      	b.n	8002084 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020c2:	b912      	cbnz	r2, 80020ca <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020c4:	f013 0f02 	tst.w	r3, #2
 80020c8:	e7dc      	b.n	8002084 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020ca:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80020ce:	e7d9      	b.n	8002084 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d0:	4a0d      	ldr	r2, [pc, #52]	; (8002108 <HAL_RCC_ClockConfig+0x118>)
 80020d2:	68a0      	ldr	r0, [r4, #8]
 80020d4:	6893      	ldr	r3, [r2, #8]
 80020d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020da:	4303      	orrs	r3, r0
 80020dc:	6093      	str	r3, [r2, #8]
 80020de:	e79b      	b.n	8002018 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e0:	6813      	ldr	r3, [r2, #0]
 80020e2:	f023 0307 	bic.w	r3, r3, #7
 80020e6:	4333      	orrs	r3, r6
 80020e8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ea:	6813      	ldr	r3, [r2, #0]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	429e      	cmp	r6, r3
 80020f2:	d182      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xa>
 80020f4:	e796      	b.n	8002024 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020f6:	68ab      	ldr	r3, [r5, #8]
 80020f8:	68e2      	ldr	r2, [r4, #12]
 80020fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020fe:	4313      	orrs	r3, r2
 8002100:	60ab      	str	r3, [r5, #8]
 8002102:	e793      	b.n	800202c <HAL_RCC_ClockConfig+0x3c>
 8002104:	40022000 	.word	0x40022000
 8002108:	40021000 	.word	0x40021000
 800210c:	08004cbe 	.word	0x08004cbe
 8002110:	20000020 	.word	0x20000020

08002114 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002116:	4a06      	ldr	r2, [pc, #24]	; (8002130 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800211e:	5cd3      	ldrb	r3, [r2, r3]
 8002120:	4a04      	ldr	r2, [pc, #16]	; (8002134 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002122:	6810      	ldr	r0, [r2, #0]
 8002124:	f003 031f 	and.w	r3, r3, #31
}
 8002128:	40d8      	lsrs	r0, r3
 800212a:	4770      	bx	lr
 800212c:	40021000 	.word	0x40021000
 8002130:	08004cce 	.word	0x08004cce
 8002134:	20000020 	.word	0x20000020

08002138 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_RCC_GetPCLK2Freq+0x18>)
 800213a:	4a06      	ldr	r2, [pc, #24]	; (8002154 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002142:	5cd3      	ldrb	r3, [r2, r3]
 8002144:	4a04      	ldr	r2, [pc, #16]	; (8002158 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002146:	6810      	ldr	r0, [r2, #0]
 8002148:	f003 031f 	and.w	r3, r3, #31
}
 800214c:	40d8      	lsrs	r0, r3
 800214e:	4770      	bx	lr
 8002150:	40021000 	.word	0x40021000
 8002154:	08004cce 	.word	0x08004cce
 8002158:	20000020 	.word	0x20000020

0800215c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800215c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800215e:	4b45      	ldr	r3, [pc, #276]	; (8002274 <RCCEx_PLLSAI1_Config+0x118>)
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	f012 0f03 	tst.w	r2, #3
{
 8002166:	4605      	mov	r5, r0
 8002168:	460e      	mov	r6, r1
 800216a:	461c      	mov	r4, r3
 800216c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800216e:	d02a      	beq.n	80021c6 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	f002 0203 	and.w	r2, r2, #3
 8002176:	4282      	cmp	r2, r0
 8002178:	d13c      	bne.n	80021f4 <RCCEx_PLLSAI1_Config+0x98>
       ||
 800217a:	2a00      	cmp	r2, #0
 800217c:	d03a      	beq.n	80021f4 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800217e:	68db      	ldr	r3, [r3, #12]
       ||
 8002180:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002182:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002186:	3301      	adds	r3, #1
       ||
 8002188:	4293      	cmp	r3, r2
 800218a:	d133      	bne.n	80021f4 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800218c:	6823      	ldr	r3, [r4, #0]
 800218e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002192:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002194:	f7fe fa2a 	bl	80005ec <HAL_GetTick>
 8002198:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800219a:	6823      	ldr	r3, [r4, #0]
 800219c:	011a      	lsls	r2, r3, #4
 800219e:	d432      	bmi.n	8002206 <RCCEx_PLLSAI1_Config+0xaa>
 80021a0:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80021a2:	2e00      	cmp	r6, #0
 80021a4:	d036      	beq.n	8002214 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80021a6:	2e01      	cmp	r6, #1
 80021a8:	d150      	bne.n	800224c <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80021aa:	6922      	ldr	r2, [r4, #16]
 80021ac:	6928      	ldr	r0, [r5, #16]
 80021ae:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80021b2:	0840      	lsrs	r0, r0, #1
 80021b4:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80021b8:	3801      	subs	r0, #1
 80021ba:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80021be:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 80021c2:	6122      	str	r2, [r4, #16]
 80021c4:	e032      	b.n	800222c <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 80021c6:	2802      	cmp	r0, #2
 80021c8:	d010      	beq.n	80021ec <RCCEx_PLLSAI1_Config+0x90>
 80021ca:	2803      	cmp	r0, #3
 80021cc:	d014      	beq.n	80021f8 <RCCEx_PLLSAI1_Config+0x9c>
 80021ce:	2801      	cmp	r0, #1
 80021d0:	d110      	bne.n	80021f4 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	079f      	lsls	r7, r3, #30
 80021d6:	d538      	bpl.n	800224a <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80021d8:	68e3      	ldr	r3, [r4, #12]
 80021da:	686a      	ldr	r2, [r5, #4]
 80021dc:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80021e0:	3a01      	subs	r2, #1
 80021e2:	4318      	orrs	r0, r3
 80021e4:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80021e8:	60e0      	str	r0, [r4, #12]
 80021ea:	e7cf      	b.n	800218c <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80021f2:	d1f1      	bne.n	80021d8 <RCCEx_PLLSAI1_Config+0x7c>
 80021f4:	2001      	movs	r0, #1
 80021f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	0391      	lsls	r1, r2, #14
 80021fc:	d4ec      	bmi.n	80021d8 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002204:	e7f5      	b.n	80021f2 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002206:	f7fe f9f1 	bl	80005ec <HAL_GetTick>
 800220a:	1bc0      	subs	r0, r0, r7
 800220c:	2802      	cmp	r0, #2
 800220e:	d9c4      	bls.n	800219a <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8002210:	2003      	movs	r0, #3
 8002212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002214:	6921      	ldr	r1, [r4, #16]
 8002216:	68eb      	ldr	r3, [r5, #12]
 8002218:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 800221c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002220:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8002224:	091b      	lsrs	r3, r3, #4
 8002226:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 800222a:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800222c:	6823      	ldr	r3, [r4, #0]
 800222e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002232:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002234:	f7fe f9da 	bl	80005ec <HAL_GetTick>
 8002238:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800223a:	6823      	ldr	r3, [r4, #0]
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	d513      	bpl.n	8002268 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002240:	6923      	ldr	r3, [r4, #16]
 8002242:	69aa      	ldr	r2, [r5, #24]
 8002244:	4313      	orrs	r3, r2
 8002246:	6123      	str	r3, [r4, #16]
 8002248:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800224a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800224c:	6923      	ldr	r3, [r4, #16]
 800224e:	6968      	ldr	r0, [r5, #20]
 8002250:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002254:	0840      	lsrs	r0, r0, #1
 8002256:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800225a:	3801      	subs	r0, #1
 800225c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8002260:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002264:	6123      	str	r3, [r4, #16]
 8002266:	e7e1      	b.n	800222c <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002268:	f7fe f9c0 	bl	80005ec <HAL_GetTick>
 800226c:	1b80      	subs	r0, r0, r6
 800226e:	2802      	cmp	r0, #2
 8002270:	d9e3      	bls.n	800223a <RCCEx_PLLSAI1_Config+0xde>
 8002272:	e7cd      	b.n	8002210 <RCCEx_PLLSAI1_Config+0xb4>
 8002274:	40021000 	.word	0x40021000

08002278 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800227a:	4b3d      	ldr	r3, [pc, #244]	; (8002370 <RCCEx_PLLSAI2_Config+0xf8>)
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	f012 0f03 	tst.w	r2, #3
{
 8002282:	4605      	mov	r5, r0
 8002284:	460e      	mov	r6, r1
 8002286:	461c      	mov	r4, r3
 8002288:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800228a:	d028      	beq.n	80022de <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	f002 0203 	and.w	r2, r2, #3
 8002292:	4282      	cmp	r2, r0
 8002294:	d13a      	bne.n	800230c <RCCEx_PLLSAI2_Config+0x94>
       ||
 8002296:	2a00      	cmp	r2, #0
 8002298:	d038      	beq.n	800230c <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800229a:	68db      	ldr	r3, [r3, #12]
       ||
 800229c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800229e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80022a2:	3301      	adds	r3, #1
       ||
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d131      	bne.n	800230c <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80022a8:	6823      	ldr	r3, [r4, #0]
 80022aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ae:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022b0:	f7fe f99c 	bl	80005ec <HAL_GetTick>
 80022b4:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80022b6:	6823      	ldr	r3, [r4, #0]
 80022b8:	009a      	lsls	r2, r3, #2
 80022ba:	d430      	bmi.n	800231e <RCCEx_PLLSAI2_Config+0xa6>
 80022bc:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80022be:	2e00      	cmp	r6, #0
 80022c0:	d034      	beq.n	800232c <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80022c2:	6963      	ldr	r3, [r4, #20]
 80022c4:	6929      	ldr	r1, [r5, #16]
 80022c6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80022ca:	0849      	lsrs	r1, r1, #1
 80022cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80022d0:	3901      	subs	r1, #1
 80022d2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80022d6:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80022da:	6163      	str	r3, [r4, #20]
 80022dc:	e032      	b.n	8002344 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 80022de:	2802      	cmp	r0, #2
 80022e0:	d010      	beq.n	8002304 <RCCEx_PLLSAI2_Config+0x8c>
 80022e2:	2803      	cmp	r0, #3
 80022e4:	d014      	beq.n	8002310 <RCCEx_PLLSAI2_Config+0x98>
 80022e6:	2801      	cmp	r0, #1
 80022e8:	d110      	bne.n	800230c <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	079f      	lsls	r7, r3, #30
 80022ee:	d538      	bpl.n	8002362 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022f0:	68e3      	ldr	r3, [r4, #12]
 80022f2:	686a      	ldr	r2, [r5, #4]
 80022f4:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80022f8:	3a01      	subs	r2, #1
 80022fa:	4318      	orrs	r0, r3
 80022fc:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002300:	60e0      	str	r0, [r4, #12]
 8002302:	e7d1      	b.n	80022a8 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800230a:	d1f1      	bne.n	80022f0 <RCCEx_PLLSAI2_Config+0x78>
 800230c:	2001      	movs	r0, #1
 800230e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	0391      	lsls	r1, r2, #14
 8002314:	d4ec      	bmi.n	80022f0 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800231c:	e7f5      	b.n	800230a <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800231e:	f7fe f965 	bl	80005ec <HAL_GetTick>
 8002322:	1bc0      	subs	r0, r0, r7
 8002324:	2802      	cmp	r0, #2
 8002326:	d9c6      	bls.n	80022b6 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8002328:	2003      	movs	r0, #3
 800232a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800232c:	6962      	ldr	r2, [r4, #20]
 800232e:	68eb      	ldr	r3, [r5, #12]
 8002330:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8002334:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002338:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8002342:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002344:	6823      	ldr	r3, [r4, #0]
 8002346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234a:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234c:	f7fe f94e 	bl	80005ec <HAL_GetTick>
 8002350:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002352:	6823      	ldr	r3, [r4, #0]
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	d505      	bpl.n	8002364 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002358:	6963      	ldr	r3, [r4, #20]
 800235a:	696a      	ldr	r2, [r5, #20]
 800235c:	4313      	orrs	r3, r2
 800235e:	6163      	str	r3, [r4, #20]
 8002360:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002364:	f7fe f942 	bl	80005ec <HAL_GetTick>
 8002368:	1b80      	subs	r0, r0, r6
 800236a:	2802      	cmp	r0, #2
 800236c:	d9f1      	bls.n	8002352 <RCCEx_PLLSAI2_Config+0xda>
 800236e:	e7db      	b.n	8002328 <RCCEx_PLLSAI2_Config+0xb0>
 8002370:	40021000 	.word	0x40021000

08002374 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002374:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002378:	6806      	ldr	r6, [r0, #0]
 800237a:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 800237e:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002380:	d024      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002382:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8002384:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002388:	d02c      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800238a:	d802      	bhi.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800238c:	b1c1      	cbz	r1, 80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 800238e:	2601      	movs	r6, #1
 8002390:	e01c      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002392:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002396:	d00d      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002398:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800239c:	d1f7      	bne.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800239e:	4a4d      	ldr	r2, [pc, #308]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80023a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80023a6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80023aa:	430b      	orrs	r3, r1
 80023ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80023b0:	2600      	movs	r6, #0
 80023b2:	e00b      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023b4:	4a47      	ldr	r2, [pc, #284]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023b6:	68d3      	ldr	r3, [r2, #12]
 80023b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023bc:	60d3      	str	r3, [r2, #12]
      break;
 80023be:	e7ee      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023c0:	3004      	adds	r0, #4
 80023c2:	f7ff fecb 	bl	800215c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023c6:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80023c8:	2800      	cmp	r0, #0
 80023ca:	d0e8      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023cc:	6823      	ldr	r3, [r4, #0]
 80023ce:	04d8      	lsls	r0, r3, #19
 80023d0:	d506      	bpl.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80023d2:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80023d4:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80023d8:	d074      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80023da:	d808      	bhi.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80023dc:	b1a9      	cbz	r1, 800240a <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 80023de:	2601      	movs	r6, #1
 80023e0:	4635      	mov	r5, r6
 80023e2:	e021      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023e4:	2100      	movs	r1, #0
 80023e6:	3020      	adds	r0, #32
 80023e8:	f7ff ff46 	bl	8002278 <RCCEx_PLLSAI2_Config>
 80023ec:	e7eb      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 80023ee:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80023f2:	d004      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80023f4:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80023f8:	d1f1      	bne.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80023fa:	4635      	mov	r5, r6
 80023fc:	e009      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023fe:	4a35      	ldr	r2, [pc, #212]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002400:	68d3      	ldr	r3, [r2, #12]
 8002402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002406:	60d3      	str	r3, [r2, #12]
 8002408:	e7f7      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800240a:	1d20      	adds	r0, r4, #4
 800240c:	f7ff fea6 	bl	800215c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002410:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002412:	2d00      	cmp	r5, #0
 8002414:	d15c      	bne.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002416:	4a2f      	ldr	r2, [pc, #188]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002418:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800241a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800241e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002422:	430b      	orrs	r3, r1
 8002424:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002428:	6823      	ldr	r3, [r4, #0]
 800242a:	0399      	lsls	r1, r3, #14
 800242c:	f140 814f 	bpl.w	80026ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002430:	4f28      	ldr	r7, [pc, #160]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002432:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002434:	00da      	lsls	r2, r3, #3
 8002436:	f140 8176 	bpl.w	8002726 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 800243a:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800243e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80024d8 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8002442:	f8d9 3000 	ldr.w	r3, [r9]
 8002446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244a:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800244e:	f7fe f8cd 	bl	80005ec <HAL_GetTick>
 8002452:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002454:	f8d9 3000 	ldr.w	r3, [r9]
 8002458:	05db      	lsls	r3, r3, #23
 800245a:	d53f      	bpl.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 800245c:	2d00      	cmp	r5, #0
 800245e:	d144      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002460:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002464:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002468:	d015      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x122>
 800246a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800246e:	4293      	cmp	r3, r2
 8002470:	d011      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002472:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002476:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800247a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800247e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002482:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800248a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800248e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002492:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002496:	07d8      	lsls	r0, r3, #31
 8002498:	d509      	bpl.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 800249a:	f7fe f8a7 	bl	80005ec <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80024a2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024a8:	0799      	lsls	r1, r3, #30
 80024aa:	f140 8109 	bpl.w	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024b2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80024b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80024c0:	4635      	mov	r5, r6
 80024c2:	e012      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024c4:	2100      	movs	r1, #0
 80024c6:	f104 0020 	add.w	r0, r4, #32
 80024ca:	f7ff fed5 	bl	8002278 <RCCEx_PLLSAI2_Config>
 80024ce:	e79f      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80024d0:	462e      	mov	r6, r5
 80024d2:	e7a9      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024dc:	f7fe f886 	bl	80005ec <HAL_GetTick>
 80024e0:	eba0 000a 	sub.w	r0, r0, sl
 80024e4:	2802      	cmp	r0, #2
 80024e6:	d9b5      	bls.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 80024e8:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80024ea:	f1b8 0f00 	cmp.w	r8, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f6:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	07da      	lsls	r2, r3, #31
 80024fc:	d508      	bpl.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024fe:	4990      	ldr	r1, [pc, #576]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002500:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002502:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002506:	f022 0203 	bic.w	r2, r2, #3
 800250a:	4302      	orrs	r2, r0
 800250c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002510:	079f      	lsls	r7, r3, #30
 8002512:	d508      	bpl.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002514:	498a      	ldr	r1, [pc, #552]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002516:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002518:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800251c:	f022 020c 	bic.w	r2, r2, #12
 8002520:	4302      	orrs	r2, r0
 8002522:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002526:	075e      	lsls	r6, r3, #29
 8002528:	d508      	bpl.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800252a:	4985      	ldr	r1, [pc, #532]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800252c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800252e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002532:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002536:	4302      	orrs	r2, r0
 8002538:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800253c:	0718      	lsls	r0, r3, #28
 800253e:	d508      	bpl.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002540:	497f      	ldr	r1, [pc, #508]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002542:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002544:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002548:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800254c:	4302      	orrs	r2, r0
 800254e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002552:	06d9      	lsls	r1, r3, #27
 8002554:	d508      	bpl.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002556:	497a      	ldr	r1, [pc, #488]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002558:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800255a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800255e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002562:	4302      	orrs	r2, r0
 8002564:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002568:	069a      	lsls	r2, r3, #26
 800256a:	d508      	bpl.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800256c:	4974      	ldr	r1, [pc, #464]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800256e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002570:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002574:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002578:	4302      	orrs	r2, r0
 800257a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800257e:	059f      	lsls	r7, r3, #22
 8002580:	d508      	bpl.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002582:	496f      	ldr	r1, [pc, #444]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002584:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002586:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800258a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800258e:	4302      	orrs	r2, r0
 8002590:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002594:	055e      	lsls	r6, r3, #21
 8002596:	d508      	bpl.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002598:	4969      	ldr	r1, [pc, #420]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800259a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800259c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80025a0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80025a4:	4302      	orrs	r2, r0
 80025a6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025aa:	0658      	lsls	r0, r3, #25
 80025ac:	d508      	bpl.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025ae:	4964      	ldr	r1, [pc, #400]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80025b0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80025b2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80025b6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80025ba:	4302      	orrs	r2, r0
 80025bc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025c0:	0619      	lsls	r1, r3, #24
 80025c2:	d508      	bpl.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025c4:	495e      	ldr	r1, [pc, #376]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80025c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80025c8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80025cc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80025d0:	4302      	orrs	r2, r0
 80025d2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025d6:	05da      	lsls	r2, r3, #23
 80025d8:	d508      	bpl.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025da:	4959      	ldr	r1, [pc, #356]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80025dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025de:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80025e2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80025e6:	4302      	orrs	r2, r0
 80025e8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025ec:	049b      	lsls	r3, r3, #18
 80025ee:	d50f      	bpl.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025f0:	4a53      	ldr	r2, [pc, #332]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80025f2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80025f4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80025f8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80025fc:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025fe:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002602:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002606:	d164      	bne.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002608:	68d3      	ldr	r3, [r2, #12]
 800260a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800260e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002610:	6823      	ldr	r3, [r4, #0]
 8002612:	031f      	lsls	r7, r3, #12
 8002614:	d50f      	bpl.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002616:	4a4a      	ldr	r2, [pc, #296]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002618:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800261a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800261e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002622:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002624:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002628:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800262c:	d15c      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800262e:	68d3      	ldr	r3, [r2, #12]
 8002630:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002634:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002636:	6823      	ldr	r3, [r4, #0]
 8002638:	035e      	lsls	r6, r3, #13
 800263a:	d50f      	bpl.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800263c:	4a40      	ldr	r2, [pc, #256]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800263e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002640:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002644:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002648:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800264a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800264e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002652:	d154      	bne.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002654:	68d3      	ldr	r3, [r2, #12]
 8002656:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800265a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800265c:	6823      	ldr	r3, [r4, #0]
 800265e:	0458      	lsls	r0, r3, #17
 8002660:	d512      	bpl.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002662:	4937      	ldr	r1, [pc, #220]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002664:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002666:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800266a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800266e:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002670:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002678:	d14c      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800267a:	2102      	movs	r1, #2
 800267c:	1d20      	adds	r0, r4, #4
 800267e:	f7ff fd6d 	bl	800215c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002682:	2800      	cmp	r0, #0
 8002684:	bf18      	it	ne
 8002686:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002688:	6822      	ldr	r2, [r4, #0]
 800268a:	0411      	lsls	r1, r2, #16
 800268c:	d508      	bpl.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800268e:	492c      	ldr	r1, [pc, #176]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002690:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002692:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002696:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800269a:	4303      	orrs	r3, r0
 800269c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026a0:	03d3      	lsls	r3, r2, #15
 80026a2:	d509      	bpl.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026a4:	4a26      	ldr	r2, [pc, #152]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80026a6:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80026aa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80026ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026b2:	430b      	orrs	r3, r1
 80026b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80026b8:	4628      	mov	r0, r5
 80026ba:	b002      	add	sp, #8
 80026bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c0:	f7fd ff94 	bl	80005ec <HAL_GetTick>
 80026c4:	1b40      	subs	r0, r0, r5
 80026c6:	4548      	cmp	r0, r9
 80026c8:	f67f aeec 	bls.w	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80026cc:	e70c      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80026ce:	4635      	mov	r5, r6
 80026d0:	e712      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026d2:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80026d6:	d19b      	bne.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026d8:	2101      	movs	r1, #1
 80026da:	1d20      	adds	r0, r4, #4
 80026dc:	f7ff fd3e 	bl	800215c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80026e0:	2800      	cmp	r0, #0
 80026e2:	bf18      	it	ne
 80026e4:	4605      	movne	r5, r0
 80026e6:	e793      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026e8:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80026ec:	d1a3      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026ee:	2101      	movs	r1, #1
 80026f0:	1d20      	adds	r0, r4, #4
 80026f2:	f7ff fd33 	bl	800215c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80026f6:	2800      	cmp	r0, #0
 80026f8:	bf18      	it	ne
 80026fa:	4605      	movne	r5, r0
 80026fc:	e79b      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026fe:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002702:	d1ab      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002704:	2101      	movs	r1, #1
 8002706:	1d20      	adds	r0, r4, #4
 8002708:	f7ff fd28 	bl	800215c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800270c:	2800      	cmp	r0, #0
 800270e:	bf18      	it	ne
 8002710:	4605      	movne	r5, r0
 8002712:	e7a3      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002714:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002718:	d1b6      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800271a:	2102      	movs	r1, #2
 800271c:	f104 0020 	add.w	r0, r4, #32
 8002720:	f7ff fdaa 	bl	8002278 <RCCEx_PLLSAI2_Config>
 8002724:	e7ad      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272c:	65bb      	str	r3, [r7, #88]	; 0x58
 800272e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002734:	9301      	str	r3, [sp, #4]
 8002736:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002738:	f04f 0801 	mov.w	r8, #1
 800273c:	e67f      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0xca>
 800273e:	bf00      	nop
 8002740:	40021000 	.word	0x40021000

08002744 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002744:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8002746:	480a      	ldr	r0, [pc, #40]	; (8002770 <HAL_TIM_Base_Start_IT+0x2c>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	f042 0201 	orr.w	r2, r2, #1
 800274e:	60da      	str	r2, [r3, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8002750:	6899      	ldr	r1, [r3, #8]
 8002752:	4001      	ands	r1, r0
 8002754:	2906      	cmp	r1, #6
 8002756:	d008      	beq.n	800276a <HAL_TIM_Base_Start_IT+0x26>
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	4002      	ands	r2, r0
 800275c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 8002760:	bf1e      	ittt	ne
 8002762:	681a      	ldrne	r2, [r3, #0]
 8002764:	f042 0201 	orrne.w	r2, r2, #1
 8002768:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800276a:	2000      	movs	r0, #0
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	00010007 	.word	0x00010007

08002774 <HAL_TIM_OC_DelayElapsedCallback>:
 8002774:	4770      	bx	lr

08002776 <HAL_TIM_IC_CaptureCallback>:
 8002776:	4770      	bx	lr

08002778 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002778:	4770      	bx	lr

0800277a <HAL_TIM_TriggerCallback>:
 800277a:	4770      	bx	lr

0800277c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800277c:	6803      	ldr	r3, [r0, #0]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	0791      	lsls	r1, r2, #30
{
 8002782:	b510      	push	{r4, lr}
 8002784:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002786:	d50f      	bpl.n	80027a8 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	0792      	lsls	r2, r2, #30
 800278c:	d50c      	bpl.n	80027a8 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800278e:	f06f 0202 	mvn.w	r2, #2
 8002792:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002794:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002796:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002798:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800279a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800279c:	f000 8085 	beq.w	80028aa <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027a0:	f7ff ffe9 	bl	8002776 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a4:	2300      	movs	r3, #0
 80027a6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027a8:	6823      	ldr	r3, [r4, #0]
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	0752      	lsls	r2, r2, #29
 80027ae:	d510      	bpl.n	80027d2 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	0750      	lsls	r0, r2, #29
 80027b4:	d50d      	bpl.n	80027d2 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027b6:	f06f 0204 	mvn.w	r2, #4
 80027ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027bc:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027be:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027c0:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027c4:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027c6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027c8:	d075      	beq.n	80028b6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80027ca:	f7ff ffd4 	bl	8002776 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ce:	2300      	movs	r3, #0
 80027d0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	691a      	ldr	r2, [r3, #16]
 80027d6:	0711      	lsls	r1, r2, #28
 80027d8:	d50f      	bpl.n	80027fa <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	0712      	lsls	r2, r2, #28
 80027de:	d50c      	bpl.n	80027fa <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027e0:	f06f 0208 	mvn.w	r2, #8
 80027e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027e6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027e8:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027ea:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027ec:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ee:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027f0:	d067      	beq.n	80028c2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80027f2:	f7ff ffc0 	bl	8002776 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f6:	2300      	movs	r3, #0
 80027f8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027fa:	6823      	ldr	r3, [r4, #0]
 80027fc:	691a      	ldr	r2, [r3, #16]
 80027fe:	06d0      	lsls	r0, r2, #27
 8002800:	d510      	bpl.n	8002824 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	06d1      	lsls	r1, r2, #27
 8002806:	d50d      	bpl.n	8002824 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002808:	f06f 0210 	mvn.w	r2, #16
 800280c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800280e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002810:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002812:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002816:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002818:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800281a:	d058      	beq.n	80028ce <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800281c:	f7ff ffab 	bl	8002776 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002820:	2300      	movs	r3, #0
 8002822:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002824:	6823      	ldr	r3, [r4, #0]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	07d2      	lsls	r2, r2, #31
 800282a:	d508      	bpl.n	800283e <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	07d0      	lsls	r0, r2, #31
 8002830:	d505      	bpl.n	800283e <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002832:	f06f 0201 	mvn.w	r2, #1
 8002836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002838:	4620      	mov	r0, r4
 800283a:	f000 fcf3 	bl	8003224 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800283e:	6823      	ldr	r3, [r4, #0]
 8002840:	691a      	ldr	r2, [r3, #16]
 8002842:	0611      	lsls	r1, r2, #24
 8002844:	d508      	bpl.n	8002858 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	0612      	lsls	r2, r2, #24
 800284a:	d505      	bpl.n	8002858 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800284c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002852:	4620      	mov	r0, r4
 8002854:	f000 f99b 	bl	8002b8e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002858:	6823      	ldr	r3, [r4, #0]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	05d0      	lsls	r0, r2, #23
 800285e:	d508      	bpl.n	8002872 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	0611      	lsls	r1, r2, #24
 8002864:	d505      	bpl.n	8002872 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002866:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800286a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800286c:	4620      	mov	r0, r4
 800286e:	f000 f98f 	bl	8002b90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002872:	6823      	ldr	r3, [r4, #0]
 8002874:	691a      	ldr	r2, [r3, #16]
 8002876:	0652      	lsls	r2, r2, #25
 8002878:	d508      	bpl.n	800288c <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	0650      	lsls	r0, r2, #25
 800287e:	d505      	bpl.n	800288c <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002880:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002886:	4620      	mov	r0, r4
 8002888:	f7ff ff77 	bl	800277a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800288c:	6823      	ldr	r3, [r4, #0]
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	0691      	lsls	r1, r2, #26
 8002892:	d522      	bpl.n	80028da <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	0692      	lsls	r2, r2, #26
 8002898:	d51f      	bpl.n	80028da <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800289a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 800289e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028a0:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80028a6:	f000 b971 	b.w	8002b8c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028aa:	f7ff ff63 	bl	8002774 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ae:	4620      	mov	r0, r4
 80028b0:	f7ff ff62 	bl	8002778 <HAL_TIM_PWM_PulseFinishedCallback>
 80028b4:	e776      	b.n	80027a4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b6:	f7ff ff5d 	bl	8002774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ba:	4620      	mov	r0, r4
 80028bc:	f7ff ff5c 	bl	8002778 <HAL_TIM_PWM_PulseFinishedCallback>
 80028c0:	e785      	b.n	80027ce <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c2:	f7ff ff57 	bl	8002774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c6:	4620      	mov	r0, r4
 80028c8:	f7ff ff56 	bl	8002778 <HAL_TIM_PWM_PulseFinishedCallback>
 80028cc:	e793      	b.n	80027f6 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ce:	f7ff ff51 	bl	8002774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d2:	4620      	mov	r0, r4
 80028d4:	f7ff ff50 	bl	8002778 <HAL_TIM_PWM_PulseFinishedCallback>
 80028d8:	e7a2      	b.n	8002820 <HAL_TIM_IRQHandler+0xa4>
 80028da:	bd10      	pop	{r4, pc}

080028dc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028dc:	4a30      	ldr	r2, [pc, #192]	; (80029a0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80028de:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028e0:	4290      	cmp	r0, r2
 80028e2:	d012      	beq.n	800290a <TIM_Base_SetConfig+0x2e>
 80028e4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80028e8:	d00f      	beq.n	800290a <TIM_Base_SetConfig+0x2e>
 80028ea:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80028ee:	4290      	cmp	r0, r2
 80028f0:	d00b      	beq.n	800290a <TIM_Base_SetConfig+0x2e>
 80028f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028f6:	4290      	cmp	r0, r2
 80028f8:	d007      	beq.n	800290a <TIM_Base_SetConfig+0x2e>
 80028fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028fe:	4290      	cmp	r0, r2
 8002900:	d003      	beq.n	800290a <TIM_Base_SetConfig+0x2e>
 8002902:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8002906:	4290      	cmp	r0, r2
 8002908:	d119      	bne.n	800293e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800290a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800290c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002910:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002912:	4a23      	ldr	r2, [pc, #140]	; (80029a0 <TIM_Base_SetConfig+0xc4>)
 8002914:	4290      	cmp	r0, r2
 8002916:	d01d      	beq.n	8002954 <TIM_Base_SetConfig+0x78>
 8002918:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800291c:	d01a      	beq.n	8002954 <TIM_Base_SetConfig+0x78>
 800291e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002922:	4290      	cmp	r0, r2
 8002924:	d016      	beq.n	8002954 <TIM_Base_SetConfig+0x78>
 8002926:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800292a:	4290      	cmp	r0, r2
 800292c:	d012      	beq.n	8002954 <TIM_Base_SetConfig+0x78>
 800292e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002932:	4290      	cmp	r0, r2
 8002934:	d00e      	beq.n	8002954 <TIM_Base_SetConfig+0x78>
 8002936:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800293a:	4290      	cmp	r0, r2
 800293c:	d00a      	beq.n	8002954 <TIM_Base_SetConfig+0x78>
 800293e:	4a19      	ldr	r2, [pc, #100]	; (80029a4 <TIM_Base_SetConfig+0xc8>)
 8002940:	4290      	cmp	r0, r2
 8002942:	d007      	beq.n	8002954 <TIM_Base_SetConfig+0x78>
 8002944:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002948:	4290      	cmp	r0, r2
 800294a:	d003      	beq.n	8002954 <TIM_Base_SetConfig+0x78>
 800294c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002950:	4290      	cmp	r0, r2
 8002952:	d103      	bne.n	800295c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002954:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800295a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800295c:	694a      	ldr	r2, [r1, #20]
 800295e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002962:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002964:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002966:	688b      	ldr	r3, [r1, #8]
 8002968:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800296a:	680b      	ldr	r3, [r1, #0]
 800296c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800296e:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <TIM_Base_SetConfig+0xc4>)
 8002970:	4298      	cmp	r0, r3
 8002972:	d00f      	beq.n	8002994 <TIM_Base_SetConfig+0xb8>
 8002974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002978:	4298      	cmp	r0, r3
 800297a:	d00b      	beq.n	8002994 <TIM_Base_SetConfig+0xb8>
 800297c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002980:	4298      	cmp	r0, r3
 8002982:	d007      	beq.n	8002994 <TIM_Base_SetConfig+0xb8>
 8002984:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002988:	4298      	cmp	r0, r3
 800298a:	d003      	beq.n	8002994 <TIM_Base_SetConfig+0xb8>
 800298c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002990:	4298      	cmp	r0, r3
 8002992:	d101      	bne.n	8002998 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002994:	690b      	ldr	r3, [r1, #16]
 8002996:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002998:	2301      	movs	r3, #1
 800299a:	6143      	str	r3, [r0, #20]
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40012c00 	.word	0x40012c00
 80029a4:	40014000 	.word	0x40014000

080029a8 <HAL_TIM_Base_Init>:
{
 80029a8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80029aa:	4604      	mov	r4, r0
 80029ac:	b1a0      	cbz	r0, 80029d8 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80029ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80029b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80029b6:	b91b      	cbnz	r3, 80029c0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80029b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80029bc:	f001 f8ce 	bl	8003b5c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80029c0:	2302      	movs	r3, #2
 80029c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029c6:	6820      	ldr	r0, [r4, #0]
 80029c8:	1d21      	adds	r1, r4, #4
 80029ca:	f7ff ff87 	bl	80028dc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80029ce:	2301      	movs	r3, #1
 80029d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80029d4:	2000      	movs	r0, #0
 80029d6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80029d8:	2001      	movs	r0, #1
}
 80029da:	bd10      	pop	{r4, pc}

080029dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029dc:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029de:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029e0:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029e2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029e6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80029ea:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029ec:	6083      	str	r3, [r0, #8]
 80029ee:	bd10      	pop	{r4, pc}

080029f0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80029f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80029f4:	2b01      	cmp	r3, #1
{
 80029f6:	b570      	push	{r4, r5, r6, lr}
 80029f8:	4604      	mov	r4, r0
 80029fa:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80029fe:	d017      	beq.n	8002a30 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8002a00:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002a04:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002a06:	2301      	movs	r3, #1
 8002a08:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002a0c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a0e:	4b48      	ldr	r3, [pc, #288]	; (8002b30 <HAL_TIM_ConfigClockSource+0x140>)
 8002a10:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8002a12:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002a14:	680b      	ldr	r3, [r1, #0]
 8002a16:	2b40      	cmp	r3, #64	; 0x40
 8002a18:	d072      	beq.n	8002b00 <HAL_TIM_ConfigClockSource+0x110>
 8002a1a:	d815      	bhi.n	8002a48 <HAL_TIM_ConfigClockSource+0x58>
 8002a1c:	2b10      	cmp	r3, #16
 8002a1e:	d00c      	beq.n	8002a3a <HAL_TIM_ConfigClockSource+0x4a>
 8002a20:	d807      	bhi.n	8002a32 <HAL_TIM_ConfigClockSource+0x42>
 8002a22:	b153      	cbz	r3, 8002a3a <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8002a24:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002a26:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002a28:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002a2c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002a30:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	d001      	beq.n	8002a3a <HAL_TIM_ConfigClockSource+0x4a>
 8002a36:	2b30      	cmp	r3, #48	; 0x30
 8002a38:	d1f4      	bne.n	8002a24 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 8002a3a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a3c:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a40:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a44:	4313      	orrs	r3, r2
 8002a46:	e033      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 8002a48:	2b70      	cmp	r3, #112	; 0x70
 8002a4a:	d033      	beq.n	8002ab4 <HAL_TIM_ConfigClockSource+0xc4>
 8002a4c:	d81b      	bhi.n	8002a86 <HAL_TIM_ConfigClockSource+0x96>
 8002a4e:	2b50      	cmp	r3, #80	; 0x50
 8002a50:	d03f      	beq.n	8002ad2 <HAL_TIM_ConfigClockSource+0xe2>
 8002a52:	2b60      	cmp	r3, #96	; 0x60
 8002a54:	d1e6      	bne.n	8002a24 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a56:	684d      	ldr	r5, [r1, #4]
 8002a58:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a5a:	6a01      	ldr	r1, [r0, #32]
 8002a5c:	f021 0110 	bic.w	r1, r1, #16
 8002a60:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a62:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002a64:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a66:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a6e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a72:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002a76:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002a78:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002a7a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a80:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002a84:	e014      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 8002a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a8a:	d00c      	beq.n	8002aa6 <HAL_TIM_ConfigClockSource+0xb6>
 8002a8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a90:	d1c8      	bne.n	8002a24 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 8002a92:	68cb      	ldr	r3, [r1, #12]
 8002a94:	684a      	ldr	r2, [r1, #4]
 8002a96:	6889      	ldr	r1, [r1, #8]
 8002a98:	f7ff ffa0 	bl	80029dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a9c:	6822      	ldr	r2, [r4, #0]
 8002a9e:	6893      	ldr	r3, [r2, #8]
 8002aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aa4:	e013      	b.n	8002ace <HAL_TIM_ConfigClockSource+0xde>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002aa6:	6883      	ldr	r3, [r0, #8]
 8002aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aac:	f023 0307 	bic.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8002ab0:	6083      	str	r3, [r0, #8]
 8002ab2:	e7b7      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 8002ab4:	68cb      	ldr	r3, [r1, #12]
 8002ab6:	684a      	ldr	r2, [r1, #4]
 8002ab8:	6889      	ldr	r1, [r1, #8]
 8002aba:	f7ff ff8f 	bl	80029dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002abe:	6822      	ldr	r2, [r4, #0]
 8002ac0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002aca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ace:	6093      	str	r3, [r2, #8]
      break;
 8002ad0:	e7a8      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ad2:	684a      	ldr	r2, [r1, #4]
 8002ad4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002ad6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ad8:	6a05      	ldr	r5, [r0, #32]
 8002ada:	f025 0501 	bic.w	r5, r5, #1
 8002ade:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ae0:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ae2:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ae6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002aea:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002aee:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002af0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002af2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002af4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002afa:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8002afe:	e7d7      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0xc0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b00:	684a      	ldr	r2, [r1, #4]
 8002b02:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002b04:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b06:	6a05      	ldr	r5, [r0, #32]
 8002b08:	f025 0501 	bic.w	r5, r5, #1
 8002b0c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b0e:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b10:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b18:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002b1c:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002b1e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002b20:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002b22:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b28:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002b2c:	e7c0      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0xc0>
 8002b2e:	bf00      	nop
 8002b30:	fffe0088 	.word	0xfffe0088

08002b34 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b34:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002b38:	2b01      	cmp	r3, #1
{
 8002b3a:	b530      	push	{r4, r5, lr}
 8002b3c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002b40:	d01f      	beq.n	8002b82 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b42:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002b44:	4d10      	ldr	r5, [pc, #64]	; (8002b88 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002b46:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002b4a:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8002b4c:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002b4e:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002b50:	d003      	beq.n	8002b5a <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8002b52:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002b56:	42aa      	cmp	r2, r5
 8002b58:	d103      	bne.n	8002b62 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002b5a:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002b5c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002b60:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b62:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b64:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b6a:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002b6c:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b70:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b72:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b74:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 8002b76:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002b78:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002b82:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002b84:	bd30      	pop	{r4, r5, pc}
 8002b86:	bf00      	nop
 8002b88:	40012c00 	.word	0x40012c00

08002b8c <HAL_TIMEx_CommutationCallback>:
 8002b8c:	4770      	bx	lr

08002b8e <HAL_TIMEx_BreakCallback>:
 8002b8e:	4770      	bx	lr

08002b90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b90:	4770      	bx	lr
	...

08002b94 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b94:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b96:	69c1      	ldr	r1, [r0, #28]
{
 8002b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b9a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b9c:	6883      	ldr	r3, [r0, #8]
 8002b9e:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ba0:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ba2:	4303      	orrs	r3, r0
 8002ba4:	6960      	ldr	r0, [r4, #20]
 8002ba6:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ba8:	48ba      	ldr	r0, [pc, #744]	; (8002e94 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002baa:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bac:	4028      	ands	r0, r5
 8002bae:	4303      	orrs	r3, r0
 8002bb0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bb2:	6853      	ldr	r3, [r2, #4]
 8002bb4:	68e0      	ldr	r0, [r4, #12]
 8002bb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bba:	4303      	orrs	r3, r0
 8002bbc:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bbe:	4bb6      	ldr	r3, [pc, #728]	; (8002e98 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bc0:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bc2:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002bc4:	bf1c      	itt	ne
 8002bc6:	6a23      	ldrne	r3, [r4, #32]
 8002bc8:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bca:	6893      	ldr	r3, [r2, #8]
 8002bcc:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002bd0:	4303      	orrs	r3, r0
 8002bd2:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bd4:	4bb1      	ldr	r3, [pc, #708]	; (8002e9c <UART_SetConfig+0x308>)
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d119      	bne.n	8002c0e <UART_SetConfig+0x7a>
 8002bda:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002bde:	4ab0      	ldr	r2, [pc, #704]	; (8002ea0 <UART_SetConfig+0x30c>)
 8002be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be4:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002be8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002bec:	5cd3      	ldrb	r3, [r2, r3]
 8002bee:	f040 8138 	bne.w	8002e62 <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	f200 808f 	bhi.w	8002d16 <UART_SetConfig+0x182>
 8002bf8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002bfc:	00ca011a 	.word	0x00ca011a
 8002c00:	008d00f9 	.word	0x008d00f9
 8002c04:	008d0114 	.word	0x008d0114
 8002c08:	008d008d 	.word	0x008d008d
 8002c0c:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c0e:	4ba5      	ldr	r3, [pc, #660]	; (8002ea4 <UART_SetConfig+0x310>)
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d107      	bne.n	8002c24 <UART_SetConfig+0x90>
 8002c14:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8002c18:	4aa3      	ldr	r2, [pc, #652]	; (8002ea8 <UART_SetConfig+0x314>)
 8002c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	e7e1      	b.n	8002be8 <UART_SetConfig+0x54>
 8002c24:	4ba1      	ldr	r3, [pc, #644]	; (8002eac <UART_SetConfig+0x318>)
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d123      	bne.n	8002c72 <UART_SetConfig+0xde>
 8002c2a:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8002c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c32:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c36:	2b10      	cmp	r3, #16
 8002c38:	f000 80f1 	beq.w	8002e1e <UART_SetConfig+0x28a>
 8002c3c:	d80b      	bhi.n	8002c56 <UART_SetConfig+0xc2>
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 80f3 	beq.w	8002e2a <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c44:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002c48:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002c4c:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c50:	f000 80f8 	beq.w	8002e44 <UART_SetConfig+0x2b0>
 8002c54:	e0a8      	b.n	8002da8 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	f000 80c6 	beq.w	8002de8 <UART_SetConfig+0x254>
 8002c5c:	2b30      	cmp	r3, #48	; 0x30
 8002c5e:	d1f1      	bne.n	8002c44 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c60:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002c64:	f040 80b8 	bne.w	8002dd8 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002c68:	6860      	ldr	r0, [r4, #4]
 8002c6a:	0843      	lsrs	r3, r0, #1
 8002c6c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002c70:	e0c3      	b.n	8002dfa <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c72:	4b8f      	ldr	r3, [pc, #572]	; (8002eb0 <UART_SetConfig+0x31c>)
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d11e      	bne.n	8002cb6 <UART_SetConfig+0x122>
 8002c78:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8002c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c80:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002c84:	2b40      	cmp	r3, #64	; 0x40
 8002c86:	f000 80bb 	beq.w	8002e00 <UART_SetConfig+0x26c>
 8002c8a:	d80a      	bhi.n	8002ca2 <UART_SetConfig+0x10e>
 8002c8c:	b97b      	cbnz	r3, 8002cae <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c8e:	4b82      	ldr	r3, [pc, #520]	; (8002e98 <UART_SetConfig+0x304>)
 8002c90:	429a      	cmp	r2, r3
 8002c92:	f040 80ca 	bne.w	8002e2a <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002c96:	f7ff fa3d 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
        break;
 8002c9a:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8002c9c:	bbb0      	cbnz	r0, 8002d0c <UART_SetConfig+0x178>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	e03a      	b.n	8002d18 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ca2:	2b80      	cmp	r3, #128	; 0x80
 8002ca4:	f000 809d 	beq.w	8002de2 <UART_SetConfig+0x24e>
 8002ca8:	2bc0      	cmp	r3, #192	; 0xc0
 8002caa:	f000 80b0 	beq.w	8002e0e <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002cae:	4b7a      	ldr	r3, [pc, #488]	; (8002e98 <UART_SetConfig+0x304>)
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d1c7      	bne.n	8002c44 <UART_SetConfig+0xb0>
 8002cb4:	e02f      	b.n	8002d16 <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cb6:	4b7f      	ldr	r3, [pc, #508]	; (8002eb4 <UART_SetConfig+0x320>)
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d111      	bne.n	8002ce0 <UART_SetConfig+0x14c>
 8002cbc:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8002cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ccc:	f000 8098 	beq.w	8002e00 <UART_SetConfig+0x26c>
 8002cd0:	d9dc      	bls.n	8002c8c <UART_SetConfig+0xf8>
 8002cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cd6:	f000 8084 	beq.w	8002de2 <UART_SetConfig+0x24e>
 8002cda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cde:	e7e4      	b.n	8002caa <UART_SetConfig+0x116>
 8002ce0:	4b6d      	ldr	r3, [pc, #436]	; (8002e98 <UART_SetConfig+0x304>)
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d1ae      	bne.n	8002c44 <UART_SetConfig+0xb0>
 8002ce6:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8002cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf6:	f000 8083 	beq.w	8002e00 <UART_SetConfig+0x26c>
 8002cfa:	d9c7      	bls.n	8002c8c <UART_SetConfig+0xf8>
 8002cfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d00:	d06f      	beq.n	8002de2 <UART_SetConfig+0x24e>
 8002d02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d06:	e7d0      	b.n	8002caa <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002d08:	486b      	ldr	r0, [pc, #428]	; (8002eb8 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d0a:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8002d0c:	6862      	ldr	r2, [r4, #4]
 8002d0e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8002d12:	4281      	cmp	r1, r0
 8002d14:	d905      	bls.n	8002d22 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8002d16:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002d1c:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8002d1e:	4610      	mov	r0, r2
 8002d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8002d22:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002d26:	d8f6      	bhi.n	8002d16 <UART_SetConfig+0x182>
        switch (clocksource)
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d82e      	bhi.n	8002d8a <UART_SetConfig+0x1f6>
 8002d2c:	e8df f003 	tbb	[pc, r3]
 8002d30:	2d1c2d05 	.word	0x2d1c2d05
 8002d34:	2d2d2d24 	.word	0x2d2d2d24
 8002d38:	27          	.byte	0x27
 8002d39:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002d3a:	f7ff f9eb 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d3e:	6862      	ldr	r2, [r4, #4]
 8002d40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d44:	0856      	lsrs	r6, r2, #1
 8002d46:	2700      	movs	r7, #0
 8002d48:	fbe1 6700 	umlal	r6, r7, r1, r0
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	4630      	mov	r0, r6
 8002d50:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002d52:	f7fd fa8d 	bl	8000270 <__aeabi_uldivmod>
            break;
 8002d56:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d58:	4b58      	ldr	r3, [pc, #352]	; (8002ebc <UART_SetConfig+0x328>)
 8002d5a:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8002d5e:	4299      	cmp	r1, r3
 8002d60:	d8d9      	bhi.n	8002d16 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8002d62:	6823      	ldr	r3, [r4, #0]
 8002d64:	60d8      	str	r0, [r3, #12]
 8002d66:	e7d7      	b.n	8002d18 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002d68:	4855      	ldr	r0, [pc, #340]	; (8002ec0 <UART_SetConfig+0x32c>)
 8002d6a:	0855      	lsrs	r5, r2, #1
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	2100      	movs	r1, #0
 8002d70:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002d72:	f141 0100 	adc.w	r1, r1, #0
 8002d76:	e7ec      	b.n	8002d52 <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d78:	f7fe fec0 	bl	8001afc <HAL_RCC_GetSysClockFreq>
 8002d7c:	e7df      	b.n	8002d3e <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002d7e:	0850      	lsrs	r0, r2, #1
 8002d80:	2100      	movs	r1, #0
 8002d82:	2300      	movs	r3, #0
 8002d84:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8002d88:	e7f3      	b.n	8002d72 <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8002d8a:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	e7e3      	b.n	8002d58 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002d90:	f7ff f9d2 	bl	8002138 <HAL_RCC_GetPCLK2Freq>
 8002d94:	e04e      	b.n	8002e34 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002d96:	f7ff f9bd 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d9a:	6862      	ldr	r2, [r4, #4]
 8002d9c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002da0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002da4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002da6:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002da8:	f1a3 0010 	sub.w	r0, r3, #16
 8002dac:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002db0:	4288      	cmp	r0, r1
 8002db2:	d8b0      	bhi.n	8002d16 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8002db4:	6821      	ldr	r1, [r4, #0]
 8002db6:	60cb      	str	r3, [r1, #12]
 8002db8:	e7ae      	b.n	8002d18 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002dba:	f7ff f9bd 	bl	8002138 <HAL_RCC_GetPCLK2Freq>
 8002dbe:	e7ec      	b.n	8002d9a <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002dc0:	6860      	ldr	r0, [r4, #4]
 8002dc2:	0843      	lsrs	r3, r0, #1
 8002dc4:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002dc8:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002dcc:	fbb3 f3f0 	udiv	r3, r3, r0
 8002dd0:	e7e8      	b.n	8002da4 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002dd2:	f7fe fe93 	bl	8001afc <HAL_RCC_GetSysClockFreq>
 8002dd6:	e7e0      	b.n	8002d9a <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002dd8:	6860      	ldr	r0, [r4, #4]
 8002dda:	0843      	lsrs	r3, r0, #1
 8002ddc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002de0:	e7f4      	b.n	8002dcc <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002de2:	4b2d      	ldr	r3, [pc, #180]	; (8002e98 <UART_SetConfig+0x304>)
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d08f      	beq.n	8002d08 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002de8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002dec:	d1e8      	bne.n	8002dc0 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002dee:	6860      	ldr	r0, [r4, #4]
 8002df0:	0843      	lsrs	r3, r0, #1
 8002df2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002df6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002dfa:	fbb3 f3f0 	udiv	r3, r3, r0
 8002dfe:	e01f      	b.n	8002e40 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e00:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <UART_SetConfig+0x304>)
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d10b      	bne.n	8002e1e <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002e06:	f7fe fe79 	bl	8001afc <HAL_RCC_GetSysClockFreq>
        break;
 8002e0a:	2304      	movs	r3, #4
 8002e0c:	e746      	b.n	8002c9c <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e0e:	4b22      	ldr	r3, [pc, #136]	; (8002e98 <UART_SetConfig+0x304>)
 8002e10:	429a      	cmp	r2, r3
 8002e12:	f47f af25 	bne.w	8002c60 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002e16:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e1a:	2308      	movs	r3, #8
 8002e1c:	e776      	b.n	8002d0c <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e1e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002e22:	d1d6      	bne.n	8002dd2 <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002e24:	f7fe fe6a 	bl	8001afc <HAL_RCC_GetSysClockFreq>
 8002e28:	e004      	b.n	8002e34 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e2a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002e2e:	d1b2      	bne.n	8002d96 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002e30:	f7ff f970 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002e34:	6861      	ldr	r1, [r4, #4]
 8002e36:	084a      	lsrs	r2, r1, #1
 8002e38:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002e3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e40:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e42:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e44:	f1a3 0010 	sub.w	r0, r3, #16
 8002e48:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002e4c:	4288      	cmp	r0, r1
 8002e4e:	f63f af62 	bhi.w	8002d16 <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 8002e52:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8002e56:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e58:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	60c3      	str	r3, [r0, #12]
 8002e60:	e75a      	b.n	8002d18 <UART_SetConfig+0x184>
    switch (clocksource)
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	f63f af57 	bhi.w	8002d16 <UART_SetConfig+0x182>
 8002e68:	a201      	add	r2, pc, #4	; (adr r2, 8002e70 <UART_SetConfig+0x2dc>)
 8002e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6e:	bf00      	nop
 8002e70:	08002d97 	.word	0x08002d97
 8002e74:	08002dbb 	.word	0x08002dbb
 8002e78:	08002dc1 	.word	0x08002dc1
 8002e7c:	08002d17 	.word	0x08002d17
 8002e80:	08002dd3 	.word	0x08002dd3
 8002e84:	08002d17 	.word	0x08002d17
 8002e88:	08002d17 	.word	0x08002d17
 8002e8c:	08002d17 	.word	0x08002d17
 8002e90:	08002dd9 	.word	0x08002dd9
 8002e94:	efff69f3 	.word	0xefff69f3
 8002e98:	40008000 	.word	0x40008000
 8002e9c:	40013800 	.word	0x40013800
 8002ea0:	08004c58 	.word	0x08004c58
 8002ea4:	40004400 	.word	0x40004400
 8002ea8:	08004c5c 	.word	0x08004c5c
 8002eac:	40004800 	.word	0x40004800
 8002eb0:	40004c00 	.word	0x40004c00
 8002eb4:	40005000 	.word	0x40005000
 8002eb8:	00f42400 	.word	0x00f42400
 8002ebc:	000ffcff 	.word	0x000ffcff
 8002ec0:	f4240000 	.word	0xf4240000

08002ec4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ec4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ec6:	07da      	lsls	r2, r3, #31
{
 8002ec8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002eca:	d506      	bpl.n	8002eda <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ecc:	6801      	ldr	r1, [r0, #0]
 8002ece:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002ed0:	684a      	ldr	r2, [r1, #4]
 8002ed2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002ed6:	4322      	orrs	r2, r4
 8002ed8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eda:	079c      	lsls	r4, r3, #30
 8002edc:	d506      	bpl.n	8002eec <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ede:	6801      	ldr	r1, [r0, #0]
 8002ee0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002ee2:	684a      	ldr	r2, [r1, #4]
 8002ee4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ee8:	4322      	orrs	r2, r4
 8002eea:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002eec:	0759      	lsls	r1, r3, #29
 8002eee:	d506      	bpl.n	8002efe <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ef0:	6801      	ldr	r1, [r0, #0]
 8002ef2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002ef4:	684a      	ldr	r2, [r1, #4]
 8002ef6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002efa:	4322      	orrs	r2, r4
 8002efc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002efe:	071a      	lsls	r2, r3, #28
 8002f00:	d506      	bpl.n	8002f10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f02:	6801      	ldr	r1, [r0, #0]
 8002f04:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002f06:	684a      	ldr	r2, [r1, #4]
 8002f08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f0c:	4322      	orrs	r2, r4
 8002f0e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f10:	06dc      	lsls	r4, r3, #27
 8002f12:	d506      	bpl.n	8002f22 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f14:	6801      	ldr	r1, [r0, #0]
 8002f16:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002f18:	688a      	ldr	r2, [r1, #8]
 8002f1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f1e:	4322      	orrs	r2, r4
 8002f20:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f22:	0699      	lsls	r1, r3, #26
 8002f24:	d506      	bpl.n	8002f34 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f26:	6801      	ldr	r1, [r0, #0]
 8002f28:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002f2a:	688a      	ldr	r2, [r1, #8]
 8002f2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f30:	4322      	orrs	r2, r4
 8002f32:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f34:	065a      	lsls	r2, r3, #25
 8002f36:	d50f      	bpl.n	8002f58 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f38:	6801      	ldr	r1, [r0, #0]
 8002f3a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002f3c:	684a      	ldr	r2, [r1, #4]
 8002f3e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002f42:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f44:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f48:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f4a:	d105      	bne.n	8002f58 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f4c:	684a      	ldr	r2, [r1, #4]
 8002f4e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002f50:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002f54:	4322      	orrs	r2, r4
 8002f56:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f58:	061b      	lsls	r3, r3, #24
 8002f5a:	d506      	bpl.n	8002f6a <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f5c:	6802      	ldr	r2, [r0, #0]
 8002f5e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002f60:	6853      	ldr	r3, [r2, #4]
 8002f62:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002f66:	430b      	orrs	r3, r1
 8002f68:	6053      	str	r3, [r2, #4]
 8002f6a:	bd10      	pop	{r4, pc}

08002f6c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f70:	9d06      	ldr	r5, [sp, #24]
 8002f72:	4604      	mov	r4, r0
 8002f74:	460f      	mov	r7, r1
 8002f76:	4616      	mov	r6, r2
 8002f78:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f7a:	6821      	ldr	r1, [r4, #0]
 8002f7c:	69ca      	ldr	r2, [r1, #28]
 8002f7e:	ea37 0302 	bics.w	r3, r7, r2
 8002f82:	bf0c      	ite	eq
 8002f84:	2201      	moveq	r2, #1
 8002f86:	2200      	movne	r2, #0
 8002f88:	42b2      	cmp	r2, r6
 8002f8a:	d002      	beq.n	8002f92 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002f8c:	2000      	movs	r0, #0
}
 8002f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002f92:	1c6b      	adds	r3, r5, #1
 8002f94:	d0f2      	beq.n	8002f7c <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f96:	b99d      	cbnz	r5, 8002fc0 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f98:	6823      	ldr	r3, [r4, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fa0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	f022 0201 	bic.w	r2, r2, #1
 8002fa8:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002faa:	2320      	movs	r3, #32
 8002fac:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8002fb0:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8002fba:	2003      	movs	r0, #3
 8002fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fc0:	f7fd fb14 	bl	80005ec <HAL_GetTick>
 8002fc4:	eba0 0008 	sub.w	r0, r0, r8
 8002fc8:	4285      	cmp	r5, r0
 8002fca:	d2d6      	bcs.n	8002f7a <UART_WaitOnFlagUntilTimeout+0xe>
 8002fcc:	e7e4      	b.n	8002f98 <UART_WaitOnFlagUntilTimeout+0x2c>

08002fce <HAL_UART_Transmit>:
{
 8002fce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002fd2:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002fd4:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002fd8:	2b20      	cmp	r3, #32
{
 8002fda:	4604      	mov	r4, r0
 8002fdc:	460d      	mov	r5, r1
 8002fde:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002fe0:	d14a      	bne.n	8003078 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8002fe2:	2900      	cmp	r1, #0
 8002fe4:	d046      	beq.n	8003074 <HAL_UART_Transmit+0xa6>
 8002fe6:	2a00      	cmp	r2, #0
 8002fe8:	d044      	beq.n	8003074 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8002fea:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d042      	beq.n	8003078 <HAL_UART_Transmit+0xaa>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ffc:	2321      	movs	r3, #33	; 0x21
 8002ffe:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8003002:	f7fd faf3 	bl	80005ec <HAL_GetTick>
    huart->TxXferSize  = Size;
 8003006:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 800300a:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800300c:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003010:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003014:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 8003016:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003018:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 800301a:	b952      	cbnz	r2, 8003032 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800301c:	2140      	movs	r1, #64	; 0x40
 800301e:	4620      	mov	r0, r4
 8003020:	f7ff ffa4 	bl	8002f6c <UART_WaitOnFlagUntilTimeout>
 8003024:	b958      	cbnz	r0, 800303e <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8003026:	2320      	movs	r3, #32
 8003028:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 800302c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8003030:	e006      	b.n	8003040 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003032:	2200      	movs	r2, #0
 8003034:	2180      	movs	r1, #128	; 0x80
 8003036:	4620      	mov	r0, r4
 8003038:	f7ff ff98 	bl	8002f6c <UART_WaitOnFlagUntilTimeout>
 800303c:	b118      	cbz	r0, 8003046 <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 800303e:	2003      	movs	r0, #3
}
 8003040:	b002      	add	sp, #8
 8003042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003046:	68a3      	ldr	r3, [r4, #8]
 8003048:	6822      	ldr	r2, [r4, #0]
 800304a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800304e:	d10d      	bne.n	800306c <HAL_UART_Transmit+0x9e>
 8003050:	6923      	ldr	r3, [r4, #16]
 8003052:	b95b      	cbnz	r3, 800306c <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003054:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800305c:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800305e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003062:	3b01      	subs	r3, #1
 8003064:	b29b      	uxth	r3, r3
 8003066:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800306a:	e7d1      	b.n	8003010 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800306c:	782b      	ldrb	r3, [r5, #0]
 800306e:	8513      	strh	r3, [r2, #40]	; 0x28
 8003070:	3501      	adds	r5, #1
 8003072:	e7f4      	b.n	800305e <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8003074:	2001      	movs	r0, #1
 8003076:	e7e3      	b.n	8003040 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8003078:	2002      	movs	r0, #2
 800307a:	e7e1      	b.n	8003040 <HAL_UART_Transmit+0x72>

0800307c <UART_CheckIdleState>:
{
 800307c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800307e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003080:	2600      	movs	r6, #0
 8003082:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8003084:	f7fd fab2 	bl	80005ec <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003088:	6823      	ldr	r3, [r4, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800308e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003090:	d417      	bmi.n	80030c2 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003092:	6823      	ldr	r3, [r4, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	075b      	lsls	r3, r3, #29
 8003098:	d50a      	bpl.n	80030b0 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800309a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	2200      	movs	r2, #0
 80030a2:	462b      	mov	r3, r5
 80030a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80030a8:	4620      	mov	r0, r4
 80030aa:	f7ff ff5f 	bl	8002f6c <UART_WaitOnFlagUntilTimeout>
 80030ae:	b9a0      	cbnz	r0, 80030da <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 80030b0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80030b2:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80030b4:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 80030b8:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 80030bc:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 80030c0:	e00c      	b.n	80030dc <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	4632      	mov	r2, r6
 80030ca:	4603      	mov	r3, r0
 80030cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030d0:	4620      	mov	r0, r4
 80030d2:	f7ff ff4b 	bl	8002f6c <UART_WaitOnFlagUntilTimeout>
 80030d6:	2800      	cmp	r0, #0
 80030d8:	d0db      	beq.n	8003092 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80030da:	2003      	movs	r0, #3
}
 80030dc:	b002      	add	sp, #8
 80030de:	bd70      	pop	{r4, r5, r6, pc}

080030e0 <HAL_UART_Init>:
{
 80030e0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80030e2:	4604      	mov	r4, r0
 80030e4:	b360      	cbz	r0, 8003140 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 80030e6:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80030ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80030ee:	b91b      	cbnz	r3, 80030f8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80030f0:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80030f4:	f000 fd50 	bl	8003b98 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80030f8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80030fa:	2324      	movs	r3, #36	; 0x24
 80030fc:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8003100:	6813      	ldr	r3, [r2, #0]
 8003102:	f023 0301 	bic.w	r3, r3, #1
 8003106:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003108:	4620      	mov	r0, r4
 800310a:	f7ff fd43 	bl	8002b94 <UART_SetConfig>
 800310e:	2801      	cmp	r0, #1
 8003110:	d016      	beq.n	8003140 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003112:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003114:	b113      	cbz	r3, 800311c <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8003116:	4620      	mov	r0, r4
 8003118:	f7ff fed4 	bl	8002ec4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800311c:	6823      	ldr	r3, [r4, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003124:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800312c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003134:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003136:	601a      	str	r2, [r3, #0]
}
 8003138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800313c:	f7ff bf9e 	b.w	800307c <UART_CheckIdleState>
}
 8003140:	2001      	movs	r0, #1
 8003142:	bd10      	pop	{r4, pc}

08003144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003146:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003148:	2244      	movs	r2, #68	; 0x44
 800314a:	2100      	movs	r1, #0
 800314c:	a805      	add	r0, sp, #20
 800314e:	f000 fddd 	bl	8003d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003152:	2214      	movs	r2, #20
 8003154:	2100      	movs	r1, #0
 8003156:	4668      	mov	r0, sp
 8003158:	f000 fdd8 	bl	8003d0c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800315c:	2288      	movs	r2, #136	; 0x88
 800315e:	2100      	movs	r1, #0
 8003160:	a816      	add	r0, sp, #88	; 0x58
 8003162:	f000 fdd3 	bl	8003d0c <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800316a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800316c:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800316e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003170:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003172:	2701      	movs	r7, #1
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003174:	230a      	movs	r3, #10
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003176:	2607      	movs	r6, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003178:	a805      	add	r0, sp, #20
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800317a:	2500      	movs	r5, #0
  RCC_OscInitStruct.PLL.PLLN = 10;
 800317c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800317e:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003180:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003182:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003184:	9711      	str	r7, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003186:	9613      	str	r6, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003188:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800318a:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800318c:	f7fe fd0a 	bl	8001ba4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003190:	220f      	movs	r2, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003192:	2104      	movs	r1, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003194:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003196:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003198:	e88d 002c 	stmia.w	sp, {r2, r3, r5}
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800319c:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800319e:	9504      	str	r5, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80031a0:	f7fe ff26 	bl	8001ff0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80031a4:	f244 0342 	movw	r3, #16450	; 0x4042
 80031a8:	9316      	str	r3, [sp, #88]	; 0x58
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80031aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80031ae:	9334      	str	r3, [sp, #208]	; 0xd0
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80031b0:	2308      	movs	r3, #8
 80031b2:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031b4:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80031b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031ba:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80031bc:	9525      	str	r5, [sp, #148]	; 0x94
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80031be:	952a      	str	r5, [sp, #168]	; 0xa8
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80031c0:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80031c2:	9718      	str	r7, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80031c4:	961a      	str	r6, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80031c6:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80031c8:	941c      	str	r4, [sp, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031ca:	f7ff f8d3 	bl	8002374 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80031ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80031d2:	f7fe fc1b 	bl	8001a0c <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 80031d6:	b039      	add	sp, #228	; 0xe4
 80031d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080031dc <_write>:

/* USER CODE BEGIN 4 */

//printf
int _write(int file,char *ptr, int len)
{
 80031dc:	b510      	push	{r4, lr}
    HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 80031de:	230a      	movs	r3, #10
{
 80031e0:	4614      	mov	r4, r2
    HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 80031e2:	4803      	ldr	r0, [pc, #12]	; (80031f0 <_write+0x14>)
 80031e4:	b292      	uxth	r2, r2
 80031e6:	f7ff fef2 	bl	8002fce <HAL_UART_Transmit>
    return len;
}
 80031ea:	4620      	mov	r0, r4
 80031ec:	bd10      	pop	{r4, pc}
 80031ee:	bf00      	nop
 80031f0:	200001f4 	.word	0x200001f4

080031f4 <ADC_Init>:
	READ_SENSOR_MQ135();
	HAL_ADC_Start_IT(&hadc1);
}
void ADC_Init() //Lancer l'ADC
{
	if (HAL_ADC_Start_IT(&hadc1)!= HAL_OK)
 80031f4:	4801      	ldr	r0, [pc, #4]	; (80031fc <ADC_Init+0x8>)
 80031f6:	f7fd be3b 	b.w	8000e70 <HAL_ADC_Start_IT>
 80031fa:	bf00      	nop
 80031fc:	20000168 	.word	0x20000168

08003200 <READ_SENSOR_MQ135>:
	{
		Error_Handler();
	}
}
void READ_SENSOR_MQ135()
{
 8003200:	b508      	push	{r3, lr}
	printf("ta mere");
 8003202:	4805      	ldr	r0, [pc, #20]	; (8003218 <READ_SENSOR_MQ135+0x18>)
 8003204:	f000 fd8a 	bl	8003d1c <iprintf>
	printf("SENSOR CO2 : %d\r\n", valeurADC);
 8003208:	4b04      	ldr	r3, [pc, #16]	; (800321c <READ_SENSOR_MQ135+0x1c>)
 800320a:	4805      	ldr	r0, [pc, #20]	; (8003220 <READ_SENSOR_MQ135+0x20>)
 800320c:	8819      	ldrh	r1, [r3, #0]
}
 800320e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printf("SENSOR CO2 : %d\r\n", valeurADC);
 8003212:	f000 bd83 	b.w	8003d1c <iprintf>
 8003216:	bf00      	nop
 8003218:	08004c69 	.word	0x08004c69
 800321c:	200000a6 	.word	0x200000a6
 8003220:	08004c71 	.word	0x08004c71

08003224 <HAL_TIM_PeriodElapsedCallback>:
{
 8003224:	b508      	push	{r3, lr}
	READ_SENSOR_MQ135();
 8003226:	f7ff ffeb 	bl	8003200 <READ_SENSOR_MQ135>
	HAL_ADC_Start_IT(&hadc1);
 800322a:	4802      	ldr	r0, [pc, #8]	; (8003234 <HAL_TIM_PeriodElapsedCallback+0x10>)
}
 800322c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_ADC_Start_IT(&hadc1);
 8003230:	f7fd be1e 	b.w	8000e70 <HAL_ADC_Start_IT>
 8003234:	20000168 	.word	0x20000168

08003238 <Who_am_i>:
	uint16_t result = (valeur>>1);
	return result;
}

void Who_am_i()
{
 8003238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	  HAL_I2C_Mem_Read(&hi2c1,0xBF, sub_addr_who_am_i[0], 1, who_am_i, 1, I2C_TIMEOUT);
 800323a:	4b0d      	ldr	r3, [pc, #52]	; (8003270 <Who_am_i+0x38>)
 800323c:	4c0d      	ldr	r4, [pc, #52]	; (8003274 <Who_am_i+0x3c>)
 800323e:	781a      	ldrb	r2, [r3, #0]
 8003240:	480d      	ldr	r0, [pc, #52]	; (8003278 <Who_am_i+0x40>)
 8003242:	9400      	str	r4, [sp, #0]
 8003244:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003248:	9302      	str	r3, [sp, #8]
 800324a:	2301      	movs	r3, #1
 800324c:	9301      	str	r3, [sp, #4]
 800324e:	21bf      	movs	r1, #191	; 0xbf
 8003250:	f7fe faca 	bl	80017e8 <HAL_I2C_Mem_Read>
	  printf("Who AM I : %d", who_am_i[0]);
 8003254:	7821      	ldrb	r1, [r4, #0]
 8003256:	4809      	ldr	r0, [pc, #36]	; (800327c <Who_am_i+0x44>)
 8003258:	f000 fd60 	bl	8003d1c <iprintf>
	  printf("apricot");
 800325c:	4808      	ldr	r0, [pc, #32]	; (8003280 <Who_am_i+0x48>)
 800325e:	f000 fd5d 	bl	8003d1c <iprintf>
	  printf("Who AM I : %u", who_am_i[0]);
 8003262:	7821      	ldrb	r1, [r4, #0]
 8003264:	4807      	ldr	r0, [pc, #28]	; (8003284 <Who_am_i+0x4c>)

}
 8003266:	b004      	add	sp, #16
 8003268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  printf("Who AM I : %u", who_am_i[0]);
 800326c:	f000 bd56 	b.w	8003d1c <iprintf>
 8003270:	2000001f 	.word	0x2000001f
 8003274:	200000a8 	.word	0x200000a8
 8003278:	200000cc 	.word	0x200000cc
 800327c:	08004c83 	.word	0x08004c83
 8003280:	08004c91 	.word	0x08004c91
 8003284:	08004c99 	.word	0x08004c99

08003288 <Register>:
void Register()
{
 8003288:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	//Temperature & humidity
	HAL_I2C_Mem_Write(&hi2c1,0xBE, addr_CTRL_REG1_TEMP[0], 1, CTRL_REG1_TEMP, 1, I2C_TIMEOUT);
 800328a:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <Register+0x68>)
 800328c:	4d19      	ldr	r5, [pc, #100]	; (80032f4 <Register+0x6c>)
 800328e:	781a      	ldrb	r2, [r3, #0]
 8003290:	4b19      	ldr	r3, [pc, #100]	; (80032f8 <Register+0x70>)
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	2401      	movs	r4, #1
 8003296:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800329a:	4623      	mov	r3, r4
 800329c:	9602      	str	r6, [sp, #8]
 800329e:	9401      	str	r4, [sp, #4]
 80032a0:	21be      	movs	r1, #190	; 0xbe
 80032a2:	4628      	mov	r0, r5
 80032a4:	f7fe f9e8 	bl	8001678 <HAL_I2C_Mem_Write>
	//PRESSURE
	HAL_I2C_Mem_Write(&hi2c1,0xBA, addr_CTRL_REG1_PRES[0], 1, CTRL_REG1_PRES, 1, I2C_TIMEOUT);
 80032a8:	4b14      	ldr	r3, [pc, #80]	; (80032fc <Register+0x74>)
 80032aa:	781a      	ldrb	r2, [r3, #0]
 80032ac:	4b14      	ldr	r3, [pc, #80]	; (8003300 <Register+0x78>)
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	9602      	str	r6, [sp, #8]
 80032b2:	4623      	mov	r3, r4
 80032b4:	9401      	str	r4, [sp, #4]
 80032b6:	21ba      	movs	r1, #186	; 0xba
 80032b8:	4628      	mov	r0, r5
 80032ba:	f7fe f9dd 	bl	8001678 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1,0xBA, addr_CTRL_REG2_PRES[0], 1, CTRL_REG2_PRES, 1, I2C_TIMEOUT);
 80032be:	4b11      	ldr	r3, [pc, #68]	; (8003304 <Register+0x7c>)
 80032c0:	781a      	ldrb	r2, [r3, #0]
 80032c2:	4b11      	ldr	r3, [pc, #68]	; (8003308 <Register+0x80>)
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	9602      	str	r6, [sp, #8]
 80032c8:	4623      	mov	r3, r4
 80032ca:	9401      	str	r4, [sp, #4]
 80032cc:	21ba      	movs	r1, #186	; 0xba
 80032ce:	4628      	mov	r0, r5
 80032d0:	f7fe f9d2 	bl	8001678 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1,0xBA, addr_INTERRUPT_CFG[0], 1, INTERRUPT_CFG, 1, I2C_TIMEOUT);
 80032d4:	4b0d      	ldr	r3, [pc, #52]	; (800330c <Register+0x84>)
 80032d6:	781a      	ldrb	r2, [r3, #0]
 80032d8:	4b0d      	ldr	r3, [pc, #52]	; (8003310 <Register+0x88>)
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	9602      	str	r6, [sp, #8]
 80032de:	9401      	str	r4, [sp, #4]
 80032e0:	4623      	mov	r3, r4
 80032e2:	21ba      	movs	r1, #186	; 0xba
 80032e4:	4628      	mov	r0, r5
 80032e6:	f7fe f9c7 	bl	8001678 <HAL_I2C_Mem_Write>

}
 80032ea:	b004      	add	sp, #16
 80032ec:	bd70      	pop	{r4, r5, r6, pc}
 80032ee:	bf00      	nop
 80032f0:	20000005 	.word	0x20000005
 80032f4:	200000cc 	.word	0x200000cc
 80032f8:	20000001 	.word	0x20000001
 80032fc:	20000004 	.word	0x20000004
 8003300:	20000000 	.word	0x20000000
 8003304:	20000006 	.word	0x20000006
 8003308:	20000002 	.word	0x20000002
 800330c:	2000000f 	.word	0x2000000f
 8003310:	20000003 	.word	0x20000003

08003314 <main>:
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 8003318:	f7fd f94a 	bl	80005b0 <HAL_Init>
  SystemClock_Config();
 800331c:	f7ff ff12 	bl	8003144 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003320:	2214      	movs	r2, #20
 8003322:	2100      	movs	r1, #0
 8003324:	a808      	add	r0, sp, #32
 8003326:	f000 fcf1 	bl	8003d0c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800332a:	4b75      	ldr	r3, [pc, #468]	; (8003500 <main+0x1ec>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800332c:	4875      	ldr	r0, [pc, #468]	; (8003504 <main+0x1f0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800332e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003330:	f042 0204 	orr.w	r2, r2, #4
 8003334:	64da      	str	r2, [r3, #76]	; 0x4c
 8003336:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003338:	f002 0204 	and.w	r2, r2, #4
 800333c:	9200      	str	r2, [sp, #0]
 800333e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003340:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003342:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003346:	64da      	str	r2, [r3, #76]	; 0x4c
 8003348:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800334a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800334e:	9201      	str	r2, [sp, #4]
 8003350:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003352:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003354:	f042 0201 	orr.w	r2, r2, #1
 8003358:	64da      	str	r2, [r3, #76]	; 0x4c
 800335a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800335c:	f002 0201 	and.w	r2, r2, #1
 8003360:	9202      	str	r2, [sp, #8]
 8003362:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003364:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003366:	f042 0202 	orr.w	r2, r2, #2
 800336a:	64da      	str	r2, [r3, #76]	; 0x4c
 800336c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800336e:	f002 0202 	and.w	r2, r2, #2
 8003372:	9203      	str	r2, [sp, #12]
 8003374:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003376:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003378:	f042 0208 	orr.w	r2, r2, #8
 800337c:	64da      	str	r2, [r3, #76]	; 0x4c
 800337e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003380:	f003 0308 	and.w	r3, r3, #8
 8003384:	9304      	str	r3, [sp, #16]
 8003386:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Pin = B1_Pin;
 8003388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800338c:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800338e:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003390:	4b5d      	ldr	r3, [pc, #372]	; (8003508 <main+0x1f4>)
 8003392:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003394:	2400      	movs	r4, #0
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003396:	f7fd ff01 	bl	800119c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800339a:	2503      	movs	r5, #3
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800339c:	f641 73ff 	movw	r3, #8191	; 0x1fff
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033a0:	a908      	add	r1, sp, #32
 80033a2:	4858      	ldr	r0, [pc, #352]	; (8003504 <main+0x1f0>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80033a4:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033a6:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a8:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033aa:	f7fd fef7 	bl	800119c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6 
 80033ae:	f649 73e3 	movw	r3, #40931	; 0x9fe3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b2:	a908      	add	r1, sp, #32
 80033b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6 
 80033b8:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033ba:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033bc:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033be:	f7fd feed 	bl	800119c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 80033c2:	f64f 43f7 	movw	r3, #64759	; 0xfcf7
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033c6:	a908      	add	r1, sp, #32
 80033c8:	4850      	ldr	r0, [pc, #320]	; (800350c <main+0x1f8>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 80033ca:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80033cc:	2604      	movs	r6, #4
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033ce:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d0:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033d2:	f7fd fee3 	bl	800119c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033d6:	a908      	add	r1, sp, #32
 80033d8:	484d      	ldr	r0, [pc, #308]	; (8003510 <main+0x1fc>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80033da:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033dc:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033de:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033e0:	f7fd fedc 	bl	800119c <HAL_GPIO_Init>
  huart2.Instance = USART2;
 80033e4:	484b      	ldr	r0, [pc, #300]	; (8003514 <main+0x200>)
  huart2.Init.BaudRate = 115200;
 80033e6:	4a4c      	ldr	r2, [pc, #304]	; (8003518 <main+0x204>)
  hadc1.Instance = ADC1;
 80033e8:	4d4c      	ldr	r5, [pc, #304]	; (800351c <main+0x208>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80033ea:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 80033ec:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80033f0:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033f4:	230c      	movs	r3, #12
 80033f6:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033f8:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80033fa:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033fc:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033fe:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003400:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003402:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003404:	f7ff fe6c 	bl	80030e0 <HAL_UART_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8003408:	2218      	movs	r2, #24
 800340a:	4621      	mov	r1, r4
 800340c:	a808      	add	r0, sp, #32
  ADC_MultiModeTypeDef multimode = {0};
 800340e:	9405      	str	r4, [sp, #20]
 8003410:	9406      	str	r4, [sp, #24]
 8003412:	9407      	str	r4, [sp, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003414:	f000 fc7a 	bl	8003d0c <memset>
  hadc1.Instance = ADC1;
 8003418:	4b41      	ldr	r3, [pc, #260]	; (8003520 <main+0x20c>)
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800341a:	616e      	str	r6, [r5, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800341c:	2701      	movs	r7, #1
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800341e:	4628      	mov	r0, r5
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003420:	e885 0018 	stmia.w	r5, {r3, r4}
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003424:	60ac      	str	r4, [r5, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003426:	60ec      	str	r4, [r5, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003428:	612c      	str	r4, [r5, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800342a:	762c      	strb	r4, [r5, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800342c:	766f      	strb	r7, [r5, #25]
  hadc1.Init.NbrOfConversion = 1;
 800342e:	61ef      	str	r7, [r5, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003430:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003434:	62ac      	str	r4, [r5, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003436:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003438:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800343c:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800343e:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003442:	f7fd f8f3 	bl	800062c <HAL_ADC_Init>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003446:	a905      	add	r1, sp, #20
 8003448:	4628      	mov	r0, r5
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800344a:	9405      	str	r4, [sp, #20]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800344c:	f7fd fdc6 	bl	8000fdc <HAL_ADCEx_MultiModeConfigChannel>
  sConfig.Channel = ADC_CHANNEL_9;
 8003450:	4b34      	ldr	r3, [pc, #208]	; (8003524 <main+0x210>)
 8003452:	9308      	str	r3, [sp, #32]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003454:	2306      	movs	r3, #6
 8003456:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003458:	a908      	add	r1, sp, #32
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800345a:	237f      	movs	r3, #127	; 0x7f
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800345c:	4628      	mov	r0, r5
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800345e:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003460:	960c      	str	r6, [sp, #48]	; 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003462:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.Offset = 0;
 8003464:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003466:	f7fd fae9 	bl	8000a3c <HAL_ADC_ConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800346a:	2210      	movs	r2, #16
 800346c:	4621      	mov	r1, r4
 800346e:	a808      	add	r0, sp, #32
 8003470:	f000 fc4c 	bl	8003d0c <memset>
  htim3.Instance = TIM3;
 8003474:	4e2c      	ldr	r6, [pc, #176]	; (8003528 <main+0x214>)
  htim3.Init.Prescaler = 35999;
 8003476:	492d      	ldr	r1, [pc, #180]	; (800352c <main+0x218>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003478:	9405      	str	r4, [sp, #20]
  htim3.Init.Prescaler = 35999;
 800347a:	f648 439f 	movw	r3, #35999	; 0x8c9f
 800347e:	e886 000a 	stmia.w	r6, {r1, r3}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003482:	4630      	mov	r0, r6
  htim3.Init.Period = 1000;
 8003484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003488:	60f3      	str	r3, [r6, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800348a:	9406      	str	r4, [sp, #24]
 800348c:	9407      	str	r4, [sp, #28]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800348e:	60b4      	str	r4, [r6, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003490:	6134      	str	r4, [r6, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003492:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003494:	f7ff fa88 	bl	80029a8 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800349c:	a908      	add	r1, sp, #32
 800349e:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034a0:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80034a2:	f7ff faa5 	bl	80029f0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80034a6:	a905      	add	r1, sp, #20
 80034a8:	4630      	mov	r0, r6
  hi2c1.Instance = I2C1;
 80034aa:	4d21      	ldr	r5, [pc, #132]	; (8003530 <main+0x21c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034ac:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034ae:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80034b0:	f7ff fb40 	bl	8002b34 <HAL_TIMEx_MasterConfigSynchronization>
  hi2c1.Init.Timing = 0x10909CEC;
 80034b4:	4b1f      	ldr	r3, [pc, #124]	; (8003534 <main+0x220>)
 80034b6:	4820      	ldr	r0, [pc, #128]	; (8003538 <main+0x224>)
  hi2c1.Init.OwnAddress1 = 0;
 80034b8:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.Timing = 0x10909CEC;
 80034ba:	e885 0009 	stmia.w	r5, {r0, r3}
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80034be:	4628      	mov	r0, r5
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034c0:	60ef      	str	r7, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034c2:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80034c4:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80034c6:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034c8:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034ca:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80034cc:	f7fe f883 	bl	80015d6 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80034d0:	4621      	mov	r1, r4
 80034d2:	4628      	mov	r0, r5
 80034d4:	f7fe fa46 	bl	8001964 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80034d8:	4621      	mov	r1, r4
 80034da:	4628      	mov	r0, r5
 80034dc:	f7fe fa68 	bl	80019b0 <HAL_I2CEx_ConfigDigitalFilter>
  printf("\033[2J\033[1;1H"); //Affiche seulement les nouvelles valeurs
 80034e0:	4816      	ldr	r0, [pc, #88]	; (800353c <main+0x228>)
 80034e2:	f000 fc1b 	bl	8003d1c <iprintf>
  printf("Gas Sensor\r\n");
 80034e6:	4816      	ldr	r0, [pc, #88]	; (8003540 <main+0x22c>)
 80034e8:	f000 fc8c 	bl	8003e04 <puts>
  Who_am_i(); //send in Decimal:188, Hex:0xbc
 80034ec:	f7ff fea4 	bl	8003238 <Who_am_i>
  Register();
 80034f0:	f7ff feca 	bl	8003288 <Register>
  ADC_Init();
 80034f4:	f7ff fe7e 	bl	80031f4 <ADC_Init>
  HAL_TIM_Base_Start_IT(&htim3);//Donne base temps -> tous les 5 sec
 80034f8:	4630      	mov	r0, r6
 80034fa:	f7ff f923 	bl	8002744 <HAL_TIM_Base_Start_IT>
 80034fe:	e7fe      	b.n	80034fe <main+0x1ea>
 8003500:	40021000 	.word	0x40021000
 8003504:	48000800 	.word	0x48000800
 8003508:	10210000 	.word	0x10210000
 800350c:	48000400 	.word	0x48000400
 8003510:	48000c00 	.word	0x48000c00
 8003514:	200001f4 	.word	0x200001f4
 8003518:	40004400 	.word	0x40004400
 800351c:	20000168 	.word	0x20000168
 8003520:	50040000 	.word	0x50040000
 8003524:	25b00200 	.word	0x25b00200
 8003528:	20000124 	.word	0x20000124
 800352c:	40000400 	.word	0x40000400
 8003530:	200000cc 	.word	0x200000cc
 8003534:	10909cec 	.word	0x10909cec
 8003538:	40005400 	.word	0x40005400
 800353c:	08004ca7 	.word	0x08004ca7
 8003540:	08004cb2 	.word	0x08004cb2

08003544 <temperature_IKSO1A2>:
//Temperature
void temperature_IKSO1A2()
{
 8003544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_degC_x8[0], 1, T0_degC_x8, 1, I2C_TIMEOUT);
 8003548:	4b66      	ldr	r3, [pc, #408]	; (80036e4 <temperature_IKSO1A2+0x1a0>)
 800354a:	4d67      	ldr	r5, [pc, #412]	; (80036e8 <temperature_IKSO1A2+0x1a4>)
 800354c:	781a      	ldrb	r2, [r3, #0]
 800354e:	4b67      	ldr	r3, [pc, #412]	; (80036ec <temperature_IKSO1A2+0x1a8>)
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T1_degC_x8[0], 1, T1_degC_x8, 1, I2C_TIMEOUT);
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_T1_msb[0], 1, T0_T1_msb, 1, I2C_TIMEOUT);
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_H[0], 1, T0_H, 1, I2C_TIMEOUT);
 8003550:	4f67      	ldr	r7, [pc, #412]	; (80036f0 <temperature_IKSO1A2+0x1ac>)
 8003552:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8003748 <temperature_IKSO1A2+0x204>
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_H[0], 1, T0_H, 1, I2C_TIMEOUT);
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_L[0], 1, T0_L, 1, I2C_TIMEOUT);
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T1_H[0], 1, T1_H, 1, I2C_TIMEOUT);
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T1_L[0], 1, T1_L, 1, I2C_TIMEOUT);
 8003556:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 800374c <temperature_IKSO1A2+0x208>
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T_OUT_H[0], 1, T_OUT_H, 1, I2C_TIMEOUT);
 800355a:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 8003750 <temperature_IKSO1A2+0x20c>
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T_OUT_L[0], 1, T_OUT_L, 1, I2C_TIMEOUT);
 800355e:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 8003754 <temperature_IKSO1A2+0x210>
{
 8003562:	b085      	sub	sp, #20
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_degC_x8[0], 1, T0_degC_x8, 1, I2C_TIMEOUT);
 8003564:	2401      	movs	r4, #1
 8003566:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800356a:	9602      	str	r6, [sp, #8]
 800356c:	9401      	str	r4, [sp, #4]
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	21bf      	movs	r1, #191	; 0xbf
 8003572:	4623      	mov	r3, r4
 8003574:	4628      	mov	r0, r5
 8003576:	f7fe f937 	bl	80017e8 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T1_degC_x8[0], 1, T1_degC_x8, 1, I2C_TIMEOUT);
 800357a:	4b5e      	ldr	r3, [pc, #376]	; (80036f4 <temperature_IKSO1A2+0x1b0>)
 800357c:	781a      	ldrb	r2, [r3, #0]
 800357e:	4b5e      	ldr	r3, [pc, #376]	; (80036f8 <temperature_IKSO1A2+0x1b4>)
 8003580:	9602      	str	r6, [sp, #8]
 8003582:	9401      	str	r4, [sp, #4]
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	21bf      	movs	r1, #191	; 0xbf
 8003588:	4623      	mov	r3, r4
 800358a:	4628      	mov	r0, r5
 800358c:	f7fe f92c 	bl	80017e8 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_T1_msb[0], 1, T0_T1_msb, 1, I2C_TIMEOUT);
 8003590:	4b5a      	ldr	r3, [pc, #360]	; (80036fc <temperature_IKSO1A2+0x1b8>)
 8003592:	781a      	ldrb	r2, [r3, #0]
 8003594:	4b5a      	ldr	r3, [pc, #360]	; (8003700 <temperature_IKSO1A2+0x1bc>)
 8003596:	9602      	str	r6, [sp, #8]
 8003598:	9401      	str	r4, [sp, #4]
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	21bf      	movs	r1, #191	; 0xbf
 800359e:	4623      	mov	r3, r4
 80035a0:	4628      	mov	r0, r5
 80035a2:	f7fe f921 	bl	80017e8 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_H[0], 1, T0_H, 1, I2C_TIMEOUT);
 80035a6:	783a      	ldrb	r2, [r7, #0]
 80035a8:	9602      	str	r6, [sp, #8]
 80035aa:	9401      	str	r4, [sp, #4]
 80035ac:	4623      	mov	r3, r4
 80035ae:	f8cd 8000 	str.w	r8, [sp]
 80035b2:	21bf      	movs	r1, #191	; 0xbf
 80035b4:	4628      	mov	r0, r5
 80035b6:	f7fe f917 	bl	80017e8 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_H[0], 1, T0_H, 1, I2C_TIMEOUT);
 80035ba:	783a      	ldrb	r2, [r7, #0]
 80035bc:	9602      	str	r6, [sp, #8]
 80035be:	9401      	str	r4, [sp, #4]
 80035c0:	4623      	mov	r3, r4
 80035c2:	f8cd 8000 	str.w	r8, [sp]
 80035c6:	21bf      	movs	r1, #191	; 0xbf
 80035c8:	4628      	mov	r0, r5
 80035ca:	f7fe f90d 	bl	80017e8 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_L[0], 1, T0_L, 1, I2C_TIMEOUT);
 80035ce:	4b4d      	ldr	r3, [pc, #308]	; (8003704 <temperature_IKSO1A2+0x1c0>)
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T_OUT_L[0], 1, T_OUT_L, 1, I2C_TIMEOUT);
 80035d0:	4f4d      	ldr	r7, [pc, #308]	; (8003708 <temperature_IKSO1A2+0x1c4>)
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T0_L[0], 1, T0_L, 1, I2C_TIMEOUT);
 80035d2:	781a      	ldrb	r2, [r3, #0]
 80035d4:	4b4d      	ldr	r3, [pc, #308]	; (800370c <temperature_IKSO1A2+0x1c8>)
 80035d6:	9602      	str	r6, [sp, #8]
 80035d8:	9401      	str	r4, [sp, #4]
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	21bf      	movs	r1, #191	; 0xbf
 80035de:	4623      	mov	r3, r4
 80035e0:	4628      	mov	r0, r5
 80035e2:	f7fe f901 	bl	80017e8 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T1_H[0], 1, T1_H, 1, I2C_TIMEOUT);
 80035e6:	4b4a      	ldr	r3, [pc, #296]	; (8003710 <temperature_IKSO1A2+0x1cc>)
 80035e8:	781a      	ldrb	r2, [r3, #0]
 80035ea:	4b4a      	ldr	r3, [pc, #296]	; (8003714 <temperature_IKSO1A2+0x1d0>)
 80035ec:	9602      	str	r6, [sp, #8]
 80035ee:	9401      	str	r4, [sp, #4]
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	21bf      	movs	r1, #191	; 0xbf
 80035f4:	4623      	mov	r3, r4
 80035f6:	4628      	mov	r0, r5
 80035f8:	f7fe f8f6 	bl	80017e8 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T1_L[0], 1, T1_L, 1, I2C_TIMEOUT);
 80035fc:	4b46      	ldr	r3, [pc, #280]	; (8003718 <temperature_IKSO1A2+0x1d4>)
 80035fe:	21bf      	movs	r1, #191	; 0xbf
 8003600:	781a      	ldrb	r2, [r3, #0]
 8003602:	9602      	str	r6, [sp, #8]
 8003604:	9401      	str	r4, [sp, #4]
 8003606:	4623      	mov	r3, r4
 8003608:	f8cd a000 	str.w	sl, [sp]
 800360c:	4628      	mov	r0, r5
 800360e:	f7fe f8eb 	bl	80017e8 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T_OUT_H[0], 1, T_OUT_H, 1, I2C_TIMEOUT);
 8003612:	4b42      	ldr	r3, [pc, #264]	; (800371c <temperature_IKSO1A2+0x1d8>)
 8003614:	21bf      	movs	r1, #191	; 0xbf
 8003616:	781a      	ldrb	r2, [r3, #0]
 8003618:	9602      	str	r6, [sp, #8]
 800361a:	9401      	str	r4, [sp, #4]
 800361c:	4623      	mov	r3, r4
 800361e:	f8cd 9000 	str.w	r9, [sp]
 8003622:	4628      	mov	r0, r5
 8003624:	f7fe f8e0 	bl	80017e8 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T_OUT_L[0], 1, T_OUT_L, 1, I2C_TIMEOUT);
 8003628:	f89b 2000 	ldrb.w	r2, [fp]
 800362c:	9602      	str	r6, [sp, #8]
 800362e:	9401      	str	r4, [sp, #4]
 8003630:	4623      	mov	r3, r4
 8003632:	9700      	str	r7, [sp, #0]
 8003634:	21bf      	movs	r1, #191	; 0xbf
 8003636:	4628      	mov	r0, r5
 8003638:	f7fe f8d6 	bl	80017e8 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_T_OUT_L[0], 1, T_OUT_L, 1, I2C_TIMEOUT);
 800363c:	f89b 2000 	ldrb.w	r2, [fp]
 8003640:	9602      	str	r6, [sp, #8]
 8003642:	9401      	str	r4, [sp, #4]
 8003644:	4623      	mov	r3, r4
 8003646:	9700      	str	r7, [sp, #0]
 8003648:	21bf      	movs	r1, #191	; 0xbf
 800364a:	4628      	mov	r0, r5
 800364c:	f7fe f8cc 	bl	80017e8 <HAL_I2C_Mem_Read>

		//CONCATENATION
		T0_OUT[0]	= (T0_H[0]<<8) + T0_L[0];
 8003650:	4a2e      	ldr	r2, [pc, #184]	; (800370c <temperature_IKSO1A2+0x1c8>)
 8003652:	f898 3000 	ldrb.w	r3, [r8]
 8003656:	7811      	ldrb	r1, [r2, #0]
		T1_OUT[0]	= (T1_H[0]<<8) + T1_L[0];
 8003658:	f89a 0000 	ldrb.w	r0, [sl]
		T_OUT[0]	= (T_OUT_H[0]<<8) + T_OUT_L[0];
 800365c:	783a      	ldrb	r2, [r7, #0]
		est_negatif(T0_OUT[0]);
		est_negatif(T1_OUT[0]);
		est_negatif(T_OUT[0]);

		//CALCUL DES T0_degC ET T1_degC FINALES
		T0_msb[0]		= T0_T1_msb[0] & 0x3;
 800365e:	4c30      	ldr	r4, [pc, #192]	; (8003720 <temperature_IKSO1A2+0x1dc>)
		T0_OUT[0]	= (T0_H[0]<<8) + T0_L[0];
 8003660:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8003664:	4b2f      	ldr	r3, [pc, #188]	; (8003724 <temperature_IKSO1A2+0x1e0>)
 8003666:	b289      	uxth	r1, r1
 8003668:	8019      	strh	r1, [r3, #0]
		T1_OUT[0]	= (T1_H[0]<<8) + T1_L[0];
 800366a:	4b2a      	ldr	r3, [pc, #168]	; (8003714 <temperature_IKSO1A2+0x1d0>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8003672:	4b2d      	ldr	r3, [pc, #180]	; (8003728 <temperature_IKSO1A2+0x1e4>)
 8003674:	b280      	uxth	r0, r0
 8003676:	8018      	strh	r0, [r3, #0]
		T_OUT[0]	= (T_OUT_H[0]<<8) + T_OUT_L[0];
 8003678:	f899 3000 	ldrb.w	r3, [r9]
 800367c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8003680:	4b2a      	ldr	r3, [pc, #168]	; (800372c <temperature_IKSO1A2+0x1e8>)
 8003682:	b292      	uxth	r2, r2
 8003684:	801a      	strh	r2, [r3, #0]
		T0_msb[0]		= T0_T1_msb[0] & 0x3;
 8003686:	4b1e      	ldr	r3, [pc, #120]	; (8003700 <temperature_IKSO1A2+0x1bc>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	f003 0603 	and.w	r6, r3, #3
		T1_msb[0]		= (T0_T1_msb[0] & 0xC)>>2;
 800368e:	f3c3 0581 	ubfx	r5, r3, #2, #2
 8003692:	4b27      	ldr	r3, [pc, #156]	; (8003730 <temperature_IKSO1A2+0x1ec>)
		T0_msb[0]		= T0_T1_msb[0] & 0x3;
 8003694:	7026      	strb	r6, [r4, #0]
		T1_msb[0]		= (T0_T1_msb[0] & 0xC)>>2;
 8003696:	701d      	strb	r5, [r3, #0]
		T0_degC[0] 		= (T0_msb[0]<<8) + T0_degC_x8[0];
 8003698:	4b14      	ldr	r3, [pc, #80]	; (80036ec <temperature_IKSO1A2+0x1a8>)
 800369a:	781c      	ldrb	r4, [r3, #0]
 800369c:	4b25      	ldr	r3, [pc, #148]	; (8003734 <temperature_IKSO1A2+0x1f0>)
 800369e:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 80036a2:	801c      	strh	r4, [r3, #0]
		T1_degC[0] 		= (T1_msb[0]<<8) + T1_degC_x8[0];
 80036a4:	4b14      	ldr	r3, [pc, #80]	; (80036f8 <temperature_IKSO1A2+0x1b4>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 80036ac:	4d22      	ldr	r5, [pc, #136]	; (8003738 <temperature_IKSO1A2+0x1f4>)
 80036ae:	802b      	strh	r3, [r5, #0]
		T0_degC_DIV8[0]	= T0_degC[0]>>3;
 80036b0:	4d22      	ldr	r5, [pc, #136]	; (800373c <temperature_IKSO1A2+0x1f8>)
 80036b2:	08e4      	lsrs	r4, r4, #3
		T1_degC_DIV8[0]	= T1_degC[0]>>3;

		//CALCUL DE LA TEMPERATURE
		temp16[0] = ((int16_t)(T_OUT[0]-T0_OUT[0]))*10*((int16_t)(T1_degC_DIV8[0]-T0_degC_DIV8[0]))/((int16_t)(T1_OUT[0]-T0_OUT[0]))+(int16_t)(T0_degC_DIV8[0])*10;
 80036b4:	1a52      	subs	r2, r2, r1
		T0_degC_DIV8[0]	= T0_degC[0]>>3;
 80036b6:	802c      	strh	r4, [r5, #0]
		temp16[0] = ((int16_t)(T_OUT[0]-T0_OUT[0]))*10*((int16_t)(T1_degC_DIV8[0]-T0_degC_DIV8[0]))/((int16_t)(T1_OUT[0]-T0_OUT[0]))+(int16_t)(T0_degC_DIV8[0])*10;
 80036b8:	b212      	sxth	r2, r2
		T1_degC_DIV8[0]	= T1_degC[0]>>3;
 80036ba:	4d21      	ldr	r5, [pc, #132]	; (8003740 <temperature_IKSO1A2+0x1fc>)
 80036bc:	08db      	lsrs	r3, r3, #3
		temp16[0] = ((int16_t)(T_OUT[0]-T0_OUT[0]))*10*((int16_t)(T1_degC_DIV8[0]-T0_degC_DIV8[0]))/((int16_t)(T1_OUT[0]-T0_OUT[0]))+(int16_t)(T0_degC_DIV8[0])*10;
 80036be:	eb02 0282 	add.w	r2, r2, r2, lsl #2
		T1_degC_DIV8[0]	= T1_degC[0]>>3;
 80036c2:	802b      	strh	r3, [r5, #0]
		temp16[0] = ((int16_t)(T_OUT[0]-T0_OUT[0]))*10*((int16_t)(T1_degC_DIV8[0]-T0_degC_DIV8[0]))/((int16_t)(T1_OUT[0]-T0_OUT[0]))+(int16_t)(T0_degC_DIV8[0])*10;
 80036c4:	0052      	lsls	r2, r2, #1
 80036c6:	1b1b      	subs	r3, r3, r4
 80036c8:	4353      	muls	r3, r2
 80036ca:	1a41      	subs	r1, r0, r1
 80036cc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80036d0:	4a1c      	ldr	r2, [pc, #112]	; (8003744 <temperature_IKSO1A2+0x200>)
 80036d2:	b209      	sxth	r1, r1
 80036d4:	fb93 f3f1 	sdiv	r3, r3, r1
 80036d8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80036dc:	8013      	strh	r3, [r2, #0]

	//  printf("Temperature :%d", temp16[0]);
}
 80036de:	b005      	add	sp, #20
 80036e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036e4:	20000019 	.word	0x20000019
 80036e8:	200000cc 	.word	0x200000cc
 80036ec:	20000167 	.word	0x20000167
 80036f0:	20000016 	.word	0x20000016
 80036f4:	2000001c 	.word	0x2000001c
 80036f8:	20000166 	.word	0x20000166
 80036fc:	20000018 	.word	0x20000018
 8003700:	200001d4 	.word	0x200001d4
 8003704:	20000017 	.word	0x20000017
 8003708:	200000c2 	.word	0x200000c2
 800370c:	200000be 	.word	0x200000be
 8003710:	2000001a 	.word	0x2000001a
 8003714:	200000c3 	.word	0x200000c3
 8003718:	2000001b 	.word	0x2000001b
 800371c:	2000001d 	.word	0x2000001d
 8003720:	200001d8 	.word	0x200001d8
 8003724:	200001d2 	.word	0x200001d2
 8003728:	200001e4 	.word	0x200001e4
 800372c:	200001ee 	.word	0x200001ee
 8003730:	200000bc 	.word	0x200000bc
 8003734:	20000164 	.word	0x20000164
 8003738:	200001d0 	.word	0x200001d0
 800373c:	200001ea 	.word	0x200001ea
 8003740:	200000ca 	.word	0x200000ca
 8003744:	200001d6 	.word	0x200001d6
 8003748:	200001cd 	.word	0x200001cd
 800374c:	20000121 	.word	0x20000121
 8003750:	200001e2 	.word	0x200001e2
 8003754:	2000001e 	.word	0x2000001e

08003758 <humidity_IKSO1A2>:
//Humidity
void humidity_IKSO1A2()
{
 8003758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	    HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_HUM_H[0], 1, HUM_H, 1, I2C_TIMEOUT);
 800375c:	4b4a      	ldr	r3, [pc, #296]	; (8003888 <humidity_IKSO1A2+0x130>)
 800375e:	4d4b      	ldr	r5, [pc, #300]	; (800388c <humidity_IKSO1A2+0x134>)
 8003760:	f8df 8170 	ldr.w	r8, [pc, #368]	; 80038d4 <humidity_IKSO1A2+0x17c>
 8003764:	781a      	ldrb	r2, [r3, #0]
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_HUM_L[0], 1, HUM_L, 1, I2C_TIMEOUT);
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H0_rH_x2[0], 1, H0_rH_x2, 1, I2C_TIMEOUT);
 8003766:	4f4a      	ldr	r7, [pc, #296]	; (8003890 <humidity_IKSO1A2+0x138>)
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H1_rH_x2[0], 1, H0_rH_x2, 1, I2C_TIMEOUT);
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H0_T0_OUT_H[0], 1, H0_T0_OUT_H, 1, I2C_TIMEOUT);
 8003768:	f8df b16c 	ldr.w	fp, [pc, #364]	; 80038d8 <humidity_IKSO1A2+0x180>
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H0_T0_OUT_L[0], 1, H0_T0_OUT_L, 1, I2C_TIMEOUT);
 800376c:	f8df a16c 	ldr.w	sl, [pc, #364]	; 80038dc <humidity_IKSO1A2+0x184>
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H1_T0_OUT_H[0], 1, H1_T0_OUT_H, 1, I2C_TIMEOUT);
 8003770:	f8df 916c 	ldr.w	r9, [pc, #364]	; 80038e0 <humidity_IKSO1A2+0x188>
{
 8003774:	b085      	sub	sp, #20
	    HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_HUM_H[0], 1, HUM_H, 1, I2C_TIMEOUT);
 8003776:	2401      	movs	r4, #1
 8003778:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800377c:	9602      	str	r6, [sp, #8]
 800377e:	9401      	str	r4, [sp, #4]
 8003780:	4623      	mov	r3, r4
 8003782:	f8cd 8000 	str.w	r8, [sp]
 8003786:	21bf      	movs	r1, #191	; 0xbf
 8003788:	4628      	mov	r0, r5
 800378a:	f7fe f82d 	bl	80017e8 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_HUM_L[0], 1, HUM_L, 1, I2C_TIMEOUT);
 800378e:	4b41      	ldr	r3, [pc, #260]	; (8003894 <humidity_IKSO1A2+0x13c>)
 8003790:	781a      	ldrb	r2, [r3, #0]
 8003792:	4b41      	ldr	r3, [pc, #260]	; (8003898 <humidity_IKSO1A2+0x140>)
 8003794:	9602      	str	r6, [sp, #8]
 8003796:	9401      	str	r4, [sp, #4]
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	21bf      	movs	r1, #191	; 0xbf
 800379c:	4623      	mov	r3, r4
 800379e:	4628      	mov	r0, r5
 80037a0:	f7fe f822 	bl	80017e8 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H0_rH_x2[0], 1, H0_rH_x2, 1, I2C_TIMEOUT);
 80037a4:	4b3d      	ldr	r3, [pc, #244]	; (800389c <humidity_IKSO1A2+0x144>)
 80037a6:	21bf      	movs	r1, #191	; 0xbf
 80037a8:	781a      	ldrb	r2, [r3, #0]
 80037aa:	9602      	str	r6, [sp, #8]
 80037ac:	9401      	str	r4, [sp, #4]
 80037ae:	4623      	mov	r3, r4
 80037b0:	9700      	str	r7, [sp, #0]
 80037b2:	4628      	mov	r0, r5
 80037b4:	f7fe f818 	bl	80017e8 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H1_rH_x2[0], 1, H0_rH_x2, 1, I2C_TIMEOUT);
 80037b8:	4b39      	ldr	r3, [pc, #228]	; (80038a0 <humidity_IKSO1A2+0x148>)
 80037ba:	21bf      	movs	r1, #191	; 0xbf
 80037bc:	781a      	ldrb	r2, [r3, #0]
 80037be:	9602      	str	r6, [sp, #8]
 80037c0:	9401      	str	r4, [sp, #4]
 80037c2:	4623      	mov	r3, r4
 80037c4:	9700      	str	r7, [sp, #0]
 80037c6:	4628      	mov	r0, r5
 80037c8:	f7fe f80e 	bl	80017e8 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H0_T0_OUT_H[0], 1, H0_T0_OUT_H, 1, I2C_TIMEOUT);
 80037cc:	4b35      	ldr	r3, [pc, #212]	; (80038a4 <humidity_IKSO1A2+0x14c>)
 80037ce:	21bf      	movs	r1, #191	; 0xbf
 80037d0:	781a      	ldrb	r2, [r3, #0]
 80037d2:	9602      	str	r6, [sp, #8]
 80037d4:	9401      	str	r4, [sp, #4]
 80037d6:	4623      	mov	r3, r4
 80037d8:	f8cd b000 	str.w	fp, [sp]
 80037dc:	4628      	mov	r0, r5
 80037de:	f7fe f803 	bl	80017e8 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H0_T0_OUT_L[0], 1, H0_T0_OUT_L, 1, I2C_TIMEOUT);
 80037e2:	4b31      	ldr	r3, [pc, #196]	; (80038a8 <humidity_IKSO1A2+0x150>)
 80037e4:	21bf      	movs	r1, #191	; 0xbf
 80037e6:	781a      	ldrb	r2, [r3, #0]
 80037e8:	9602      	str	r6, [sp, #8]
 80037ea:	9401      	str	r4, [sp, #4]
 80037ec:	4623      	mov	r3, r4
 80037ee:	f8cd a000 	str.w	sl, [sp]
 80037f2:	4628      	mov	r0, r5
 80037f4:	f7fd fff8 	bl	80017e8 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H1_T0_OUT_H[0], 1, H1_T0_OUT_H, 1, I2C_TIMEOUT);
 80037f8:	4b2c      	ldr	r3, [pc, #176]	; (80038ac <humidity_IKSO1A2+0x154>)
 80037fa:	21bf      	movs	r1, #191	; 0xbf
 80037fc:	781a      	ldrb	r2, [r3, #0]
 80037fe:	9602      	str	r6, [sp, #8]
 8003800:	9401      	str	r4, [sp, #4]
 8003802:	4623      	mov	r3, r4
 8003804:	f8cd 9000 	str.w	r9, [sp]
 8003808:	4628      	mov	r0, r5
 800380a:	f7fd ffed 	bl	80017e8 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1,0xBF, addr_H1_T0_OUT_L[0], 1, H1_T0_OUT_L, 1, I2C_TIMEOUT);
 800380e:	4b28      	ldr	r3, [pc, #160]	; (80038b0 <humidity_IKSO1A2+0x158>)
 8003810:	781a      	ldrb	r2, [r3, #0]
 8003812:	9602      	str	r6, [sp, #8]
 8003814:	4e27      	ldr	r6, [pc, #156]	; (80038b4 <humidity_IKSO1A2+0x15c>)
 8003816:	9401      	str	r4, [sp, #4]
 8003818:	4623      	mov	r3, r4
 800381a:	9600      	str	r6, [sp, #0]
 800381c:	21bf      	movs	r1, #191	; 0xbf
 800381e:	4628      	mov	r0, r5
 8003820:	f7fd ffe2 	bl	80017e8 <HAL_I2C_Mem_Read>

		H0_rH[0]	= H0_rH_x2[0]>>1;
 8003824:	7838      	ldrb	r0, [r7, #0]
 8003826:	4b24      	ldr	r3, [pc, #144]	; (80038b8 <humidity_IKSO1A2+0x160>)
		H1_rH[0]	= H1_rH_x2[0]>>1;
 8003828:	4a24      	ldr	r2, [pc, #144]	; (80038bc <humidity_IKSO1A2+0x164>)

		H0[0]		= (H0_T0_OUT_H[0]<<8) + H0_T0_OUT_L[0];
		H1[0]		= (H1_T0_OUT_H[0]<<8) + H1_T0_OUT_L[0];
 800382a:	f899 1000 	ldrb.w	r1, [r9]
		H_OUT[0]	= (HUM_H[0]<<8) + HUM_L[0];
 800382e:	f898 5000 	ldrb.w	r5, [r8]
		H0_rH[0]	= H0_rH_x2[0]>>1;
 8003832:	40e0      	lsrs	r0, r4
 8003834:	8018      	strh	r0, [r3, #0]
		H1_rH[0]	= H1_rH_x2[0]>>1;
 8003836:	4b22      	ldr	r3, [pc, #136]	; (80038c0 <humidity_IKSO1A2+0x168>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	40e3      	lsrs	r3, r4
 800383c:	8013      	strh	r3, [r2, #0]
		H0[0]		= (H0_T0_OUT_H[0]<<8) + H0_T0_OUT_L[0];
 800383e:	f89b 4000 	ldrb.w	r4, [fp]
 8003842:	f89a 2000 	ldrb.w	r2, [sl]
 8003846:	eb02 2204 	add.w	r2, r2, r4, lsl #8
 800384a:	b294      	uxth	r4, r2
 800384c:	4a1d      	ldr	r2, [pc, #116]	; (80038c4 <humidity_IKSO1A2+0x16c>)
 800384e:	8014      	strh	r4, [r2, #0]
		H1[0]		= (H1_T0_OUT_H[0]<<8) + H1_T0_OUT_L[0];
 8003850:	7832      	ldrb	r2, [r6, #0]
 8003852:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8003856:	491c      	ldr	r1, [pc, #112]	; (80038c8 <humidity_IKSO1A2+0x170>)
 8003858:	b292      	uxth	r2, r2
 800385a:	800a      	strh	r2, [r1, #0]
		H_OUT[0]	= (HUM_H[0]<<8) + HUM_L[0];
 800385c:	490e      	ldr	r1, [pc, #56]	; (8003898 <humidity_IKSO1A2+0x140>)
 800385e:	7809      	ldrb	r1, [r1, #0]
 8003860:	eb01 2105 	add.w	r1, r1, r5, lsl #8
 8003864:	4d19      	ldr	r5, [pc, #100]	; (80038cc <humidity_IKSO1A2+0x174>)
 8003866:	b289      	uxth	r1, r1
 8003868:	8029      	strh	r1, [r5, #0]

		//CALCUL DE L'HUMIDITE
		hum16[0] = ((int16_t)(H1_rH[0]-H0_rH[0]))*((int16_t)(H_OUT[0]-H0[0]))/((int16_t)(H1[0]-H0[0]))+(int16_t)(H0_rH[0]);
 800386a:	1a1b      	subs	r3, r3, r0
 800386c:	1b09      	subs	r1, r1, r4
 800386e:	1b12      	subs	r2, r2, r4
 8003870:	fb13 f301 	smulbb	r3, r3, r1
 8003874:	b212      	sxth	r2, r2
 8003876:	fb93 f3f2 	sdiv	r3, r3, r2
 800387a:	4a15      	ldr	r2, [pc, #84]	; (80038d0 <humidity_IKSO1A2+0x178>)
 800387c:	4403      	add	r3, r0
 800387e:	8013      	strh	r3, [r2, #0]
}
 8003880:	b005      	add	sp, #20
 8003882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003886:	bf00      	nop
 8003888:	2000000d 	.word	0x2000000d
 800388c:	200000cc 	.word	0x200000cc
 8003890:	200001ec 	.word	0x200001ec
 8003894:	2000000e 	.word	0x2000000e
 8003898:	20000270 	.word	0x20000270
 800389c:	20000009 	.word	0x20000009
 80038a0:	2000000c 	.word	0x2000000c
 80038a4:	20000007 	.word	0x20000007
 80038a8:	20000008 	.word	0x20000008
 80038ac:	2000000a 	.word	0x2000000a
 80038b0:	2000000b 	.word	0x2000000b
 80038b4:	200000bd 	.word	0x200000bd
 80038b8:	20000118 	.word	0x20000118
 80038bc:	200000c0 	.word	0x200000c0
 80038c0:	200001e6 	.word	0x200001e6
 80038c4:	200001e0 	.word	0x200001e0
 80038c8:	20000272 	.word	0x20000272
 80038cc:	200000c6 	.word	0x200000c6
 80038d0:	200001f0 	.word	0x200001f0
 80038d4:	200001e7 	.word	0x200001e7
 80038d8:	200001e8 	.word	0x200001e8
 80038dc:	200000c8 	.word	0x200000c8
 80038e0:	200000c4 	.word	0x200000c4

080038e4 <pressure_IKSO1A2>:
//PRESSURE
void pressure_IKSO1A2()
{
 80038e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	    HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_REF_P_XL[0], 1, REF_P_XL, 1, I2C_TIMEOUT);
 80038e8:	4b37      	ldr	r3, [pc, #220]	; (80039c8 <pressure_IKSO1A2+0xe4>)
 80038ea:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80039f8 <pressure_IKSO1A2+0x114>
 80038ee:	4d37      	ldr	r5, [pc, #220]	; (80039cc <pressure_IKSO1A2+0xe8>)
 80038f0:	781a      	ldrb	r2, [r3, #0]
		HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_REF_P_L[0], 1, REF_P_L, 1, I2C_TIMEOUT);
 80038f2:	4e37      	ldr	r6, [pc, #220]	; (80039d0 <pressure_IKSO1A2+0xec>)
		HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_REF_P_H[0], 1, REF_P_H, 1, I2C_TIMEOUT);
 80038f4:	4f37      	ldr	r7, [pc, #220]	; (80039d4 <pressure_IKSO1A2+0xf0>)
		HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_PRES_OUT_XL[0], 1, PRES_OUT_XL, 1, I2C_TIMEOUT);
 80038f6:	f8df 8104 	ldr.w	r8, [pc, #260]	; 80039fc <pressure_IKSO1A2+0x118>
		HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_PRES_OUT_L[0], 1, PRES_OUT_L, 1, I2C_TIMEOUT);
 80038fa:	f8df b104 	ldr.w	fp, [pc, #260]	; 8003a00 <pressure_IKSO1A2+0x11c>
{
 80038fe:	b085      	sub	sp, #20
	    HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_REF_P_XL[0], 1, REF_P_XL, 1, I2C_TIMEOUT);
 8003900:	2401      	movs	r4, #1
 8003902:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 8003906:	f8cd a008 	str.w	sl, [sp, #8]
 800390a:	4623      	mov	r3, r4
 800390c:	9401      	str	r4, [sp, #4]
 800390e:	9500      	str	r5, [sp, #0]
 8003910:	21bb      	movs	r1, #187	; 0xbb
 8003912:	4648      	mov	r0, r9
 8003914:	f7fd ff68 	bl	80017e8 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_REF_P_L[0], 1, REF_P_L, 1, I2C_TIMEOUT);
 8003918:	4b2f      	ldr	r3, [pc, #188]	; (80039d8 <pressure_IKSO1A2+0xf4>)
 800391a:	21bb      	movs	r1, #187	; 0xbb
 800391c:	781a      	ldrb	r2, [r3, #0]
 800391e:	f8cd a008 	str.w	sl, [sp, #8]
 8003922:	4623      	mov	r3, r4
 8003924:	9401      	str	r4, [sp, #4]
 8003926:	9600      	str	r6, [sp, #0]
 8003928:	4648      	mov	r0, r9
 800392a:	f7fd ff5d 	bl	80017e8 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_REF_P_H[0], 1, REF_P_H, 1, I2C_TIMEOUT);
 800392e:	4b2b      	ldr	r3, [pc, #172]	; (80039dc <pressure_IKSO1A2+0xf8>)
 8003930:	21bb      	movs	r1, #187	; 0xbb
 8003932:	781a      	ldrb	r2, [r3, #0]
 8003934:	f8cd a008 	str.w	sl, [sp, #8]
 8003938:	4623      	mov	r3, r4
 800393a:	9401      	str	r4, [sp, #4]
 800393c:	9700      	str	r7, [sp, #0]
 800393e:	4648      	mov	r0, r9
 8003940:	f7fd ff52 	bl	80017e8 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_PRES_OUT_XL[0], 1, PRES_OUT_XL, 1, I2C_TIMEOUT);
 8003944:	4b26      	ldr	r3, [pc, #152]	; (80039e0 <pressure_IKSO1A2+0xfc>)
 8003946:	21bb      	movs	r1, #187	; 0xbb
 8003948:	781a      	ldrb	r2, [r3, #0]
 800394a:	f8cd a008 	str.w	sl, [sp, #8]
 800394e:	4623      	mov	r3, r4
 8003950:	9401      	str	r4, [sp, #4]
 8003952:	f8cd 8000 	str.w	r8, [sp]
 8003956:	4648      	mov	r0, r9
 8003958:	f7fd ff46 	bl	80017e8 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_PRES_OUT_L[0], 1, PRES_OUT_L, 1, I2C_TIMEOUT);
 800395c:	4b21      	ldr	r3, [pc, #132]	; (80039e4 <pressure_IKSO1A2+0x100>)
 800395e:	21bb      	movs	r1, #187	; 0xbb
 8003960:	781a      	ldrb	r2, [r3, #0]
 8003962:	f8cd a008 	str.w	sl, [sp, #8]
 8003966:	4623      	mov	r3, r4
 8003968:	9401      	str	r4, [sp, #4]
 800396a:	f8cd b000 	str.w	fp, [sp]
 800396e:	4648      	mov	r0, r9
 8003970:	f7fd ff3a 	bl	80017e8 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1,0xBB, addr_PRES_OUT_H[0], 1, PRES_OUT_H, 1, I2C_TIMEOUT);
 8003974:	4b1c      	ldr	r3, [pc, #112]	; (80039e8 <pressure_IKSO1A2+0x104>)
 8003976:	781a      	ldrb	r2, [r3, #0]
 8003978:	f8cd a008 	str.w	sl, [sp, #8]
 800397c:	f8df a084 	ldr.w	sl, [pc, #132]	; 8003a04 <pressure_IKSO1A2+0x120>
 8003980:	9401      	str	r4, [sp, #4]
 8003982:	4623      	mov	r3, r4
 8003984:	f8cd a000 	str.w	sl, [sp]
 8003988:	21bb      	movs	r1, #187	; 0xbb
 800398a:	4648      	mov	r0, r9
 800398c:	f7fd ff2c 	bl	80017e8 <HAL_I2C_Mem_Read>

		//CONCATENATION

		PRES_x4096[0]	= (PRES_OUT_H[0]<<16) + (PRES_OUT_L[0]<<8) + PRES_OUT_XL[0];
 8003990:	f89b 3000 	ldrb.w	r3, [fp]
 8003994:	f89a 2000 	ldrb.w	r2, [sl]
 8003998:	021b      	lsls	r3, r3, #8
 800399a:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 800399e:	f898 2000 	ldrb.w	r2, [r8]
 80039a2:	4413      	add	r3, r2
 80039a4:	4a11      	ldr	r2, [pc, #68]	; (80039ec <pressure_IKSO1A2+0x108>)
 80039a6:	6013      	str	r3, [r2, #0]
		REF_P_x4096[0]	= (REF_P_H[0]<<16) + (REF_P_L[0]<<8) + REF_P_XL[0];
 80039a8:	7833      	ldrb	r3, [r6, #0]
 80039aa:	783a      	ldrb	r2, [r7, #0]
 80039ac:	021b      	lsls	r3, r3, #8
 80039ae:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 80039b2:	782a      	ldrb	r2, [r5, #0]
 80039b4:	4413      	add	r3, r2
 80039b6:	4a0e      	ldr	r2, [pc, #56]	; (80039f0 <pressure_IKSO1A2+0x10c>)
 80039b8:	6013      	str	r3, [r2, #0]

		//CALCUL DE LA PRESSION
		pres32[0] = (REF_P_x4096[0])>>12;
 80039ba:	4a0e      	ldr	r2, [pc, #56]	; (80039f4 <pressure_IKSO1A2+0x110>)
 80039bc:	0b1b      	lsrs	r3, r3, #12
 80039be:	6013      	str	r3, [r2, #0]
}
 80039c0:	b005      	add	sp, #20
 80039c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039c6:	bf00      	nop
 80039c8:	20000015 	.word	0x20000015
 80039cc:	2000011a 	.word	0x2000011a
 80039d0:	200001ce 	.word	0x200001ce
 80039d4:	20000120 	.word	0x20000120
 80039d8:	20000014 	.word	0x20000014
 80039dc:	20000013 	.word	0x20000013
 80039e0:	20000012 	.word	0x20000012
 80039e4:	20000011 	.word	0x20000011
 80039e8:	20000010 	.word	0x20000010
 80039ec:	200001dc 	.word	0x200001dc
 80039f0:	2000026c 	.word	0x2000026c
 80039f4:	2000011c 	.word	0x2000011c
 80039f8:	200000cc 	.word	0x200000cc
 80039fc:	20000271 	.word	0x20000271
 8003a00:	200001cc 	.word	0x200001cc
 8003a04:	200001ed 	.word	0x200001ed

08003a08 <HAL_ADC_ConvCpltCallback>:
{
 8003a08:	b510      	push	{r4, lr}
	if( cpt %4 == 0 )
 8003a0a:	4c0f      	ldr	r4, [pc, #60]	; (8003a48 <HAL_ADC_ConvCpltCallback+0x40>)
 8003a0c:	7823      	ldrb	r3, [r4, #0]
 8003a0e:	079a      	lsls	r2, r3, #30
 8003a10:	d103      	bne.n	8003a1a <HAL_ADC_ConvCpltCallback+0x12>
	valeurADC = HAL_ADC_GetValue(AdcHandle);
 8003a12:	f7fc feeb 	bl	80007ec <HAL_ADC_GetValue>
 8003a16:	4b0d      	ldr	r3, [pc, #52]	; (8003a4c <HAL_ADC_ConvCpltCallback+0x44>)
 8003a18:	8018      	strh	r0, [r3, #0]
	if (cpt %3 == 0)
 8003a1a:	7822      	ldrb	r2, [r4, #0]
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003a2c:	d101      	bne.n	8003a32 <HAL_ADC_ConvCpltCallback+0x2a>
		temperature_IKSO1A2();
 8003a2e:	f7ff fd89 	bl	8003544 <temperature_IKSO1A2>
	if (cpt %2 == 0)
 8003a32:	7823      	ldrb	r3, [r4, #0]
 8003a34:	07db      	lsls	r3, r3, #31
 8003a36:	d401      	bmi.n	8003a3c <HAL_ADC_ConvCpltCallback+0x34>
		humidity_IKSO1A2();
 8003a38:	f7ff fe8e 	bl	8003758 <humidity_IKSO1A2>
		pressure_IKSO1A2();
 8003a3c:	f7ff ff52 	bl	80038e4 <pressure_IKSO1A2>
	cpt++;
 8003a40:	7823      	ldrb	r3, [r4, #0]
 8003a42:	3301      	adds	r3, #1
 8003a44:	7023      	strb	r3, [r4, #0]
 8003a46:	bd10      	pop	{r4, pc}
 8003a48:	200000a4 	.word	0x200000a4
 8003a4c:	200000a6 	.word	0x200000a6

08003a50 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a50:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <HAL_MspInit+0x2c>)
 8003a52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a54:	f042 0201 	orr.w	r2, r2, #1
 8003a58:	661a      	str	r2, [r3, #96]	; 0x60
 8003a5a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8003a5c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a5e:	f002 0201 	and.w	r2, r2, #1
 8003a62:	9200      	str	r2, [sp, #0]
 8003a64:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a6c:	659a      	str	r2, [r3, #88]	; 0x58
 8003a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a74:	9301      	str	r3, [sp, #4]
 8003a76:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a78:	b002      	add	sp, #8
 8003a7a:	4770      	bx	lr
 8003a7c:	40021000 	.word	0x40021000

08003a80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a80:	b510      	push	{r4, lr}
 8003a82:	4604      	mov	r4, r0
 8003a84:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a86:	2214      	movs	r2, #20
 8003a88:	2100      	movs	r1, #0
 8003a8a:	a803      	add	r0, sp, #12
 8003a8c:	f000 f93e 	bl	8003d0c <memset>
  if(hadc->Instance==ADC1)
 8003a90:	6822      	ldr	r2, [r4, #0]
 8003a92:	4b16      	ldr	r3, [pc, #88]	; (8003aec <HAL_ADC_MspInit+0x6c>)
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d126      	bne.n	8003ae6 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003a98:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8003a9c:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PA4     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa0:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC_CLK_ENABLE();
 8003aa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003aa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003aa8:	64da      	str	r2, [r3, #76]	; 0x4c
 8003aaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003aac:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003ab0:	9201      	str	r2, [sp, #4]
 8003ab2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ab6:	f042 0201 	orr.w	r2, r2, #1
 8003aba:	64da      	str	r2, [r3, #76]	; 0x4c
 8003abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	9302      	str	r3, [sp, #8]
 8003ac4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003ac6:	2310      	movs	r3, #16
 8003ac8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003ace:	230b      	movs	r3, #11
 8003ad0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad2:	f7fd fb63 	bl	800119c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2012      	movs	r0, #18
 8003ada:	4611      	mov	r1, r2
 8003adc:	f7fd fb08 	bl	80010f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003ae0:	2012      	movs	r0, #18
 8003ae2:	f7fd fb39 	bl	8001158 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003ae6:	b008      	add	sp, #32
 8003ae8:	bd10      	pop	{r4, pc}
 8003aea:	bf00      	nop
 8003aec:	50040000 	.word	0x50040000

08003af0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003af0:	b510      	push	{r4, lr}
 8003af2:	4604      	mov	r4, r0
 8003af4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af6:	2214      	movs	r2, #20
 8003af8:	2100      	movs	r1, #0
 8003afa:	a803      	add	r0, sp, #12
 8003afc:	f000 f906 	bl	8003d0c <memset>
  if(hi2c->Instance==I2C1)
 8003b00:	6822      	ldr	r2, [r4, #0]
 8003b02:	4b13      	ldr	r3, [pc, #76]	; (8003b50 <HAL_I2C_MspInit+0x60>)
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d121      	bne.n	8003b4c <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b08:	4c12      	ldr	r4, [pc, #72]	; (8003b54 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b0a:	4813      	ldr	r0, [pc, #76]	; (8003b58 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b0c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003b0e:	f043 0302 	orr.w	r3, r3, #2
 8003b12:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003b14:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	9301      	str	r3, [sp, #4]
 8003b1c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003b1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b22:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b24:	2312      	movs	r3, #18
 8003b26:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b30:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b32:	2304      	movs	r3, #4
 8003b34:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b36:	f7fd fb31 	bl	800119c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b40:	65a3      	str	r3, [r4, #88]	; 0x58
 8003b42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b48:	9302      	str	r3, [sp, #8]
 8003b4a:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003b4c:	b008      	add	sp, #32
 8003b4e:	bd10      	pop	{r4, pc}
 8003b50:	40005400 	.word	0x40005400
 8003b54:	40021000 	.word	0x40021000
 8003b58:	48000400 	.word	0x48000400

08003b5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b5c:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM3)
 8003b5e:	4b0d      	ldr	r3, [pc, #52]	; (8003b94 <HAL_TIM_Base_MspInit+0x38>)
 8003b60:	6802      	ldr	r2, [r0, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d112      	bne.n	8003b8c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b66:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003b6a:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b6e:	f042 0202 	orr.w	r2, r2, #2
 8003b72:	659a      	str	r2, [r3, #88]	; 0x58
 8003b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003b76:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003b7e:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b80:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003b82:	f7fd fab5 	bl	80010f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003b86:	201d      	movs	r0, #29
 8003b88:	f7fd fae6 	bl	8001158 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003b8c:	b003      	add	sp, #12
 8003b8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b92:	bf00      	nop
 8003b94:	40000400 	.word	0x40000400

08003b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b98:	b510      	push	{r4, lr}
 8003b9a:	4604      	mov	r4, r0
 8003b9c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b9e:	2214      	movs	r2, #20
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	a803      	add	r0, sp, #12
 8003ba4:	f000 f8b2 	bl	8003d0c <memset>
  if(huart->Instance==USART2)
 8003ba8:	6822      	ldr	r2, [r4, #0]
 8003baa:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <HAL_UART_MspInit+0x60>)
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d120      	bne.n	8003bf2 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003bb0:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bb4:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8003bb6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003bb8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003bbc:	659a      	str	r2, [r3, #88]	; 0x58
 8003bbe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003bc0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003bc4:	9201      	str	r2, [sp, #4]
 8003bc6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	64da      	str	r2, [r3, #76]	; 0x4c
 8003bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	9302      	str	r3, [sp, #8]
 8003bd8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003bda:	230c      	movs	r3, #12
 8003bdc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bde:	2302      	movs	r3, #2
 8003be0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003be2:	2303      	movs	r3, #3
 8003be4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003bea:	2307      	movs	r3, #7
 8003bec:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bee:	f7fd fad5 	bl	800119c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003bf2:	b008      	add	sp, #32
 8003bf4:	bd10      	pop	{r4, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40004400 	.word	0x40004400

08003bfc <NMI_Handler>:
 8003bfc:	4770      	bx	lr

08003bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bfe:	e7fe      	b.n	8003bfe <HardFault_Handler>

08003c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c00:	e7fe      	b.n	8003c00 <MemManage_Handler>

08003c02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c02:	e7fe      	b.n	8003c02 <BusFault_Handler>

08003c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c04:	e7fe      	b.n	8003c04 <UsageFault_Handler>

08003c06 <SVC_Handler>:
 8003c06:	4770      	bx	lr

08003c08 <DebugMon_Handler>:
 8003c08:	4770      	bx	lr

08003c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c0a:	4770      	bx	lr

08003c0c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c0c:	f7fc bce6 	b.w	80005dc <HAL_IncTick>

08003c10 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003c10:	4801      	ldr	r0, [pc, #4]	; (8003c18 <ADC1_2_IRQHandler+0x8>)
 8003c12:	f7fc bdf1 	b.w	80007f8 <HAL_ADC_IRQHandler>
 8003c16:	bf00      	nop
 8003c18:	20000168 	.word	0x20000168

08003c1c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c1c:	4801      	ldr	r0, [pc, #4]	; (8003c24 <TIM3_IRQHandler+0x8>)
 8003c1e:	f7fe bdad 	b.w	800277c <HAL_TIM_IRQHandler>
 8003c22:	bf00      	nop
 8003c24:	20000124 	.word	0x20000124

08003c28 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c28:	490f      	ldr	r1, [pc, #60]	; (8003c68 <SystemInit+0x40>)
 8003c2a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003c2e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003c36:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <SystemInit+0x44>)
 8003c38:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003c3a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8003c3c:	f042 0201 	orr.w	r2, r2, #1
 8003c40:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8003c42:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8003c4a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8003c4e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003c50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c54:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c5c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003c5e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c64:	608b      	str	r3, [r1, #8]
 8003c66:	4770      	bx	lr
 8003c68:	e000ed00 	.word	0xe000ed00
 8003c6c:	40021000 	.word	0x40021000

08003c70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ca8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003c74:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003c76:	e003      	b.n	8003c80 <LoopCopyDataInit>

08003c78 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003c78:	4b0c      	ldr	r3, [pc, #48]	; (8003cac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003c7a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003c7c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003c7e:	3104      	adds	r1, #4

08003c80 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003c80:	480b      	ldr	r0, [pc, #44]	; (8003cb0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003c82:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003c84:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003c86:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003c88:	d3f6      	bcc.n	8003c78 <CopyDataInit>
	ldr	r2, =_sbss
 8003c8a:	4a0b      	ldr	r2, [pc, #44]	; (8003cb8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003c8c:	e002      	b.n	8003c94 <LoopFillZerobss>

08003c8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003c8e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003c90:	f842 3b04 	str.w	r3, [r2], #4

08003c94 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003c94:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <LoopForever+0x16>)
	cmp	r2, r3
 8003c96:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003c98:	d3f9      	bcc.n	8003c8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003c9a:	f7ff ffc5 	bl	8003c28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c9e:	f000 f811 	bl	8003cc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ca2:	f7ff fb37 	bl	8003314 <main>

08003ca6 <LoopForever>:

LoopForever:
    b LoopForever
 8003ca6:	e7fe      	b.n	8003ca6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003ca8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003cac:	08004db0 	.word	0x08004db0
	ldr	r0, =_sdata
 8003cb0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003cb4:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 8003cb8:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 8003cbc:	20000278 	.word	0x20000278

08003cc0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003cc0:	e7fe      	b.n	8003cc0 <ADC3_IRQHandler>
	...

08003cc4 <__libc_init_array>:
 8003cc4:	b570      	push	{r4, r5, r6, lr}
 8003cc6:	4e0d      	ldr	r6, [pc, #52]	; (8003cfc <__libc_init_array+0x38>)
 8003cc8:	4c0d      	ldr	r4, [pc, #52]	; (8003d00 <__libc_init_array+0x3c>)
 8003cca:	1ba4      	subs	r4, r4, r6
 8003ccc:	10a4      	asrs	r4, r4, #2
 8003cce:	2500      	movs	r5, #0
 8003cd0:	42a5      	cmp	r5, r4
 8003cd2:	d109      	bne.n	8003ce8 <__libc_init_array+0x24>
 8003cd4:	4e0b      	ldr	r6, [pc, #44]	; (8003d04 <__libc_init_array+0x40>)
 8003cd6:	4c0c      	ldr	r4, [pc, #48]	; (8003d08 <__libc_init_array+0x44>)
 8003cd8:	f000 ffb2 	bl	8004c40 <_init>
 8003cdc:	1ba4      	subs	r4, r4, r6
 8003cde:	10a4      	asrs	r4, r4, #2
 8003ce0:	2500      	movs	r5, #0
 8003ce2:	42a5      	cmp	r5, r4
 8003ce4:	d105      	bne.n	8003cf2 <__libc_init_array+0x2e>
 8003ce6:	bd70      	pop	{r4, r5, r6, pc}
 8003ce8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cec:	4798      	blx	r3
 8003cee:	3501      	adds	r5, #1
 8003cf0:	e7ee      	b.n	8003cd0 <__libc_init_array+0xc>
 8003cf2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cf6:	4798      	blx	r3
 8003cf8:	3501      	adds	r5, #1
 8003cfa:	e7f2      	b.n	8003ce2 <__libc_init_array+0x1e>
 8003cfc:	08004da8 	.word	0x08004da8
 8003d00:	08004da8 	.word	0x08004da8
 8003d04:	08004da8 	.word	0x08004da8
 8003d08:	08004dac 	.word	0x08004dac

08003d0c <memset>:
 8003d0c:	4402      	add	r2, r0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d100      	bne.n	8003d16 <memset+0xa>
 8003d14:	4770      	bx	lr
 8003d16:	f803 1b01 	strb.w	r1, [r3], #1
 8003d1a:	e7f9      	b.n	8003d10 <memset+0x4>

08003d1c <iprintf>:
 8003d1c:	b40f      	push	{r0, r1, r2, r3}
 8003d1e:	4b0a      	ldr	r3, [pc, #40]	; (8003d48 <iprintf+0x2c>)
 8003d20:	b513      	push	{r0, r1, r4, lr}
 8003d22:	681c      	ldr	r4, [r3, #0]
 8003d24:	b124      	cbz	r4, 8003d30 <iprintf+0x14>
 8003d26:	69a3      	ldr	r3, [r4, #24]
 8003d28:	b913      	cbnz	r3, 8003d30 <iprintf+0x14>
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	f000 fa24 	bl	8004178 <__sinit>
 8003d30:	ab05      	add	r3, sp, #20
 8003d32:	9a04      	ldr	r2, [sp, #16]
 8003d34:	68a1      	ldr	r1, [r4, #8]
 8003d36:	9301      	str	r3, [sp, #4]
 8003d38:	4620      	mov	r0, r4
 8003d3a:	f000 fbe1 	bl	8004500 <_vfiprintf_r>
 8003d3e:	b002      	add	sp, #8
 8003d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d44:	b004      	add	sp, #16
 8003d46:	4770      	bx	lr
 8003d48:	20000024 	.word	0x20000024

08003d4c <_puts_r>:
 8003d4c:	b570      	push	{r4, r5, r6, lr}
 8003d4e:	460e      	mov	r6, r1
 8003d50:	4605      	mov	r5, r0
 8003d52:	b118      	cbz	r0, 8003d5c <_puts_r+0x10>
 8003d54:	6983      	ldr	r3, [r0, #24]
 8003d56:	b90b      	cbnz	r3, 8003d5c <_puts_r+0x10>
 8003d58:	f000 fa0e 	bl	8004178 <__sinit>
 8003d5c:	69ab      	ldr	r3, [r5, #24]
 8003d5e:	68ac      	ldr	r4, [r5, #8]
 8003d60:	b913      	cbnz	r3, 8003d68 <_puts_r+0x1c>
 8003d62:	4628      	mov	r0, r5
 8003d64:	f000 fa08 	bl	8004178 <__sinit>
 8003d68:	4b23      	ldr	r3, [pc, #140]	; (8003df8 <_puts_r+0xac>)
 8003d6a:	429c      	cmp	r4, r3
 8003d6c:	d117      	bne.n	8003d9e <_puts_r+0x52>
 8003d6e:	686c      	ldr	r4, [r5, #4]
 8003d70:	89a3      	ldrh	r3, [r4, #12]
 8003d72:	071b      	lsls	r3, r3, #28
 8003d74:	d51d      	bpl.n	8003db2 <_puts_r+0x66>
 8003d76:	6923      	ldr	r3, [r4, #16]
 8003d78:	b1db      	cbz	r3, 8003db2 <_puts_r+0x66>
 8003d7a:	3e01      	subs	r6, #1
 8003d7c:	68a3      	ldr	r3, [r4, #8]
 8003d7e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d82:	3b01      	subs	r3, #1
 8003d84:	60a3      	str	r3, [r4, #8]
 8003d86:	b9e9      	cbnz	r1, 8003dc4 <_puts_r+0x78>
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	da2e      	bge.n	8003dea <_puts_r+0x9e>
 8003d8c:	4622      	mov	r2, r4
 8003d8e:	210a      	movs	r1, #10
 8003d90:	4628      	mov	r0, r5
 8003d92:	f000 f83f 	bl	8003e14 <__swbuf_r>
 8003d96:	3001      	adds	r0, #1
 8003d98:	d011      	beq.n	8003dbe <_puts_r+0x72>
 8003d9a:	200a      	movs	r0, #10
 8003d9c:	bd70      	pop	{r4, r5, r6, pc}
 8003d9e:	4b17      	ldr	r3, [pc, #92]	; (8003dfc <_puts_r+0xb0>)
 8003da0:	429c      	cmp	r4, r3
 8003da2:	d101      	bne.n	8003da8 <_puts_r+0x5c>
 8003da4:	68ac      	ldr	r4, [r5, #8]
 8003da6:	e7e3      	b.n	8003d70 <_puts_r+0x24>
 8003da8:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <_puts_r+0xb4>)
 8003daa:	429c      	cmp	r4, r3
 8003dac:	bf08      	it	eq
 8003dae:	68ec      	ldreq	r4, [r5, #12]
 8003db0:	e7de      	b.n	8003d70 <_puts_r+0x24>
 8003db2:	4621      	mov	r1, r4
 8003db4:	4628      	mov	r0, r5
 8003db6:	f000 f87f 	bl	8003eb8 <__swsetup_r>
 8003dba:	2800      	cmp	r0, #0
 8003dbc:	d0dd      	beq.n	8003d7a <_puts_r+0x2e>
 8003dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc2:	bd70      	pop	{r4, r5, r6, pc}
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	da04      	bge.n	8003dd2 <_puts_r+0x86>
 8003dc8:	69a2      	ldr	r2, [r4, #24]
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	db06      	blt.n	8003ddc <_puts_r+0x90>
 8003dce:	290a      	cmp	r1, #10
 8003dd0:	d004      	beq.n	8003ddc <_puts_r+0x90>
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	6022      	str	r2, [r4, #0]
 8003dd8:	7019      	strb	r1, [r3, #0]
 8003dda:	e7cf      	b.n	8003d7c <_puts_r+0x30>
 8003ddc:	4622      	mov	r2, r4
 8003dde:	4628      	mov	r0, r5
 8003de0:	f000 f818 	bl	8003e14 <__swbuf_r>
 8003de4:	3001      	adds	r0, #1
 8003de6:	d1c9      	bne.n	8003d7c <_puts_r+0x30>
 8003de8:	e7e9      	b.n	8003dbe <_puts_r+0x72>
 8003dea:	6823      	ldr	r3, [r4, #0]
 8003dec:	200a      	movs	r0, #10
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	6022      	str	r2, [r4, #0]
 8003df2:	7018      	strb	r0, [r3, #0]
 8003df4:	bd70      	pop	{r4, r5, r6, pc}
 8003df6:	bf00      	nop
 8003df8:	08004d28 	.word	0x08004d28
 8003dfc:	08004d48 	.word	0x08004d48
 8003e00:	08004d08 	.word	0x08004d08

08003e04 <puts>:
 8003e04:	4b02      	ldr	r3, [pc, #8]	; (8003e10 <puts+0xc>)
 8003e06:	4601      	mov	r1, r0
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	f7ff bf9f 	b.w	8003d4c <_puts_r>
 8003e0e:	bf00      	nop
 8003e10:	20000024 	.word	0x20000024

08003e14 <__swbuf_r>:
 8003e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e16:	460e      	mov	r6, r1
 8003e18:	4614      	mov	r4, r2
 8003e1a:	4605      	mov	r5, r0
 8003e1c:	b118      	cbz	r0, 8003e26 <__swbuf_r+0x12>
 8003e1e:	6983      	ldr	r3, [r0, #24]
 8003e20:	b90b      	cbnz	r3, 8003e26 <__swbuf_r+0x12>
 8003e22:	f000 f9a9 	bl	8004178 <__sinit>
 8003e26:	4b21      	ldr	r3, [pc, #132]	; (8003eac <__swbuf_r+0x98>)
 8003e28:	429c      	cmp	r4, r3
 8003e2a:	d12a      	bne.n	8003e82 <__swbuf_r+0x6e>
 8003e2c:	686c      	ldr	r4, [r5, #4]
 8003e2e:	69a3      	ldr	r3, [r4, #24]
 8003e30:	60a3      	str	r3, [r4, #8]
 8003e32:	89a3      	ldrh	r3, [r4, #12]
 8003e34:	071a      	lsls	r2, r3, #28
 8003e36:	d52e      	bpl.n	8003e96 <__swbuf_r+0x82>
 8003e38:	6923      	ldr	r3, [r4, #16]
 8003e3a:	b363      	cbz	r3, 8003e96 <__swbuf_r+0x82>
 8003e3c:	6923      	ldr	r3, [r4, #16]
 8003e3e:	6820      	ldr	r0, [r4, #0]
 8003e40:	1ac0      	subs	r0, r0, r3
 8003e42:	6963      	ldr	r3, [r4, #20]
 8003e44:	b2f6      	uxtb	r6, r6
 8003e46:	4298      	cmp	r0, r3
 8003e48:	4637      	mov	r7, r6
 8003e4a:	db04      	blt.n	8003e56 <__swbuf_r+0x42>
 8003e4c:	4621      	mov	r1, r4
 8003e4e:	4628      	mov	r0, r5
 8003e50:	f000 f928 	bl	80040a4 <_fflush_r>
 8003e54:	bb28      	cbnz	r0, 8003ea2 <__swbuf_r+0x8e>
 8003e56:	68a3      	ldr	r3, [r4, #8]
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	60a3      	str	r3, [r4, #8]
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	6022      	str	r2, [r4, #0]
 8003e62:	701e      	strb	r6, [r3, #0]
 8003e64:	6963      	ldr	r3, [r4, #20]
 8003e66:	3001      	adds	r0, #1
 8003e68:	4298      	cmp	r0, r3
 8003e6a:	d004      	beq.n	8003e76 <__swbuf_r+0x62>
 8003e6c:	89a3      	ldrh	r3, [r4, #12]
 8003e6e:	07db      	lsls	r3, r3, #31
 8003e70:	d519      	bpl.n	8003ea6 <__swbuf_r+0x92>
 8003e72:	2e0a      	cmp	r6, #10
 8003e74:	d117      	bne.n	8003ea6 <__swbuf_r+0x92>
 8003e76:	4621      	mov	r1, r4
 8003e78:	4628      	mov	r0, r5
 8003e7a:	f000 f913 	bl	80040a4 <_fflush_r>
 8003e7e:	b190      	cbz	r0, 8003ea6 <__swbuf_r+0x92>
 8003e80:	e00f      	b.n	8003ea2 <__swbuf_r+0x8e>
 8003e82:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <__swbuf_r+0x9c>)
 8003e84:	429c      	cmp	r4, r3
 8003e86:	d101      	bne.n	8003e8c <__swbuf_r+0x78>
 8003e88:	68ac      	ldr	r4, [r5, #8]
 8003e8a:	e7d0      	b.n	8003e2e <__swbuf_r+0x1a>
 8003e8c:	4b09      	ldr	r3, [pc, #36]	; (8003eb4 <__swbuf_r+0xa0>)
 8003e8e:	429c      	cmp	r4, r3
 8003e90:	bf08      	it	eq
 8003e92:	68ec      	ldreq	r4, [r5, #12]
 8003e94:	e7cb      	b.n	8003e2e <__swbuf_r+0x1a>
 8003e96:	4621      	mov	r1, r4
 8003e98:	4628      	mov	r0, r5
 8003e9a:	f000 f80d 	bl	8003eb8 <__swsetup_r>
 8003e9e:	2800      	cmp	r0, #0
 8003ea0:	d0cc      	beq.n	8003e3c <__swbuf_r+0x28>
 8003ea2:	f04f 37ff 	mov.w	r7, #4294967295
 8003ea6:	4638      	mov	r0, r7
 8003ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	08004d28 	.word	0x08004d28
 8003eb0:	08004d48 	.word	0x08004d48
 8003eb4:	08004d08 	.word	0x08004d08

08003eb8 <__swsetup_r>:
 8003eb8:	4b32      	ldr	r3, [pc, #200]	; (8003f84 <__swsetup_r+0xcc>)
 8003eba:	b570      	push	{r4, r5, r6, lr}
 8003ebc:	681d      	ldr	r5, [r3, #0]
 8003ebe:	4606      	mov	r6, r0
 8003ec0:	460c      	mov	r4, r1
 8003ec2:	b125      	cbz	r5, 8003ece <__swsetup_r+0x16>
 8003ec4:	69ab      	ldr	r3, [r5, #24]
 8003ec6:	b913      	cbnz	r3, 8003ece <__swsetup_r+0x16>
 8003ec8:	4628      	mov	r0, r5
 8003eca:	f000 f955 	bl	8004178 <__sinit>
 8003ece:	4b2e      	ldr	r3, [pc, #184]	; (8003f88 <__swsetup_r+0xd0>)
 8003ed0:	429c      	cmp	r4, r3
 8003ed2:	d10f      	bne.n	8003ef4 <__swsetup_r+0x3c>
 8003ed4:	686c      	ldr	r4, [r5, #4]
 8003ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	0715      	lsls	r5, r2, #28
 8003ede:	d42c      	bmi.n	8003f3a <__swsetup_r+0x82>
 8003ee0:	06d0      	lsls	r0, r2, #27
 8003ee2:	d411      	bmi.n	8003f08 <__swsetup_r+0x50>
 8003ee4:	2209      	movs	r2, #9
 8003ee6:	6032      	str	r2, [r6, #0]
 8003ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eec:	81a3      	strh	r3, [r4, #12]
 8003eee:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef2:	bd70      	pop	{r4, r5, r6, pc}
 8003ef4:	4b25      	ldr	r3, [pc, #148]	; (8003f8c <__swsetup_r+0xd4>)
 8003ef6:	429c      	cmp	r4, r3
 8003ef8:	d101      	bne.n	8003efe <__swsetup_r+0x46>
 8003efa:	68ac      	ldr	r4, [r5, #8]
 8003efc:	e7eb      	b.n	8003ed6 <__swsetup_r+0x1e>
 8003efe:	4b24      	ldr	r3, [pc, #144]	; (8003f90 <__swsetup_r+0xd8>)
 8003f00:	429c      	cmp	r4, r3
 8003f02:	bf08      	it	eq
 8003f04:	68ec      	ldreq	r4, [r5, #12]
 8003f06:	e7e6      	b.n	8003ed6 <__swsetup_r+0x1e>
 8003f08:	0751      	lsls	r1, r2, #29
 8003f0a:	d512      	bpl.n	8003f32 <__swsetup_r+0x7a>
 8003f0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f0e:	b141      	cbz	r1, 8003f22 <__swsetup_r+0x6a>
 8003f10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f14:	4299      	cmp	r1, r3
 8003f16:	d002      	beq.n	8003f1e <__swsetup_r+0x66>
 8003f18:	4630      	mov	r0, r6
 8003f1a:	f000 fa1b 	bl	8004354 <_free_r>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	6363      	str	r3, [r4, #52]	; 0x34
 8003f22:	89a3      	ldrh	r3, [r4, #12]
 8003f24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f28:	81a3      	strh	r3, [r4, #12]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	6063      	str	r3, [r4, #4]
 8003f2e:	6923      	ldr	r3, [r4, #16]
 8003f30:	6023      	str	r3, [r4, #0]
 8003f32:	89a3      	ldrh	r3, [r4, #12]
 8003f34:	f043 0308 	orr.w	r3, r3, #8
 8003f38:	81a3      	strh	r3, [r4, #12]
 8003f3a:	6923      	ldr	r3, [r4, #16]
 8003f3c:	b94b      	cbnz	r3, 8003f52 <__swsetup_r+0x9a>
 8003f3e:	89a3      	ldrh	r3, [r4, #12]
 8003f40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f48:	d003      	beq.n	8003f52 <__swsetup_r+0x9a>
 8003f4a:	4621      	mov	r1, r4
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	f000 f9c1 	bl	80042d4 <__smakebuf_r>
 8003f52:	89a2      	ldrh	r2, [r4, #12]
 8003f54:	f012 0301 	ands.w	r3, r2, #1
 8003f58:	d00c      	beq.n	8003f74 <__swsetup_r+0xbc>
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60a3      	str	r3, [r4, #8]
 8003f5e:	6963      	ldr	r3, [r4, #20]
 8003f60:	425b      	negs	r3, r3
 8003f62:	61a3      	str	r3, [r4, #24]
 8003f64:	6923      	ldr	r3, [r4, #16]
 8003f66:	b953      	cbnz	r3, 8003f7e <__swsetup_r+0xc6>
 8003f68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f6c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003f70:	d1ba      	bne.n	8003ee8 <__swsetup_r+0x30>
 8003f72:	bd70      	pop	{r4, r5, r6, pc}
 8003f74:	0792      	lsls	r2, r2, #30
 8003f76:	bf58      	it	pl
 8003f78:	6963      	ldrpl	r3, [r4, #20]
 8003f7a:	60a3      	str	r3, [r4, #8]
 8003f7c:	e7f2      	b.n	8003f64 <__swsetup_r+0xac>
 8003f7e:	2000      	movs	r0, #0
 8003f80:	e7f7      	b.n	8003f72 <__swsetup_r+0xba>
 8003f82:	bf00      	nop
 8003f84:	20000024 	.word	0x20000024
 8003f88:	08004d28 	.word	0x08004d28
 8003f8c:	08004d48 	.word	0x08004d48
 8003f90:	08004d08 	.word	0x08004d08

08003f94 <__sflush_r>:
 8003f94:	898a      	ldrh	r2, [r1, #12]
 8003f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f9a:	4605      	mov	r5, r0
 8003f9c:	0710      	lsls	r0, r2, #28
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	d45a      	bmi.n	8004058 <__sflush_r+0xc4>
 8003fa2:	684b      	ldr	r3, [r1, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	dc05      	bgt.n	8003fb4 <__sflush_r+0x20>
 8003fa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	dc02      	bgt.n	8003fb4 <__sflush_r+0x20>
 8003fae:	2000      	movs	r0, #0
 8003fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fb6:	2e00      	cmp	r6, #0
 8003fb8:	d0f9      	beq.n	8003fae <__sflush_r+0x1a>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003fc0:	682f      	ldr	r7, [r5, #0]
 8003fc2:	602b      	str	r3, [r5, #0]
 8003fc4:	d033      	beq.n	800402e <__sflush_r+0x9a>
 8003fc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003fc8:	89a3      	ldrh	r3, [r4, #12]
 8003fca:	075a      	lsls	r2, r3, #29
 8003fcc:	d505      	bpl.n	8003fda <__sflush_r+0x46>
 8003fce:	6863      	ldr	r3, [r4, #4]
 8003fd0:	1ac0      	subs	r0, r0, r3
 8003fd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003fd4:	b10b      	cbz	r3, 8003fda <__sflush_r+0x46>
 8003fd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fd8:	1ac0      	subs	r0, r0, r3
 8003fda:	2300      	movs	r3, #0
 8003fdc:	4602      	mov	r2, r0
 8003fde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fe0:	6a21      	ldr	r1, [r4, #32]
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	47b0      	blx	r6
 8003fe6:	1c43      	adds	r3, r0, #1
 8003fe8:	89a3      	ldrh	r3, [r4, #12]
 8003fea:	d106      	bne.n	8003ffa <__sflush_r+0x66>
 8003fec:	6829      	ldr	r1, [r5, #0]
 8003fee:	291d      	cmp	r1, #29
 8003ff0:	d84b      	bhi.n	800408a <__sflush_r+0xf6>
 8003ff2:	4a2b      	ldr	r2, [pc, #172]	; (80040a0 <__sflush_r+0x10c>)
 8003ff4:	40ca      	lsrs	r2, r1
 8003ff6:	07d6      	lsls	r6, r2, #31
 8003ff8:	d547      	bpl.n	800408a <__sflush_r+0xf6>
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	6062      	str	r2, [r4, #4]
 8003ffe:	04d9      	lsls	r1, r3, #19
 8004000:	6922      	ldr	r2, [r4, #16]
 8004002:	6022      	str	r2, [r4, #0]
 8004004:	d504      	bpl.n	8004010 <__sflush_r+0x7c>
 8004006:	1c42      	adds	r2, r0, #1
 8004008:	d101      	bne.n	800400e <__sflush_r+0x7a>
 800400a:	682b      	ldr	r3, [r5, #0]
 800400c:	b903      	cbnz	r3, 8004010 <__sflush_r+0x7c>
 800400e:	6560      	str	r0, [r4, #84]	; 0x54
 8004010:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004012:	602f      	str	r7, [r5, #0]
 8004014:	2900      	cmp	r1, #0
 8004016:	d0ca      	beq.n	8003fae <__sflush_r+0x1a>
 8004018:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800401c:	4299      	cmp	r1, r3
 800401e:	d002      	beq.n	8004026 <__sflush_r+0x92>
 8004020:	4628      	mov	r0, r5
 8004022:	f000 f997 	bl	8004354 <_free_r>
 8004026:	2000      	movs	r0, #0
 8004028:	6360      	str	r0, [r4, #52]	; 0x34
 800402a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800402e:	6a21      	ldr	r1, [r4, #32]
 8004030:	2301      	movs	r3, #1
 8004032:	4628      	mov	r0, r5
 8004034:	47b0      	blx	r6
 8004036:	1c41      	adds	r1, r0, #1
 8004038:	d1c6      	bne.n	8003fc8 <__sflush_r+0x34>
 800403a:	682b      	ldr	r3, [r5, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0c3      	beq.n	8003fc8 <__sflush_r+0x34>
 8004040:	2b1d      	cmp	r3, #29
 8004042:	d001      	beq.n	8004048 <__sflush_r+0xb4>
 8004044:	2b16      	cmp	r3, #22
 8004046:	d101      	bne.n	800404c <__sflush_r+0xb8>
 8004048:	602f      	str	r7, [r5, #0]
 800404a:	e7b0      	b.n	8003fae <__sflush_r+0x1a>
 800404c:	89a3      	ldrh	r3, [r4, #12]
 800404e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004052:	81a3      	strh	r3, [r4, #12]
 8004054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004058:	690f      	ldr	r7, [r1, #16]
 800405a:	2f00      	cmp	r7, #0
 800405c:	d0a7      	beq.n	8003fae <__sflush_r+0x1a>
 800405e:	0793      	lsls	r3, r2, #30
 8004060:	680e      	ldr	r6, [r1, #0]
 8004062:	bf08      	it	eq
 8004064:	694b      	ldreq	r3, [r1, #20]
 8004066:	600f      	str	r7, [r1, #0]
 8004068:	bf18      	it	ne
 800406a:	2300      	movne	r3, #0
 800406c:	eba6 0807 	sub.w	r8, r6, r7
 8004070:	608b      	str	r3, [r1, #8]
 8004072:	f1b8 0f00 	cmp.w	r8, #0
 8004076:	dd9a      	ble.n	8003fae <__sflush_r+0x1a>
 8004078:	4643      	mov	r3, r8
 800407a:	463a      	mov	r2, r7
 800407c:	6a21      	ldr	r1, [r4, #32]
 800407e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004080:	4628      	mov	r0, r5
 8004082:	47b0      	blx	r6
 8004084:	2800      	cmp	r0, #0
 8004086:	dc07      	bgt.n	8004098 <__sflush_r+0x104>
 8004088:	89a3      	ldrh	r3, [r4, #12]
 800408a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800408e:	81a3      	strh	r3, [r4, #12]
 8004090:	f04f 30ff 	mov.w	r0, #4294967295
 8004094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004098:	4407      	add	r7, r0
 800409a:	eba8 0800 	sub.w	r8, r8, r0
 800409e:	e7e8      	b.n	8004072 <__sflush_r+0xde>
 80040a0:	20400001 	.word	0x20400001

080040a4 <_fflush_r>:
 80040a4:	b538      	push	{r3, r4, r5, lr}
 80040a6:	690b      	ldr	r3, [r1, #16]
 80040a8:	4605      	mov	r5, r0
 80040aa:	460c      	mov	r4, r1
 80040ac:	b1db      	cbz	r3, 80040e6 <_fflush_r+0x42>
 80040ae:	b118      	cbz	r0, 80040b8 <_fflush_r+0x14>
 80040b0:	6983      	ldr	r3, [r0, #24]
 80040b2:	b90b      	cbnz	r3, 80040b8 <_fflush_r+0x14>
 80040b4:	f000 f860 	bl	8004178 <__sinit>
 80040b8:	4b0c      	ldr	r3, [pc, #48]	; (80040ec <_fflush_r+0x48>)
 80040ba:	429c      	cmp	r4, r3
 80040bc:	d109      	bne.n	80040d2 <_fflush_r+0x2e>
 80040be:	686c      	ldr	r4, [r5, #4]
 80040c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040c4:	b17b      	cbz	r3, 80040e6 <_fflush_r+0x42>
 80040c6:	4621      	mov	r1, r4
 80040c8:	4628      	mov	r0, r5
 80040ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040ce:	f7ff bf61 	b.w	8003f94 <__sflush_r>
 80040d2:	4b07      	ldr	r3, [pc, #28]	; (80040f0 <_fflush_r+0x4c>)
 80040d4:	429c      	cmp	r4, r3
 80040d6:	d101      	bne.n	80040dc <_fflush_r+0x38>
 80040d8:	68ac      	ldr	r4, [r5, #8]
 80040da:	e7f1      	b.n	80040c0 <_fflush_r+0x1c>
 80040dc:	4b05      	ldr	r3, [pc, #20]	; (80040f4 <_fflush_r+0x50>)
 80040de:	429c      	cmp	r4, r3
 80040e0:	bf08      	it	eq
 80040e2:	68ec      	ldreq	r4, [r5, #12]
 80040e4:	e7ec      	b.n	80040c0 <_fflush_r+0x1c>
 80040e6:	2000      	movs	r0, #0
 80040e8:	bd38      	pop	{r3, r4, r5, pc}
 80040ea:	bf00      	nop
 80040ec:	08004d28 	.word	0x08004d28
 80040f0:	08004d48 	.word	0x08004d48
 80040f4:	08004d08 	.word	0x08004d08

080040f8 <_cleanup_r>:
 80040f8:	4901      	ldr	r1, [pc, #4]	; (8004100 <_cleanup_r+0x8>)
 80040fa:	f000 b8a9 	b.w	8004250 <_fwalk_reent>
 80040fe:	bf00      	nop
 8004100:	080040a5 	.word	0x080040a5

08004104 <std.isra.0>:
 8004104:	2300      	movs	r3, #0
 8004106:	b510      	push	{r4, lr}
 8004108:	4604      	mov	r4, r0
 800410a:	6003      	str	r3, [r0, #0]
 800410c:	6043      	str	r3, [r0, #4]
 800410e:	6083      	str	r3, [r0, #8]
 8004110:	8181      	strh	r1, [r0, #12]
 8004112:	6643      	str	r3, [r0, #100]	; 0x64
 8004114:	81c2      	strh	r2, [r0, #14]
 8004116:	6103      	str	r3, [r0, #16]
 8004118:	6143      	str	r3, [r0, #20]
 800411a:	6183      	str	r3, [r0, #24]
 800411c:	4619      	mov	r1, r3
 800411e:	2208      	movs	r2, #8
 8004120:	305c      	adds	r0, #92	; 0x5c
 8004122:	f7ff fdf3 	bl	8003d0c <memset>
 8004126:	4b05      	ldr	r3, [pc, #20]	; (800413c <std.isra.0+0x38>)
 8004128:	6263      	str	r3, [r4, #36]	; 0x24
 800412a:	4b05      	ldr	r3, [pc, #20]	; (8004140 <std.isra.0+0x3c>)
 800412c:	62a3      	str	r3, [r4, #40]	; 0x28
 800412e:	4b05      	ldr	r3, [pc, #20]	; (8004144 <std.isra.0+0x40>)
 8004130:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004132:	4b05      	ldr	r3, [pc, #20]	; (8004148 <std.isra.0+0x44>)
 8004134:	6224      	str	r4, [r4, #32]
 8004136:	6323      	str	r3, [r4, #48]	; 0x30
 8004138:	bd10      	pop	{r4, pc}
 800413a:	bf00      	nop
 800413c:	08004a79 	.word	0x08004a79
 8004140:	08004a9b 	.word	0x08004a9b
 8004144:	08004ad3 	.word	0x08004ad3
 8004148:	08004af7 	.word	0x08004af7

0800414c <__sfmoreglue>:
 800414c:	b570      	push	{r4, r5, r6, lr}
 800414e:	1e4a      	subs	r2, r1, #1
 8004150:	2568      	movs	r5, #104	; 0x68
 8004152:	4355      	muls	r5, r2
 8004154:	460e      	mov	r6, r1
 8004156:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800415a:	f000 f949 	bl	80043f0 <_malloc_r>
 800415e:	4604      	mov	r4, r0
 8004160:	b140      	cbz	r0, 8004174 <__sfmoreglue+0x28>
 8004162:	2100      	movs	r1, #0
 8004164:	e880 0042 	stmia.w	r0, {r1, r6}
 8004168:	300c      	adds	r0, #12
 800416a:	60a0      	str	r0, [r4, #8]
 800416c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004170:	f7ff fdcc 	bl	8003d0c <memset>
 8004174:	4620      	mov	r0, r4
 8004176:	bd70      	pop	{r4, r5, r6, pc}

08004178 <__sinit>:
 8004178:	6983      	ldr	r3, [r0, #24]
 800417a:	b510      	push	{r4, lr}
 800417c:	4604      	mov	r4, r0
 800417e:	bb33      	cbnz	r3, 80041ce <__sinit+0x56>
 8004180:	6483      	str	r3, [r0, #72]	; 0x48
 8004182:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004184:	6503      	str	r3, [r0, #80]	; 0x50
 8004186:	4b12      	ldr	r3, [pc, #72]	; (80041d0 <__sinit+0x58>)
 8004188:	4a12      	ldr	r2, [pc, #72]	; (80041d4 <__sinit+0x5c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6282      	str	r2, [r0, #40]	; 0x28
 800418e:	4298      	cmp	r0, r3
 8004190:	bf04      	itt	eq
 8004192:	2301      	moveq	r3, #1
 8004194:	6183      	streq	r3, [r0, #24]
 8004196:	f000 f81f 	bl	80041d8 <__sfp>
 800419a:	6060      	str	r0, [r4, #4]
 800419c:	4620      	mov	r0, r4
 800419e:	f000 f81b 	bl	80041d8 <__sfp>
 80041a2:	60a0      	str	r0, [r4, #8]
 80041a4:	4620      	mov	r0, r4
 80041a6:	f000 f817 	bl	80041d8 <__sfp>
 80041aa:	2200      	movs	r2, #0
 80041ac:	60e0      	str	r0, [r4, #12]
 80041ae:	2104      	movs	r1, #4
 80041b0:	6860      	ldr	r0, [r4, #4]
 80041b2:	f7ff ffa7 	bl	8004104 <std.isra.0>
 80041b6:	2201      	movs	r2, #1
 80041b8:	2109      	movs	r1, #9
 80041ba:	68a0      	ldr	r0, [r4, #8]
 80041bc:	f7ff ffa2 	bl	8004104 <std.isra.0>
 80041c0:	2202      	movs	r2, #2
 80041c2:	2112      	movs	r1, #18
 80041c4:	68e0      	ldr	r0, [r4, #12]
 80041c6:	f7ff ff9d 	bl	8004104 <std.isra.0>
 80041ca:	2301      	movs	r3, #1
 80041cc:	61a3      	str	r3, [r4, #24]
 80041ce:	bd10      	pop	{r4, pc}
 80041d0:	08004d68 	.word	0x08004d68
 80041d4:	080040f9 	.word	0x080040f9

080041d8 <__sfp>:
 80041d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041da:	4b1c      	ldr	r3, [pc, #112]	; (800424c <__sfp+0x74>)
 80041dc:	681e      	ldr	r6, [r3, #0]
 80041de:	69b3      	ldr	r3, [r6, #24]
 80041e0:	4607      	mov	r7, r0
 80041e2:	b913      	cbnz	r3, 80041ea <__sfp+0x12>
 80041e4:	4630      	mov	r0, r6
 80041e6:	f7ff ffc7 	bl	8004178 <__sinit>
 80041ea:	3648      	adds	r6, #72	; 0x48
 80041ec:	68b4      	ldr	r4, [r6, #8]
 80041ee:	6873      	ldr	r3, [r6, #4]
 80041f0:	3b01      	subs	r3, #1
 80041f2:	d503      	bpl.n	80041fc <__sfp+0x24>
 80041f4:	6833      	ldr	r3, [r6, #0]
 80041f6:	b133      	cbz	r3, 8004206 <__sfp+0x2e>
 80041f8:	6836      	ldr	r6, [r6, #0]
 80041fa:	e7f7      	b.n	80041ec <__sfp+0x14>
 80041fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004200:	b16d      	cbz	r5, 800421e <__sfp+0x46>
 8004202:	3468      	adds	r4, #104	; 0x68
 8004204:	e7f4      	b.n	80041f0 <__sfp+0x18>
 8004206:	2104      	movs	r1, #4
 8004208:	4638      	mov	r0, r7
 800420a:	f7ff ff9f 	bl	800414c <__sfmoreglue>
 800420e:	6030      	str	r0, [r6, #0]
 8004210:	2800      	cmp	r0, #0
 8004212:	d1f1      	bne.n	80041f8 <__sfp+0x20>
 8004214:	230c      	movs	r3, #12
 8004216:	603b      	str	r3, [r7, #0]
 8004218:	4604      	mov	r4, r0
 800421a:	4620      	mov	r0, r4
 800421c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800421e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004222:	81e3      	strh	r3, [r4, #14]
 8004224:	2301      	movs	r3, #1
 8004226:	81a3      	strh	r3, [r4, #12]
 8004228:	6665      	str	r5, [r4, #100]	; 0x64
 800422a:	6025      	str	r5, [r4, #0]
 800422c:	60a5      	str	r5, [r4, #8]
 800422e:	6065      	str	r5, [r4, #4]
 8004230:	6125      	str	r5, [r4, #16]
 8004232:	6165      	str	r5, [r4, #20]
 8004234:	61a5      	str	r5, [r4, #24]
 8004236:	2208      	movs	r2, #8
 8004238:	4629      	mov	r1, r5
 800423a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800423e:	f7ff fd65 	bl	8003d0c <memset>
 8004242:	6365      	str	r5, [r4, #52]	; 0x34
 8004244:	63a5      	str	r5, [r4, #56]	; 0x38
 8004246:	64a5      	str	r5, [r4, #72]	; 0x48
 8004248:	64e5      	str	r5, [r4, #76]	; 0x4c
 800424a:	e7e6      	b.n	800421a <__sfp+0x42>
 800424c:	08004d68 	.word	0x08004d68

08004250 <_fwalk_reent>:
 8004250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004254:	4680      	mov	r8, r0
 8004256:	4689      	mov	r9, r1
 8004258:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800425c:	2600      	movs	r6, #0
 800425e:	b914      	cbnz	r4, 8004266 <_fwalk_reent+0x16>
 8004260:	4630      	mov	r0, r6
 8004262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004266:	68a5      	ldr	r5, [r4, #8]
 8004268:	6867      	ldr	r7, [r4, #4]
 800426a:	3f01      	subs	r7, #1
 800426c:	d501      	bpl.n	8004272 <_fwalk_reent+0x22>
 800426e:	6824      	ldr	r4, [r4, #0]
 8004270:	e7f5      	b.n	800425e <_fwalk_reent+0xe>
 8004272:	89ab      	ldrh	r3, [r5, #12]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d907      	bls.n	8004288 <_fwalk_reent+0x38>
 8004278:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800427c:	3301      	adds	r3, #1
 800427e:	d003      	beq.n	8004288 <_fwalk_reent+0x38>
 8004280:	4629      	mov	r1, r5
 8004282:	4640      	mov	r0, r8
 8004284:	47c8      	blx	r9
 8004286:	4306      	orrs	r6, r0
 8004288:	3568      	adds	r5, #104	; 0x68
 800428a:	e7ee      	b.n	800426a <_fwalk_reent+0x1a>

0800428c <__swhatbuf_r>:
 800428c:	b570      	push	{r4, r5, r6, lr}
 800428e:	460e      	mov	r6, r1
 8004290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004294:	2900      	cmp	r1, #0
 8004296:	b090      	sub	sp, #64	; 0x40
 8004298:	4614      	mov	r4, r2
 800429a:	461d      	mov	r5, r3
 800429c:	da07      	bge.n	80042ae <__swhatbuf_r+0x22>
 800429e:	2300      	movs	r3, #0
 80042a0:	602b      	str	r3, [r5, #0]
 80042a2:	89b3      	ldrh	r3, [r6, #12]
 80042a4:	061a      	lsls	r2, r3, #24
 80042a6:	d410      	bmi.n	80042ca <__swhatbuf_r+0x3e>
 80042a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042ac:	e00e      	b.n	80042cc <__swhatbuf_r+0x40>
 80042ae:	aa01      	add	r2, sp, #4
 80042b0:	f000 fc48 	bl	8004b44 <_fstat_r>
 80042b4:	2800      	cmp	r0, #0
 80042b6:	dbf2      	blt.n	800429e <__swhatbuf_r+0x12>
 80042b8:	9a02      	ldr	r2, [sp, #8]
 80042ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80042be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80042c2:	425a      	negs	r2, r3
 80042c4:	415a      	adcs	r2, r3
 80042c6:	602a      	str	r2, [r5, #0]
 80042c8:	e7ee      	b.n	80042a8 <__swhatbuf_r+0x1c>
 80042ca:	2340      	movs	r3, #64	; 0x40
 80042cc:	2000      	movs	r0, #0
 80042ce:	6023      	str	r3, [r4, #0]
 80042d0:	b010      	add	sp, #64	; 0x40
 80042d2:	bd70      	pop	{r4, r5, r6, pc}

080042d4 <__smakebuf_r>:
 80042d4:	898b      	ldrh	r3, [r1, #12]
 80042d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80042d8:	079d      	lsls	r5, r3, #30
 80042da:	4606      	mov	r6, r0
 80042dc:	460c      	mov	r4, r1
 80042de:	d507      	bpl.n	80042f0 <__smakebuf_r+0x1c>
 80042e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80042e4:	6023      	str	r3, [r4, #0]
 80042e6:	6123      	str	r3, [r4, #16]
 80042e8:	2301      	movs	r3, #1
 80042ea:	6163      	str	r3, [r4, #20]
 80042ec:	b002      	add	sp, #8
 80042ee:	bd70      	pop	{r4, r5, r6, pc}
 80042f0:	ab01      	add	r3, sp, #4
 80042f2:	466a      	mov	r2, sp
 80042f4:	f7ff ffca 	bl	800428c <__swhatbuf_r>
 80042f8:	9900      	ldr	r1, [sp, #0]
 80042fa:	4605      	mov	r5, r0
 80042fc:	4630      	mov	r0, r6
 80042fe:	f000 f877 	bl	80043f0 <_malloc_r>
 8004302:	b948      	cbnz	r0, 8004318 <__smakebuf_r+0x44>
 8004304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004308:	059a      	lsls	r2, r3, #22
 800430a:	d4ef      	bmi.n	80042ec <__smakebuf_r+0x18>
 800430c:	f023 0303 	bic.w	r3, r3, #3
 8004310:	f043 0302 	orr.w	r3, r3, #2
 8004314:	81a3      	strh	r3, [r4, #12]
 8004316:	e7e3      	b.n	80042e0 <__smakebuf_r+0xc>
 8004318:	4b0d      	ldr	r3, [pc, #52]	; (8004350 <__smakebuf_r+0x7c>)
 800431a:	62b3      	str	r3, [r6, #40]	; 0x28
 800431c:	89a3      	ldrh	r3, [r4, #12]
 800431e:	6020      	str	r0, [r4, #0]
 8004320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004324:	81a3      	strh	r3, [r4, #12]
 8004326:	9b00      	ldr	r3, [sp, #0]
 8004328:	6163      	str	r3, [r4, #20]
 800432a:	9b01      	ldr	r3, [sp, #4]
 800432c:	6120      	str	r0, [r4, #16]
 800432e:	b15b      	cbz	r3, 8004348 <__smakebuf_r+0x74>
 8004330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004334:	4630      	mov	r0, r6
 8004336:	f000 fc17 	bl	8004b68 <_isatty_r>
 800433a:	b128      	cbz	r0, 8004348 <__smakebuf_r+0x74>
 800433c:	89a3      	ldrh	r3, [r4, #12]
 800433e:	f023 0303 	bic.w	r3, r3, #3
 8004342:	f043 0301 	orr.w	r3, r3, #1
 8004346:	81a3      	strh	r3, [r4, #12]
 8004348:	89a3      	ldrh	r3, [r4, #12]
 800434a:	431d      	orrs	r5, r3
 800434c:	81a5      	strh	r5, [r4, #12]
 800434e:	e7cd      	b.n	80042ec <__smakebuf_r+0x18>
 8004350:	080040f9 	.word	0x080040f9

08004354 <_free_r>:
 8004354:	b538      	push	{r3, r4, r5, lr}
 8004356:	4605      	mov	r5, r0
 8004358:	2900      	cmp	r1, #0
 800435a:	d045      	beq.n	80043e8 <_free_r+0x94>
 800435c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004360:	1f0c      	subs	r4, r1, #4
 8004362:	2b00      	cmp	r3, #0
 8004364:	bfb8      	it	lt
 8004366:	18e4      	addlt	r4, r4, r3
 8004368:	f000 fc20 	bl	8004bac <__malloc_lock>
 800436c:	4a1f      	ldr	r2, [pc, #124]	; (80043ec <_free_r+0x98>)
 800436e:	6813      	ldr	r3, [r2, #0]
 8004370:	4610      	mov	r0, r2
 8004372:	b933      	cbnz	r3, 8004382 <_free_r+0x2e>
 8004374:	6063      	str	r3, [r4, #4]
 8004376:	6014      	str	r4, [r2, #0]
 8004378:	4628      	mov	r0, r5
 800437a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800437e:	f000 bc16 	b.w	8004bae <__malloc_unlock>
 8004382:	42a3      	cmp	r3, r4
 8004384:	d90c      	bls.n	80043a0 <_free_r+0x4c>
 8004386:	6821      	ldr	r1, [r4, #0]
 8004388:	1862      	adds	r2, r4, r1
 800438a:	4293      	cmp	r3, r2
 800438c:	bf04      	itt	eq
 800438e:	681a      	ldreq	r2, [r3, #0]
 8004390:	685b      	ldreq	r3, [r3, #4]
 8004392:	6063      	str	r3, [r4, #4]
 8004394:	bf04      	itt	eq
 8004396:	1852      	addeq	r2, r2, r1
 8004398:	6022      	streq	r2, [r4, #0]
 800439a:	6004      	str	r4, [r0, #0]
 800439c:	e7ec      	b.n	8004378 <_free_r+0x24>
 800439e:	4613      	mov	r3, r2
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	b10a      	cbz	r2, 80043a8 <_free_r+0x54>
 80043a4:	42a2      	cmp	r2, r4
 80043a6:	d9fa      	bls.n	800439e <_free_r+0x4a>
 80043a8:	6819      	ldr	r1, [r3, #0]
 80043aa:	1858      	adds	r0, r3, r1
 80043ac:	42a0      	cmp	r0, r4
 80043ae:	d10b      	bne.n	80043c8 <_free_r+0x74>
 80043b0:	6820      	ldr	r0, [r4, #0]
 80043b2:	4401      	add	r1, r0
 80043b4:	1858      	adds	r0, r3, r1
 80043b6:	4282      	cmp	r2, r0
 80043b8:	6019      	str	r1, [r3, #0]
 80043ba:	d1dd      	bne.n	8004378 <_free_r+0x24>
 80043bc:	6810      	ldr	r0, [r2, #0]
 80043be:	6852      	ldr	r2, [r2, #4]
 80043c0:	605a      	str	r2, [r3, #4]
 80043c2:	4401      	add	r1, r0
 80043c4:	6019      	str	r1, [r3, #0]
 80043c6:	e7d7      	b.n	8004378 <_free_r+0x24>
 80043c8:	d902      	bls.n	80043d0 <_free_r+0x7c>
 80043ca:	230c      	movs	r3, #12
 80043cc:	602b      	str	r3, [r5, #0]
 80043ce:	e7d3      	b.n	8004378 <_free_r+0x24>
 80043d0:	6820      	ldr	r0, [r4, #0]
 80043d2:	1821      	adds	r1, r4, r0
 80043d4:	428a      	cmp	r2, r1
 80043d6:	bf04      	itt	eq
 80043d8:	6811      	ldreq	r1, [r2, #0]
 80043da:	6852      	ldreq	r2, [r2, #4]
 80043dc:	6062      	str	r2, [r4, #4]
 80043de:	bf04      	itt	eq
 80043e0:	1809      	addeq	r1, r1, r0
 80043e2:	6021      	streq	r1, [r4, #0]
 80043e4:	605c      	str	r4, [r3, #4]
 80043e6:	e7c7      	b.n	8004378 <_free_r+0x24>
 80043e8:	bd38      	pop	{r3, r4, r5, pc}
 80043ea:	bf00      	nop
 80043ec:	200000ac 	.word	0x200000ac

080043f0 <_malloc_r>:
 80043f0:	b570      	push	{r4, r5, r6, lr}
 80043f2:	1ccd      	adds	r5, r1, #3
 80043f4:	f025 0503 	bic.w	r5, r5, #3
 80043f8:	3508      	adds	r5, #8
 80043fa:	2d0c      	cmp	r5, #12
 80043fc:	bf38      	it	cc
 80043fe:	250c      	movcc	r5, #12
 8004400:	2d00      	cmp	r5, #0
 8004402:	4606      	mov	r6, r0
 8004404:	db01      	blt.n	800440a <_malloc_r+0x1a>
 8004406:	42a9      	cmp	r1, r5
 8004408:	d903      	bls.n	8004412 <_malloc_r+0x22>
 800440a:	230c      	movs	r3, #12
 800440c:	6033      	str	r3, [r6, #0]
 800440e:	2000      	movs	r0, #0
 8004410:	bd70      	pop	{r4, r5, r6, pc}
 8004412:	f000 fbcb 	bl	8004bac <__malloc_lock>
 8004416:	4a23      	ldr	r2, [pc, #140]	; (80044a4 <_malloc_r+0xb4>)
 8004418:	6814      	ldr	r4, [r2, #0]
 800441a:	4621      	mov	r1, r4
 800441c:	b991      	cbnz	r1, 8004444 <_malloc_r+0x54>
 800441e:	4c22      	ldr	r4, [pc, #136]	; (80044a8 <_malloc_r+0xb8>)
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	b91b      	cbnz	r3, 800442c <_malloc_r+0x3c>
 8004424:	4630      	mov	r0, r6
 8004426:	f000 fb17 	bl	8004a58 <_sbrk_r>
 800442a:	6020      	str	r0, [r4, #0]
 800442c:	4629      	mov	r1, r5
 800442e:	4630      	mov	r0, r6
 8004430:	f000 fb12 	bl	8004a58 <_sbrk_r>
 8004434:	1c43      	adds	r3, r0, #1
 8004436:	d126      	bne.n	8004486 <_malloc_r+0x96>
 8004438:	230c      	movs	r3, #12
 800443a:	6033      	str	r3, [r6, #0]
 800443c:	4630      	mov	r0, r6
 800443e:	f000 fbb6 	bl	8004bae <__malloc_unlock>
 8004442:	e7e4      	b.n	800440e <_malloc_r+0x1e>
 8004444:	680b      	ldr	r3, [r1, #0]
 8004446:	1b5b      	subs	r3, r3, r5
 8004448:	d41a      	bmi.n	8004480 <_malloc_r+0x90>
 800444a:	2b0b      	cmp	r3, #11
 800444c:	d90f      	bls.n	800446e <_malloc_r+0x7e>
 800444e:	600b      	str	r3, [r1, #0]
 8004450:	50cd      	str	r5, [r1, r3]
 8004452:	18cc      	adds	r4, r1, r3
 8004454:	4630      	mov	r0, r6
 8004456:	f000 fbaa 	bl	8004bae <__malloc_unlock>
 800445a:	f104 000b 	add.w	r0, r4, #11
 800445e:	1d23      	adds	r3, r4, #4
 8004460:	f020 0007 	bic.w	r0, r0, #7
 8004464:	1ac3      	subs	r3, r0, r3
 8004466:	d01b      	beq.n	80044a0 <_malloc_r+0xb0>
 8004468:	425a      	negs	r2, r3
 800446a:	50e2      	str	r2, [r4, r3]
 800446c:	bd70      	pop	{r4, r5, r6, pc}
 800446e:	428c      	cmp	r4, r1
 8004470:	bf0d      	iteet	eq
 8004472:	6863      	ldreq	r3, [r4, #4]
 8004474:	684b      	ldrne	r3, [r1, #4]
 8004476:	6063      	strne	r3, [r4, #4]
 8004478:	6013      	streq	r3, [r2, #0]
 800447a:	bf18      	it	ne
 800447c:	460c      	movne	r4, r1
 800447e:	e7e9      	b.n	8004454 <_malloc_r+0x64>
 8004480:	460c      	mov	r4, r1
 8004482:	6849      	ldr	r1, [r1, #4]
 8004484:	e7ca      	b.n	800441c <_malloc_r+0x2c>
 8004486:	1cc4      	adds	r4, r0, #3
 8004488:	f024 0403 	bic.w	r4, r4, #3
 800448c:	42a0      	cmp	r0, r4
 800448e:	d005      	beq.n	800449c <_malloc_r+0xac>
 8004490:	1a21      	subs	r1, r4, r0
 8004492:	4630      	mov	r0, r6
 8004494:	f000 fae0 	bl	8004a58 <_sbrk_r>
 8004498:	3001      	adds	r0, #1
 800449a:	d0cd      	beq.n	8004438 <_malloc_r+0x48>
 800449c:	6025      	str	r5, [r4, #0]
 800449e:	e7d9      	b.n	8004454 <_malloc_r+0x64>
 80044a0:	bd70      	pop	{r4, r5, r6, pc}
 80044a2:	bf00      	nop
 80044a4:	200000ac 	.word	0x200000ac
 80044a8:	200000b0 	.word	0x200000b0

080044ac <__sfputc_r>:
 80044ac:	6893      	ldr	r3, [r2, #8]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	b410      	push	{r4}
 80044b4:	6093      	str	r3, [r2, #8]
 80044b6:	da09      	bge.n	80044cc <__sfputc_r+0x20>
 80044b8:	6994      	ldr	r4, [r2, #24]
 80044ba:	42a3      	cmp	r3, r4
 80044bc:	db02      	blt.n	80044c4 <__sfputc_r+0x18>
 80044be:	b2cb      	uxtb	r3, r1
 80044c0:	2b0a      	cmp	r3, #10
 80044c2:	d103      	bne.n	80044cc <__sfputc_r+0x20>
 80044c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044c8:	f7ff bca4 	b.w	8003e14 <__swbuf_r>
 80044cc:	6813      	ldr	r3, [r2, #0]
 80044ce:	1c58      	adds	r0, r3, #1
 80044d0:	6010      	str	r0, [r2, #0]
 80044d2:	7019      	strb	r1, [r3, #0]
 80044d4:	b2c8      	uxtb	r0, r1
 80044d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044da:	4770      	bx	lr

080044dc <__sfputs_r>:
 80044dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044de:	4606      	mov	r6, r0
 80044e0:	460f      	mov	r7, r1
 80044e2:	4614      	mov	r4, r2
 80044e4:	18d5      	adds	r5, r2, r3
 80044e6:	42ac      	cmp	r4, r5
 80044e8:	d101      	bne.n	80044ee <__sfputs_r+0x12>
 80044ea:	2000      	movs	r0, #0
 80044ec:	e007      	b.n	80044fe <__sfputs_r+0x22>
 80044ee:	463a      	mov	r2, r7
 80044f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044f4:	4630      	mov	r0, r6
 80044f6:	f7ff ffd9 	bl	80044ac <__sfputc_r>
 80044fa:	1c43      	adds	r3, r0, #1
 80044fc:	d1f3      	bne.n	80044e6 <__sfputs_r+0xa>
 80044fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004500 <_vfiprintf_r>:
 8004500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004504:	b09d      	sub	sp, #116	; 0x74
 8004506:	460c      	mov	r4, r1
 8004508:	4617      	mov	r7, r2
 800450a:	9303      	str	r3, [sp, #12]
 800450c:	4606      	mov	r6, r0
 800450e:	b118      	cbz	r0, 8004518 <_vfiprintf_r+0x18>
 8004510:	6983      	ldr	r3, [r0, #24]
 8004512:	b90b      	cbnz	r3, 8004518 <_vfiprintf_r+0x18>
 8004514:	f7ff fe30 	bl	8004178 <__sinit>
 8004518:	4b7c      	ldr	r3, [pc, #496]	; (800470c <_vfiprintf_r+0x20c>)
 800451a:	429c      	cmp	r4, r3
 800451c:	d157      	bne.n	80045ce <_vfiprintf_r+0xce>
 800451e:	6874      	ldr	r4, [r6, #4]
 8004520:	89a3      	ldrh	r3, [r4, #12]
 8004522:	0718      	lsls	r0, r3, #28
 8004524:	d55d      	bpl.n	80045e2 <_vfiprintf_r+0xe2>
 8004526:	6923      	ldr	r3, [r4, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d05a      	beq.n	80045e2 <_vfiprintf_r+0xe2>
 800452c:	2300      	movs	r3, #0
 800452e:	9309      	str	r3, [sp, #36]	; 0x24
 8004530:	2320      	movs	r3, #32
 8004532:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004536:	2330      	movs	r3, #48	; 0x30
 8004538:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800453c:	f04f 0b01 	mov.w	fp, #1
 8004540:	46b8      	mov	r8, r7
 8004542:	4645      	mov	r5, r8
 8004544:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d155      	bne.n	80045f8 <_vfiprintf_r+0xf8>
 800454c:	ebb8 0a07 	subs.w	sl, r8, r7
 8004550:	d00b      	beq.n	800456a <_vfiprintf_r+0x6a>
 8004552:	4653      	mov	r3, sl
 8004554:	463a      	mov	r2, r7
 8004556:	4621      	mov	r1, r4
 8004558:	4630      	mov	r0, r6
 800455a:	f7ff ffbf 	bl	80044dc <__sfputs_r>
 800455e:	3001      	adds	r0, #1
 8004560:	f000 80c4 	beq.w	80046ec <_vfiprintf_r+0x1ec>
 8004564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004566:	4453      	add	r3, sl
 8004568:	9309      	str	r3, [sp, #36]	; 0x24
 800456a:	f898 3000 	ldrb.w	r3, [r8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 80bc 	beq.w	80046ec <_vfiprintf_r+0x1ec>
 8004574:	2300      	movs	r3, #0
 8004576:	f04f 32ff 	mov.w	r2, #4294967295
 800457a:	9304      	str	r3, [sp, #16]
 800457c:	9307      	str	r3, [sp, #28]
 800457e:	9205      	str	r2, [sp, #20]
 8004580:	9306      	str	r3, [sp, #24]
 8004582:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004586:	931a      	str	r3, [sp, #104]	; 0x68
 8004588:	2205      	movs	r2, #5
 800458a:	7829      	ldrb	r1, [r5, #0]
 800458c:	4860      	ldr	r0, [pc, #384]	; (8004710 <_vfiprintf_r+0x210>)
 800458e:	f7fb fe1f 	bl	80001d0 <memchr>
 8004592:	f105 0801 	add.w	r8, r5, #1
 8004596:	9b04      	ldr	r3, [sp, #16]
 8004598:	2800      	cmp	r0, #0
 800459a:	d131      	bne.n	8004600 <_vfiprintf_r+0x100>
 800459c:	06d9      	lsls	r1, r3, #27
 800459e:	bf44      	itt	mi
 80045a0:	2220      	movmi	r2, #32
 80045a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80045a6:	071a      	lsls	r2, r3, #28
 80045a8:	bf44      	itt	mi
 80045aa:	222b      	movmi	r2, #43	; 0x2b
 80045ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80045b0:	782a      	ldrb	r2, [r5, #0]
 80045b2:	2a2a      	cmp	r2, #42	; 0x2a
 80045b4:	d02c      	beq.n	8004610 <_vfiprintf_r+0x110>
 80045b6:	9a07      	ldr	r2, [sp, #28]
 80045b8:	2100      	movs	r1, #0
 80045ba:	200a      	movs	r0, #10
 80045bc:	46a8      	mov	r8, r5
 80045be:	3501      	adds	r5, #1
 80045c0:	f898 3000 	ldrb.w	r3, [r8]
 80045c4:	3b30      	subs	r3, #48	; 0x30
 80045c6:	2b09      	cmp	r3, #9
 80045c8:	d96d      	bls.n	80046a6 <_vfiprintf_r+0x1a6>
 80045ca:	b371      	cbz	r1, 800462a <_vfiprintf_r+0x12a>
 80045cc:	e026      	b.n	800461c <_vfiprintf_r+0x11c>
 80045ce:	4b51      	ldr	r3, [pc, #324]	; (8004714 <_vfiprintf_r+0x214>)
 80045d0:	429c      	cmp	r4, r3
 80045d2:	d101      	bne.n	80045d8 <_vfiprintf_r+0xd8>
 80045d4:	68b4      	ldr	r4, [r6, #8]
 80045d6:	e7a3      	b.n	8004520 <_vfiprintf_r+0x20>
 80045d8:	4b4f      	ldr	r3, [pc, #316]	; (8004718 <_vfiprintf_r+0x218>)
 80045da:	429c      	cmp	r4, r3
 80045dc:	bf08      	it	eq
 80045de:	68f4      	ldreq	r4, [r6, #12]
 80045e0:	e79e      	b.n	8004520 <_vfiprintf_r+0x20>
 80045e2:	4621      	mov	r1, r4
 80045e4:	4630      	mov	r0, r6
 80045e6:	f7ff fc67 	bl	8003eb8 <__swsetup_r>
 80045ea:	2800      	cmp	r0, #0
 80045ec:	d09e      	beq.n	800452c <_vfiprintf_r+0x2c>
 80045ee:	f04f 30ff 	mov.w	r0, #4294967295
 80045f2:	b01d      	add	sp, #116	; 0x74
 80045f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045f8:	2b25      	cmp	r3, #37	; 0x25
 80045fa:	d0a7      	beq.n	800454c <_vfiprintf_r+0x4c>
 80045fc:	46a8      	mov	r8, r5
 80045fe:	e7a0      	b.n	8004542 <_vfiprintf_r+0x42>
 8004600:	4a43      	ldr	r2, [pc, #268]	; (8004710 <_vfiprintf_r+0x210>)
 8004602:	1a80      	subs	r0, r0, r2
 8004604:	fa0b f000 	lsl.w	r0, fp, r0
 8004608:	4318      	orrs	r0, r3
 800460a:	9004      	str	r0, [sp, #16]
 800460c:	4645      	mov	r5, r8
 800460e:	e7bb      	b.n	8004588 <_vfiprintf_r+0x88>
 8004610:	9a03      	ldr	r2, [sp, #12]
 8004612:	1d11      	adds	r1, r2, #4
 8004614:	6812      	ldr	r2, [r2, #0]
 8004616:	9103      	str	r1, [sp, #12]
 8004618:	2a00      	cmp	r2, #0
 800461a:	db01      	blt.n	8004620 <_vfiprintf_r+0x120>
 800461c:	9207      	str	r2, [sp, #28]
 800461e:	e004      	b.n	800462a <_vfiprintf_r+0x12a>
 8004620:	4252      	negs	r2, r2
 8004622:	f043 0302 	orr.w	r3, r3, #2
 8004626:	9207      	str	r2, [sp, #28]
 8004628:	9304      	str	r3, [sp, #16]
 800462a:	f898 3000 	ldrb.w	r3, [r8]
 800462e:	2b2e      	cmp	r3, #46	; 0x2e
 8004630:	d110      	bne.n	8004654 <_vfiprintf_r+0x154>
 8004632:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004636:	2b2a      	cmp	r3, #42	; 0x2a
 8004638:	f108 0101 	add.w	r1, r8, #1
 800463c:	d137      	bne.n	80046ae <_vfiprintf_r+0x1ae>
 800463e:	9b03      	ldr	r3, [sp, #12]
 8004640:	1d1a      	adds	r2, r3, #4
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	9203      	str	r2, [sp, #12]
 8004646:	2b00      	cmp	r3, #0
 8004648:	bfb8      	it	lt
 800464a:	f04f 33ff 	movlt.w	r3, #4294967295
 800464e:	f108 0802 	add.w	r8, r8, #2
 8004652:	9305      	str	r3, [sp, #20]
 8004654:	4d31      	ldr	r5, [pc, #196]	; (800471c <_vfiprintf_r+0x21c>)
 8004656:	f898 1000 	ldrb.w	r1, [r8]
 800465a:	2203      	movs	r2, #3
 800465c:	4628      	mov	r0, r5
 800465e:	f7fb fdb7 	bl	80001d0 <memchr>
 8004662:	b140      	cbz	r0, 8004676 <_vfiprintf_r+0x176>
 8004664:	2340      	movs	r3, #64	; 0x40
 8004666:	1b40      	subs	r0, r0, r5
 8004668:	fa03 f000 	lsl.w	r0, r3, r0
 800466c:	9b04      	ldr	r3, [sp, #16]
 800466e:	4303      	orrs	r3, r0
 8004670:	9304      	str	r3, [sp, #16]
 8004672:	f108 0801 	add.w	r8, r8, #1
 8004676:	f898 1000 	ldrb.w	r1, [r8]
 800467a:	4829      	ldr	r0, [pc, #164]	; (8004720 <_vfiprintf_r+0x220>)
 800467c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004680:	2206      	movs	r2, #6
 8004682:	f108 0701 	add.w	r7, r8, #1
 8004686:	f7fb fda3 	bl	80001d0 <memchr>
 800468a:	2800      	cmp	r0, #0
 800468c:	d034      	beq.n	80046f8 <_vfiprintf_r+0x1f8>
 800468e:	4b25      	ldr	r3, [pc, #148]	; (8004724 <_vfiprintf_r+0x224>)
 8004690:	bb03      	cbnz	r3, 80046d4 <_vfiprintf_r+0x1d4>
 8004692:	9b03      	ldr	r3, [sp, #12]
 8004694:	3307      	adds	r3, #7
 8004696:	f023 0307 	bic.w	r3, r3, #7
 800469a:	3308      	adds	r3, #8
 800469c:	9303      	str	r3, [sp, #12]
 800469e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046a0:	444b      	add	r3, r9
 80046a2:	9309      	str	r3, [sp, #36]	; 0x24
 80046a4:	e74c      	b.n	8004540 <_vfiprintf_r+0x40>
 80046a6:	fb00 3202 	mla	r2, r0, r2, r3
 80046aa:	2101      	movs	r1, #1
 80046ac:	e786      	b.n	80045bc <_vfiprintf_r+0xbc>
 80046ae:	2300      	movs	r3, #0
 80046b0:	9305      	str	r3, [sp, #20]
 80046b2:	4618      	mov	r0, r3
 80046b4:	250a      	movs	r5, #10
 80046b6:	4688      	mov	r8, r1
 80046b8:	3101      	adds	r1, #1
 80046ba:	f898 2000 	ldrb.w	r2, [r8]
 80046be:	3a30      	subs	r2, #48	; 0x30
 80046c0:	2a09      	cmp	r2, #9
 80046c2:	d903      	bls.n	80046cc <_vfiprintf_r+0x1cc>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0c5      	beq.n	8004654 <_vfiprintf_r+0x154>
 80046c8:	9005      	str	r0, [sp, #20]
 80046ca:	e7c3      	b.n	8004654 <_vfiprintf_r+0x154>
 80046cc:	fb05 2000 	mla	r0, r5, r0, r2
 80046d0:	2301      	movs	r3, #1
 80046d2:	e7f0      	b.n	80046b6 <_vfiprintf_r+0x1b6>
 80046d4:	ab03      	add	r3, sp, #12
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	4622      	mov	r2, r4
 80046da:	4b13      	ldr	r3, [pc, #76]	; (8004728 <_vfiprintf_r+0x228>)
 80046dc:	a904      	add	r1, sp, #16
 80046de:	4630      	mov	r0, r6
 80046e0:	f3af 8000 	nop.w
 80046e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80046e8:	4681      	mov	r9, r0
 80046ea:	d1d8      	bne.n	800469e <_vfiprintf_r+0x19e>
 80046ec:	89a3      	ldrh	r3, [r4, #12]
 80046ee:	065b      	lsls	r3, r3, #25
 80046f0:	f53f af7d 	bmi.w	80045ee <_vfiprintf_r+0xee>
 80046f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046f6:	e77c      	b.n	80045f2 <_vfiprintf_r+0xf2>
 80046f8:	ab03      	add	r3, sp, #12
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	4622      	mov	r2, r4
 80046fe:	4b0a      	ldr	r3, [pc, #40]	; (8004728 <_vfiprintf_r+0x228>)
 8004700:	a904      	add	r1, sp, #16
 8004702:	4630      	mov	r0, r6
 8004704:	f000 f888 	bl	8004818 <_printf_i>
 8004708:	e7ec      	b.n	80046e4 <_vfiprintf_r+0x1e4>
 800470a:	bf00      	nop
 800470c:	08004d28 	.word	0x08004d28
 8004710:	08004d6c 	.word	0x08004d6c
 8004714:	08004d48 	.word	0x08004d48
 8004718:	08004d08 	.word	0x08004d08
 800471c:	08004d72 	.word	0x08004d72
 8004720:	08004d76 	.word	0x08004d76
 8004724:	00000000 	.word	0x00000000
 8004728:	080044dd 	.word	0x080044dd

0800472c <_printf_common>:
 800472c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004730:	4691      	mov	r9, r2
 8004732:	461f      	mov	r7, r3
 8004734:	688a      	ldr	r2, [r1, #8]
 8004736:	690b      	ldr	r3, [r1, #16]
 8004738:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800473c:	4293      	cmp	r3, r2
 800473e:	bfb8      	it	lt
 8004740:	4613      	movlt	r3, r2
 8004742:	f8c9 3000 	str.w	r3, [r9]
 8004746:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800474a:	4606      	mov	r6, r0
 800474c:	460c      	mov	r4, r1
 800474e:	b112      	cbz	r2, 8004756 <_printf_common+0x2a>
 8004750:	3301      	adds	r3, #1
 8004752:	f8c9 3000 	str.w	r3, [r9]
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	0699      	lsls	r1, r3, #26
 800475a:	bf42      	ittt	mi
 800475c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004760:	3302      	addmi	r3, #2
 8004762:	f8c9 3000 	strmi.w	r3, [r9]
 8004766:	6825      	ldr	r5, [r4, #0]
 8004768:	f015 0506 	ands.w	r5, r5, #6
 800476c:	d107      	bne.n	800477e <_printf_common+0x52>
 800476e:	f104 0a19 	add.w	sl, r4, #25
 8004772:	68e3      	ldr	r3, [r4, #12]
 8004774:	f8d9 2000 	ldr.w	r2, [r9]
 8004778:	1a9b      	subs	r3, r3, r2
 800477a:	429d      	cmp	r5, r3
 800477c:	db29      	blt.n	80047d2 <_printf_common+0xa6>
 800477e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004782:	6822      	ldr	r2, [r4, #0]
 8004784:	3300      	adds	r3, #0
 8004786:	bf18      	it	ne
 8004788:	2301      	movne	r3, #1
 800478a:	0692      	lsls	r2, r2, #26
 800478c:	d42e      	bmi.n	80047ec <_printf_common+0xc0>
 800478e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004792:	4639      	mov	r1, r7
 8004794:	4630      	mov	r0, r6
 8004796:	47c0      	blx	r8
 8004798:	3001      	adds	r0, #1
 800479a:	d021      	beq.n	80047e0 <_printf_common+0xb4>
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	68e5      	ldr	r5, [r4, #12]
 80047a0:	f8d9 2000 	ldr.w	r2, [r9]
 80047a4:	f003 0306 	and.w	r3, r3, #6
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	bf08      	it	eq
 80047ac:	1aad      	subeq	r5, r5, r2
 80047ae:	68a3      	ldr	r3, [r4, #8]
 80047b0:	6922      	ldr	r2, [r4, #16]
 80047b2:	bf0c      	ite	eq
 80047b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047b8:	2500      	movne	r5, #0
 80047ba:	4293      	cmp	r3, r2
 80047bc:	bfc4      	itt	gt
 80047be:	1a9b      	subgt	r3, r3, r2
 80047c0:	18ed      	addgt	r5, r5, r3
 80047c2:	f04f 0900 	mov.w	r9, #0
 80047c6:	341a      	adds	r4, #26
 80047c8:	454d      	cmp	r5, r9
 80047ca:	d11b      	bne.n	8004804 <_printf_common+0xd8>
 80047cc:	2000      	movs	r0, #0
 80047ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047d2:	2301      	movs	r3, #1
 80047d4:	4652      	mov	r2, sl
 80047d6:	4639      	mov	r1, r7
 80047d8:	4630      	mov	r0, r6
 80047da:	47c0      	blx	r8
 80047dc:	3001      	adds	r0, #1
 80047de:	d103      	bne.n	80047e8 <_printf_common+0xbc>
 80047e0:	f04f 30ff 	mov.w	r0, #4294967295
 80047e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e8:	3501      	adds	r5, #1
 80047ea:	e7c2      	b.n	8004772 <_printf_common+0x46>
 80047ec:	18e1      	adds	r1, r4, r3
 80047ee:	1c5a      	adds	r2, r3, #1
 80047f0:	2030      	movs	r0, #48	; 0x30
 80047f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047f6:	4422      	add	r2, r4
 80047f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004800:	3302      	adds	r3, #2
 8004802:	e7c4      	b.n	800478e <_printf_common+0x62>
 8004804:	2301      	movs	r3, #1
 8004806:	4622      	mov	r2, r4
 8004808:	4639      	mov	r1, r7
 800480a:	4630      	mov	r0, r6
 800480c:	47c0      	blx	r8
 800480e:	3001      	adds	r0, #1
 8004810:	d0e6      	beq.n	80047e0 <_printf_common+0xb4>
 8004812:	f109 0901 	add.w	r9, r9, #1
 8004816:	e7d7      	b.n	80047c8 <_printf_common+0x9c>

08004818 <_printf_i>:
 8004818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800481c:	4617      	mov	r7, r2
 800481e:	7e0a      	ldrb	r2, [r1, #24]
 8004820:	b085      	sub	sp, #20
 8004822:	2a6e      	cmp	r2, #110	; 0x6e
 8004824:	4698      	mov	r8, r3
 8004826:	4606      	mov	r6, r0
 8004828:	460c      	mov	r4, r1
 800482a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800482c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004830:	f000 80bc 	beq.w	80049ac <_printf_i+0x194>
 8004834:	d81a      	bhi.n	800486c <_printf_i+0x54>
 8004836:	2a63      	cmp	r2, #99	; 0x63
 8004838:	d02e      	beq.n	8004898 <_printf_i+0x80>
 800483a:	d80a      	bhi.n	8004852 <_printf_i+0x3a>
 800483c:	2a00      	cmp	r2, #0
 800483e:	f000 80c8 	beq.w	80049d2 <_printf_i+0x1ba>
 8004842:	2a58      	cmp	r2, #88	; 0x58
 8004844:	f000 808a 	beq.w	800495c <_printf_i+0x144>
 8004848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800484c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004850:	e02a      	b.n	80048a8 <_printf_i+0x90>
 8004852:	2a64      	cmp	r2, #100	; 0x64
 8004854:	d001      	beq.n	800485a <_printf_i+0x42>
 8004856:	2a69      	cmp	r2, #105	; 0x69
 8004858:	d1f6      	bne.n	8004848 <_printf_i+0x30>
 800485a:	6821      	ldr	r1, [r4, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004862:	d023      	beq.n	80048ac <_printf_i+0x94>
 8004864:	1d11      	adds	r1, r2, #4
 8004866:	6019      	str	r1, [r3, #0]
 8004868:	6813      	ldr	r3, [r2, #0]
 800486a:	e027      	b.n	80048bc <_printf_i+0xa4>
 800486c:	2a73      	cmp	r2, #115	; 0x73
 800486e:	f000 80b4 	beq.w	80049da <_printf_i+0x1c2>
 8004872:	d808      	bhi.n	8004886 <_printf_i+0x6e>
 8004874:	2a6f      	cmp	r2, #111	; 0x6f
 8004876:	d02a      	beq.n	80048ce <_printf_i+0xb6>
 8004878:	2a70      	cmp	r2, #112	; 0x70
 800487a:	d1e5      	bne.n	8004848 <_printf_i+0x30>
 800487c:	680a      	ldr	r2, [r1, #0]
 800487e:	f042 0220 	orr.w	r2, r2, #32
 8004882:	600a      	str	r2, [r1, #0]
 8004884:	e003      	b.n	800488e <_printf_i+0x76>
 8004886:	2a75      	cmp	r2, #117	; 0x75
 8004888:	d021      	beq.n	80048ce <_printf_i+0xb6>
 800488a:	2a78      	cmp	r2, #120	; 0x78
 800488c:	d1dc      	bne.n	8004848 <_printf_i+0x30>
 800488e:	2278      	movs	r2, #120	; 0x78
 8004890:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004894:	496e      	ldr	r1, [pc, #440]	; (8004a50 <_printf_i+0x238>)
 8004896:	e064      	b.n	8004962 <_printf_i+0x14a>
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800489e:	1d11      	adds	r1, r2, #4
 80048a0:	6019      	str	r1, [r3, #0]
 80048a2:	6813      	ldr	r3, [r2, #0]
 80048a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0a3      	b.n	80049f4 <_printf_i+0x1dc>
 80048ac:	f011 0f40 	tst.w	r1, #64	; 0x40
 80048b0:	f102 0104 	add.w	r1, r2, #4
 80048b4:	6019      	str	r1, [r3, #0]
 80048b6:	d0d7      	beq.n	8004868 <_printf_i+0x50>
 80048b8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	da03      	bge.n	80048c8 <_printf_i+0xb0>
 80048c0:	222d      	movs	r2, #45	; 0x2d
 80048c2:	425b      	negs	r3, r3
 80048c4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80048c8:	4962      	ldr	r1, [pc, #392]	; (8004a54 <_printf_i+0x23c>)
 80048ca:	220a      	movs	r2, #10
 80048cc:	e017      	b.n	80048fe <_printf_i+0xe6>
 80048ce:	6820      	ldr	r0, [r4, #0]
 80048d0:	6819      	ldr	r1, [r3, #0]
 80048d2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80048d6:	d003      	beq.n	80048e0 <_printf_i+0xc8>
 80048d8:	1d08      	adds	r0, r1, #4
 80048da:	6018      	str	r0, [r3, #0]
 80048dc:	680b      	ldr	r3, [r1, #0]
 80048de:	e006      	b.n	80048ee <_printf_i+0xd6>
 80048e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048e4:	f101 0004 	add.w	r0, r1, #4
 80048e8:	6018      	str	r0, [r3, #0]
 80048ea:	d0f7      	beq.n	80048dc <_printf_i+0xc4>
 80048ec:	880b      	ldrh	r3, [r1, #0]
 80048ee:	4959      	ldr	r1, [pc, #356]	; (8004a54 <_printf_i+0x23c>)
 80048f0:	2a6f      	cmp	r2, #111	; 0x6f
 80048f2:	bf14      	ite	ne
 80048f4:	220a      	movne	r2, #10
 80048f6:	2208      	moveq	r2, #8
 80048f8:	2000      	movs	r0, #0
 80048fa:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80048fe:	6865      	ldr	r5, [r4, #4]
 8004900:	60a5      	str	r5, [r4, #8]
 8004902:	2d00      	cmp	r5, #0
 8004904:	f2c0 809c 	blt.w	8004a40 <_printf_i+0x228>
 8004908:	6820      	ldr	r0, [r4, #0]
 800490a:	f020 0004 	bic.w	r0, r0, #4
 800490e:	6020      	str	r0, [r4, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d13f      	bne.n	8004994 <_printf_i+0x17c>
 8004914:	2d00      	cmp	r5, #0
 8004916:	f040 8095 	bne.w	8004a44 <_printf_i+0x22c>
 800491a:	4675      	mov	r5, lr
 800491c:	2a08      	cmp	r2, #8
 800491e:	d10b      	bne.n	8004938 <_printf_i+0x120>
 8004920:	6823      	ldr	r3, [r4, #0]
 8004922:	07da      	lsls	r2, r3, #31
 8004924:	d508      	bpl.n	8004938 <_printf_i+0x120>
 8004926:	6923      	ldr	r3, [r4, #16]
 8004928:	6862      	ldr	r2, [r4, #4]
 800492a:	429a      	cmp	r2, r3
 800492c:	bfde      	ittt	le
 800492e:	2330      	movle	r3, #48	; 0x30
 8004930:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004934:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004938:	ebae 0305 	sub.w	r3, lr, r5
 800493c:	6123      	str	r3, [r4, #16]
 800493e:	f8cd 8000 	str.w	r8, [sp]
 8004942:	463b      	mov	r3, r7
 8004944:	aa03      	add	r2, sp, #12
 8004946:	4621      	mov	r1, r4
 8004948:	4630      	mov	r0, r6
 800494a:	f7ff feef 	bl	800472c <_printf_common>
 800494e:	3001      	adds	r0, #1
 8004950:	d155      	bne.n	80049fe <_printf_i+0x1e6>
 8004952:	f04f 30ff 	mov.w	r0, #4294967295
 8004956:	b005      	add	sp, #20
 8004958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800495c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004960:	493c      	ldr	r1, [pc, #240]	; (8004a54 <_printf_i+0x23c>)
 8004962:	6822      	ldr	r2, [r4, #0]
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	f012 0f80 	tst.w	r2, #128	; 0x80
 800496a:	f100 0504 	add.w	r5, r0, #4
 800496e:	601d      	str	r5, [r3, #0]
 8004970:	d001      	beq.n	8004976 <_printf_i+0x15e>
 8004972:	6803      	ldr	r3, [r0, #0]
 8004974:	e002      	b.n	800497c <_printf_i+0x164>
 8004976:	0655      	lsls	r5, r2, #25
 8004978:	d5fb      	bpl.n	8004972 <_printf_i+0x15a>
 800497a:	8803      	ldrh	r3, [r0, #0]
 800497c:	07d0      	lsls	r0, r2, #31
 800497e:	bf44      	itt	mi
 8004980:	f042 0220 	orrmi.w	r2, r2, #32
 8004984:	6022      	strmi	r2, [r4, #0]
 8004986:	b91b      	cbnz	r3, 8004990 <_printf_i+0x178>
 8004988:	6822      	ldr	r2, [r4, #0]
 800498a:	f022 0220 	bic.w	r2, r2, #32
 800498e:	6022      	str	r2, [r4, #0]
 8004990:	2210      	movs	r2, #16
 8004992:	e7b1      	b.n	80048f8 <_printf_i+0xe0>
 8004994:	4675      	mov	r5, lr
 8004996:	fbb3 f0f2 	udiv	r0, r3, r2
 800499a:	fb02 3310 	mls	r3, r2, r0, r3
 800499e:	5ccb      	ldrb	r3, [r1, r3]
 80049a0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80049a4:	4603      	mov	r3, r0
 80049a6:	2800      	cmp	r0, #0
 80049a8:	d1f5      	bne.n	8004996 <_printf_i+0x17e>
 80049aa:	e7b7      	b.n	800491c <_printf_i+0x104>
 80049ac:	6808      	ldr	r0, [r1, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	6949      	ldr	r1, [r1, #20]
 80049b2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80049b6:	d004      	beq.n	80049c2 <_printf_i+0x1aa>
 80049b8:	1d10      	adds	r0, r2, #4
 80049ba:	6018      	str	r0, [r3, #0]
 80049bc:	6813      	ldr	r3, [r2, #0]
 80049be:	6019      	str	r1, [r3, #0]
 80049c0:	e007      	b.n	80049d2 <_printf_i+0x1ba>
 80049c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049c6:	f102 0004 	add.w	r0, r2, #4
 80049ca:	6018      	str	r0, [r3, #0]
 80049cc:	6813      	ldr	r3, [r2, #0]
 80049ce:	d0f6      	beq.n	80049be <_printf_i+0x1a6>
 80049d0:	8019      	strh	r1, [r3, #0]
 80049d2:	2300      	movs	r3, #0
 80049d4:	6123      	str	r3, [r4, #16]
 80049d6:	4675      	mov	r5, lr
 80049d8:	e7b1      	b.n	800493e <_printf_i+0x126>
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	1d11      	adds	r1, r2, #4
 80049de:	6019      	str	r1, [r3, #0]
 80049e0:	6815      	ldr	r5, [r2, #0]
 80049e2:	6862      	ldr	r2, [r4, #4]
 80049e4:	2100      	movs	r1, #0
 80049e6:	4628      	mov	r0, r5
 80049e8:	f7fb fbf2 	bl	80001d0 <memchr>
 80049ec:	b108      	cbz	r0, 80049f2 <_printf_i+0x1da>
 80049ee:	1b40      	subs	r0, r0, r5
 80049f0:	6060      	str	r0, [r4, #4]
 80049f2:	6863      	ldr	r3, [r4, #4]
 80049f4:	6123      	str	r3, [r4, #16]
 80049f6:	2300      	movs	r3, #0
 80049f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049fc:	e79f      	b.n	800493e <_printf_i+0x126>
 80049fe:	6923      	ldr	r3, [r4, #16]
 8004a00:	462a      	mov	r2, r5
 8004a02:	4639      	mov	r1, r7
 8004a04:	4630      	mov	r0, r6
 8004a06:	47c0      	blx	r8
 8004a08:	3001      	adds	r0, #1
 8004a0a:	d0a2      	beq.n	8004952 <_printf_i+0x13a>
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	079b      	lsls	r3, r3, #30
 8004a10:	d507      	bpl.n	8004a22 <_printf_i+0x20a>
 8004a12:	2500      	movs	r5, #0
 8004a14:	f104 0919 	add.w	r9, r4, #25
 8004a18:	68e3      	ldr	r3, [r4, #12]
 8004a1a:	9a03      	ldr	r2, [sp, #12]
 8004a1c:	1a9b      	subs	r3, r3, r2
 8004a1e:	429d      	cmp	r5, r3
 8004a20:	db05      	blt.n	8004a2e <_printf_i+0x216>
 8004a22:	68e0      	ldr	r0, [r4, #12]
 8004a24:	9b03      	ldr	r3, [sp, #12]
 8004a26:	4298      	cmp	r0, r3
 8004a28:	bfb8      	it	lt
 8004a2a:	4618      	movlt	r0, r3
 8004a2c:	e793      	b.n	8004956 <_printf_i+0x13e>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	464a      	mov	r2, r9
 8004a32:	4639      	mov	r1, r7
 8004a34:	4630      	mov	r0, r6
 8004a36:	47c0      	blx	r8
 8004a38:	3001      	adds	r0, #1
 8004a3a:	d08a      	beq.n	8004952 <_printf_i+0x13a>
 8004a3c:	3501      	adds	r5, #1
 8004a3e:	e7eb      	b.n	8004a18 <_printf_i+0x200>
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1a7      	bne.n	8004994 <_printf_i+0x17c>
 8004a44:	780b      	ldrb	r3, [r1, #0]
 8004a46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a4e:	e765      	b.n	800491c <_printf_i+0x104>
 8004a50:	08004d8e 	.word	0x08004d8e
 8004a54:	08004d7d 	.word	0x08004d7d

08004a58 <_sbrk_r>:
 8004a58:	b538      	push	{r3, r4, r5, lr}
 8004a5a:	4c06      	ldr	r4, [pc, #24]	; (8004a74 <_sbrk_r+0x1c>)
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	4605      	mov	r5, r0
 8004a60:	4608      	mov	r0, r1
 8004a62:	6023      	str	r3, [r4, #0]
 8004a64:	f000 f8de 	bl	8004c24 <_sbrk>
 8004a68:	1c43      	adds	r3, r0, #1
 8004a6a:	d102      	bne.n	8004a72 <_sbrk_r+0x1a>
 8004a6c:	6823      	ldr	r3, [r4, #0]
 8004a6e:	b103      	cbz	r3, 8004a72 <_sbrk_r+0x1a>
 8004a70:	602b      	str	r3, [r5, #0]
 8004a72:	bd38      	pop	{r3, r4, r5, pc}
 8004a74:	20000274 	.word	0x20000274

08004a78 <__sread>:
 8004a78:	b510      	push	{r4, lr}
 8004a7a:	460c      	mov	r4, r1
 8004a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a80:	f000 f896 	bl	8004bb0 <_read_r>
 8004a84:	2800      	cmp	r0, #0
 8004a86:	bfab      	itete	ge
 8004a88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a8a:	89a3      	ldrhlt	r3, [r4, #12]
 8004a8c:	181b      	addge	r3, r3, r0
 8004a8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a92:	bfac      	ite	ge
 8004a94:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a96:	81a3      	strhlt	r3, [r4, #12]
 8004a98:	bd10      	pop	{r4, pc}

08004a9a <__swrite>:
 8004a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a9e:	461f      	mov	r7, r3
 8004aa0:	898b      	ldrh	r3, [r1, #12]
 8004aa2:	05db      	lsls	r3, r3, #23
 8004aa4:	4605      	mov	r5, r0
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	4616      	mov	r6, r2
 8004aaa:	d505      	bpl.n	8004ab8 <__swrite+0x1e>
 8004aac:	2302      	movs	r3, #2
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ab4:	f000 f868 	bl	8004b88 <_lseek_r>
 8004ab8:	89a3      	ldrh	r3, [r4, #12]
 8004aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004abe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ac2:	81a3      	strh	r3, [r4, #12]
 8004ac4:	4632      	mov	r2, r6
 8004ac6:	463b      	mov	r3, r7
 8004ac8:	4628      	mov	r0, r5
 8004aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ace:	f000 b817 	b.w	8004b00 <_write_r>

08004ad2 <__sseek>:
 8004ad2:	b510      	push	{r4, lr}
 8004ad4:	460c      	mov	r4, r1
 8004ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ada:	f000 f855 	bl	8004b88 <_lseek_r>
 8004ade:	1c43      	adds	r3, r0, #1
 8004ae0:	89a3      	ldrh	r3, [r4, #12]
 8004ae2:	bf15      	itete	ne
 8004ae4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ae6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004aea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004aee:	81a3      	strheq	r3, [r4, #12]
 8004af0:	bf18      	it	ne
 8004af2:	81a3      	strhne	r3, [r4, #12]
 8004af4:	bd10      	pop	{r4, pc}

08004af6 <__sclose>:
 8004af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004afa:	f000 b813 	b.w	8004b24 <_close_r>
	...

08004b00 <_write_r>:
 8004b00:	b538      	push	{r3, r4, r5, lr}
 8004b02:	4c07      	ldr	r4, [pc, #28]	; (8004b20 <_write_r+0x20>)
 8004b04:	4605      	mov	r5, r0
 8004b06:	4608      	mov	r0, r1
 8004b08:	4611      	mov	r1, r2
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	6022      	str	r2, [r4, #0]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	f7fe fb64 	bl	80031dc <_write>
 8004b14:	1c43      	adds	r3, r0, #1
 8004b16:	d102      	bne.n	8004b1e <_write_r+0x1e>
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	b103      	cbz	r3, 8004b1e <_write_r+0x1e>
 8004b1c:	602b      	str	r3, [r5, #0]
 8004b1e:	bd38      	pop	{r3, r4, r5, pc}
 8004b20:	20000274 	.word	0x20000274

08004b24 <_close_r>:
 8004b24:	b538      	push	{r3, r4, r5, lr}
 8004b26:	4c06      	ldr	r4, [pc, #24]	; (8004b40 <_close_r+0x1c>)
 8004b28:	2300      	movs	r3, #0
 8004b2a:	4605      	mov	r5, r0
 8004b2c:	4608      	mov	r0, r1
 8004b2e:	6023      	str	r3, [r4, #0]
 8004b30:	f000 f850 	bl	8004bd4 <_close>
 8004b34:	1c43      	adds	r3, r0, #1
 8004b36:	d102      	bne.n	8004b3e <_close_r+0x1a>
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	b103      	cbz	r3, 8004b3e <_close_r+0x1a>
 8004b3c:	602b      	str	r3, [r5, #0]
 8004b3e:	bd38      	pop	{r3, r4, r5, pc}
 8004b40:	20000274 	.word	0x20000274

08004b44 <_fstat_r>:
 8004b44:	b538      	push	{r3, r4, r5, lr}
 8004b46:	4c07      	ldr	r4, [pc, #28]	; (8004b64 <_fstat_r+0x20>)
 8004b48:	2300      	movs	r3, #0
 8004b4a:	4605      	mov	r5, r0
 8004b4c:	4608      	mov	r0, r1
 8004b4e:	4611      	mov	r1, r2
 8004b50:	6023      	str	r3, [r4, #0]
 8004b52:	f000 f847 	bl	8004be4 <_fstat>
 8004b56:	1c43      	adds	r3, r0, #1
 8004b58:	d102      	bne.n	8004b60 <_fstat_r+0x1c>
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	b103      	cbz	r3, 8004b60 <_fstat_r+0x1c>
 8004b5e:	602b      	str	r3, [r5, #0]
 8004b60:	bd38      	pop	{r3, r4, r5, pc}
 8004b62:	bf00      	nop
 8004b64:	20000274 	.word	0x20000274

08004b68 <_isatty_r>:
 8004b68:	b538      	push	{r3, r4, r5, lr}
 8004b6a:	4c06      	ldr	r4, [pc, #24]	; (8004b84 <_isatty_r+0x1c>)
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	4605      	mov	r5, r0
 8004b70:	4608      	mov	r0, r1
 8004b72:	6023      	str	r3, [r4, #0]
 8004b74:	f000 f83e 	bl	8004bf4 <_isatty>
 8004b78:	1c43      	adds	r3, r0, #1
 8004b7a:	d102      	bne.n	8004b82 <_isatty_r+0x1a>
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	b103      	cbz	r3, 8004b82 <_isatty_r+0x1a>
 8004b80:	602b      	str	r3, [r5, #0]
 8004b82:	bd38      	pop	{r3, r4, r5, pc}
 8004b84:	20000274 	.word	0x20000274

08004b88 <_lseek_r>:
 8004b88:	b538      	push	{r3, r4, r5, lr}
 8004b8a:	4c07      	ldr	r4, [pc, #28]	; (8004ba8 <_lseek_r+0x20>)
 8004b8c:	4605      	mov	r5, r0
 8004b8e:	4608      	mov	r0, r1
 8004b90:	4611      	mov	r1, r2
 8004b92:	2200      	movs	r2, #0
 8004b94:	6022      	str	r2, [r4, #0]
 8004b96:	461a      	mov	r2, r3
 8004b98:	f000 f834 	bl	8004c04 <_lseek>
 8004b9c:	1c43      	adds	r3, r0, #1
 8004b9e:	d102      	bne.n	8004ba6 <_lseek_r+0x1e>
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	b103      	cbz	r3, 8004ba6 <_lseek_r+0x1e>
 8004ba4:	602b      	str	r3, [r5, #0]
 8004ba6:	bd38      	pop	{r3, r4, r5, pc}
 8004ba8:	20000274 	.word	0x20000274

08004bac <__malloc_lock>:
 8004bac:	4770      	bx	lr

08004bae <__malloc_unlock>:
 8004bae:	4770      	bx	lr

08004bb0 <_read_r>:
 8004bb0:	b538      	push	{r3, r4, r5, lr}
 8004bb2:	4c07      	ldr	r4, [pc, #28]	; (8004bd0 <_read_r+0x20>)
 8004bb4:	4605      	mov	r5, r0
 8004bb6:	4608      	mov	r0, r1
 8004bb8:	4611      	mov	r1, r2
 8004bba:	2200      	movs	r2, #0
 8004bbc:	6022      	str	r2, [r4, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	f000 f828 	bl	8004c14 <_read>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	d102      	bne.n	8004bce <_read_r+0x1e>
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	b103      	cbz	r3, 8004bce <_read_r+0x1e>
 8004bcc:	602b      	str	r3, [r5, #0]
 8004bce:	bd38      	pop	{r3, r4, r5, pc}
 8004bd0:	20000274 	.word	0x20000274

08004bd4 <_close>:
 8004bd4:	4b02      	ldr	r3, [pc, #8]	; (8004be0 <_close+0xc>)
 8004bd6:	2258      	movs	r2, #88	; 0x58
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	f04f 30ff 	mov.w	r0, #4294967295
 8004bde:	4770      	bx	lr
 8004be0:	20000274 	.word	0x20000274

08004be4 <_fstat>:
 8004be4:	4b02      	ldr	r3, [pc, #8]	; (8004bf0 <_fstat+0xc>)
 8004be6:	2258      	movs	r2, #88	; 0x58
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	f04f 30ff 	mov.w	r0, #4294967295
 8004bee:	4770      	bx	lr
 8004bf0:	20000274 	.word	0x20000274

08004bf4 <_isatty>:
 8004bf4:	4b02      	ldr	r3, [pc, #8]	; (8004c00 <_isatty+0xc>)
 8004bf6:	2258      	movs	r2, #88	; 0x58
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	20000274 	.word	0x20000274

08004c04 <_lseek>:
 8004c04:	4b02      	ldr	r3, [pc, #8]	; (8004c10 <_lseek+0xc>)
 8004c06:	2258      	movs	r2, #88	; 0x58
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c0e:	4770      	bx	lr
 8004c10:	20000274 	.word	0x20000274

08004c14 <_read>:
 8004c14:	4b02      	ldr	r3, [pc, #8]	; (8004c20 <_read+0xc>)
 8004c16:	2258      	movs	r2, #88	; 0x58
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1e:	4770      	bx	lr
 8004c20:	20000274 	.word	0x20000274

08004c24 <_sbrk>:
 8004c24:	4b04      	ldr	r3, [pc, #16]	; (8004c38 <_sbrk+0x14>)
 8004c26:	6819      	ldr	r1, [r3, #0]
 8004c28:	4602      	mov	r2, r0
 8004c2a:	b909      	cbnz	r1, 8004c30 <_sbrk+0xc>
 8004c2c:	4903      	ldr	r1, [pc, #12]	; (8004c3c <_sbrk+0x18>)
 8004c2e:	6019      	str	r1, [r3, #0]
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	4402      	add	r2, r0
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	4770      	bx	lr
 8004c38:	200000b4 	.word	0x200000b4
 8004c3c:	20000278 	.word	0x20000278

08004c40 <_init>:
 8004c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c42:	bf00      	nop
 8004c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c46:	bc08      	pop	{r3}
 8004c48:	469e      	mov	lr, r3
 8004c4a:	4770      	bx	lr

08004c4c <_fini>:
 8004c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4e:	bf00      	nop
 8004c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c52:	bc08      	pop	{r3}
 8004c54:	469e      	mov	lr, r3
 8004c56:	4770      	bx	lr
